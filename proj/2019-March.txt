From kreve at sdfe.dk  Fri Mar  1 08:50:45 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Fri, 1 Mar 2019 16:50:45 +0000
Subject: [PROJ] Promotion of PROJ 6.0.0RC4 to final release
In-Reply-To: <CAH0YoEO9gWnrDCGzYkR902nY9RUVffjg2W1nsjmQsxG+oEBMpw@mail.gmail.com>
References: <2E885BB293AF0448A0181138489E9A0EAF093321@S000014.PROD.SITAD.DK>
 <CAH0YoEO9gWnrDCGzYkR902nY9RUVffjg2W1nsjmQsxG+oEBMpw@mail.gmail.com>
Message-ID: <A84DB870-C1AE-4521-A540-CB22B52C2A94@sdfe.dk>

With +1’s from myself, Even, Howard, Charles and Thomas I declare the motion passed.

I will announce the final release shortly.

/Kristian

On 28 Feb 2019, at 08:29, Thomas Knudsen <knudsen.thomas at gmail.com<mailto:knudsen.thomas at gmail.com>> wrote:

+1 Thomas

Den ons. 27. feb. 2019 kl. 17.14 skrev Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>>:
PSC members,

Since only minor issues were found in PROJ 6.0.0RC4 I hereby
call a vote for promotion of the release candidate to the final
release. As per the PSC guidelines voting will be open for the
next 48 hours, so please cast your votes within that timeframe.
If the vote passes I will upload the final release on Friday the 1st
of March.

I will start with my +1.

The minor issues reported for RC4 will be dealt with in an upcoming bug fix release.

/Kristian
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190301/efba9e31/attachment.html>

From schwehr at gmail.com  Fri Mar  1 10:07:01 2019
From: schwehr at gmail.com (Kurt Schwehr)
Date: Fri, 1 Mar 2019 10:07:01 -0800
Subject: [PROJ] Promotion of PROJ 6.0.0RC4 to final release
In-Reply-To: <A84DB870-C1AE-4521-A540-CB22B52C2A94@sdfe.dk>
References: <2E885BB293AF0448A0181138489E9A0EAF093321@S000014.PROD.SITAD.DK>
 <CAH0YoEO9gWnrDCGzYkR902nY9RUVffjg2W1nsjmQsxG+oEBMpw@mail.gmail.com>
 <A84DB870-C1AE-4521-A540-CB22B52C2A94@sdfe.dk>
Message-ID: <CACmBxyuAJOwU5nXeKQmNcfMWZQhQG_Ta=m0pULqYxrqx8b+7ug@mail.gmail.com>

+0 I'm on leave for a couple months, but I have to throw in a "wahoo!"
Super exciting to see so much progress

On Fri, Mar 1, 2019 at 8:50 AM Kristian Evers <kreve at sdfe.dk> wrote:

> With +1’s from myself, Even, Howard, Charles and Thomas I declare the
> motion passed.
>
> I will announce the final release shortly.
>
> /Kristian
>
> On 28 Feb 2019, at 08:29, Thomas Knudsen <knudsen.thomas at gmail.com> wrote:
>
> +1 Thomas
>
> Den ons. 27. feb. 2019 kl. 17.14 skrev Kristian Evers <kreve at sdfe.dk>:
>
>> PSC members,
>>
>>
>>
>> Since only minor issues were found in PROJ 6.0.0RC4 I hereby
>>
>> call a vote for promotion of the release candidate to the final
>>
>> release. As per the PSC guidelines voting will be open for the
>>
>> next 48 hours, so please cast your votes within that timeframe.
>>
>> If the vote passes I will upload the final release on Friday the 1st
>>
>> of March.
>>
>>
>>
>> I will start with my +1.
>>
>>
>>
>> The minor issues reported for RC4 will be dealt with in an upcoming bug
>> fix release.
>>
>>
>>
>> /Kristian
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
>>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>


-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190301/212e1401/attachment.html>

From kreve at sdfe.dk  Fri Mar  1 10:19:46 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Fri, 1 Mar 2019 18:19:46 +0000
Subject: [PROJ] Announcing PROJ 6.0.0
Message-ID: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk>

PROJ 6 has undergone extensive changes to increase its functional scope from a
cartographic projection engine with so-called "early-binding" geodetic datum
transformation capabilities to a more complete library supporting coordinate
transformations and coordinate reference systems.

As a foundation for other enhancements, PROJ now includes a C++ implementation
of the modelisation propopsed by the ISO-19111:2019 standard / OGC Abstract
Specification Topic 2: "Referencing By Coordinates", for geodetic reference
frames (datums), coordinate reference systems and coordinate operations.
Construction and query of those geodetic objects is available through a new C++
API, and also accessible for the most part from bindings in the C API.

Those geodetic objects can be imported and exported from and into the OGC
Well-Known Text format (WKT) in its different variants: ESRI WKT, GDAL WKT 1,
WKT2:2015 (ISO 19162:2015) and WKT2:2018 (ISO 19162:2018). Import and export of
CRS objects from and into PROJ strings is also supported. This functionality
was previously available in the GDAL software library (except WKT2 support
which is a new feature), and is now an integral part of PROJ.

A unified database of geodetic objects, coordinate reference systems and their
metadata, and coordinate operations between those CRS is now available in a
SQLite3 database file, proj.db. This includes definitions imported from the
IOGP EPSG dataset (v9.6.0 release), the IGNF (French national mapping agency)
geodetic registry and the ESRI projection engine database. PROJ is now the
reference software in the "OSGeo C stack" for this CRS and coordinate operation
database, whereas previously this functionality was spread over PROJ, GDAL and
libgeotiff, and used CSV or other adhoc text-based formats.

Late-binding coordinate operation capabilities, that takes  metadata such as
area of use and accuracy into account, has been added. This can avoid in a
number of situations the past requirement of using WGS84 as a pivot system,
which could cause unneeded accuracy loss, or was not doable at all sometimes
when transformation to WGS84 was not available. Those late-binding capabilities
are now used by the proj_create_crs_to_crs() function and the cs2cs utility.

A new command line utility, projinfo, has been added to query information about
a geodetic object of the database, import and export geodetic objects from/into
WKT and PROJ strings, and display coordinate operations available between two
CRSs.

Download the source distribution here:

  https://download.osgeo.org/proj/proj-6.0.0.tar.gz
  https://download.osgeo.org/proj/proj-6.0.0.zip


In addition to the new version of PROJ we are also releasing new datum grid
packages:

proj-datumgrid-europe 1.2:

  https://download.osgeo.org/proj/proj-datumgrid-europe-1.2.tar.gz
  https://download.osgeo.org/proj/proj-datumgrid-europe-1.2.zip

  Changes include: Grids covering the UK, France and Sweden.

proj-datumgrid-north-america 1.2:

  https://download.osgeo.org/proj/proj-datumgrid-north-america-1.2.tar.gz
  https://download.osgeo.org/proj/proj-datumgrid-north-america-1.2.zip

  Changes include: NAD83 -> NAD83(HPGN) grids, GEOIDB12 grids and the
  Canadian ntv2_0.gsb grid

proj-datumgrid-world 1.0

  https://download.osgeo.org/proj/proj-datumgrid-world-1.0.tar.gz
  https://download.osgeo.org/proj/proj-datumgrid-world-1.0.zip

  This is the first version of the world wide package. Currently it only holds
  the EGM2008 geoid grid.




From kreve at sdfe.dk  Sun Mar  3 03:32:28 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Sun, 3 Mar 2019 11:32:28 +0000
Subject: [PROJ] [Non-DoD Source] Re: Incubate PROJ as an OSGeo Project?
In-Reply-To: <DF6D8A4B-0E47-469E-AA96-BAD513FFF23D@sdfe.dk>
References: <FCF71272-4553-428B-A8AC-74BB7DA60399@hobu.co>
 <415a8a2d-7f63-a494-b7bf-99dd4a91ad74@xs4all.nl>
 <4E20D13C-3633-4768-8871-A3E810046923@gmail.com>
 <DF6D8A4B-0E47-469E-AA96-BAD513FFF23D@sdfe.dk>
Message-ID: <4C66D80A-C535-4AFA-85B2-36A2B1DC39D8@sdfe.dk>

Just for fun I did a Twitter poll on the subject of PROJ going through
OSGeo incubation. I think the results are quite conclusive:

Yes:             84%
No:                3%
Don’t care:  13%

There were 58 respondents.

As there have been no negative feedback on the mailing list either, I
think that we should just get the process started.

Mike, how should be proceed from here?

/Kristian

> On 27 Feb 2019, at 22:15, Kristian Evers <kreve at sdfe.dk> wrote:
> 
> It was indeed my intention to get the incubation process started
> last year but I never really found the time to do so. It was my
> intention to pick it up after the 6.0 release, so I am glad that
> Mike and Howard has taken this up again. I am of course in
> favour of PROJ becoming a proper OSGeo project.
> 
> /Kristian
> 
>> On 27 Feb 2019, at 20:36, Michael Smith <michael.smith.erdc at gmail.com> wrote:
>> 
>> That was the stated intention, I was just working to move the process along.
>> 
>> Mike
>> 
>> 
>> --
>> Michael Smith
>> OSGeo Foundation Treasurer
>> treasurer at osgeo.org
>> 
>> 
>> 
>> ﻿-----Original Message-----
>> From: PROJ <proj-bounces at lists.osgeo.org> on behalf of Sebastiaan Couwenberg <sebastic at xs4all.nl>
>> Date: Wednesday, February 27, 2019 at  2:32 PM
>> To: "proj at lists.osgeo.org" <proj at lists.osgeo.org>
>> Subject: [Non-DoD Source] Re: [PROJ] Incubate PROJ as an OSGeo Project?
>> Resent-From: Michael Smith <michael.smith at usace.army.mil>
>> Resent-Date: Wednesday, February 27, 2019 at  2:31 PM
>> 
>>   On 2/27/19 5:37 PM, Howard Butler wrote:
>>> At this point, I think incubation into OSGeo is a fairly innocuous and reasonable thing for the PROJ project to undertake, but I would like to gauge the community's enthusiasm for such a thing.
>> 
>>   Wasn't that already the plan, as mentioned by Kristian back in August:
>> 
>>    BlockedBlockedhttps://lists.osgeo.org/pipermail/metacrs/2018-August/000989.htmlBlocked
>> 
>>   Kind Regards,
>> 
>>   Bas
>> 
>>   -- 
>>    GPG Key ID: 4096R/6750F10AE88D4AF1
>>   Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
>>   _______________________________________________
>>   PROJ mailing list
>>   PROJ at lists.osgeo.org
>>   BlockedBlockedhttps://lists.osgeo.org/mailman/listinfo/projBlocked
>> 
>> 
>> 
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From michael.smith.erdc at gmail.com  Sun Mar  3 04:24:55 2019
From: michael.smith.erdc at gmail.com (michael.smith.erdc at gmail.com)
Date: Sun, 3 Mar 2019 07:24:55 -0500
Subject: [PROJ] [Non-DoD Source] Re: Incubate PROJ as an OSGeo Project?
In-Reply-To: <4C66D80A-C535-4AFA-85B2-36A2B1DC39D8@sdfe.dk>
References: <FCF71272-4553-428B-A8AC-74BB7DA60399@hobu.co>
 <415a8a2d-7f63-a494-b7bf-99dd4a91ad74@xs4all.nl>
 <4E20D13C-3633-4768-8871-A3E810046923@gmail.com>
 <DF6D8A4B-0E47-469E-AA96-BAD513FFF23D@sdfe.dk>
 <4C66D80A-C535-4AFA-85B2-36A2B1DC39D8@sdfe.dk>
Message-ID: <22B706FF-C09B-46D5-AAD4-332F59B3B21E@gmail.com>

Kristian,

I think the next step is that I make a formal request to the incubation committee and we start on a wiki page that documents how PROJ meets the project guidelines (https://www.osgeo.org/wp-content/uploads/graduation_checklist.pdf). Most of these will go quite fast, I suspect, as most, if not all of this is already done for PROJ. 
The only thing I see that could take some time is the provenance check and making sure all files files have the copyright notices and contribution agreements on all the contributions.

Mike



> On Mar 3, 2019, at 6:32 AM, Kristian Evers <kreve at sdfe.dk> wrote:
> 
> Just for fun I did a Twitter poll on the subject of PROJ going through
> OSGeo incubation. I think the results are quite conclusive:
> 
> Yes:             84%
> No:                3%
> Don’t care:  13%
> 
> There were 58 respondents.
> 
> As there have been no negative feedback on the mailing list either, I
> think that we should just get the process started.
> 
> Mike, how should be proceed from here?
> 
> /Kristian
> 
>> On 27 Feb 2019, at 22:15, Kristian Evers <kreve at sdfe.dk> wrote:
>> 
>> It was indeed my intention to get the incubation process started
>> last year but I never really found the time to do so. It was my
>> intention to pick it up after the 6.0 release, so I am glad that
>> Mike and Howard has taken this up again. I am of course in
>> favour of PROJ becoming a proper OSGeo project.
>> 
>> /Kristian
>> 
>>> On 27 Feb 2019, at 20:36, Michael Smith <michael.smith.erdc at gmail.com> wrote:
>>> 
>>> That was the stated intention, I was just working to move the process along.
>>> 
>>> Mike
>>> 
>>> 
>>> --
>>> Michael Smith
>>> OSGeo Foundation Treasurer
>>> treasurer at osgeo.org
>>> 
>>> 
>>> 
>>> ﻿-----Original Message-----
>>> From: PROJ <proj-bounces at lists.osgeo.org> on behalf of Sebastiaan Couwenberg <sebastic at xs4all.nl>
>>> Date: Wednesday, February 27, 2019 at  2:32 PM
>>> To: "proj at lists.osgeo.org" <proj at lists.osgeo.org>
>>> Subject: [Non-DoD Source] Re: [PROJ] Incubate PROJ as an OSGeo Project?
>>> Resent-From: Michael Smith <michael.smith at usace.army.mil>
>>> Resent-Date: Wednesday, February 27, 2019 at  2:31 PM
>>> 
>>>>  On 2/27/19 5:37 PM, Howard Butler wrote:
>>>> At this point, I think incubation into OSGeo is a fairly innocuous and reasonable thing for the PROJ project to undertake, but I would like to gauge the community's enthusiasm for such a thing.
>>> 
>>>  Wasn't that already the plan, as mentioned by Kristian back in August:
>>> 
>>>   BlockedBlockedhttps://lists.osgeo.org/pipermail/metacrs/2018-August/000989.htmlBlocked
>>> 
>>>  Kind Regards,
>>> 
>>>  Bas
>>> 
>>>  -- 
>>>   GPG Key ID: 4096R/6750F10AE88D4AF1
>>>  Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
>>>  _______________________________________________
>>>  PROJ mailing list
>>>  PROJ at lists.osgeo.org
>>>  BlockedBlockedhttps://lists.osgeo.org/mailman/listinfo/projBlocked
>>> 
>>> 
>>> 
>>> _______________________________________________
>>> PROJ mailing list
>>> PROJ at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/proj
>> 
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190303/e32f6fde/attachment.html>

From gdt at lexort.com  Sun Mar  3 09:09:39 2019
From: gdt at lexort.com (Greg Troxel)
Date: Sun, 03 Mar 2019 12:09:39 -0500
Subject: [PROJ] Announcing PROJ 6.0.0
In-Reply-To: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk> (Kristian Evers's
 message of "Fri, 1 Mar 2019 18:19:46 +0000")
References: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk>
Message-ID: <smuo96r28bw.fsf@linuxpal.mit.edu>

(Now that 6 is out, the question for packagers is when is a good time to
actually push the update to users.  I have prepared an update for pkgsrc
that seems to be fine, by itself and am testing other things that I have
installed.)

libspatialite failed to build because of proj_api.h.  The last upstream
release seems to be from 2015-09, per
  https://www.gaia-gis.it/fossil/libspatialite/index
but also there seems to be a beta from last August.  (pkgsrc does not
package other than releases, unless really necessary to work around
upstreams that don't believe in releases.)

Is anyone aware of what's expected to happen with spatialite?

How serious is the breakage without spatialite (qgis wants it)?

From sebastic at xs4all.nl  Sun Mar  3 09:42:20 2019
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Sun, 3 Mar 2019 18:42:20 +0100
Subject: [PROJ] Announcing PROJ 6.0.0
In-Reply-To: <smuo96r28bw.fsf@linuxpal.mit.edu>
References: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk>
 <smuo96r28bw.fsf@linuxpal.mit.edu>
Message-ID: <879cb190-a306-4eba-1b28-c9974c5ef618@xs4all.nl>

On 3/3/19 6:09 PM, Greg Troxel wrote:
> (Now that 6 is out, the question for packagers is when is a good time to
> actually push the update to users.  I have prepared an update for pkgsrc
> that seems to be fine, by itself and am testing other things that I have
> installed.)

Once most of the reverse dependencies that users rely on are compatible
with PROJ 6 would be good time.

Evens recent push with the GDAL dependencies is an important part, and
the PROJ 5 release also triggered some projects to move away from
projects.h like GRASS.

In Debian we have several packages that still rely on projects.h:
basemap, gnudatalanguage, gpx2shp, libgeo-proj4-perl, mapserver, navit,
paraview, pdl, python-pyproj, saga, therion, thuban, vtk6 & vtk7.

In the OSGeo stack MapServer is an important package that hasn't been
updated for PROJ 5 nor 6 yet.

> libspatialite failed to build because of proj_api.h.  The last upstream
> release seems to be from 2015-09, per
>   https://www.gaia-gis.it/fossil/libspatialite/index
> but also there seems to be a beta from last August.  (pkgsrc does not
> package other than releases, unless really necessary to work around
> upstreams that don't believe in releases.)
> 
> Is anyone aware of what's expected to happen with spatialite?

SpatiaLite is in a terrible situation wrt new releases. Sandro promised
a new (beta) release three weeks ago, but that hasn't actually happened
yet. This is sadly the state of the spatialite family, there is still
some activity in fossil repositories, but it is low, the frequency of
releases is even more terrible. We only got the 5.0.0 beta after raising
concerns about the lack of 4.4 or 4.5 final release after more than two
years of no new release. The plans announced at the time of the 5.0.0
beta were promising, but turned out empty.

> How serious is the breakage without spatialite (qgis wants it)?

SpatiaLite is an important package in the geospatial ecosystem, but it
is the sick child in the family. Perhaps it's time to take it out to not
hold back the rest of the ecosystem.

Perhaps when users are confronted with distributions removing spatialite
they will be inclined to support its development. I suspect the lack of
funding and/or a healthy group of active developers is causing the
stagnation in the SpatiaLite family.

If the removal of SpatiaLite seriously affects QGIS, they may be able
allocate some of their funding to get SpatiaLite back into shape, at
least for the sake of QGIS.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From kreve at sdfe.dk  Tue Mar  5 05:49:00 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 5 Mar 2019 13:49:00 +0000
Subject: [PROJ] Release schedule between version 6.0.0 and 7.0.0
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF0A9552@S000014.PROD.SITAD.DK>

All,

I have prepared a release schedule for the coming year. As always this is managed on GitHub [0]. For convenience, here's an overview of the planned releases:

6.0.1                   May 1st 2019
6.0.2                   July 1st 2019
6.1.0                   September 1st 2019
6.1.1                   November 1st 2019
6.1.2                   January 1st 2020
6.1.3                   March 1st 2020
7.0.0                   March 1st 2020

Since the 6.0.0 release introduced massive amounts of new code I expect more bugs to be revealed than usually, hence the higher frequency of bug fix releases (every two months, unless a minor version release is scheduled). Note that 6.1.3 and 7.0.0 is planned for release on the same day. Since 7.0.0 will remove the proj_api.h header I expect that version 6 will be seen in the wild for quite some time after the 7.0.0 release and have therefore scheduled an additional bug fix release of the 6.1 branch. The maintenance status of the 6.1 branch should be re-evaluated once we are close to the release of 7.0.0. It may be necessary to issue a few more bug fix release based on the 6.1 branch until downstream projects has moved away from using the proj_api.h API.

The development strategy will be the same as we have used for the last couple of years: All changes are committed to the master branch and bug fixes will be cherry-picked into the relevant maintenance branch. As a consequence of this, development on version 7 cannot start before September 1st. This should not be a problem as the planned breaking changes for 7.0 at this time only consist of removing of proj_api.h - a task that is relatively easy to perform.

Please let me know if you have any comments or suggestions for changes.

/Kristian

[0] https://github.com/OSGeo/proj.4/milestones?direction=asc&sort=due_date&state=open
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190305/4b3f7d68/attachment.html>

From gdt at lexort.com  Tue Mar  5 06:12:23 2019
From: gdt at lexort.com (Greg Troxel)
Date: Tue, 05 Mar 2019 09:12:23 -0500
Subject: [PROJ] Release schedule between version 6.0.0 and 7.0.0
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF0A9552@S000014.PROD.SITAD.DK>
 (Kristian Evers's message of "Tue, 5 Mar 2019 13:49:00 +0000")
References: <2E885BB293AF0448A0181138489E9A0EAF0A9552@S000014.PROD.SITAD.DK>
Message-ID: <smu8sxts94o.fsf@linuxpal.mit.edu>

[prematurely sent the previous]

Thanks - that all sounds good.

Certainly thinking about it later seems wise, but it's going to be
interesting to see how the transition to 6 in packaging systems goes.
While one can think about users making individual choices based on what
depending programs they want, and perhaps mulitple versions in different
prefixes or packaging approaches that basically use a prefix per package
(to avoid this issue), I think most people are going to be using what
their systems provide and thus either complaining that proj is old or
that foo is not available.

I wonder if it makes sense for proj to track the set of depending
projects that don't work with 6, with links to the tickets in those
projects' trackers.   That may be a step too far.

FWIW, postgis seems likely to have a 2.5.2 that works with proj 6 soon.
(2.5.1, the current release, does not.)


From sebastic at xs4all.nl  Tue Mar  5 06:29:53 2019
From: sebastic at xs4all.nl (Bas Couwenberg)
Date: Tue, 05 Mar 2019 15:29:53 +0100
Subject: [PROJ] Release schedule between version 6.0.0 and 7.0.0
In-Reply-To: <smu8sxts94o.fsf@linuxpal.mit.edu>
References: <2E885BB293AF0448A0181138489E9A0EAF0A9552@S000014.PROD.SITAD.DK>
 <smu8sxts94o.fsf@linuxpal.mit.edu>
Message-ID: <14a65cda0f847ea3a4b78558ca7863d0@xs4all.nl>

On 2019-03-05 15:12, Greg Troxel wrote:
> I wonder if it makes sense for proj to track the set of depending
> projects that don't work with 6, with links to the tickets in those
> projects' trackers.   That may be a step too far.

I've considered this as well, and I think it's a good idea to do this 
centrally instead of each distribution doing it on their own.

We could maintain a list on the GitHub wiki (e.g. PROJ6Compatibility), 
with project details like:

  **<Project>**

  Compatible: Yes|No

  Version: x.y.z

  Issues:

   * [Upstream](https://example.com/issue/42)
   * [Debian](https://bugs.debian.org/123456)
   * [Fedora](https://bugzilla.redhat.com/show_bug.cgi?id=1234567)
   * 
[NetBSD](https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=12345)

  Notes: Uses projects.h

Kind Regards,

Bas

From kreve at sdfe.dk  Tue Mar  5 06:29:57 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 5 Mar 2019 14:29:57 +0000
Subject: [PROJ] Release schedule between version 6.0.0 and 7.0.0
In-Reply-To: <smu8sxts94o.fsf@linuxpal.mit.edu>
References: <2E885BB293AF0448A0181138489E9A0EAF0A9552@S000014.PROD.SITAD.DK>
 <smu8sxts94o.fsf@linuxpal.mit.edu>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF0A95F9@S000014.PROD.SITAD.DK>

The removal of the old APIs is certainly going to create some friction.
As Bas has stated many times there exist old packages that are unlikely
to be updated to use PROJ 6+. I am of the opinion that if a package is
that unmaintained it probably shouldn't be included in a package system.
That is of course easy for me to say, as I don't have to deal with all the
consequences of removing those package. It is important that we as a
community find a good solution to deal with this.

One solution to this transition phase we are in at the moment is for
packagers to maintain two PROJ packages: proj4 and proj. With proj4
being legacy PROJ (version <=5.2.0) and proj being an up to date version
(>=6.0.0). The proj4 package should probably only install shared libraries
and not command line utilities. I am aware that this approach will not be
suitable for everyone but it may be a good option for some.

It would be nice to have an overview of projects that depend on PROJ
and their proj.h adoption status. Bas made a list about a year ago of
the relevant packages in Debian. That is a good starting point, for anyone
who wants to maintain a list like this.

/Kristian


-----Oprindelig meddelelse-----
Fra: Greg Troxel <gdt at lexort.com> 
Sendt: 5. marts 2019 15:12
Til: Kristian Evers <kreve at sdfe.dk>
Cc: proj at lists.osgeo.org
Emne: Re: [PROJ] Release schedule between version 6.0.0 and 7.0.0

[prematurely sent the previous]

Thanks - that all sounds good.

Certainly thinking about it later seems wise, but it's going to be
interesting to see how the transition to 6 in packaging systems goes.
While one can think about users making individual choices based on what
depending programs they want, and perhaps mulitple versions in different
prefixes or packaging approaches that basically use a prefix per package
(to avoid this issue), I think most people are going to be using what
their systems provide and thus either complaining that proj is old or
that foo is not available.

I wonder if it makes sense for proj to track the set of depending
projects that don't work with 6, with links to the tickets in those
projects' trackers.   That may be a step too far.

FWIW, postgis seems likely to have a 2.5.2 that works with proj 6 soon.
(2.5.1, the current release, does not.)


From gdt at lexort.com  Tue Mar  5 06:36:02 2019
From: gdt at lexort.com (Greg Troxel)
Date: Tue, 05 Mar 2019 09:36:02 -0500
Subject: [PROJ] Release schedule between version 6.0.0 and 7.0.0
In-Reply-To: <14a65cda0f847ea3a4b78558ca7863d0@xs4all.nl> (Bas Couwenberg's
 message of "Tue, 05 Mar 2019 15:29:53 +0100")
References: <2E885BB293AF0448A0181138489E9A0EAF0A9552@S000014.PROD.SITAD.DK>
 <smu8sxts94o.fsf@linuxpal.mit.edu>
 <14a65cda0f847ea3a4b78558ca7863d0@xs4all.nl>
Message-ID: <smur2blqtgt.fsf@linuxpal.mit.edu>

Bas Couwenberg <sebastic at xs4all.nl> writes:

> On 2019-03-05 15:12, Greg Troxel wrote:
>> I wonder if it makes sense for proj to track the set of depending
>> projects that don't work with 6, with links to the tickets in those
>> projects' trackers.   That may be a step too far.
>
> I've considered this as well, and I think it's a good idea to do this
> centrally instead of each distribution doing it on their own.
>
> We could maintain a list on the GitHub wiki (e.g. PROJ6Compatibility),
> with project details like:
>
>  **<Project>**
>
>  Compatible: Yes|No
>
>  Version: x.y.z
>
>  Issues:
>
>   * [Upstream](https://example.com/issue/42)
>   * [Debian](https://bugs.debian.org/123456)
>   * [Fedora](https://bugzilla.redhat.com/show_bug.cgi?id=1234567)
>   *
> [NetBSD](https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=12345)
>
>  Notes: Uses projects.h

Sounds good to me.   Completely agreed that having a shared list beats
many of us doing it separately.   I guess that's separate from the
project taking it on as their mission, but wiki pages are cheap.

I'm happy to put my notes in there as I come across them.



From kreve at sdfe.dk  Tue Mar  5 06:48:25 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 5 Mar 2019 14:48:25 +0000
Subject: [PROJ] Release schedule between version 6.0.0 and 7.0.0
In-Reply-To: <smur2blqtgt.fsf@linuxpal.mit.edu>
References: <2E885BB293AF0448A0181138489E9A0EAF0A9552@S000014.PROD.SITAD.DK>
 <smu8sxts94o.fsf@linuxpal.mit.edu>
 <14a65cda0f847ea3a4b78558ca7863d0@xs4all.nl>
 <smur2blqtgt.fsf@linuxpal.mit.edu>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF0A969F@S000014.PROD.SITAD.DK>

I've set up a very simple GitHub wiki page for this purpose. I've just added
GDAL as an example for now. Feel free to add more to this.

https://github.com/OSGeo/proj.4/wiki/proj.h-adoption-status

/Kristian

-----Oprindelig meddelelse-----
Fra: PROJ <proj-bounces at lists.osgeo.org> På vegne af Greg Troxel
Sendt: 5. marts 2019 15:36
Til: Bas Couwenberg <sebastic at xs4all.nl>
Cc: proj at lists.osgeo.org
Emne: Re: [PROJ] Release schedule between version 6.0.0 and 7.0.0

Bas Couwenberg <sebastic at xs4all.nl> writes:

> On 2019-03-05 15:12, Greg Troxel wrote:
>> I wonder if it makes sense for proj to track the set of depending
>> projects that don't work with 6, with links to the tickets in those
>> projects' trackers.   That may be a step too far.
>
> I've considered this as well, and I think it's a good idea to do this
> centrally instead of each distribution doing it on their own.
>
> We could maintain a list on the GitHub wiki (e.g. PROJ6Compatibility),
> with project details like:
>
>  **<Project>**
>
>  Compatible: Yes|No
>
>  Version: x.y.z
>
>  Issues:
>
>   * [Upstream](https://example.com/issue/42)
>   * [Debian](https://bugs.debian.org/123456)
>   * [Fedora](https://bugzilla.redhat.com/show_bug.cgi?id=1234567)
>   *
> [NetBSD](https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=12345)
>
>  Notes: Uses projects.h

Sounds good to me.   Completely agreed that having a shared list beats
many of us doing it separately.   I guess that's separate from the
project taking it on as their mission, but wiki pages are cheap.

I'm happy to put my notes in there as I come across them.


_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

From sebastic at xs4all.nl  Tue Mar  5 07:00:42 2019
From: sebastic at xs4all.nl (Bas Couwenberg)
Date: Tue, 05 Mar 2019 16:00:42 +0100
Subject: [PROJ] Release schedule between version 6.0.0 and 7.0.0
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF0A969F@S000014.PROD.SITAD.DK>
References: <2E885BB293AF0448A0181138489E9A0EAF0A9552@S000014.PROD.SITAD.DK>
 <smu8sxts94o.fsf@linuxpal.mit.edu>
 <14a65cda0f847ea3a4b78558ca7863d0@xs4all.nl>
 <smur2blqtgt.fsf@linuxpal.mit.edu>
 <2E885BB293AF0448A0181138489E9A0EAF0A969F@S000014.PROD.SITAD.DK>
Message-ID: <57e49ebee6b54f87b1e25ce14172c7db@xs4all.nl>

On 2019-03-05 15:48, Kristian Evers wrote:
> I've set up a very simple GitHub wiki page for this purpose. I've just 
> added
> GDAL as an example for now. Feel free to add more to this.
> 
> https://github.com/OSGeo/proj.4/wiki/proj.h-adoption-status

This is one step further than required for compatibility with PROJ 6 
(and 5.x).

The biggest issue is the removal of projects.h, so dependent projects 
need to use proj_api.h or proj.h. The former is sufficient to build 
successfully with PROJ 6 (and 5.x).

Did you remove the other wiki pages on purpose? The wiki is very empty 
now, any links to the old pages will be broken now.

Kind Regards,

Bas

From kreve at sdfe.dk  Tue Mar  5 07:07:03 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 5 Mar 2019 15:07:03 +0000
Subject: [PROJ] Status of the GitHub Wiki
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF0A972B@S000014.PROD.SITAD.DK>

All,

Related to my previous email to the list, I have done some much needed clean up in the wiki pages. Basically I have removed all of the pages as they have not been up to date for several years now. I moved the contents of the wiki to the docs in the repository two years ago and since then the website/pdf has been the authoritative version of the documentation. The wiki is still relevant for documenting things related to the development of PROJ, for instance keeping a list of downstream projects and their usage of various PROJ APIs.

Should anyone want to recover something from the now gone wiki pages, they are tracked in the git repository behind the wiki (there's a link in the side bar).

/Kristian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190305/a4e6be8b/attachment.html>

From kreve at sdfe.dk  Tue Mar  5 07:32:56 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 5 Mar 2019 15:32:56 +0000
Subject: [PROJ] Release schedule between version 6.0.0 and 7.0.0
In-Reply-To: <57e49ebee6b54f87b1e25ce14172c7db@xs4all.nl>
References: <2E885BB293AF0448A0181138489E9A0EAF0A9552@S000014.PROD.SITAD.DK>
 <smu8sxts94o.fsf@linuxpal.mit.edu>
 <14a65cda0f847ea3a4b78558ca7863d0@xs4all.nl>
 <smur2blqtgt.fsf@linuxpal.mit.edu>
 <2E885BB293AF0448A0181138489E9A0EAF0A969F@S000014.PROD.SITAD.DK>
 <57e49ebee6b54f87b1e25ce14172c7db@xs4all.nl>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF0A97C0@S000014.PROD.SITAD.DK>

I am also interested in knowing if projects will be able to build against
PROJ 7 in a years' time, hence the three columns. 

Feel free to change my template if you think there's a better way to keep
track of things. This was just a very quick and dirty job to get the ball rolling.

Yes, I purposely removed most of the other wiki pages. See my other email
for an explanation why.

/Kristian

-----Oprindelig meddelelse-----
Fra: PROJ <proj-bounces at lists.osgeo.org> På vegne af Bas Couwenberg
Sendt: 5. marts 2019 16:01
Til: proj at lists.osgeo.org
Emne: Re: [PROJ] Release schedule between version 6.0.0 and 7.0.0

On 2019-03-05 15:48, Kristian Evers wrote:
> I've set up a very simple GitHub wiki page for this purpose. I've just 
> added
> GDAL as an example for now. Feel free to add more to this.
> 
> https://github.com/OSGeo/proj.4/wiki/proj.h-adoption-status

This is one step further than required for compatibility with PROJ 6 
(and 5.x).

The biggest issue is the removal of projects.h, so dependent projects 
need to use proj_api.h or proj.h. The former is sufficient to build 
successfully with PROJ 6 (and 5.x).

Did you remove the other wiki pages on purpose? The wiki is very empty 
now, any links to the old pages will be broken now.

Kind Regards,

Bas
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

From gdt at lexort.com  Wed Mar  6 06:41:40 2019
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 06 Mar 2019 09:41:40 -0500
Subject: [PROJ] Release schedule between version 6.0.0 and 7.0.0
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF0A969F@S000014.PROD.SITAD.DK>
 (Kristian Evers's message of "Tue, 5 Mar 2019 14:48:25 +0000")
References: <2E885BB293AF0448A0181138489E9A0EAF0A9552@S000014.PROD.SITAD.DK>
 <smu8sxts94o.fsf@linuxpal.mit.edu>
 <14a65cda0f847ea3a4b78558ca7863d0@xs4all.nl>
 <smur2blqtgt.fsf@linuxpal.mit.edu>
 <2E885BB293AF0448A0181138489E9A0EAF0A969F@S000014.PROD.SITAD.DK>
Message-ID: <smuy35snjyz.fsf@linuxpal.mit.edu>

Kristian Evers <kreve at sdfe.dk> writes:

> I've set up a very simple GitHub wiki page for this purpose. I've just added
> GDAL as an example for now. Feel free to add more to this.
>
> https://github.com/OSGeo/proj.4/wiki/proj.h-adoption-status

I added libspatialite.

I also added the notion of when things are fixed in actual releases vs
on the master branch, because packaging systems prefer releases and most
users do too.

I would say that depending packages should be update to build with proj
6, but they should continue to build with proj 5.2.0.   It makes things
much harder to have to do simultaneous updates.   I think given that
proj.h has been around for all of 5 and maybe even earlier, this is not
a problem.    I just wanted to point out that building with proj 6 and
not 5 is also a bug and will remain so until not updating to proj 6 is
lame, which I'd say is at least 6 months after the last significant
dependency has a release that works with it.

From markus.metz.giswork at gmail.com  Wed Mar  6 09:30:03 2019
From: markus.metz.giswork at gmail.com (Markus Metz)
Date: Wed, 6 Mar 2019 18:30:03 +0100
Subject: [PROJ] PROJ 6 testntv2 fails
Message-ID: <CAG+h=FHT+fT_m4yG67zS6_Gtrptvw0cm21Pr5ddzq1OdHJVrSg@mail.gmail.com>

On my system (Fedora 28) PROJ 6 testntv2 fails:

============================================
Running ../../test/cli/testntv2 using ../../src/cs2cs:
============================================
doing tests into file ntv2_out, please wait
diff ntv2_out with ntv2_out.dist
10c10
< 111d00'00.000"W 46d00'00.000"N 0.0    111d0'3.1897"W    45d59'59.7489"N
0.000
---
> 111d00'00.000"W 46d00'00.000"N 0.0    111d0'3.1549"W    45d59'59.7528"N
0.000

PROBLEMS HAVE OCCURRED
test file ntv2_out saved

contents of ntv2_out:
-->
##############################################################
Point in the ONwinsor subgrid.
82d00'00.000"W 42d00'00.000"N 0.0    81d59'59.6104"W    42d0'0.1602"N 0.000
82d00'01.000"W 42d00'00.000"N 0.0    82d0'0.6104"W    42d0'0.1602"N 0.000
82d00'02.000"W 42d00'00.000"N 0.0    82d0'1.6104"W    42d0'0.1602"N 0.000
84d00'00.000"W 42d00'00.000"N 0.0    83d59'59.8593"W    42d0'0.18"N 0.000
##############################################################
Try with NTv2 and NTv1 together ... falls back to NTv1
99d00'00.000"W 65d00'00.000"N 0.0    99d0'1.5885"W    65d0'1.3482"N 0.000
111d00'00.000"W 46d00'00.000"N 0.0    111d0'3.1897"W    45d59'59.7489"N
0.000
111d00'00.000"W 47d30'00.000"N 0.0    111d0'2.7989"W    47d29'59.9896"N
0.000
<--

I have data/ntv2_0.gsb

Any hints?

Markus M
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190306/6d1ae89c/attachment.html>

From sebastic at xs4all.nl  Wed Mar  6 09:33:36 2019
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Wed, 6 Mar 2019 18:33:36 +0100
Subject: [PROJ] PROJ 6 testntv2 fails
In-Reply-To: <CAG+h=FHT+fT_m4yG67zS6_Gtrptvw0cm21Pr5ddzq1OdHJVrSg@mail.gmail.com>
References: <CAG+h=FHT+fT_m4yG67zS6_Gtrptvw0cm21Pr5ddzq1OdHJVrSg@mail.gmail.com>
Message-ID: <1fa600d2-d619-78c6-e9b7-b70abc384891@xs4all.nl>

On 3/6/19 6:30 PM, Markus Metz wrote:
> I have data/ntv2_0.gsb
> 
> Any hints?

Don't install the grid, see:

 https://lists.osgeo.org/pipermail/proj/2019-February/008268.html

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From markus.metz.giswork at gmail.com  Wed Mar  6 09:55:05 2019
From: markus.metz.giswork at gmail.com (Markus Metz)
Date: Wed, 6 Mar 2019 18:55:05 +0100
Subject: [PROJ] PROJ 6 testntv2 fails
In-Reply-To: <1fa600d2-d619-78c6-e9b7-b70abc384891@xs4all.nl>
References: <CAG+h=FHT+fT_m4yG67zS6_Gtrptvw0cm21Pr5ddzq1OdHJVrSg@mail.gmail.com>
 <1fa600d2-d619-78c6-e9b7-b70abc384891@xs4all.nl>
Message-ID: <CAG+h=FHiPAzR3e5wx-LCKMOFrddVYkth+-tUcKy1D46eQbjnGQ@mail.gmail.com>

On Wed, Mar 6, 2019 at 6:33 PM Sebastiaan Couwenberg <sebastic at xs4all.nl>
wrote:
>
> On 3/6/19 6:30 PM, Markus Metz wrote:
> > I have data/ntv2_0.gsb
> >
> > Any hints?
>
> Don't install the grid, see:
>
>  https://lists.osgeo.org/pipermail/proj/2019-February/008268.html

OK, thanks for the quick reply!

Best,

Markus M

>
> Kind Regards,
>
> Bas
>
> --
>  GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190306/c184ea7e/attachment.html>

From gdt at lexort.com  Wed Mar  6 09:57:16 2019
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 06 Mar 2019 12:57:16 -0500
Subject: [PROJ] PROJ 6 testntv2 fails
In-Reply-To: <CAG+h=FHT+fT_m4yG67zS6_Gtrptvw0cm21Pr5ddzq1OdHJVrSg@mail.gmail.com>
 (Markus Metz's message of "Wed, 6 Mar 2019 18:30:03 +0100")
References: <CAG+h=FHT+fT_m4yG67zS6_Gtrptvw0cm21Pr5ddzq1OdHJVrSg@mail.gmail.com>
Message-ID: <smua7i7nawz.fsf@linuxpal.mit.edu>

Given that the grid files are intended to get better results, it would
be really nice if the tests passed with them, either via fuzz (which
makes sense if both answers are correct) or via having two recorded
acceptable values.



From markus.metz.giswork at gmail.com  Wed Mar  6 11:28:07 2019
From: markus.metz.giswork at gmail.com (Markus Metz)
Date: Wed, 6 Mar 2019 20:28:07 +0100
Subject: [PROJ] PROJ 6 testntv2 fails
In-Reply-To: <smua7i7nawz.fsf@linuxpal.mit.edu>
References: <CAG+h=FHT+fT_m4yG67zS6_Gtrptvw0cm21Pr5ddzq1OdHJVrSg@mail.gmail.com>
 <smua7i7nawz.fsf@linuxpal.mit.edu>
Message-ID: <CAG+h=FEKS+wGoxKFumpLNtts0f-aVogbJJyCedvQ-vBL17OC6g@mail.gmail.com>

On Wed, Mar 6, 2019 at 6:57 PM Greg Troxel <gdt at lexort.com> wrote:
>
> Given that the grid files are intended to get better results, it would
> be really nice if the tests passed with them, either via fuzz (which
> makes sense if both answers are correct) or via having two recorded
> acceptable values.

I guess the tests are designed to test the numerical stability of the proj
code, for given input data. Therefore it does not matter how accurate the
input data are, what matters is that for the expected input data the
expected result must be provided. If the input data are not as expected,
the test fails, obviously.

The output line
-->
Try with NTv2 and NTv1 together ... falls back to NTv1
<--
looks suspicious, also causing the test failure.

README:
"The test suite requires that the proj-datumgrid package is installed
in `PROJ_LIB`."

This should be expanded to note which datumgrid packages should *not* be
installed for the tests, or that only the package proj-datumgrid-<X>.<Y>
should be installed, but no other datumgrid packages.

Markus M
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190306/983fd1b3/attachment.html>

From gdt at lexort.com  Wed Mar  6 11:38:38 2019
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 06 Mar 2019 14:38:38 -0500
Subject: [PROJ] PROJ 6 testntv2 fails
In-Reply-To: <CAG+h=FEKS+wGoxKFumpLNtts0f-aVogbJJyCedvQ-vBL17OC6g@mail.gmail.com>
 (Markus Metz's message of "Wed, 6 Mar 2019 20:28:07 +0100")
References: <CAG+h=FHT+fT_m4yG67zS6_Gtrptvw0cm21Pr5ddzq1OdHJVrSg@mail.gmail.com>
 <smua7i7nawz.fsf@linuxpal.mit.edu>
 <CAG+h=FEKS+wGoxKFumpLNtts0f-aVogbJJyCedvQ-vBL17OC6g@mail.gmail.com>
Message-ID: <smur2bjlrnl.fsf@linuxpal.mit.edu>

Markus Metz <markus.metz.giswork at gmail.com> writes:

> On Wed, Mar 6, 2019 at 6:57 PM Greg Troxel <gdt at lexort.com> wrote:
>>
>> Given that the grid files are intended to get better results, it would
>> be really nice if the tests passed with them, either via fuzz (which
>> makes sense if both answers are correct) or via having two recorded
>> acceptable values.
>
> I guess the tests are designed to test the numerical stability of the proj
> code, for given input data. Therefore it does not matter how accurate the
> input data are, what matters is that for the expected input data the
> expected result must be provided. If the input data are not as expected,
> the test fails, obviously.

yes, but

> The output line
> -->
> Try with NTv2 and NTv1 together ... falls back to NTv1
> <--
> looks suspicious, also causing the test failure.
>
> README:
> "The test suite requires that the proj-datumgrid package is installed
> in `PROJ_LIB`."
>
> This should be expanded to note which datumgrid packages should *not* be
> installed for the tests, or that only the package proj-datumgrid-<X>.<Y>
> should be installed, but no other datumgrid packages.

This is what's awkward.  Various packaging systems will have different
approaches.  One is to include all the grids (space is cheap, simple),
another is to make them separate packages, and another is to not package
them at all.  Telling people that you can't run proj tests if the other
package is installed, when really you should have it installed, just
makes it hard and will make the tests be ignored.

Another approach would be to cause proj not to load the extra grids when
running tests via some control flag or environment variable.

I think the test issue is actually showing a real issue, which is that
with grids installed or not, proj on a particular input produces
different results.  But we discussed that, and the answer was that both
results are right, just that one is more accurate, and the fact that
people running the same conversion on the same input will get different
results is not concerning.

From markus.metz.giswork at gmail.com  Wed Mar  6 12:38:26 2019
From: markus.metz.giswork at gmail.com (Markus Metz)
Date: Wed, 6 Mar 2019 21:38:26 +0100
Subject: [PROJ] PROJ 6 testntv2 fails
In-Reply-To: <smur2bjlrnl.fsf@linuxpal.mit.edu>
References: <CAG+h=FHT+fT_m4yG67zS6_Gtrptvw0cm21Pr5ddzq1OdHJVrSg@mail.gmail.com>
 <smua7i7nawz.fsf@linuxpal.mit.edu>
 <CAG+h=FEKS+wGoxKFumpLNtts0f-aVogbJJyCedvQ-vBL17OC6g@mail.gmail.com>
 <smur2bjlrnl.fsf@linuxpal.mit.edu>
Message-ID: <CAG+h=FE8uJCe56Or2Nh0y9YKW1rpkkg_c7W25GHzrBcrREg9nA@mail.gmail.com>

On Wed, Mar 6, 2019 at 8:38 PM Greg Troxel <gdt at lexort.com> wrote:
>
> Markus Metz <markus.metz.giswork at gmail.com> writes:
>
> > On Wed, Mar 6, 2019 at 6:57 PM Greg Troxel <gdt at lexort.com> wrote:
> >>
> >> Given that the grid files are intended to get better results, it would
> >> be really nice if the tests passed with them, either via fuzz (which
> >> makes sense if both answers are correct) or via having two recorded
> >> acceptable values.
> >
> > I guess the tests are designed to test the numerical stability of the
proj
> > code, for given input data. Therefore it does not matter how accurate
the
> > input data are, what matters is that for the expected input data the
> > expected result must be provided. If the input data are not as expected,
> > the test fails, obviously.
>
> yes, but
>
> > The output line
> > -->
> > Try with NTv2 and NTv1 together ... falls back to NTv1
> > <--
> > looks suspicious, also causing the test failure.
> >
> > README:
> > "The test suite requires that the proj-datumgrid package is installed
> > in `PROJ_LIB`."
> >
> > This should be expanded to note which datumgrid packages should *not* be
> > installed for the tests, or that only the package proj-datumgrid-<X>.<Y>
> > should be installed, but no other datumgrid packages.
>
> This is what's awkward.  Various packaging systems will have different
> approaches.  One is to include all the grids (space is cheap, simple),
> another is to make them separate packages, and another is to not package
> them at all.  Telling people that you can't run proj tests if the other
> package is installed, when really you should have it installed, just
> makes it hard and will make the tests be ignored.

I was reporting as a user compiling proj from source, not as a packager. I
agree that tests must succeed if only the minimum required datum grids are
installed (why are these not included in the proj source code?) and also if
all other datum grids available from https://proj4.org/download.html are
installed. Additional grids e.g. mentioned in
https://proj4.org/resource_files.html#external-resources should not be
considered by the tests.

In short, tests must use expected input and ignore unexpected input in
order to succeed. That's what you suggest, right?

Markus M
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190306/f192ec0a/attachment.html>

From gdt at lexort.com  Wed Mar  6 12:50:21 2019
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 06 Mar 2019 15:50:21 -0500
Subject: [PROJ] PROJ 6 testntv2 fails
In-Reply-To: <CAG+h=FE8uJCe56Or2Nh0y9YKW1rpkkg_c7W25GHzrBcrREg9nA@mail.gmail.com>
 (Markus Metz's message of "Wed, 6 Mar 2019 21:38:26 +0100")
References: <CAG+h=FHT+fT_m4yG67zS6_Gtrptvw0cm21Pr5ddzq1OdHJVrSg@mail.gmail.com>
 <smua7i7nawz.fsf@linuxpal.mit.edu>
 <CAG+h=FEKS+wGoxKFumpLNtts0f-aVogbJJyCedvQ-vBL17OC6g@mail.gmail.com>
 <smur2bjlrnl.fsf@linuxpal.mit.edu>
 <CAG+h=FE8uJCe56Or2Nh0y9YKW1rpkkg_c7W25GHzrBcrREg9nA@mail.gmail.com>
Message-ID: <smua7i7loc2.fsf@linuxpal.mit.edu>

Markus Metz <markus.metz.giswork at gmail.com> writes:

> I was reporting as a user compiling proj from source, not as a packager. I

Understood, but manual intervention in running tests is not scalable.

> agree that tests must succeed if only the minimum required datum grids are
> installed (why are these not included in the proj source code?) and also if
> all other datum grids available from https://proj4.org/download.html are
> installed. Additional grids e.g. mentioned in
> https://proj4.org/resource_files.html#external-resources should not be
> considered by the tests.
>
> In short, tests must use expected input and ignore unexpected input in
> order to succeed. That's what you suggest, right?

I don't follow the previous sentence.

I meant:

  If it's ok not to have the extra grids installed, and if it's
  preferred to have them (if you use those projections, then

  tests should succeed either way, somehow (by accomodating both
  answers, or by forcing proj not to use the extra grids during tests)


I suspect that mine is a minority view, so I don't want to belabor it,
beyond clearly stating it, which I hope I finally did...

From markus.metz.giswork at gmail.com  Fri Mar  8 03:27:37 2019
From: markus.metz.giswork at gmail.com (Markus Metz)
Date: Fri, 8 Mar 2019 12:27:37 +0100
Subject: [PROJ] [GRASS-dev] GRASS GIS + PROJ 6 + GDAL 2.5
In-Reply-To: <1552038593313-0.post@n6.nabble.com>
References: <CAG+h=FEvz2sui0XYEONbiXM7-T=W8xKWrLH=EmNZs-SLjXDw+w@mail.gmail.com>
 <3334281.mQYzKs8nWq@even-i700>
 <CAG+h=FFDFm8T5ZXioL7W63HMKS5x4qP-YnNqxRrhhiqU5C47cw@mail.gmail.com>
 <CAG+h=FGf8Ua=rKomWiF0DiUGtBH0MtkcHTOuit83jjf4XMaPFQ@mail.gmail.com>
 <1552038593313-0.post@n6.nabble.com>
Message-ID: <CAG+h=FEesTc2skP8aAnR6r6+T9T06X0puAY=4oJpkB06yGgyQQ@mail.gmail.com>

On Fri, Mar 8, 2019 at 10:49 AM Roger Bivand <Roger.Bivand at nhh.no> wrote:
>
> Since rgdal::make_EPSG() is facing the same problems of listing tabulated
> EPSG fields as g.proj -l, I was very happy to see Markus' code in
> g.proj/main.c mentioned in this thread, and have used this approach in
>
https://r-forge.r-project.org/scm/viewvc.php/pkg/src/proj_info6.cpp?view=markup&root=rgdal
>
> However, there are plenty of messages such as: "proj_as_proj_string:
> Unsupported conversion method: Lambert Conic Conformal (West
Orientated)". I
> haven't installed GRASS trunk with PROJ6, so I can't see whether g.proj -l
> also sees the same messages.

I get the same messages with g.proj, but no error code from PROJ error
handlers.

> If it does, maybe we could ask on the proj list

yes, we should ask. For now g.proj is ignoring those codes for which no
proj string can be retrieved.

Markus M

> how they might be captured for summary reporting. I think they are coming
> from line 5758 in src/iso19111/coordinateoperation.cpp or maybe line 906
in
> same file. Maybe PROJ now has an error handler that
>
> Another question concerns the issue of whether one needs to free objects
> created, in particular proj_crs_info and pj. Not so important for g.proj,
> which exists when done, but important for rgdal whose functions don't
exit.
>
> Anyway, very helpful to see that Markus is looking at the same issues as
we
> are!
>
> Roger
>
>
>
>
>
> -----
> Roger Bivand
> NHH Norwegian School of Economics, Bergen, Norway
> --
> Sent from: http://osgeo-org.1560.x6.nabble.com/Grass-Dev-f3991897.html
> _______________________________________________
> grass-dev mailing list
> grass-dev at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/grass-dev
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190308/4ca6f04b/attachment.html>

From even.rouault at spatialys.com  Fri Mar  8 03:41:27 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 08 Mar 2019 12:41:27 +0100
Subject: [PROJ] [GRASS-dev] GRASS GIS + PROJ 6 + GDAL 2.5
In-Reply-To: <CAG+h=FEesTc2skP8aAnR6r6+T9T06X0puAY=4oJpkB06yGgyQQ@mail.gmail.com>
References: <CAG+h=FEvz2sui0XYEONbiXM7-T=W8xKWrLH=EmNZs-SLjXDw+w@mail.gmail.com>
 <1552038593313-0.post@n6.nabble.com>
 <CAG+h=FEesTc2skP8aAnR6r6+T9T06X0puAY=4oJpkB06yGgyQQ@mail.gmail.com>
Message-ID: <1586237.xgklq3QZTY@even-i700>

On vendredi 8 mars 2019 12:27:37 CET Markus Metz wrote:
> On Fri, Mar 8, 2019 at 10:49 AM Roger Bivand <Roger.Bivand at nhh.no> wrote:
> > Since rgdal::make_EPSG() is facing the same problems of listing tabulated
> > EPSG fields as g.proj -l, I was very happy to see Markus' code in
> > g.proj/main.c mentioned in this thread, and have used this approach in
> 
> https://r-forge.r-project.org/scm/viewvc.php/pkg/src/proj_info6.cpp?view=mar
> kup&root=rgdal
> > However, there are plenty of messages such as: "proj_as_proj_string:
> > Unsupported conversion method: Lambert Conic Conformal (West
> 
> Orientated)". I
> 
> > haven't installed GRASS trunk with PROJ6, so I can't see whether g.proj -l
> > also sees the same messages.
> 
> I get the same messages with g.proj, but no error code from PROJ error
> handlers.
> 
> > If it does, maybe we could ask on the proj list
> 
> yes, we should ask. For now g.proj is ignoring those codes for which no
> proj string can be retrieved.

I'm not sure what the question is exactly :-) Is that proj_context_errno() 
doesn't return an error in that case ?
That's related to the error being emitted from the new code emitting C++ 
exceptions, which are caught by the C wrapper. It doesn't set errno style 
errors currently. I'm not a big fan of the errno approach, and find the proper 
error string currently emitted to be more expressive, but that can be 
discussed if some harmonization should be done.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From Roger.Bivand at nhh.no  Fri Mar  8 04:19:39 2019
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Fri, 8 Mar 2019 13:19:39 +0100
Subject: [PROJ] [GRASS-dev] GRASS GIS + PROJ 6 + GDAL 2.5
In-Reply-To: <1586237.xgklq3QZTY@even-i700>
References: <CAG+h=FEvz2sui0XYEONbiXM7-T=W8xKWrLH=EmNZs-SLjXDw+w@mail.gmail.com>
 <1552038593313-0.post@n6.nabble.com>
 <CAG+h=FEesTc2skP8aAnR6r6+T9T06X0puAY=4oJpkB06yGgyQQ@mail.gmail.com>
 <1586237.xgklq3QZTY@even-i700>
Message-ID: <alpine.LFD.2.21.1903081312250.1495@reclus.nhh.no>

On Fri, 8 Mar 2019, Even Rouault wrote:

> On vendredi 8 mars 2019 12:27:37 CET Markus Metz wrote:
>> On Fri, Mar 8, 2019 at 10:49 AM Roger Bivand <Roger.Bivand at nhh.no> wrote:
>>> Since rgdal::make_EPSG() is facing the same problems of listing tabulated
>>> EPSG fields as g.proj -l, I was very happy to see Markus' code in
>>> g.proj/main.c mentioned in this thread, and have used this approach in
>>
>> https://r-forge.r-project.org/scm/viewvc.php/pkg/src/proj_info6.cpp?view=mar
>> kup&root=rgdal
>>> However, there are plenty of messages such as: "proj_as_proj_string:
>>> Unsupported conversion method: Lambert Conic Conformal (West
>>
>> Orientated)". I
>>
>>> haven't installed GRASS trunk with PROJ6, so I can't see whether g.proj -l
>>> also sees the same messages.
>>
>> I get the same messages with g.proj, but no error code from PROJ error
>> handlers.
>>
>>> If it does, maybe we could ask on the proj list
>>
>> yes, we should ask. For now g.proj is ignoring those codes for which no
>> proj string can be retrieved.
>
> I'm not sure what the question is exactly :-) Is that proj_context_errno()
> doesn't return an error in that case ?

Yes, for example:

...
     for (i = 0; i < crs_cnt; i++) {
         const char *proj_definition;

         pj = proj_create_from_database(ctx, proj_crs_info[i]->auth_name,
             proj_crs_info[i]->code, PJ_CATEGORY_CRS, 0, NULL);
Rprintf("proj_create_from_database %s: %d\n", proj_crs_info[i]->code, 
proj_context_errno(ctx));
         proj_definition = proj_as_proj_string(ctx, pj, PJ_PROJ_5, NULL);
Rprintf("proj_as_proj_string %s: %d\n", proj_crs_info[i]->code, 
proj_context_errno(ctx));
...

showing in one case:

proj_create_from_database 7082: 0
proj_as_proj_string: Unsupported conversion method: Polar Stereographic 
(variant C)
proj_as_proj_string 7082: 0

so the message is being delivered to the console (stderr?), no errno (or 
other notification seems to be set. Is there a way of checking first 
before calling proj_as_proj_string() to avoid the message?

I did find the *_destroy() functions instead of legacy pj_free() etc., 
thanks for prompting me to re-read proj.h.

I'm assuming there is no error handler to hook onto, to divert errors to 
R's error handler. In this case, it doesn't matter for replacing legacy 
functionality.

Roger

> That's related to the error being emitted from the new code emitting C++
> exceptions, which are caught by the C wrapper. It doesn't set errno style
> errors currently. I'm not a big fan of the errno approach, and find the proper
> error string currently emitted to be more expressive, but that can be
> discussed if some harmonization should be done.
>
> Even
>
>

-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From sebastic at xs4all.nl  Fri Mar  8 07:28:07 2019
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 8 Mar 2019 16:28:07 +0100
Subject: [PROJ] PROJ 6.0.0 cs2cs: cannot instantiate source coordinate
 system - program abnormally terminated
Message-ID: <eb210117-1ee7-3e97-e86f-e8bbc6c67187@xs4all.nl>

The cs2cs tests in the proj-rdnap package [0] fail with PROJ 6.0.0:

 Rel. 6.0.0, March 1st, 2019
 <cs2cs>:
 cannot initialize transformation
 cause: (null)
 program abnormally terminated

The problem seems to be the minimal epsg file in PROJ_LIB, removing is
works around the issue.

Should cs2cs really terminate abnormally when an problematic init file
is present in PROJ_LIB?

Details follow:

A command like the following works with PROJ <= 5.2:

 $ echo "53.160753042 4.824761912 42.8614" | \
 PROJ_LIB="$(pwd)" PROJ_DEBUG=3 \
 cs2cs -r +init=epsg:4258 +to +init=rdnap:rdnap -f %.4f

The current working directory has the rdnap init file and its datum
grids, and a minimal epsg init file:

 $ cat rdnap
 # RDNAP with NTv2 and VDatum
 <rdnap> +proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889
+k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel
+nadgrids=rdtrans2008.gsb +geoidgrids=naptrans2008.gtx +units=m +no_defs <>

 # RD with NTv2 only
 <rd> +proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889
+k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel
+nadgrids=rdtrans2008.gsb +units=m +no_defs <>

 $ cat epsg
 # ETRS89
 <4258> +proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs  <>

Debug output for the same command with PROJ 6.0.0 shows:

 $ echo "53.160753042 4.824761912 42.8614" | \
 PROJ_LIB="/usr/share/proj:$(pwd)" PROJ_DEBUG=3 \
 cs2cs -r +init=epsg:4258 +to +init=rdnap:rdnap -f %.4f
 pj_open_lib(proj.db): call fopen(/usr/share/proj/proj.db) - succeeded
 pj_open_lib(epsg): call fopen(/tmp/buildd/proj-rdnap/epsg) - succeeded
 get_init: searching cache for key: [epsg:4258]
 pj_open_lib(epsg): call fopen(/tmp/buildd/proj-rdnap/epsg) - succeeded
 get_init: searching on in init files for [epsg:4258]
 get_init_string: searching for section [4258] in init file [epsg]
 pj_open_lib(epsg): call fopen(/tmp/buildd/proj-rdnap/epsg) - succeeded
 key=epsg:4258, value: [proj=longlat ellps=GRS80 towgs84=0,0,0,0,0,0,0
no_defs]
 get_init: got [proj=longlat ellps=GRS80 towgs84=0,0,0,0,0,0,0 no_defs],
paralist[0,1]: [proj=longlat,ellps=GRS80]
 get_init: searching cache for key: [rdnap:rdnap]
 get_init: searching on in init files for [rdnap:rdnap]
 get_init_string: searching for section [rdnap] in init file [rdnap]
 pj_open_lib(rdnap): call fopen(/tmp/buildd/proj-rdnap/rdnap) - succeeded
 key=rdnap:rdnap, value: [proj=sterea lat_0=52.15616055555555
lon_0=5.38763888888889 k=0.9999079 x_0=155000 y_0=463000 ellps=bessel
nadgrids=rdtrans2008.gsb geoidgrids=naptrans2008.gtx units=m no_defs]
 get_init: got [proj=sterea lat_0=52.15616055555555
lon_0=5.38763888888889 k=0.9999079 x_0=155000 y_0=463000 ellps=bessel
nadgrids=rdtrans2008.gsb geoidgrids=naptrans2008.gtx units=m no_defs],
paralist[0,1]: [proj=sterea,lat_0=52.15616055555555]
 pj_open_lib(epsg): call fopen(/tmp/buildd/proj-rdnap/epsg) - succeeded
 get_init: searching cache for key: [epsg:4258]
 get_init: searching cache for key: [rdnap:rdnap]
 No operation found matching criteria
 Rel. 6.0.0, March 1st, 2019
 <cs2cs>:
 cannot initialize transformation
 cause: (null)
 program abnormally terminated
 $ echo $?
 3

The minimal epsg file is not required any more, since multiple paths can
be used in PROJ_LIB since 6.0.0. Doing that seems to work around the issue:

 $ echo "53.160753042 4.824761912 42.8614" | \
 PROJ_LIB="/usr/share/proj:$(pwd)" PROJ_DEBUG=3 \
 cs2cs -r +init=epsg:4258 +to +init=rdnap:rdnap -f %.4f
 pj_open_lib(proj.db): call fopen(/usr/share/proj/proj.db) - succeeded
 pj_open_lib(epsg): call fopen(/tmp/buildd/proj-rdnap/epsg) - failed
 get_init: searching cache for key: [rdnap:rdnap]
 get_init: searching on in init files for [rdnap:rdnap]
 get_init_string: searching for section [rdnap] in init file [rdnap]
 pj_open_lib(rdnap): call fopen(/tmp/buildd/proj-rdnap/rdnap) - succeeded
 key=rdnap:rdnap, value: [proj=sterea lat_0=52.15616055555555
lon_0=5.38763888888889 k=0.9999079 x_0=155000 y_0=463000 ellps=bessel
nadgrids=rdtrans2008.gsb geoidgrids=naptrans2008.gtx units=m no_defs]
get_init: got [proj=sterea lat_0=52.15616055555555
lon_0=5.38763888888889 k=0.9999079 x_0=155000 y_0=463000 ellps=bessel
nadgrids=rdtrans2008.gsb geoidgrids=naptrans2008.gtx units=m no_defs],
paralist[0,1]: [proj=sterea,lat_0=52.15616055555555]
 pj_open_lib(epsg): call fopen(/tmp/buildd/proj-rdnap/epsg) - failed
 get_init: searching cache for key: [rdnap:rdnap]
 pj_ellipsoid - final: a=6377397.155 f=1/299.153, errno=0
 pj_ellipsoid - final:    ellps=bessel
 pj_ellipsoid - final: a=6377397.155 f=1/299.153, errno=0
 pj_ellipsoid - final:
 Pipeline: Building arg list for step no. 0
 Pipeline: init - proj=unitconvert, 3
     xy_in=deg
     xy_out=rad
 pj_ellipsoid - final: a=6378137.000 f=1/298.257, errno=0
 pj_ellipsoid - final:    ellps=GRS80
 xy_in unit: Degree
 xy_out unit: Radian
 Pipeline: Step 0 (proj=unitconvert) at 0x55a438eb9170
 Pipeline at [0x55a438eb8c20]:    step at [0x55a438eb9170]
(proj=unitconvert) done
 Pipeline: Building arg list for step no. 1
 Pipeline: init - proj=sterea, 7
     lat_0=52.1561605555556
     lon_0=5.38763888888889
     k=0.9999079
     x_0=155000
     y_0=463000
     ellps=bessel
 pj_ellipsoid - final: a=6377397.155 f=1/299.153, errno=0
 pj_ellipsoid - final:    ellps=bessel
 Pipeline: Step 1 (proj=sterea) at 0x55a438ea6c60
 Pipeline at [0x55a438eb8c20]:    step at [0x55a438ea6c60] (proj=sterea)
done
 Pipeline: 2 steps built. Determining i/o characteristics
 117355.9718     574917.6038 42.8614

[0] https://tracker.debian.org/pkg/proj-rdnap

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From markus.metz.giswork at gmail.com  Fri Mar  8 08:01:57 2019
From: markus.metz.giswork at gmail.com (Markus Metz)
Date: Fri, 8 Mar 2019 17:01:57 +0100
Subject: [PROJ] [GRASS-dev] GRASS GIS + PROJ 6 + GDAL 2.5
In-Reply-To: <1586237.xgklq3QZTY@even-i700>
References: <CAG+h=FEvz2sui0XYEONbiXM7-T=W8xKWrLH=EmNZs-SLjXDw+w@mail.gmail.com>
 <1552038593313-0.post@n6.nabble.com>
 <CAG+h=FEesTc2skP8aAnR6r6+T9T06X0puAY=4oJpkB06yGgyQQ@mail.gmail.com>
 <1586237.xgklq3QZTY@even-i700>
Message-ID: <CAG+h=FERBk4oD+kJp1C-ua_T9hUt4P0=t-7BgCow86+Z1qXXEQ@mail.gmail.com>

On Fri, Mar 8, 2019 at 12:41 PM Even Rouault <even.rouault at spatialys.com>
wrote:
>
> On vendredi 8 mars 2019 12:27:37 CET Markus Metz wrote:
> > On Fri, Mar 8, 2019 at 10:49 AM Roger Bivand <Roger.Bivand at nhh.no>
wrote:
> > > Since rgdal::make_EPSG() is facing the same problems of listing
tabulated
> > > EPSG fields as g.proj -l, I was very happy to see Markus' code in
> > > g.proj/main.c mentioned in this thread, and have used this approach in
> >
> >
https://r-forge.r-project.org/scm/viewvc.php/pkg/src/proj_info6.cpp?view=mar
> > kup&root=rgdal
> > > However, there are plenty of messages such as: "proj_as_proj_string:
> > > Unsupported conversion method: Lambert Conic Conformal (West
> >
> > Orientated)". I
> >
> > > haven't installed GRASS trunk with PROJ6, so I can't see whether
g.proj -l
> > > also sees the same messages.
> >
> > I get the same messages with g.proj, but no error code from PROJ error
> > handlers.
> >
> > > If it does, maybe we could ask on the proj list
> >
> > yes, we should ask. For now g.proj is ignoring those codes for which no
> > proj string can be retrieved.
>
> I'm not sure what the question is exactly :-)

My question is, what should GRASS do with a SRS without proj string? The
best answer is probably: use WKT instead of a proj string. But most of the
GRASS code uses (for historical reasons) some form of proj syntax, also to
store projection info for a GRASS location. If there is no proj string,
GRASS thinks there is no SRS and falls back to a generic xy system which is
not always correct.

Markus M
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190308/062341fd/attachment-0001.html>

From even.rouault at spatialys.com  Fri Mar  8 08:56:20 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 08 Mar 2019 17:56:20 +0100
Subject: [PROJ] [GRASS-dev] GRASS GIS + PROJ 6 + GDAL 2.5
In-Reply-To: <CAG+h=FERBk4oD+kJp1C-ua_T9hUt4P0=t-7BgCow86+Z1qXXEQ@mail.gmail.com>
References: <CAG+h=FEvz2sui0XYEONbiXM7-T=W8xKWrLH=EmNZs-SLjXDw+w@mail.gmail.com>
 <1586237.xgklq3QZTY@even-i700>
 <CAG+h=FERBk4oD+kJp1C-ua_T9hUt4P0=t-7BgCow86+Z1qXXEQ@mail.gmail.com>
Message-ID: <3845875.M60x8CWfBt@even-i700>

On vendredi 8 mars 2019 17:01:57 CET Markus Metz wrote:
> On Fri, Mar 8, 2019 at 12:41 PM Even Rouault <even.rouault at spatialys.com>
> 
> wrote:
> > On vendredi 8 mars 2019 12:27:37 CET Markus Metz wrote:
> > > On Fri, Mar 8, 2019 at 10:49 AM Roger Bivand <Roger.Bivand at nhh.no>
> 
> wrote:
> > > > Since rgdal::make_EPSG() is facing the same problems of listing
> 
> tabulated
> 
> > > > EPSG fields as g.proj -l, I was very happy to see Markus' code in
> > > > g.proj/main.c mentioned in this thread, and have used this approach in
> 
> https://r-forge.r-project.org/scm/viewvc.php/pkg/src/proj_info6.cpp?view=mar
> > > kup&root=rgdal
> > > 
> > > > However, there are plenty of messages such as: "proj_as_proj_string:
> > > > Unsupported conversion method: Lambert Conic Conformal (West
> > > 
> > > Orientated)". I
> > > 
> > > > haven't installed GRASS trunk with PROJ6, so I can't see whether
> 
> g.proj -l
> 
> > > > also sees the same messages.
> > > 
> > > I get the same messages with g.proj, but no error code from PROJ error
> > > handlers.
> > > 
> > > > If it does, maybe we could ask on the proj list
> > > 
> > > yes, we should ask. For now g.proj is ignoring those codes for which no
> > > proj string can be retrieved.
> > 
> > I'm not sure what the question is exactly :-)
> 
> My question is, what should GRASS do with a SRS without proj string? The
> best answer is probably: use WKT instead of a proj string. But most of the
> GRASS code uses (for historical reasons) some form of proj syntax, also to
> store projection info for a GRASS location. If there is no proj string,
> GRASS thinks there is no SRS and falls back to a generic xy system which is
> not always correct.

The WKT will not help here. You will be able to get here, but you won't be 
able to do coordinate transformation with it. This is just that this EPSG 
method is not implemented or mapped to a PROJ projection method


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Fri Mar  8 08:58:15 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 08 Mar 2019 17:58:15 +0100
Subject: [PROJ] [GRASS-dev] GRASS GIS + PROJ 6 + GDAL 2.5
In-Reply-To: <alpine.LFD.2.21.1903081312250.1495@reclus.nhh.no>
References: <CAG+h=FEvz2sui0XYEONbiXM7-T=W8xKWrLH=EmNZs-SLjXDw+w@mail.gmail.com>
 <1586237.xgklq3QZTY@even-i700>
 <alpine.LFD.2.21.1903081312250.1495@reclus.nhh.no>
Message-ID: <3507663.nZrjUWF4lq@even-i700>

> I'm assuming there is no error handler to hook onto, to divert errors to
> R's error handler.

Actually you can install your own error handler with proj_log_func()

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Fri Mar  8 09:17:26 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 08 Mar 2019 18:17:26 +0100
Subject: [PROJ] PROJ 6.0.0 cs2cs: cannot instantiate source coordinate
	system - program abnormally terminated
In-Reply-To: <eb210117-1ee7-3e97-e86f-e8bbc6c67187@xs4all.nl>
References: <eb210117-1ee7-3e97-e86f-e8bbc6c67187@xs4all.nl>
Message-ID: <2467727.RkYqY6r1eU@even-i700>

On vendredi 8 mars 2019 16:28:07 CET Sebastiaan Couwenberg wrote:
> The cs2cs tests in the proj-rdnap package [0] fail with PROJ 6.0.0:
> 
>  Rel. 6.0.0, March 1st, 2019
>  <cs2cs>:
>  cannot initialize transformation
>  cause: (null)
>  program abnormally terminated
> 
> The problem seems to be the minimal epsg file in PROJ_LIB, removing is
> works around the issue.
> 
> Should cs2cs really terminate abnormally when an problematic init file
> is present in PROJ_LIB?

Actually, this is rather subtle. The issue is that the definition of epsg:4258 
in the minimum epsg file is interpretated as a Geographic 2D CRS, whereas 
rdnap:rdnap is interpretated as as CompoundCRS (horizontal + vertical). 
Normally the code that computes the possible transformation paths would find a 
Geographic 3D CRS that corresponds to the Geographic 2D CRS, but in the case 
of a '+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs' definition, 
there's no single such 3D CRS. So no transformation path is returned at all.

When using the EPSG:4258 definition from proj.db, then the EPSG:4937 (ETRS89 
3D) is used internally.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From markus.metz.giswork at gmail.com  Fri Mar  8 09:22:42 2019
From: markus.metz.giswork at gmail.com (Markus Metz)
Date: Fri, 8 Mar 2019 18:22:42 +0100
Subject: [PROJ] [GRASS-dev] GRASS GIS + PROJ 6 + GDAL 2.5
In-Reply-To: <3845875.M60x8CWfBt@even-i700>
References: <CAG+h=FEvz2sui0XYEONbiXM7-T=W8xKWrLH=EmNZs-SLjXDw+w@mail.gmail.com>
 <1586237.xgklq3QZTY@even-i700>
 <CAG+h=FERBk4oD+kJp1C-ua_T9hUt4P0=t-7BgCow86+Z1qXXEQ@mail.gmail.com>
 <3845875.M60x8CWfBt@even-i700>
Message-ID: <CAG+h=FHgSpxrzXABDK-DNBD0MVomX0BKdnjWZuZfBUONqgv6qg@mail.gmail.com>

On Fri, Mar 8, 2019 at 5:56 PM Even Rouault <even.rouault at spatialys.com>
wrote:
>
> On vendredi 8 mars 2019 17:01:57 CET Markus Metz wrote:
> >
> > My question is, what should GRASS do with a SRS without proj string? The
> > best answer is probably: use WKT instead of a proj string. But most of
the
> > GRASS code uses (for historical reasons) some form of proj syntax, also
to
> > store projection info for a GRASS location. If there is no proj string,
> > GRASS thinks there is no SRS and falls back to a generic xy system
which is
> > not always correct.
>
> The WKT will not help here. You will be able to get here, but you won't be
> able to do coordinate transformation with it. This is just that this EPSG
> method is not implemented or mapped to a PROJ projection method

I understand that coordinate transformation with PROJ will not be possible.
But having a valid SRS definition would at least allow to compare two
spatial references, i.e. OSRIsSame() should work. Having a valid SRS
instead of dumping it would also help if the corresponding PROJ method
becomes implemented in the future. That's why I am wondering about an
alternative to the current proj-like projection information in GRASS.

Markus M
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190308/0ec9d1ef/attachment.html>

From even.rouault at spatialys.com  Fri Mar  8 09:26:51 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 08 Mar 2019 18:26:51 +0100
Subject: [PROJ] [GRASS-dev] GRASS GIS + PROJ 6 + GDAL 2.5
In-Reply-To: <CAG+h=FHgSpxrzXABDK-DNBD0MVomX0BKdnjWZuZfBUONqgv6qg@mail.gmail.com>
References: <CAG+h=FEvz2sui0XYEONbiXM7-T=W8xKWrLH=EmNZs-SLjXDw+w@mail.gmail.com>
 <3845875.M60x8CWfBt@even-i700>
 <CAG+h=FHgSpxrzXABDK-DNBD0MVomX0BKdnjWZuZfBUONqgv6qg@mail.gmail.com>
Message-ID: <6471073.8GiZlshDJU@even-i700>

On vendredi 8 mars 2019 18:22:42 CET Markus Metz wrote:
> On Fri, Mar 8, 2019 at 5:56 PM Even Rouault <even.rouault at spatialys.com>
> 
> wrote:
> > On vendredi 8 mars 2019 17:01:57 CET Markus Metz wrote:
> > > My question is, what should GRASS do with a SRS without proj string? The
> > > best answer is probably: use WKT instead of a proj string. But most of
> 
> the
> 
> > > GRASS code uses (for historical reasons) some form of proj syntax, also
> 
> to
> 
> > > store projection info for a GRASS location. If there is no proj string,
> > > GRASS thinks there is no SRS and falls back to a generic xy system
> 
> which is
> 
> > > not always correct.
> > 
> > The WKT will not help here. You will be able to get here, but you won't be
> > able to do coordinate transformation with it. This is just that this EPSG
> > method is not implemented or mapped to a PROJ projection method
> 
> I understand that coordinate transformation with PROJ will not be possible.
> But having a valid SRS definition would at least allow to compare two
> spatial references, i.e. OSRIsSame() should work. Having a valid SRS
> instead of dumping it would also help if the corresponding PROJ method
> becomes implemented in the future. That's why I am wondering about an
> alternative to the current proj-like projection information in GRASS.

Yes, for having a reference SRS definition, you can use the WKT export. By 
"useful", I meant being able to do coordinate transformation.
To compare SRS for equality, rather than using full string comparison, I'd 
suggest using proj_is_equivalent_to() which has a few options for different 
levels of equality.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From sebastic at xs4all.nl  Fri Mar  8 09:39:30 2019
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Fri, 8 Mar 2019 18:39:30 +0100
Subject: [PROJ] PROJ 6.0.0 cs2cs: cannot instantiate source coordinate
 system - program abnormally terminated
In-Reply-To: <2467727.RkYqY6r1eU@even-i700>
References: <eb210117-1ee7-3e97-e86f-e8bbc6c67187@xs4all.nl>
 <2467727.RkYqY6r1eU@even-i700>
Message-ID: <1f9e8e24-a2ed-c6d1-4b7a-3033855d855d@xs4all.nl>

On 3/8/19 6:17 PM, Even Rouault wrote:
> On vendredi 8 mars 2019 16:28:07 CET Sebastiaan Couwenberg wrote:
>> The cs2cs tests in the proj-rdnap package [0] fail with PROJ 6.0.0:
>>
>>  Rel. 6.0.0, March 1st, 2019
>>  <cs2cs>:
>>  cannot initialize transformation
>>  cause: (null)
>>  program abnormally terminated
>>
>> The problem seems to be the minimal epsg file in PROJ_LIB, removing is
>> works around the issue.
>>
>> Should cs2cs really terminate abnormally when an problematic init file
>> is present in PROJ_LIB?
> 
> Actually, this is rather subtle. The issue is that the definition of epsg:4258 
> in the minimum epsg file is interpretated as a Geographic 2D CRS, whereas 
> rdnap:rdnap is interpretated as as CompoundCRS (horizontal + vertical). 
> Normally the code that computes the possible transformation paths would find a 
> Geographic 3D CRS that corresponds to the Geographic 2D CRS, but in the case 
> of a '+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs' definition, 
> there's no single such 3D CRS. So no transformation path is returned at all.
> 
> When using the EPSG:4258 definition from proj.db, then the EPSG:4937 (ETRS89 
> 3D) is used internally.

So if I understand correctly, the abnormal termination is expected and
not a bug.

Having updated the RDNAP test script for PROJ 6.0.0, all test test still
fail because the output for the transformation exceeds the threshold.

Are these large differences expected too when using PROJ 6.0.0?

The attached log file has the verbose output of the test script with
cs2cs input, output & expected values.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
-------------- next part --------------
Using PROJ_LIB: .:/usr/share/proj
PROJ version: 6.0.0
Renaming: epsg to: epsg.bak

Direction: From ETRS89 to RD/NAP

Test:   01 Texel
Exec:   cs2cs -r +init=epsg:4258 +to +init=rdnap:rdnap -f %.4f
Input:  53.160753042 4.824761912 42.8614
Output: 117355.9718	574917.6038 42.8614
Expect: 117380.1200	575040.3400 1.0000
x coordinate exceeds 0.001 meters: 24.148199999996
y coordinate exceeds 0.001 meters: 122.736199999927
NAP exceeds 0.001 meters: 41.8614
Test FAILED: From ETRS89 to RD/NAP - 01 Texel

Test:   02 Noord-Groningen
Exec:   cs2cs -r +init=epsg:4258 +to +init=rdnap:rdnap -f %.4f
Input:  53.419482050 6.776726674 42.3586
Output: 247340.4033	604453.3972 42.3586
Expect: 247380.5600	604580.7800 2.0000
x coordinate exceeds 0.001 meters: 40.1566999999923
y coordinate exceeds 0.001 meters: 127.382800000021
NAP exceeds 0.001 meters: 40.3586
Test FAILED: From ETRS89 to RD/NAP - 02 Noord-Groningen

Test:   03 Amersfoort
Exec:   cs2cs -r +init=epsg:4258 +to +init=rdnap:rdnap -f %.4f
Input:  52.155172897 5.387203657 43.2551
Output: 154970.2190	462890.1257 43.2551
Expect: 155000.0000	463000.0000 0.0000
x coordinate exceeds 0.001 meters: 29.7809999999881
y coordinate exceeds 0.001 meters: 109.874300000025
NAP exceeds 0.001 meters: 43.2551
Test FAILED: From ETRS89 to RD/NAP - 03 Amersfoort

Test:   04 Zeeuws-Vlaanderen
Exec:   cs2cs -r +init=epsg:4258 +to +init=rdnap:rdnap -f %.4f
Input:  51.368607152 3.397588595 47.4024
Output: 16447.8832	377281.4575 47.4024
Expect: 16460.9100	377380.2300 3.0000
x coordinate exceeds 0.001 meters: 13.0267999999996
y coordinate exceeds 0.001 meters: 98.7724999999627
NAP exceeds 0.001 meters: 44.4024
Test FAILED: From ETRS89 to RD/NAP - 04 Zeeuws-Vlaanderen

Test:   05 Zuid-Limburg
Exec:   cs2cs -r +init=epsg:4258 +to +init=rdnap:rdnap -f %.4f
Input:  50.792584908 5.773795547 174.9478
Output: 182225.9086	311388.1617 174.9478
Expect: 182260.4500	311480.6700 129.000
x coordinate exceeds 0.001 meters: 34.5414000000164
y coordinate exceeds 0.001 meters: 92.5082999999868
NAP exceeds 0.001 meters: 45.9478
Test FAILED: From ETRS89 to RD/NAP - 05 Zuid-Limburg

Test:   06 Maasvlakte
Exec:   cs2cs -r +init=epsg:4258 +to +init=rdnap:rdnap -f %.4f
Input:  51.947393898 4.072887101 47.5968
Output: 64622.1560	440593.3895 47.5968
Expect: 64640.8900	440700.0101 4.0000
x coordinate exceeds 0.001 meters: 18.7339999999967
y coordinate exceeds 0.001 meters: 106.620600000024
NAP exceeds 0.001 meters: 43.5968
Test FAILED: From ETRS89 to RD/NAP - 06 Maasvlakte

Test:   07 No_rd&geoid
Exec:   cs2cs -r +init=epsg:4258 +to +init=rdnap:rdnap -f %.4f
Input:  50.687420405 4.608971812
Output: 99976.4029	299910.4844 0.0000
Expect: 100000.6700	300000.8900
x coordinate exceeds 0.001 meters: 24.2670999999973
y coordinate exceeds 0.001 meters: 90.4055999999982
Test FAILED: From ETRS89 to RD/NAP - 07 No_rd&geoid (Expected output overriden: *	* ^-?(\d+\.\d+|inf)$)

Test:   08 No_geoid
Exec:   cs2cs -r +init=epsg:4258 +to +init=rdnap:rdnap -f %.4f
Input:  51.136825197 4.601375361
Output: 99976.7908	349904.6309 0.0000
Expect: 100000.6700	350000.8900
x coordinate exceeds 0.001 meters: 23.8791999999958
y coordinate exceeds 0.001 meters: 96.2591000000248
Test FAILED: From ETRS89 to RD/NAP - 08 No_geoid (Expected output overriden: *	* ^-?(\d+\.\d+|inf)$)

Test:   09 No_rd
Exec:   cs2cs -r +init=epsg:4258 +to +init=rdnap:rdnap -f %.4f
Input:  52.482440839 4.268403889
Output: 78980.0233	499886.5665 0.0000
Expect: 79000.0100	500000.2300
x coordinate exceeds 0.001 meters: 19.986699999994
y coordinate exceeds 0.001 meters: 113.663499999966
Test FAILED: From ETRS89 to RD/NAP - 09 No_rd (Expected output overriden: *	* ^-?(\d+\.\d+|inf)$)

Test:   10 edge_rd
Exec:   cs2cs -r +init=epsg:4258 +to +init=rdnap:rdnap -f %.4f
Input:  51.003976532 3.891247830
Output: 49982.7244	335905.4579 0.0000
Expect: 50000.4500	335999.6700
x coordinate exceeds 0.001 meters: 17.7255999999979
y coordinate exceeds 0.001 meters: 94.2121000000043
Test OK: From ETRS89 to RD/NAP - 10 edge_rd (Not identical, but margin ignored)

Direction: From RD/NAP to ETRS89

Test:   01 Texel
Exec:   cs2cs -s +init=rdnap:rdnap +to +init=epsg:4258 -f %.9f
Input:  117380.1200 575040.3400 1.0000
Output: 53.161857694	4.825108648 1.000000000
Expect: 53.160753042	4.824761912 42.8614
Latitude exceeds 1e-08 degrees: 0.0011046519999951
Longitude exceeds 1e-08 degrees: 0.000346736000000014
Height exceeds 0.001 meters: 41.8614
Test FAILED: From RD/NAP to ETRS89 - 01 Texel

Test:   02 Noord-Groningen
Exec:   cs2cs -s +init=rdnap:rdnap +to +init=epsg:4258 -f %.9f
Input:  247380.5600 604580.7800 2.0000
Output: 53.420619464	6.777367597 2.000000000
Expect: 53.419482050	6.776726674 42.3586
Latitude exceeds 1e-08 degrees: 0.00113741399999867
Longitude exceeds 1e-08 degrees: 0.000640922999999738
Height exceeds 0.001 meters: 40.3586
Test FAILED: From RD/NAP to ETRS89 - 02 Noord-Groningen

Test:   03 Amersfoort
Exec:   cs2cs -s +init=rdnap:rdnap +to +init=epsg:4258 -f %.9f
Input:  155000.0000 463000.0000 0.0000
Output: 52.156160556	5.387638889 0.000000000
Expect: 52.155172897	5.387203657 43.2551
Latitude exceeds 1e-08 degrees: 0.000987659000003305
Longitude exceeds 1e-08 degrees: 0.000435232000000063
Height exceeds 0.001 meters: 43.2551
Test FAILED: From RD/NAP to ETRS89 - 03 Amersfoort

Test:   04 Zeeuws-Vlaanderen
Exec:   cs2cs -s +init=rdnap:rdnap +to +init=epsg:4258 -f %.9f
Input:  16460.9100 377380.2300 3.0000
Output: 51.369497855	3.397736904 3.000000000
Expect: 51.368607152	3.397588595 47.4024
Latitude exceeds 1e-08 degrees: 0.000890702999996051
Longitude exceeds 1e-08 degrees: 0.000148308999999625
Height exceeds 0.001 meters: 44.4024
Test FAILED: From RD/NAP to ETRS89 - 04 Zeeuws-Vlaanderen

Test:   05 Zuid-Limburg
Exec:   cs2cs -s +init=rdnap:rdnap +to +init=epsg:4258 -f %.9f
Input:  182260.4500 311480.6700 129.000
Output: 50.793414886	5.774292379 129.000000000
Expect: 50.792584908	5.773795547 174.9478
Latitude exceeds 1e-08 degrees: 0.000829977999998732
Longitude exceeds 1e-08 degrees: 0.000496832000000502
Height exceeds 0.001 meters: 45.9478
Test FAILED: From RD/NAP to ETRS89 - 05 Zuid-Limburg

Test:   06 Maasvlakte
Exec:   cs2cs -s +init=rdnap:rdnap +to +init=epsg:4258 -f %.9f
Input:  64640.8900 440700.0101 4.0000
Output: 51.948355181	4.073131504 4.000000000
Expect: 51.947393898	4.072887101 47.5968
Latitude exceeds 1e-08 degrees: 0.000961282999995206
Longitude exceeds 1e-08 degrees: 0.000244402999999949
Height exceeds 0.001 meters: 43.5968
Test FAILED: From RD/NAP to ETRS89 - 06 Maasvlakte

Test:   07 No_rd&geoid
Exec:   cs2cs -s +init=rdnap:rdnap +to +init=epsg:4258 -f %.9f
Input:  100000.6700 300000.8900
Output: 50.688235387	4.609301611 0.000000000
Expect: 50.687420405	4.608971812
Latitude exceeds 1e-08 degrees: 0.000814982000001407
Longitude exceeds 1e-08 degrees: 0.000329799000000186
Test FAILED: From RD/NAP to ETRS89 - 07 No_rd&geoid (Expected output overriden: *	* ^-?(\d+\.\d+|inf)$)

Test:   08 No_geoid
Exec:   cs2cs -s +init=rdnap:rdnap +to +init=epsg:4258 -f %.9f
Input:  100000.6700 350000.8900
Output: 51.137692794	4.601701761 0.000000000
Expect: 51.136825197	4.601375361
Latitude exceeds 1e-08 degrees: 0.000867597000002718
Longitude exceeds 1e-08 degrees: 0.000326400000000504
Test FAILED: From RD/NAP to ETRS89 - 08 No_geoid (Expected output overriden: *	* ^-?(\d+\.\d+|inf)$)

Test:   09 No_rd
Exec:   cs2cs -s +init=rdnap:rdnap +to +init=epsg:4258 -f %.9f
Input:  79000.0100 500000.2300
Output: 52.483465112	4.268672234 0.000000000
Expect: 52.482440839	4.268403889
Latitude exceeds 1e-08 degrees: 0.00102427299999874
Longitude exceeds 1e-08 degrees: 0.000268345000000281
Test FAILED: From RD/NAP to ETRS89 - 09 No_rd (Expected output overriden: *	* ^-?(\d+\.\d+|inf)$)

Test:   10 edge_rd
Exec:   cs2cs -s +init=rdnap:rdnap +to +init=epsg:4258 -f %.9f
Input:  50000.4500 335999.6700
Output: 51.004826511	3.891472859 0.000000000
Expect: 51.003976532	3.891247830
Latitude exceeds 1e-08 degrees: 0.000849978999994505
Longitude exceeds 1e-08 degrees: 0.000225028999999655
Test OK: From RD/NAP to ETRS89 - 10 edge_rd (Not identical, but margin ignored)


Renaming: epsg.bak to: epsg
make: *** [debian/rules:10: override_dh_auto_test] Error 18

From e.j.bennett at swansea.ac.uk  Fri Mar  8 07:15:30 2019
From: e.j.bennett at swansea.ac.uk (Bennett E.J.)
Date: Fri, 8 Mar 2019 15:15:30 +0000
Subject: [PROJ] Where does the epsg database come from?
Message-ID: <0C5B61B8-5B8A-46CF-A390-04E08157298D@swansea.ac.uk>

Hi all

I’m trying to build PROJ from source, for use on an HPC facility, where packages are installed as environment modules (so can’t be installed via yum).

The software I’m trying to build against PROJ is complaining that it can’t find epsg. Sure enough, epsg isn’t present in the share/proj/ directory (or anywhere else) when I follow the installation instructions for PROJ, even when I populate the data folder from the proj-datumgrid archive before running make.

I can extract the file from an RPM and add it to the build, but that seems somewhat backwards—where should the database be generated from the source package, please?

Thanks

Ed

From Roger.Bivand at nhh.no  Fri Mar  8 11:22:04 2019
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Fri, 8 Mar 2019 20:22:04 +0100
Subject: [PROJ] [GRASS-dev] GRASS GIS + PROJ 6 + GDAL 2.5
In-Reply-To: <6471073.8GiZlshDJU@even-i700>
References: <CAG+h=FEvz2sui0XYEONbiXM7-T=W8xKWrLH=EmNZs-SLjXDw+w@mail.gmail.com>
 <3845875.M60x8CWfBt@even-i700>
 <CAG+h=FHgSpxrzXABDK-DNBD0MVomX0BKdnjWZuZfBUONqgv6qg@mail.gmail.com>
 <6471073.8GiZlshDJU@even-i700>
Message-ID: <alpine.LFD.2.21.1903081926440.28621@reclus.nhh.no>

On Fri, 8 Mar 2019, Even Rouault wrote:

> On vendredi 8 mars 2019 18:22:42 CET Markus Metz wrote:
>> On Fri, Mar 8, 2019 at 5:56 PM Even Rouault <even.rouault at spatialys.com>
>>
>> wrote:
>>> On vendredi 8 mars 2019 17:01:57 CET Markus Metz wrote:
>>>> My question is, what should GRASS do with a SRS without proj string? The
>>>> best answer is probably: use WKT instead of a proj string. But most of
>>
>> the
>>
>>>> GRASS code uses (for historical reasons) some form of proj syntax, also
>>
>> to
>>
>>>> store projection info for a GRASS location. If there is no proj string,
>>>> GRASS thinks there is no SRS and falls back to a generic xy system
>>
>> which is
>>
>>>> not always correct.
>>>
>>> The WKT will not help here. You will be able to get here, but you won't be
>>> able to do coordinate transformation with it. This is just that this EPSG
>>> method is not implemented or mapped to a PROJ projection method
>>
>> I understand that coordinate transformation with PROJ will not be possible.
>> But having a valid SRS definition would at least allow to compare two
>> spatial references, i.e. OSRIsSame() should work. Having a valid SRS
>> instead of dumping it would also help if the corresponding PROJ method
>> becomes implemented in the future. That's why I am wondering about an
>> alternative to the current proj-like projection information in GRASS.

Might it be possible for proj_get_crs_info_list_from_database() to return 
a field indicating whether the record in proj_crs_info can be exported to 
proj_string?

I found example code for proj_log_func() in GDAL in ogr/ogr_proj_p.cpp, 
and am using that to do nothing on apparent PJ_LOG_ERROR messages reported 
in proj_as_proj_string(). The messages are suppressed, and I destroy the 
context after looping through the projections found. I'm a bit concerned 
that if something goes wrong, turning off error handling isn't safe.

In rgdal::make_EPSG(), the proj_string is returned as (null), and can be 
grepped, so it does provide information.

Roger

>
> Yes, for having a reference SRS definition, you can use the WKT export. By
> "useful", I meant being able to do coordinate transformation.
> To compare SRS for equality, rather than using full string comparison, I'd
> suggest using proj_is_equivalent_to() which has a few options for different
> levels of equality.
>
> Even
>
>

-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From even.rouault at spatialys.com  Sat Mar  9 11:35:46 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 09 Mar 2019 20:35:46 +0100
Subject: [PROJ] PROJ 6.0.0 cs2cs: cannot instantiate source coordinate
	system - program abnormally terminated
In-Reply-To: <1f9e8e24-a2ed-c6d1-4b7a-3033855d855d@xs4all.nl>
References: <eb210117-1ee7-3e97-e86f-e8bbc6c67187@xs4all.nl>
 <2467727.RkYqY6r1eU@even-i700>
 <1f9e8e24-a2ed-c6d1-4b7a-3033855d855d@xs4all.nl>
Message-ID: <4088763.IZorUh4B0U@even-i700>

On vendredi 8 mars 2019 18:39:30 CET Sebastiaan Couwenberg wrote:
> On 3/8/19 6:17 PM, Even Rouault wrote:
> > On vendredi 8 mars 2019 16:28:07 CET Sebastiaan Couwenberg wrote:
> >> The cs2cs tests in the proj-rdnap package [0] fail with PROJ 6.0.0:
> >>  Rel. 6.0.0, March 1st, 2019
> >>  <cs2cs>:
> >>  cannot initialize transformation
> >>  cause: (null)
> >>  program abnormally terminated
> >> 
> >> The problem seems to be the minimal epsg file in PROJ_LIB, removing is
> >> works around the issue.
> >> 
> >> Should cs2cs really terminate abnormally when an problematic init file
> >> is present in PROJ_LIB?
> > 
> > Actually, this is rather subtle. The issue is that the definition of
> > epsg:4258 in the minimum epsg file is interpretated as a Geographic 2D
> > CRS, whereas rdnap:rdnap is interpretated as as CompoundCRS (horizontal +
> > vertical). Normally the code that computes the possible transformation
> > paths would find a Geographic 3D CRS that corresponds to the Geographic
> > 2D CRS, but in the case of a '+proj=longlat +ellps=GRS80
> > +towgs84=0,0,0,0,0,0,0 +no_defs' definition, there's no single such 3D
> > CRS. So no transformation path is returned at all.
> > 
> > When using the EPSG:4258 definition from proj.db, then the EPSG:4937
> > (ETRS89 3D) is used internally.
> 
> So if I understand correctly, the abnormal termination is expected and
> not a bug.
> 
> Having updated the RDNAP test script for PROJ 6.0.0, all test test still
> fail because the output for the transformation exceeds the threshold.
> 
> Are these large differences expected too when using PROJ 6.0.0?

They look like the datum shifts are not applied.

Yes, when testing

src/projinfo -s EPSG:4258  -t "+proj=sterea +lat_0=52.15616055555555 
+lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel 
+nadgrids=@rdtrans2008.gsb +geoidgrids=@naptrans2008.gtx +units=m +no_defs 
+type=crs"

we get

PROJ string:
+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert 
+xy_in=deg +xy_out=rad +step +proj=sterea +lat_0=52.1561605555556 
+lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel


So the nadgrids and geoidgrids terms are ignored. The reason here is that they 
are used as a hint for transformations to WGS84, but EPSG:4258 definition 
doesn't include any such explicit transformation with a towgs84/geoidgrids/
nadgrids. So we are in a grey situation that is neither a pure late-binding or 
pure early-binding situation. Opinions welcome if in such a situation where 
there is a early binding style CRS we should try hard to research a 
transformation from the other CRS to WGS84.

Even


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From support at mnspoint.com  Tue Mar 12 07:25:05 2019
From: support at mnspoint.com (support at mnspoint.com)
Date: Tue, 12 Mar 2019 15:25:05 +0100
Subject: [PROJ] Announcing PROJ 6.0.0
In-Reply-To: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk>
References: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk>
Message-ID: <9e2a58fe92c9c5969b3aa195015d0131@mnspoint.com>

Hello,

after checking the latest release "6.0 ..." we have decided NOT to 
support it or 5.0. We continue to support older C version of Proj.4

Reasons: lot of slow, complicated, buggy and unwanted features and c++ 
dependence!!

We hope that this list and official Proj.X will be divide to several 
versions like:

Proj - Java version (or wrapper)
Proj - c++ version (or wrapper)
Proj - c version (the old fast one)
etc etc

and maybe to some additional libraries which can be added if required 
... not to increase or slow down the performance of the application 
using them. There is NO point to include all spam in this library!!

Janne.

From markus.metz.giswork at gmail.com  Tue Mar 12 13:27:35 2019
From: markus.metz.giswork at gmail.com (Markus Metz)
Date: Tue, 12 Mar 2019 21:27:35 +0100
Subject: [PROJ] cct no longer accepts +init=epsg: / +init=IGNF: in ROJ 6
Message-ID: <CAG+h=FFq6Y+ssAWFDWz9JGOZdTGbGV1-06KRZ2byUkwoMp1kHQ@mail.gmail.com>

I think I understand the reason for this change, but for the benefit of
users, please document and explain these changes in
https://proj4.org/usage/differences.html#version-6-0-0

Thanks,

Markus M
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190312/7b1a02ae/attachment.html>

From schwehr at gmail.com  Tue Mar 12 16:02:21 2019
From: schwehr at gmail.com (Kurt Schwehr)
Date: Tue, 12 Mar 2019 16:02:21 -0700
Subject: [PROJ] Announcing PROJ 6.0.0
In-Reply-To: <9e2a58fe92c9c5969b3aa195015d0131@mnspoint.com>
References: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk>
 <9e2a58fe92c9c5969b3aa195015d0131@mnspoint.com>
Message-ID: <CACmBxyvR3i060gZMH6NmtWnnZk=rFC=0_i7WBH3VDYioTgjtfw@mail.gmail.com>

Janne,

Sounds like you should be at least filing some bugs?

"slow, complicated, buggy and unwanted features and c++  dependence"

Yes, it's a bit slower.  Contributions might speed up build a bit, but it's
still pretty fast compared to building any system that uses it.
Proj and projections have never been simple, but proj has gotten so much
easier for me to maintain for my users thanks to all the changes in the
last couple of years.
The test coverage in version 4 is not good and you are missing out on so
much test coverage development.
The C++ dependence isn't much cost and modern C++ brings with it so many
improvements that provide solid conventions that have been proven to reduce
bugs.  C++ isn't a beginner language, but neither is C.

I wish you luck on your Proj version 4 adventure.  It is what open source
is about that you can do what ever you need with that older code.

All,

Thank you to everyone for your super work!  I feel like such a slacker
right now, so here is at least my couple minute review from head as of a
couple min ago (yeah, I need to dig in more):

Build:

It took me a couple reads before I realized that it was telling me to
install the sqlite3 binary

Yes, build and test is dramatically slower for me.  Went from ~15 sec to
~35 sec on my dev machine with aprox debian-testing as the Linux dist.
It's a >1 year old desktop with 28 cores with Intel(R) Xeon(R) CPU E5-2690
v4 @ 2.60GHz

rm -rf build-ninja; time (mkdir -p build-ninja && cd build-ninja && cmake
-GNinja .. && cmake --build . && ctest .)

real 0m37.333s
user 6m50.775s
sys 0m34.070s

I can certainly live with 35 sec to do a from scratch build and test!

Bugs:

I've got some fails and one segfault on my local machine, but mostly passes.
The failures are on me to figure out what is weird about my local setup.
proj_test_cpp_api segfault, I need to make a proper bug report.

[ RUN      ] CApi.proj_identify

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff7b41f00 in proj_list_get_count () from
/home/schwehr/src/proj.4/build-ninja/lib/libproj.so.15
(gdb) bt
#0  0x00007ffff7b41f00 in proj_list_get_count () from
/home/schwehr/src/proj.4/build-ninja/lib/libproj.so.15
#1  0x000055555582d654 in (anonymous
namespace)::CApi_proj_identify_Test::TestBody() ()
#2  0x000055555589a8aa in void
testing::internal::HandleExceptionsInMethodIfSupported<testing::Test,
void>(testing::Test*, void (testing::Test::*)(), char const*) ()
#3  0x00005555558915f5 in testing::Test::Run() [clone .part.540] ()


On Tue, Mar 12, 2019 at 9:52 AM <support at mnspoint.com> wrote:

> Hello,
>
> after checking the latest release "6.0 ..." we have decided NOT to
> support it or 5.0. We continue to support older C version of Proj.4
>
> Reasons: lot of slow, complicated, buggy and unwanted features and c++
> dependence!!
>
> We hope that this list and official Proj.X will be divide to several
> versions like:
>
> Proj - Java version (or wrapper)
> Proj - c++ version (or wrapper)
> Proj - c version (the old fast one)
> etc etc
>
> and maybe to some additional libraries which can be added if required
> ... not to increase or slow down the performance of the application
> using them. There is NO point to include all spam in this library!!
>
> Janne.
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>


-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190312/2db2295c/attachment.html>

From thy at 42.dk  Wed Mar 13 01:17:27 2019
From: thy at 42.dk (Kristian Thy)
Date: Wed, 13 Mar 2019 09:17:27 +0100
Subject: [PROJ] Announcing PROJ 6.0.0
In-Reply-To: <9e2a58fe92c9c5969b3aa195015d0131@mnspoint.com>
References: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk>
 <9e2a58fe92c9c5969b3aa195015d0131@mnspoint.com>
Message-ID: <20190313081727.ypz62orvyy4cc5vk@42.dk>

Janne,

Did you consider requesting a refund?

Cheers,
Kristian

On Tue, Mar 12, support at mnspoint.com wrote:
> Hello,
> 
> after checking the latest release "6.0 ..." we have decided NOT to support
> it or 5.0. We continue to support older C version of Proj.4
> 
> Reasons: lot of slow, complicated, buggy and unwanted features and c++
> dependence!!
> 
> We hope that this list and official Proj.X will be divide to several
> versions like:
> 
> Proj - Java version (or wrapper)
> Proj - c++ version (or wrapper)
> Proj - c version (the old fast one)
> etc etc
> 
> and maybe to some additional libraries which can be added if required ...
> not to increase or slow down the performance of the application using them.
> There is NO point to include all spam in this library!!
> 
> Janne.
> _______________________________________________

From mateusz at loskot.net  Wed Mar 13 02:50:15 2019
From: mateusz at loskot.net (Mateusz Loskot)
Date: Wed, 13 Mar 2019 10:50:15 +0100
Subject: [PROJ] Announcing PROJ 6.0.0
In-Reply-To: <20190313081727.ypz62orvyy4cc5vk@42.dk>
References: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk>
 <9e2a58fe92c9c5969b3aa195015d0131@mnspoint.com>
 <20190313081727.ypz62orvyy4cc5vk@42.dk>
Message-ID: <CABUeae8PHJswhU6-zTdorWpfOnrBvtLte_eHkMeuF-xpLvHL7A@mail.gmail.com>

I'd suggest we should stop feeding Janne's,
whose trolling and insulting [1] behaviour has been unacceptable
and should be lead to removal from the list immediately.

[1] http://lists.maptools.org/pipermail/proj/2017-July/007736.html

ML

On Wed, 13 Mar 2019 at 09:22, Kristian Thy <thy at 42.dk> wrote:
>
> Janne,
>
> Did you consider requesting a refund?
>
> Cheers,
> Kristian
>
> On Tue, Mar 12, support at mnspoint.com wrote:
> > Hello,
> >
> > after checking the latest release "6.0 ..." we have decided NOT to support
> > it or 5.0. We continue to support older C version of Proj.4
> >
> > Reasons: lot of slow, complicated, buggy and unwanted features and c++
> > dependence!!
> >
> > We hope that this list and official Proj.X will be divide to several
> > versions like:
> >
> > Proj - Java version (or wrapper)
> > Proj - c++ version (or wrapper)
> > Proj - c version (the old fast one)
> > etc etc
> >
> > and maybe to some additional libraries which can be added if required ...
> > not to increase or slow down the performance of the application using them.
> > There is NO point to include all spam in this library!!
> >
> > Janne.
> > _______________________________________________
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj



-- 
Mateusz Loskot, http://mateusz.loskot.net

From roger.oberholtzer at gmail.com  Wed Mar 13 03:41:49 2019
From: roger.oberholtzer at gmail.com (Roger Oberholtzer)
Date: Wed, 13 Mar 2019 11:41:49 +0100
Subject: [PROJ] Announcing PROJ 6.0.0
In-Reply-To: <CACmBxyvR3i060gZMH6NmtWnnZk=rFC=0_i7WBH3VDYioTgjtfw@mail.gmail.com>
References: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk>
 <9e2a58fe92c9c5969b3aa195015d0131@mnspoint.com>
 <CACmBxyvR3i060gZMH6NmtWnnZk=rFC=0_i7WBH3VDYioTgjtfw@mail.gmail.com>
Message-ID: <CANkOqwNNBiYJWWcA3wK7QFjqvMRB4Scp6K7+VHmRB4F+kgz8WA@mail.gmail.com>

On Wed, Mar 13, 2019 at 12:02 AM Kurt Schwehr <schwehr at gmail.com> wrote:

> Build:
>
> It took me a couple reads before I realized that it was telling me to install the sqlite3 binary
>
> Yes, build and test is dramatically slower for me.  Went from ~15 sec to ~35 sec on my dev machine with aprox debian-testing as the Linux dist.  It's a >1 year old desktop with 28 cores with Intel(R) Xeon(R) CPU E5-2690 v4 @ 2.60GHz
>
> rm -rf build-ninja; time (mkdir -p build-ninja && cd build-ninja && cmake -GNinja .. && cmake --build . && ctest .)
>
> real 0m37.333s
> user 6m50.775s
> sys 0m34.070s
>
> I can certainly live with 35 sec to do a from scratch build and test!

The build time is perhaps not so interesting to me. I am more
interested in the time it takes to do a transformation. A comparison
of something 'simple' like transforming a WGS84 lat/long in to some
typical northing/easting could be interesting. How has this
performance changed in common use cases (whatever those are)?

-- 
Roger Oberholtzer

From sebastic at xs4all.nl  Wed Mar 13 12:56:57 2019
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Wed, 13 Mar 2019 20:56:57 +0100
Subject: [PROJ] Release schedule between version 6.0.0 and 7.0.0
In-Reply-To: <smuy35snjyz.fsf@linuxpal.mit.edu>
References: <2E885BB293AF0448A0181138489E9A0EAF0A9552@S000014.PROD.SITAD.DK>
 <smu8sxts94o.fsf@linuxpal.mit.edu>
 <14a65cda0f847ea3a4b78558ca7863d0@xs4all.nl>
 <smur2blqtgt.fsf@linuxpal.mit.edu>
 <2E885BB293AF0448A0181138489E9A0EAF0A969F@S000014.PROD.SITAD.DK>
 <smuy35snjyz.fsf@linuxpal.mit.edu>
Message-ID: <42ed13d3-326d-008c-b9da-3d34b924ac4b@xs4all.nl>

On 3/6/19 3:41 PM, Greg Troxel wrote:
> Kristian Evers <kreve at sdfe.dk> writes:
> 
>> I've set up a very simple GitHub wiki page for this purpose. I've just added
>> GDAL as an example for now. Feel free to add more to this.
>>
>> https://github.com/OSGeo/proj.4/wiki/proj.h-adoption-status
> 
> I added libspatialite.

I've added all packages in Debian that use PROJ (directly & indirectly).

Most have links to the upstream issue tracker.

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From even.rouault at spatialys.com  Sun Mar 17 16:06:39 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 18 Mar 2019 00:06:39 +0100
Subject: [PROJ] github backporting application
Message-ID: <155304812.tXkPmZgO5S@even-i700>

Hi,

I've just seen that QGIS has started using a github backporting application,
https://github.com/apps/backporting, and I've just setup it for GDAL and PROJ

So the workflow is :
1) Create a pull request against master
2) If backport is needed, label it with "backport {branchname}" (I've created 
a "backport release/2.4" for GDAL and "backport 6.0" for PROJ)
3) Merge the pull request
4) The backport application automatically creates a new pull request against 
the target backport branch, and cherry-picks all the commits of the original 
pull request
5) Wait for CI to complete (or not) and merge (or not) this new PR

Of course this doesn't solve automagically conflicts etc, but can be 
convenient for trivial backports when branches are close enough

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From nyall.dawson at gmail.com  Sun Mar 17 16:13:48 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Mon, 18 Mar 2019 09:13:48 +1000
Subject: [PROJ] [gdal-dev] github backporting application
In-Reply-To: <155304812.tXkPmZgO5S@even-i700>
References: <155304812.tXkPmZgO5S@even-i700>
Message-ID: <CAB28Asga9Jf0BCDaJ77PiEN0ESb+FsyoiaP_TyFiWTtPQSwwwA@mail.gmail.com>

On Mon, 18 Mar 2019 at 09:06, Even Rouault <even.rouault at spatialys.com> wrote:
>
> Hi,
>
> I've just seen that QGIS has started using a github backporting application,
> https://github.com/apps/backporting, and I've just setup it for GDAL and PROJ
>
> So the workflow is :
> 1) Create a pull request against master
> 2) If backport is needed, label it with "backport {branchname}" (I've created
> a "backport release/2.4" for GDAL and "backport 6.0" for PROJ)
> 3) Merge the pull request
> 4) The backport application automatically creates a new pull request against
> the target backport branch, and cherry-picks all the commits of the original
> pull request
> 5) Wait for CI to complete (or not) and merge (or not) this new PR
>
> Of course this doesn't solve automagically conflicts etc, but can be
> convenient for trivial backports when branches are close enough

Just from a QGIS developer's perspective:

The system is working OK, but there's two current limitations in the
bot which make it difficult to work within nicely:

1. Backported PRs have a generic name, e.g. "Backport #9528"
(https://github.com/qgis/QGIS/pull/9531). This makes it hard to see
what outstanding backports are open without diving into the details of
each. There's a fix here for the bot, but not merged yet:
https://github.com/tibdex/backport/pull/19 . On a similar vein, the
backported PRs don't include original author information, which in my
view makes reviewing a bit harder (since we have policies in place
that require a review from a different developer to the original
submitter for backports to the stable branch. Not a blocker, but just
opens the policy for easier abuse).

2. It's hard to track multiple backports, because currently the bot
only supports a single branch. See
https://github.com/tibdex/backport/pull/18 . We have to currently
"step" the backports back through multiple branches individually by
tagging the first auto created backport with the next branch to
backport to. Hopefully Matthias' PR is merged soon and fixes this
situation, but in the meantime it's fragile and potentially a backport
could accidently be skipped for a branch.

Nyall

From nyall.dawson at gmail.com  Sun Mar 17 20:39:47 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Mon, 18 Mar 2019 13:39:47 +1000
Subject: [PROJ] Proj 6 API questions
Message-ID: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>

Hi list,

So (thanks for sponsorship from the ICSM), I'm working on porting QGIS
to the Proj 6 API. I suspect I'll have many more questions (especially
as I attempt to drop QGIS' own custom projection database in favour of
the upstream proj one). Let's get started...

I thought I'd begin with a simple task of replacing QGIS' ellipsoid db
with proj's, using proj_list_ellps(). QGIS has this table of
"standard" ellipsoids, built up from... somewhere... in the vast
history of the QGIS project. When comparing against proj's db, it
includes many items which are missing in proj's:

Adrastea2000: Adrastea2000 10000.0/7000.0
Amalthea2000: Amalthea2000 125000.0/64000.0
Ananke2000: Ananke2000 10000.0/10000.0
Ariel2000: Ariel2000 581100.0/577700.0
Atlas2000: Atlas2000 18500.0/13500.0
Belinda2000: Belinda2000 33000.0/33000.0
Bianca2000: Bianca2000 21000.0/21000.0
Callisto2000: Callisto2000 2409400.0/2409300.0
Calypso2000: Calypso2000 15000.0/8000.0
Carme2000: Carme2000 15000.0/15000.0
Charon2000: Charon2000 593000.0/593000.0
IGNF:ELG004: Clarke 1866 6378206.4/6356583.799998981
IGNF:ELG003: Clarke 1880 Anglais 6378249.1453/6356514.8698
IGNF:ELG010: Clarke 1880 IGN 6378249.2/6356514.999978254
cape: Clarke 1880 mod. 6378249.145/6356514.966398753
Cordelia2000: Cordelia2000 13000.0/13000.0
Cressida2000: Cressida2000 31000.0/31000.0
Deimos2000: Deimos2000 7500.0/5200.0
Desdemona2000: Desdemona2000 27000.0/27000.0
Despina2000: Despina2000 74000.0/74000.0
Dione2000: Dione2000 560000.0/560000.0
Earth2000: Earth2000 6378140.0/6356750.0
Elara2000: Elara2000 40000.0/40000.0
Enceladus2000: Enceladus2000 256300.0/244600.0
Epimetheus2000: Epimetheus2000 69000.0/55000.0
Europa2000: Europa2000 1564130.0/1560930.0
Galatea2000: Galatea2000 79000.0/79000.0
Ganymede2000: Ganymede2000 2632400.0/2632350.0
Helene2000: Helene2000 16000.0/16000.0
Himalia2000: Himalia2000 85000.0/85000.0
Hyperion2000: Hyperion2000 164000.0/107000.0
IGNF:ELG108: IAG GRS 1967 6378160.0/6356774.5161
IGNF:ELG037: IAG GRS 1980 6378137.0/6356752.314140356
Iapetus2000: Iapetus2000 718000.0/718000.0
IGNF:ELG001: International-Hayford 1909 6378388.0/6356911.9461279465
Io2000: Io2000 1829400.0/1815700.0
Janus2000: Janus2000 97000.0/77000.0
Juliet2000: Juliet2000 42000.0/42000.0
Jupiter2000: Jupiter2000 71492000.0/66854000.0
Larissa2000: Larissa2000 96000.0/96000.0
Leda2000: Leda2000 5000.0/5000.0
Lysithea2000: Lysithea2000 12000.0/12000.0
Mars2000: Mars2000 3396190.0/3376200.0
Mercury2000: Mercury2000 2439700.0/2439700.0
Metis2000: Metis2000 21500.0/21500.0
Mimas2000: Mimas2000 209100.0/191400.0
Miranda2000: Miranda2000 240400.0/232900.0
Moon2000: Moon2000 1737400.0/1737400.0
Naiad2000: Naiad2000 29000.0/29000.0
Neptune2000: Neptune2000 24764000.0/24341000.0
Nereid2000: Nereid2000 170000.0/170000.0
Oberon2000: Oberon2000 761400.0/761400.0
Ophelia2000: Ophelia2000 15000.0/15000.0
IGNF:ELG017: PLESSIS 1817 6376523.0/6355862.933255573
Pan2000: Pan2000 10000.0/10000.0
Pandora2000: Pandora2000 55000.0/31000.0
Pasiphae2000: Pasiphae2000 18000.0/18000.0
Phobos2000: Phobos2000 13400.0/9200.0
Phoebe2000: Phoebe2000 115000.0/105000.0
Pluto2000: Pluto2000 1195000.0/1195000.0
Portia2000: Portia2000 54000.0/54000.0
Prometheus2000: Prometheus2000 74000.0/34000.0
Proteus2000: Proteus2000 218000.0/201000.0
Puck2000: Puck2000 77000.0/77000.0
Rhea2000: Rhea2000 764000.0/764000.0
Rosalind2000: Rosalind2000 27000.0/27000.0
IGNF:ELG032: SPHERE PICARD 6371598.0/6371598.0
Saturn2000: Saturn2000 60268000.0/54364000.0
Sinope2000: Sinope2000 14000.0/14000.0
Telesto2000: Telesto2000 15000.0/7500.0
Tethys2000: Tethys2000 535600.0/525800.0
Thalassa2000: Thalassa2000 40000.0/40000.0
Thebe2000: Thebe2000 58000.0/42000.0
Titan2000: Titan2000 2575000.0/2575000.0
Titania2000: Titania2000 788900.0/788900.0
Triton2000: Triton2000 1352600.0/1352600.0
Umbriel2000: Umbriel2000 584700.0/584700.0
Uranus2000: Uranus2000 25559000.0/24973000.0
Venus2000: Venus2000 6051800.0/6051800.0
IGNF:ELG052: WGS72 6378135.0/6356750.520016094
IGNF:ELG102: WGS72 (NWL-10F) 6378135.0/6356750.520016094
IGNF:ELG053: WGS84 6378137.0/6356752.314245179

The vast majority of these are planetary ellipsoids/moons, but there's
others which are less obvious (cape/IGNF*). So

Question 1: should the non-Earth ellipsoids be included in the proj database?

Question 2: What about cape/IGNF* ? Should they be included in proj,
or are they mistakes and should not even be included in the current
QGIS db?

Nyall

From kreve at sdfe.dk  Sun Mar 17 23:42:12 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 18 Mar 2019 06:42:12 +0000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
Message-ID: <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>

Hi Nyall,

I am very happy to see that you have started working on this!

You will probably get less discrepancies between the QGIS list of ellipsoids
and the PROJ equivalent if you instead use proj_get_codes_from_database<https://proj4.org/development/reference/functions.html#_CPPv328proj_get_codes_from_databaseP10PJ_CONTEXTPKc7PJ_TYPEi>
using type PJ_TYPE_ELLIPSOID<https://proj4.org/development/reference/datatypes.html#_CPPv3N14iso19111_types17PJ_TYPE_ELLIPSOIDE>. You should then be able to get the
parameters with proj_ellipsoid_get_parameters<https://proj4.org/development/reference/functions.html#_CPPv329proj_ellipsoid_get_parametersP10PJ_CONTEXTPK2PJPdPdPiPd>. This is untested on my part
but I believe that is the general workflow you have to go through to get the
ellipsoid out of proj.db.

proj_list_ellps() simply shows you the same list as you would get from calling
`proj -le`, i.e. ellipsoids that can be used with `+ellps=xxx` parameters. This
is confusing and I shall think of a way to change the docs so it is less confusing :-)

It would be interesting to see the difference between the ellipsoid tables from
The QGIS and PROJ databases.

/Kristian

On 18 Mar 2019, at 04:39, Nyall Dawson <nyall.dawson at gmail.com<mailto:nyall.dawson at gmail.com>> wrote:

Hi list,

So (thanks for sponsorship from the ICSM), I'm working on porting QGIS
to the Proj 6 API. I suspect I'll have many more questions (especially
as I attempt to drop QGIS' own custom projection database in favour of
the upstream proj one). Let's get started...

I thought I'd begin with a simple task of replacing QGIS' ellipsoid db
with proj's, using proj_list_ellps(). QGIS has this table of
"standard" ellipsoids, built up from... somewhere... in the vast
history of the QGIS project. When comparing against proj's db, it
includes many items which are missing in proj's:

Adrastea2000: Adrastea2000 10000.0/7000.0
Amalthea2000: Amalthea2000 125000.0/64000.0
Ananke2000: Ananke2000 10000.0/10000.0
Ariel2000: Ariel2000 581100.0/577700.0
Atlas2000: Atlas2000 18500.0/13500.0
Belinda2000: Belinda2000 33000.0/33000.0
Bianca2000: Bianca2000 21000.0/21000.0
Callisto2000: Callisto2000 2409400.0/2409300.0
Calypso2000: Calypso2000 15000.0/8000.0
Carme2000: Carme2000 15000.0/15000.0
Charon2000: Charon2000 593000.0/593000.0
IGNF:ELG004: Clarke 1866 6378206.4/6356583.799998981
IGNF:ELG003: Clarke 1880 Anglais 6378249.1453/6356514.8698
IGNF:ELG010: Clarke 1880 IGN 6378249.2/6356514.999978254
cape: Clarke 1880 mod. 6378249.145/6356514.966398753
Cordelia2000: Cordelia2000 13000.0/13000.0
Cressida2000: Cressida2000 31000.0/31000.0
Deimos2000: Deimos2000 7500.0/5200.0
Desdemona2000: Desdemona2000 27000.0/27000.0
Despina2000: Despina2000 74000.0/74000.0
Dione2000: Dione2000 560000.0/560000.0
Earth2000: Earth2000 6378140.0/6356750.0
Elara2000: Elara2000 40000.0/40000.0
Enceladus2000: Enceladus2000 256300.0/244600.0
Epimetheus2000: Epimetheus2000 69000.0/55000.0
Europa2000: Europa2000 1564130.0/1560930.0
Galatea2000: Galatea2000 79000.0/79000.0
Ganymede2000: Ganymede2000 2632400.0/2632350.0
Helene2000: Helene2000 16000.0/16000.0
Himalia2000: Himalia2000 85000.0/85000.0
Hyperion2000: Hyperion2000 164000.0/107000.0
IGNF:ELG108: IAG GRS 1967 6378160.0/6356774.5161
IGNF:ELG037: IAG GRS 1980 6378137.0/6356752.314140356
Iapetus2000: Iapetus2000 718000.0/718000.0
IGNF:ELG001: International-Hayford 1909 6378388.0/6356911.9461279465
Io2000: Io2000 1829400.0/1815700.0
Janus2000: Janus2000 97000.0/77000.0
Juliet2000: Juliet2000 42000.0/42000.0
Jupiter2000: Jupiter2000 71492000.0/66854000.0
Larissa2000: Larissa2000 96000.0/96000.0
Leda2000: Leda2000 5000.0/5000.0
Lysithea2000: Lysithea2000 12000.0/12000.0
Mars2000: Mars2000 3396190.0/3376200.0
Mercury2000: Mercury2000 2439700.0/2439700.0
Metis2000: Metis2000 21500.0/21500.0
Mimas2000: Mimas2000 209100.0/191400.0
Miranda2000: Miranda2000 240400.0/232900.0
Moon2000: Moon2000 1737400.0/1737400.0
Naiad2000: Naiad2000 29000.0/29000.0
Neptune2000: Neptune2000 24764000.0/24341000.0
Nereid2000: Nereid2000 170000.0/170000.0
Oberon2000: Oberon2000 761400.0/761400.0
Ophelia2000: Ophelia2000 15000.0/15000.0
IGNF:ELG017: PLESSIS 1817 6376523.0/6355862.933255573
Pan2000: Pan2000 10000.0/10000.0
Pandora2000: Pandora2000 55000.0/31000.0
Pasiphae2000: Pasiphae2000 18000.0/18000.0
Phobos2000: Phobos2000 13400.0/9200.0
Phoebe2000: Phoebe2000 115000.0/105000.0
Pluto2000: Pluto2000 1195000.0/1195000.0
Portia2000: Portia2000 54000.0/54000.0
Prometheus2000: Prometheus2000 74000.0/34000.0
Proteus2000: Proteus2000 218000.0/201000.0
Puck2000: Puck2000 77000.0/77000.0
Rhea2000: Rhea2000 764000.0/764000.0
Rosalind2000: Rosalind2000 27000.0/27000.0
IGNF:ELG032: SPHERE PICARD 6371598.0/6371598.0
Saturn2000: Saturn2000 60268000.0/54364000.0
Sinope2000: Sinope2000 14000.0/14000.0
Telesto2000: Telesto2000 15000.0/7500.0
Tethys2000: Tethys2000 535600.0/525800.0
Thalassa2000: Thalassa2000 40000.0/40000.0
Thebe2000: Thebe2000 58000.0/42000.0
Titan2000: Titan2000 2575000.0/2575000.0
Titania2000: Titania2000 788900.0/788900.0
Triton2000: Triton2000 1352600.0/1352600.0
Umbriel2000: Umbriel2000 584700.0/584700.0
Uranus2000: Uranus2000 25559000.0/24973000.0
Venus2000: Venus2000 6051800.0/6051800.0
IGNF:ELG052: WGS72 6378135.0/6356750.520016094
IGNF:ELG102: WGS72 (NWL-10F) 6378135.0/6356750.520016094
IGNF:ELG053: WGS84 6378137.0/6356752.314245179

The vast majority of these are planetary ellipsoids/moons, but there's
others which are less obvious (cape/IGNF*). So

Question 1: should the non-Earth ellipsoids be included in the proj database?

Question 2: What about cape/IGNF* ? Should they be included in proj,
or are they mistakes and should not even be included in the current
QGIS db?

Nyall
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190318/e02e8eee/attachment-0001.html>

From nyall.dawson at gmail.com  Sun Mar 17 23:52:43 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Mon, 18 Mar 2019 16:52:43 +1000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
Message-ID: <CAB28AsipCSyLgguNokYy=qC_R5Y0oMw7yF0WasFK7kk4JkUN8Q@mail.gmail.com>

On Mon, 18 Mar 2019 at 16:42, Kristian Evers <kreve at sdfe.dk> wrote:
>
> Hi Nyall,
>
> I am very happy to see that you have started working on this!
>
> You will probably get less discrepancies between the QGIS list of ellipsoids
> and the PROJ equivalent if you instead use proj_get_codes_from_database
> using type PJ_TYPE_ELLIPSOID.

What should I use as auth_name if I want to get ALL ellipsoids? The
dox state it must not be null...

Thanks for the detailed pointers, I'll let you know the result!

Nyall


>You should then be able to get the
> parameters with proj_ellipsoid_get_parameters. This is untested on my part
> but I believe that is the general workflow you have to go through to get the
> ellipsoid out of proj.db.
>
> proj_list_ellps() simply shows you the same list as you would get from calling
> `proj -le`, i.e. ellipsoids that can be used with `+ellps=xxx` parameters. This
> is confusing and I shall think of a way to change the docs so it is less confusing :-)
>
> It would be interesting to see the difference between the ellipsoid tables from
> The QGIS and PROJ databases.
>
> /Kristian
>
> On 18 Mar 2019, at 04:39, Nyall Dawson <nyall.dawson at gmail.com> wrote:
>
> Hi list,
>
> So (thanks for sponsorship from the ICSM), I'm working on porting QGIS
> to the Proj 6 API. I suspect I'll have many more questions (especially
> as I attempt to drop QGIS' own custom projection database in favour of
> the upstream proj one). Let's get started...
>
> I thought I'd begin with a simple task of replacing QGIS' ellipsoid db
> with proj's, using proj_list_ellps(). QGIS has this table of
> "standard" ellipsoids, built up from... somewhere... in the vast
> history of the QGIS project. When comparing against proj's db, it
> includes many items which are missing in proj's:
>
> Adrastea2000: Adrastea2000 10000.0/7000.0
> Amalthea2000: Amalthea2000 125000.0/64000.0
> Ananke2000: Ananke2000 10000.0/10000.0
> Ariel2000: Ariel2000 581100.0/577700.0
> Atlas2000: Atlas2000 18500.0/13500.0
> Belinda2000: Belinda2000 33000.0/33000.0
> Bianca2000: Bianca2000 21000.0/21000.0
> Callisto2000: Callisto2000 2409400.0/2409300.0
> Calypso2000: Calypso2000 15000.0/8000.0
> Carme2000: Carme2000 15000.0/15000.0
> Charon2000: Charon2000 593000.0/593000.0
> IGNF:ELG004: Clarke 1866 6378206.4/6356583.799998981
> IGNF:ELG003: Clarke 1880 Anglais 6378249.1453/6356514.8698
> IGNF:ELG010: Clarke 1880 IGN 6378249.2/6356514.999978254
> cape: Clarke 1880 mod. 6378249.145/6356514.966398753
> Cordelia2000: Cordelia2000 13000.0/13000.0
> Cressida2000: Cressida2000 31000.0/31000.0
> Deimos2000: Deimos2000 7500.0/5200.0
> Desdemona2000: Desdemona2000 27000.0/27000.0
> Despina2000: Despina2000 74000.0/74000.0
> Dione2000: Dione2000 560000.0/560000.0
> Earth2000: Earth2000 6378140.0/6356750.0
> Elara2000: Elara2000 40000.0/40000.0
> Enceladus2000: Enceladus2000 256300.0/244600.0
> Epimetheus2000: Epimetheus2000 69000.0/55000.0
> Europa2000: Europa2000 1564130.0/1560930.0
> Galatea2000: Galatea2000 79000.0/79000.0
> Ganymede2000: Ganymede2000 2632400.0/2632350.0
> Helene2000: Helene2000 16000.0/16000.0
> Himalia2000: Himalia2000 85000.0/85000.0
> Hyperion2000: Hyperion2000 164000.0/107000.0
> IGNF:ELG108: IAG GRS 1967 6378160.0/6356774.5161
> IGNF:ELG037: IAG GRS 1980 6378137.0/6356752.314140356
> Iapetus2000: Iapetus2000 718000.0/718000.0
> IGNF:ELG001: International-Hayford 1909 6378388.0/6356911.9461279465
> Io2000: Io2000 1829400.0/1815700.0
> Janus2000: Janus2000 97000.0/77000.0
> Juliet2000: Juliet2000 42000.0/42000.0
> Jupiter2000: Jupiter2000 71492000.0/66854000.0
> Larissa2000: Larissa2000 96000.0/96000.0
> Leda2000: Leda2000 5000.0/5000.0
> Lysithea2000: Lysithea2000 12000.0/12000.0
> Mars2000: Mars2000 3396190.0/3376200.0
> Mercury2000: Mercury2000 2439700.0/2439700.0
> Metis2000: Metis2000 21500.0/21500.0
> Mimas2000: Mimas2000 209100.0/191400.0
> Miranda2000: Miranda2000 240400.0/232900.0
> Moon2000: Moon2000 1737400.0/1737400.0
> Naiad2000: Naiad2000 29000.0/29000.0
> Neptune2000: Neptune2000 24764000.0/24341000.0
> Nereid2000: Nereid2000 170000.0/170000.0
> Oberon2000: Oberon2000 761400.0/761400.0
> Ophelia2000: Ophelia2000 15000.0/15000.0
> IGNF:ELG017: PLESSIS 1817 6376523.0/6355862.933255573
> Pan2000: Pan2000 10000.0/10000.0
> Pandora2000: Pandora2000 55000.0/31000.0
> Pasiphae2000: Pasiphae2000 18000.0/18000.0
> Phobos2000: Phobos2000 13400.0/9200.0
> Phoebe2000: Phoebe2000 115000.0/105000.0
> Pluto2000: Pluto2000 1195000.0/1195000.0
> Portia2000: Portia2000 54000.0/54000.0
> Prometheus2000: Prometheus2000 74000.0/34000.0
> Proteus2000: Proteus2000 218000.0/201000.0
> Puck2000: Puck2000 77000.0/77000.0
> Rhea2000: Rhea2000 764000.0/764000.0
> Rosalind2000: Rosalind2000 27000.0/27000.0
> IGNF:ELG032: SPHERE PICARD 6371598.0/6371598.0
> Saturn2000: Saturn2000 60268000.0/54364000.0
> Sinope2000: Sinope2000 14000.0/14000.0
> Telesto2000: Telesto2000 15000.0/7500.0
> Tethys2000: Tethys2000 535600.0/525800.0
> Thalassa2000: Thalassa2000 40000.0/40000.0
> Thebe2000: Thebe2000 58000.0/42000.0
> Titan2000: Titan2000 2575000.0/2575000.0
> Titania2000: Titania2000 788900.0/788900.0
> Triton2000: Triton2000 1352600.0/1352600.0
> Umbriel2000: Umbriel2000 584700.0/584700.0
> Uranus2000: Uranus2000 25559000.0/24973000.0
> Venus2000: Venus2000 6051800.0/6051800.0
> IGNF:ELG052: WGS72 6378135.0/6356750.520016094
> IGNF:ELG102: WGS72 (NWL-10F) 6378135.0/6356750.520016094
> IGNF:ELG053: WGS84 6378137.0/6356752.314245179
>
> The vast majority of these are planetary ellipsoids/moons, but there's
> others which are less obvious (cape/IGNF*). So
>
> Question 1: should the non-Earth ellipsoids be included in the proj database?
>
> Question 2: What about cape/IGNF* ? Should they be included in proj,
> or are they mistakes and should not even be included in the current
> QGIS db?
>
> Nyall
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
>

From kreve at sdfe.dk  Sun Mar 17 23:56:45 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 18 Mar 2019 06:56:45 +0000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <CAB28AsipCSyLgguNokYy=qC_R5Y0oMw7yF0WasFK7kk4JkUN8Q@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
 <CAB28AsipCSyLgguNokYy=qC_R5Y0oMw7yF0WasFK7kk4JkUN8Q@mail.gmail.com>
Message-ID: <5D8ADDC3-9D77-4772-9A56-EB961C009FBD@sdfe.dk>

You use proj_get_authorities_from_database() for that. Generally there’s functions
for retrieving all info like that, just search around in the function reference a bit and you’ll
find it.

/Kristian

On 18 Mar 2019, at 07:52, Nyall Dawson <nyall.dawson at gmail.com<mailto:nyall.dawson at gmail.com>> wrote:

On Mon, 18 Mar 2019 at 16:42, Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:

Hi Nyall,

I am very happy to see that you have started working on this!

You will probably get less discrepancies between the QGIS list of ellipsoids
and the PROJ equivalent if you instead use proj_get_codes_from_database
using type PJ_TYPE_ELLIPSOID.

What should I use as auth_name if I want to get ALL ellipsoids? The
dox state it must not be null...

Thanks for the detailed pointers, I'll let you know the result!

Nyall


You should then be able to get the
parameters with proj_ellipsoid_get_parameters. This is untested on my part
but I believe that is the general workflow you have to go through to get the
ellipsoid out of proj.db.

proj_list_ellps() simply shows you the same list as you would get from calling
`proj -le`, i.e. ellipsoids that can be used with `+ellps=xxx` parameters. This
is confusing and I shall think of a way to change the docs so it is less confusing :-)

It would be interesting to see the difference between the ellipsoid tables from
The QGIS and PROJ databases.

/Kristian

On 18 Mar 2019, at 04:39, Nyall Dawson <nyall.dawson at gmail.com<mailto:nyall.dawson at gmail.com>> wrote:

Hi list,

So (thanks for sponsorship from the ICSM), I'm working on porting QGIS
to the Proj 6 API. I suspect I'll have many more questions (especially
as I attempt to drop QGIS' own custom projection database in favour of
the upstream proj one). Let's get started...

I thought I'd begin with a simple task of replacing QGIS' ellipsoid db
with proj's, using proj_list_ellps(). QGIS has this table of
"standard" ellipsoids, built up from... somewhere... in the vast
history of the QGIS project. When comparing against proj's db, it
includes many items which are missing in proj's:

Adrastea2000: Adrastea2000 10000.0/7000.0
Amalthea2000: Amalthea2000 125000.0/64000.0
Ananke2000: Ananke2000 10000.0/10000.0
Ariel2000: Ariel2000 581100.0/577700.0
Atlas2000: Atlas2000 18500.0/13500.0
Belinda2000: Belinda2000 33000.0/33000.0
Bianca2000: Bianca2000 21000.0/21000.0
Callisto2000: Callisto2000 2409400.0/2409300.0
Calypso2000: Calypso2000 15000.0/8000.0
Carme2000: Carme2000 15000.0/15000.0
Charon2000: Charon2000 593000.0/593000.0
IGNF:ELG004: Clarke 1866 6378206.4/6356583.799998981
IGNF:ELG003: Clarke 1880 Anglais 6378249.1453/6356514.8698
IGNF:ELG010: Clarke 1880 IGN 6378249.2/6356514.999978254
cape: Clarke 1880 mod. 6378249.145/6356514.966398753
Cordelia2000: Cordelia2000 13000.0/13000.0
Cressida2000: Cressida2000 31000.0/31000.0
Deimos2000: Deimos2000 7500.0/5200.0
Desdemona2000: Desdemona2000 27000.0/27000.0
Despina2000: Despina2000 74000.0/74000.0
Dione2000: Dione2000 560000.0/560000.0
Earth2000: Earth2000 6378140.0/6356750.0
Elara2000: Elara2000 40000.0/40000.0
Enceladus2000: Enceladus2000 256300.0/244600.0
Epimetheus2000: Epimetheus2000 69000.0/55000.0
Europa2000: Europa2000 1564130.0/1560930.0
Galatea2000: Galatea2000 79000.0/79000.0
Ganymede2000: Ganymede2000 2632400.0/2632350.0
Helene2000: Helene2000 16000.0/16000.0
Himalia2000: Himalia2000 85000.0/85000.0
Hyperion2000: Hyperion2000 164000.0/107000.0
IGNF:ELG108: IAG GRS 1967 6378160.0/6356774.5161
IGNF:ELG037: IAG GRS 1980 6378137.0/6356752.314140356
Iapetus2000: Iapetus2000 718000.0/718000.0
IGNF:ELG001: International-Hayford 1909 6378388.0/6356911.9461279465
Io2000: Io2000 1829400.0/1815700.0
Janus2000: Janus2000 97000.0/77000.0
Juliet2000: Juliet2000 42000.0/42000.0
Jupiter2000: Jupiter2000 71492000.0/66854000.0
Larissa2000: Larissa2000 96000.0/96000.0
Leda2000: Leda2000 5000.0/5000.0
Lysithea2000: Lysithea2000 12000.0/12000.0
Mars2000: Mars2000 3396190.0/3376200.0
Mercury2000: Mercury2000 2439700.0/2439700.0
Metis2000: Metis2000 21500.0/21500.0
Mimas2000: Mimas2000 209100.0/191400.0
Miranda2000: Miranda2000 240400.0/232900.0
Moon2000: Moon2000 1737400.0/1737400.0
Naiad2000: Naiad2000 29000.0/29000.0
Neptune2000: Neptune2000 24764000.0/24341000.0
Nereid2000: Nereid2000 170000.0/170000.0
Oberon2000: Oberon2000 761400.0/761400.0
Ophelia2000: Ophelia2000 15000.0/15000.0
IGNF:ELG017: PLESSIS 1817 6376523.0/6355862.933255573
Pan2000: Pan2000 10000.0/10000.0
Pandora2000: Pandora2000 55000.0/31000.0
Pasiphae2000: Pasiphae2000 18000.0/18000.0
Phobos2000: Phobos2000 13400.0/9200.0
Phoebe2000: Phoebe2000 115000.0/105000.0
Pluto2000: Pluto2000 1195000.0/1195000.0
Portia2000: Portia2000 54000.0/54000.0
Prometheus2000: Prometheus2000 74000.0/34000.0
Proteus2000: Proteus2000 218000.0/201000.0
Puck2000: Puck2000 77000.0/77000.0
Rhea2000: Rhea2000 764000.0/764000.0
Rosalind2000: Rosalind2000 27000.0/27000.0
IGNF:ELG032: SPHERE PICARD 6371598.0/6371598.0
Saturn2000: Saturn2000 60268000.0/54364000.0
Sinope2000: Sinope2000 14000.0/14000.0
Telesto2000: Telesto2000 15000.0/7500.0
Tethys2000: Tethys2000 535600.0/525800.0
Thalassa2000: Thalassa2000 40000.0/40000.0
Thebe2000: Thebe2000 58000.0/42000.0
Titan2000: Titan2000 2575000.0/2575000.0
Titania2000: Titania2000 788900.0/788900.0
Triton2000: Triton2000 1352600.0/1352600.0
Umbriel2000: Umbriel2000 584700.0/584700.0
Uranus2000: Uranus2000 25559000.0/24973000.0
Venus2000: Venus2000 6051800.0/6051800.0
IGNF:ELG052: WGS72 6378135.0/6356750.520016094
IGNF:ELG102: WGS72 (NWL-10F) 6378135.0/6356750.520016094
IGNF:ELG053: WGS84 6378137.0/6356752.314245179

The vast majority of these are planetary ellipsoids/moons, but there's
others which are less obvious (cape/IGNF*). So

Question 1: should the non-Earth ellipsoids be included in the proj database?

Question 2: What about cape/IGNF* ? Should they be included in proj,
or are they mistakes and should not even be included in the current
QGIS db?

Nyall
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj


_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190318/0f29e6bc/attachment-0001.html>

From nyall.dawson at gmail.com  Mon Mar 18 00:27:07 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Mon, 18 Mar 2019 17:27:07 +1000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <5D8ADDC3-9D77-4772-9A56-EB961C009FBD@sdfe.dk>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
 <CAB28AsipCSyLgguNokYy=qC_R5Y0oMw7yF0WasFK7kk4JkUN8Q@mail.gmail.com>
 <5D8ADDC3-9D77-4772-9A56-EB961C009FBD@sdfe.dk>
Message-ID: <CAB28AsimhXiSBk9Y+z5C9VHDHfsOYMTbj+WsavEVkgeXZhpc5Q@mail.gmail.com>

On Mon, 18 Mar 2019 at 16:56, Kristian Evers <kreve at sdfe.dk> wrote:
>
> You use proj_get_authorities_from_database() for that. Generally there’s functions
> for retrieving all info like that, just search around in the function reference a bit and you’ll
> find it.

Ok, that part is working, and I'm seeing a LOT more! But now I'm a bit
confused... if I use this approach to iterate through the ellipsoids,
is there anyway to get the ellipsoid acronym from them? Using
proj_list_ellps I could get PJ_ELLPS->id.

Nyall



>
> /Kristian
>
> On 18 Mar 2019, at 07:52, Nyall Dawson <nyall.dawson at gmail.com> wrote:
>
> On Mon, 18 Mar 2019 at 16:42, Kristian Evers <kreve at sdfe.dk> wrote:
>
>
> Hi Nyall,
>
> I am very happy to see that you have started working on this!
>
> You will probably get less discrepancies between the QGIS list of ellipsoids
> and the PROJ equivalent if you instead use proj_get_codes_from_database
> using type PJ_TYPE_ELLIPSOID.
>
>
> What should I use as auth_name if I want to get ALL ellipsoids? The
> dox state it must not be null...
>
> Thanks for the detailed pointers, I'll let you know the result!
>
> Nyall
>
>
> You should then be able to get the
> parameters with proj_ellipsoid_get_parameters. This is untested on my part
> but I believe that is the general workflow you have to go through to get the
> ellipsoid out of proj.db.
>
> proj_list_ellps() simply shows you the same list as you would get from calling
> `proj -le`, i.e. ellipsoids that can be used with `+ellps=xxx` parameters. This
> is confusing and I shall think of a way to change the docs so it is less confusing :-)
>
> It would be interesting to see the difference between the ellipsoid tables from
> The QGIS and PROJ databases.
>
> /Kristian
>
> On 18 Mar 2019, at 04:39, Nyall Dawson <nyall.dawson at gmail.com> wrote:
>
> Hi list,
>
> So (thanks for sponsorship from the ICSM), I'm working on porting QGIS
> to the Proj 6 API. I suspect I'll have many more questions (especially
> as I attempt to drop QGIS' own custom projection database in favour of
> the upstream proj one). Let's get started...
>
> I thought I'd begin with a simple task of replacing QGIS' ellipsoid db
> with proj's, using proj_list_ellps(). QGIS has this table of
> "standard" ellipsoids, built up from... somewhere... in the vast
> history of the QGIS project. When comparing against proj's db, it
> includes many items which are missing in proj's:
>
> Adrastea2000: Adrastea2000 10000.0/7000.0
> Amalthea2000: Amalthea2000 125000.0/64000.0
> Ananke2000: Ananke2000 10000.0/10000.0
> Ariel2000: Ariel2000 581100.0/577700.0
> Atlas2000: Atlas2000 18500.0/13500.0
> Belinda2000: Belinda2000 33000.0/33000.0
> Bianca2000: Bianca2000 21000.0/21000.0
> Callisto2000: Callisto2000 2409400.0/2409300.0
> Calypso2000: Calypso2000 15000.0/8000.0
> Carme2000: Carme2000 15000.0/15000.0
> Charon2000: Charon2000 593000.0/593000.0
> IGNF:ELG004: Clarke 1866 6378206.4/6356583.799998981
> IGNF:ELG003: Clarke 1880 Anglais 6378249.1453/6356514.8698
> IGNF:ELG010: Clarke 1880 IGN 6378249.2/6356514.999978254
> cape: Clarke 1880 mod. 6378249.145/6356514.966398753
> Cordelia2000: Cordelia2000 13000.0/13000.0
> Cressida2000: Cressida2000 31000.0/31000.0
> Deimos2000: Deimos2000 7500.0/5200.0
> Desdemona2000: Desdemona2000 27000.0/27000.0
> Despina2000: Despina2000 74000.0/74000.0
> Dione2000: Dione2000 560000.0/560000.0
> Earth2000: Earth2000 6378140.0/6356750.0
> Elara2000: Elara2000 40000.0/40000.0
> Enceladus2000: Enceladus2000 256300.0/244600.0
> Epimetheus2000: Epimetheus2000 69000.0/55000.0
> Europa2000: Europa2000 1564130.0/1560930.0
> Galatea2000: Galatea2000 79000.0/79000.0
> Ganymede2000: Ganymede2000 2632400.0/2632350.0
> Helene2000: Helene2000 16000.0/16000.0
> Himalia2000: Himalia2000 85000.0/85000.0
> Hyperion2000: Hyperion2000 164000.0/107000.0
> IGNF:ELG108: IAG GRS 1967 6378160.0/6356774.5161
> IGNF:ELG037: IAG GRS 1980 6378137.0/6356752.314140356
> Iapetus2000: Iapetus2000 718000.0/718000.0
> IGNF:ELG001: International-Hayford 1909 6378388.0/6356911.9461279465
> Io2000: Io2000 1829400.0/1815700.0
> Janus2000: Janus2000 97000.0/77000.0
> Juliet2000: Juliet2000 42000.0/42000.0
> Jupiter2000: Jupiter2000 71492000.0/66854000.0
> Larissa2000: Larissa2000 96000.0/96000.0
> Leda2000: Leda2000 5000.0/5000.0
> Lysithea2000: Lysithea2000 12000.0/12000.0
> Mars2000: Mars2000 3396190.0/3376200.0
> Mercury2000: Mercury2000 2439700.0/2439700.0
> Metis2000: Metis2000 21500.0/21500.0
> Mimas2000: Mimas2000 209100.0/191400.0
> Miranda2000: Miranda2000 240400.0/232900.0
> Moon2000: Moon2000 1737400.0/1737400.0
> Naiad2000: Naiad2000 29000.0/29000.0
> Neptune2000: Neptune2000 24764000.0/24341000.0
> Nereid2000: Nereid2000 170000.0/170000.0
> Oberon2000: Oberon2000 761400.0/761400.0
> Ophelia2000: Ophelia2000 15000.0/15000.0
> IGNF:ELG017: PLESSIS 1817 6376523.0/6355862.933255573
> Pan2000: Pan2000 10000.0/10000.0
> Pandora2000: Pandora2000 55000.0/31000.0
> Pasiphae2000: Pasiphae2000 18000.0/18000.0
> Phobos2000: Phobos2000 13400.0/9200.0
> Phoebe2000: Phoebe2000 115000.0/105000.0
> Pluto2000: Pluto2000 1195000.0/1195000.0
> Portia2000: Portia2000 54000.0/54000.0
> Prometheus2000: Prometheus2000 74000.0/34000.0
> Proteus2000: Proteus2000 218000.0/201000.0
> Puck2000: Puck2000 77000.0/77000.0
> Rhea2000: Rhea2000 764000.0/764000.0
> Rosalind2000: Rosalind2000 27000.0/27000.0
> IGNF:ELG032: SPHERE PICARD 6371598.0/6371598.0
> Saturn2000: Saturn2000 60268000.0/54364000.0
> Sinope2000: Sinope2000 14000.0/14000.0
> Telesto2000: Telesto2000 15000.0/7500.0
> Tethys2000: Tethys2000 535600.0/525800.0
> Thalassa2000: Thalassa2000 40000.0/40000.0
> Thebe2000: Thebe2000 58000.0/42000.0
> Titan2000: Titan2000 2575000.0/2575000.0
> Titania2000: Titania2000 788900.0/788900.0
> Triton2000: Triton2000 1352600.0/1352600.0
> Umbriel2000: Umbriel2000 584700.0/584700.0
> Uranus2000: Uranus2000 25559000.0/24973000.0
> Venus2000: Venus2000 6051800.0/6051800.0
> IGNF:ELG052: WGS72 6378135.0/6356750.520016094
> IGNF:ELG102: WGS72 (NWL-10F) 6378135.0/6356750.520016094
> IGNF:ELG053: WGS84 6378137.0/6356752.314245179
>
> The vast majority of these are planetary ellipsoids/moons, but there's
> others which are less obvious (cape/IGNF*). So
>
> Question 1: should the non-Earth ellipsoids be included in the proj database?
>
> Question 2: What about cape/IGNF* ? Should they be included in proj,
> or are they mistakes and should not even be included in the current
> QGIS db?
>
> Nyall
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
>

From kreve at sdfe.dk  Mon Mar 18 00:34:25 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 18 Mar 2019 07:34:25 +0000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <CAB28AsimhXiSBk9Y+z5C9VHDHfsOYMTbj+WsavEVkgeXZhpc5Q@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
 <CAB28AsipCSyLgguNokYy=qC_R5Y0oMw7yF0WasFK7kk4JkUN8Q@mail.gmail.com>
 <5D8ADDC3-9D77-4772-9A56-EB961C009FBD@sdfe.dk>
 <CAB28AsimhXiSBk9Y+z5C9VHDHfsOYMTbj+WsavEVkgeXZhpc5Q@mail.gmail.com>
Message-ID: <8B0750B6-7DCA-4F5A-9F06-0FBBD1AD2A22@sdfe.dk>

I may be wrong but I don’t think there are acronyms for them. It’s based
on the EPSG dataset and acronyms are not assigned in that regime. Do
you actually need them or is this just so that it fits better in existing QGIS
infrastructure?

We could potentially assign acronyms for all ellipsoids but I fear that will
become a maintenance mess whenever the EPSG dataset is updated.

/Kristian 

> On 18 Mar 2019, at 08:27, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> 
> On Mon, 18 Mar 2019 at 16:56, Kristian Evers <kreve at sdfe.dk> wrote:
>> 
>> You use proj_get_authorities_from_database() for that. Generally there’s functions
>> for retrieving all info like that, just search around in the function reference a bit and you’ll
>> find it.
> 
> Ok, that part is working, and I'm seeing a LOT more! But now I'm a bit
> confused... if I use this approach to iterate through the ellipsoids,
> is there anyway to get the ellipsoid acronym from them? Using
> proj_list_ellps I could get PJ_ELLPS->id.
> 
> Nyall
> 
> 
> 
>> 
>> /Kristian
>> 
>> On 18 Mar 2019, at 07:52, Nyall Dawson <nyall.dawson at gmail.com> wrote:
>> 
>> On Mon, 18 Mar 2019 at 16:42, Kristian Evers <kreve at sdfe.dk> wrote:
>> 
>> 
>> Hi Nyall,
>> 
>> I am very happy to see that you have started working on this!
>> 
>> You will probably get less discrepancies between the QGIS list of ellipsoids
>> and the PROJ equivalent if you instead use proj_get_codes_from_database
>> using type PJ_TYPE_ELLIPSOID.
>> 
>> 
>> What should I use as auth_name if I want to get ALL ellipsoids? The
>> dox state it must not be null...
>> 
>> Thanks for the detailed pointers, I'll let you know the result!
>> 
>> Nyall
>> 
>> 
>> You should then be able to get the
>> parameters with proj_ellipsoid_get_parameters. This is untested on my part
>> but I believe that is the general workflow you have to go through to get the
>> ellipsoid out of proj.db.
>> 
>> proj_list_ellps() simply shows you the same list as you would get from calling
>> `proj -le`, i.e. ellipsoids that can be used with `+ellps=xxx` parameters. This
>> is confusing and I shall think of a way to change the docs so it is less confusing :-)
>> 
>> It would be interesting to see the difference between the ellipsoid tables from
>> The QGIS and PROJ databases.
>> 
>> /Kristian
>> 
>> On 18 Mar 2019, at 04:39, Nyall Dawson <nyall.dawson at gmail.com> wrote:
>> 
>> Hi list,
>> 
>> So (thanks for sponsorship from the ICSM), I'm working on porting QGIS
>> to the Proj 6 API. I suspect I'll have many more questions (especially
>> as I attempt to drop QGIS' own custom projection database in favour of
>> the upstream proj one). Let's get started...
>> 
>> I thought I'd begin with a simple task of replacing QGIS' ellipsoid db
>> with proj's, using proj_list_ellps(). QGIS has this table of
>> "standard" ellipsoids, built up from... somewhere... in the vast
>> history of the QGIS project. When comparing against proj's db, it
>> includes many items which are missing in proj's:
>> 
>> Adrastea2000: Adrastea2000 10000.0/7000.0
>> Amalthea2000: Amalthea2000 125000.0/64000.0
>> Ananke2000: Ananke2000 10000.0/10000.0
>> Ariel2000: Ariel2000 581100.0/577700.0
>> Atlas2000: Atlas2000 18500.0/13500.0
>> Belinda2000: Belinda2000 33000.0/33000.0
>> Bianca2000: Bianca2000 21000.0/21000.0
>> Callisto2000: Callisto2000 2409400.0/2409300.0
>> Calypso2000: Calypso2000 15000.0/8000.0
>> Carme2000: Carme2000 15000.0/15000.0
>> Charon2000: Charon2000 593000.0/593000.0
>> IGNF:ELG004: Clarke 1866 6378206.4/6356583.799998981
>> IGNF:ELG003: Clarke 1880 Anglais 6378249.1453/6356514.8698
>> IGNF:ELG010: Clarke 1880 IGN 6378249.2/6356514.999978254
>> cape: Clarke 1880 mod. 6378249.145/6356514.966398753
>> Cordelia2000: Cordelia2000 13000.0/13000.0
>> Cressida2000: Cressida2000 31000.0/31000.0
>> Deimos2000: Deimos2000 7500.0/5200.0
>> Desdemona2000: Desdemona2000 27000.0/27000.0
>> Despina2000: Despina2000 74000.0/74000.0
>> Dione2000: Dione2000 560000.0/560000.0
>> Earth2000: Earth2000 6378140.0/6356750.0
>> Elara2000: Elara2000 40000.0/40000.0
>> Enceladus2000: Enceladus2000 256300.0/244600.0
>> Epimetheus2000: Epimetheus2000 69000.0/55000.0
>> Europa2000: Europa2000 1564130.0/1560930.0
>> Galatea2000: Galatea2000 79000.0/79000.0
>> Ganymede2000: Ganymede2000 2632400.0/2632350.0
>> Helene2000: Helene2000 16000.0/16000.0
>> Himalia2000: Himalia2000 85000.0/85000.0
>> Hyperion2000: Hyperion2000 164000.0/107000.0
>> IGNF:ELG108: IAG GRS 1967 6378160.0/6356774.5161
>> IGNF:ELG037: IAG GRS 1980 6378137.0/6356752.314140356
>> Iapetus2000: Iapetus2000 718000.0/718000.0
>> IGNF:ELG001: International-Hayford 1909 6378388.0/6356911.9461279465
>> Io2000: Io2000 1829400.0/1815700.0
>> Janus2000: Janus2000 97000.0/77000.0
>> Juliet2000: Juliet2000 42000.0/42000.0
>> Jupiter2000: Jupiter2000 71492000.0/66854000.0
>> Larissa2000: Larissa2000 96000.0/96000.0
>> Leda2000: Leda2000 5000.0/5000.0
>> Lysithea2000: Lysithea2000 12000.0/12000.0
>> Mars2000: Mars2000 3396190.0/3376200.0
>> Mercury2000: Mercury2000 2439700.0/2439700.0
>> Metis2000: Metis2000 21500.0/21500.0
>> Mimas2000: Mimas2000 209100.0/191400.0
>> Miranda2000: Miranda2000 240400.0/232900.0
>> Moon2000: Moon2000 1737400.0/1737400.0
>> Naiad2000: Naiad2000 29000.0/29000.0
>> Neptune2000: Neptune2000 24764000.0/24341000.0
>> Nereid2000: Nereid2000 170000.0/170000.0
>> Oberon2000: Oberon2000 761400.0/761400.0
>> Ophelia2000: Ophelia2000 15000.0/15000.0
>> IGNF:ELG017: PLESSIS 1817 6376523.0/6355862.933255573
>> Pan2000: Pan2000 10000.0/10000.0
>> Pandora2000: Pandora2000 55000.0/31000.0
>> Pasiphae2000: Pasiphae2000 18000.0/18000.0
>> Phobos2000: Phobos2000 13400.0/9200.0
>> Phoebe2000: Phoebe2000 115000.0/105000.0
>> Pluto2000: Pluto2000 1195000.0/1195000.0
>> Portia2000: Portia2000 54000.0/54000.0
>> Prometheus2000: Prometheus2000 74000.0/34000.0
>> Proteus2000: Proteus2000 218000.0/201000.0
>> Puck2000: Puck2000 77000.0/77000.0
>> Rhea2000: Rhea2000 764000.0/764000.0
>> Rosalind2000: Rosalind2000 27000.0/27000.0
>> IGNF:ELG032: SPHERE PICARD 6371598.0/6371598.0
>> Saturn2000: Saturn2000 60268000.0/54364000.0
>> Sinope2000: Sinope2000 14000.0/14000.0
>> Telesto2000: Telesto2000 15000.0/7500.0
>> Tethys2000: Tethys2000 535600.0/525800.0
>> Thalassa2000: Thalassa2000 40000.0/40000.0
>> Thebe2000: Thebe2000 58000.0/42000.0
>> Titan2000: Titan2000 2575000.0/2575000.0
>> Titania2000: Titania2000 788900.0/788900.0
>> Triton2000: Triton2000 1352600.0/1352600.0
>> Umbriel2000: Umbriel2000 584700.0/584700.0
>> Uranus2000: Uranus2000 25559000.0/24973000.0
>> Venus2000: Venus2000 6051800.0/6051800.0
>> IGNF:ELG052: WGS72 6378135.0/6356750.520016094
>> IGNF:ELG102: WGS72 (NWL-10F) 6378135.0/6356750.520016094
>> IGNF:ELG053: WGS84 6378137.0/6356752.314245179
>> 
>> The vast majority of these are planetary ellipsoids/moons, but there's
>> others which are less obvious (cape/IGNF*). So
>> 
>> Question 1: should the non-Earth ellipsoids be included in the proj database?
>> 
>> Question 2: What about cape/IGNF* ? Should they be included in proj,
>> or are they mistakes and should not even be included in the current
>> QGIS db?
>> 
>> Nyall
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
>> 
>> 
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
>> 
>> 


From nyall.dawson at gmail.com  Mon Mar 18 02:40:13 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Mon, 18 Mar 2019 19:40:13 +1000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <8B0750B6-7DCA-4F5A-9F06-0FBBD1AD2A22@sdfe.dk>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
 <CAB28AsipCSyLgguNokYy=qC_R5Y0oMw7yF0WasFK7kk4JkUN8Q@mail.gmail.com>
 <5D8ADDC3-9D77-4772-9A56-EB961C009FBD@sdfe.dk>
 <CAB28AsimhXiSBk9Y+z5C9VHDHfsOYMTbj+WsavEVkgeXZhpc5Q@mail.gmail.com>
 <8B0750B6-7DCA-4F5A-9F06-0FBBD1AD2A22@sdfe.dk>
Message-ID: <CAB28AsiW18bZvUKXigcOv_509CYOhgsMxTeyjgUJmofWUkOLvw@mail.gmail.com>

On Mon, 18 Mar 2019 at 17:34, Kristian Evers <kreve at sdfe.dk> wrote:
>
> I may be wrong but I don’t think there are acronyms for them. It’s based
> on the EPSG dataset and acronyms are not assigned in that regime. Do
> you actually need them or is this just so that it fits better in existing QGIS
> infrastructure?

There's two things QGIS uses this for:

1. When a user selects the CRS for their project, the project
ellipsoid (used when calculating geodetic distances/areas for the
project) is automatically set to match the ellipsoid corresponding to
this CRS. i.e. select EPSG:28356 and the project ellipsoid is set to
GRS80, set it to EPSG:102013 and you get International 1909.  So we
need a way to get the ellipsoid from an acronym (or alternatively,
directly from a CRS).

2. When performing geodetic distance/area calculations, QGIS
transforms coordinates from the layer's source CRS to a crs crafted
from "+proj=longlat +ellps=XXXXX +nodefs", and then uses the result
when performing the geodetic calculations. So we need a way to obtain
the ellipsoid acronym given an ellipsoid definition (where a
corresponding one exists).

(Full disclaimer: I'm not fully aware of the background behind this
logic, and there may be superior logic to follow. Let me know if you
think there is!)

Nyall


>
> We could potentially assign acronyms for all ellipsoids but I fear that will
> become a maintenance mess whenever the EPSG dataset is updated.
>
> /Kristian
>
> > On 18 Mar 2019, at 08:27, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> >
> > On Mon, 18 Mar 2019 at 16:56, Kristian Evers <kreve at sdfe.dk> wrote:
> >>
> >> You use proj_get_authorities_from_database() for that. Generally there’s functions
> >> for retrieving all info like that, just search around in the function reference a bit and you’ll
> >> find it.
> >
> > Ok, that part is working, and I'm seeing a LOT more! But now I'm a bit
> > confused... if I use this approach to iterate through the ellipsoids,
> > is there anyway to get the ellipsoid acronym from them? Using
> > proj_list_ellps I could get PJ_ELLPS->id.
> >
> > Nyall
> >
> >
> >
> >>
> >> /Kristian
> >>
> >> On 18 Mar 2019, at 07:52, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> >>
> >> On Mon, 18 Mar 2019 at 16:42, Kristian Evers <kreve at sdfe.dk> wrote:
> >>
> >>
> >> Hi Nyall,
> >>
> >> I am very happy to see that you have started working on this!
> >>
> >> You will probably get less discrepancies between the QGIS list of ellipsoids
> >> and the PROJ equivalent if you instead use proj_get_codes_from_database
> >> using type PJ_TYPE_ELLIPSOID.
> >>
> >>
> >> What should I use as auth_name if I want to get ALL ellipsoids? The
> >> dox state it must not be null...
> >>
> >> Thanks for the detailed pointers, I'll let you know the result!
> >>
> >> Nyall
> >>
> >>
> >> You should then be able to get the
> >> parameters with proj_ellipsoid_get_parameters. This is untested on my part
> >> but I believe that is the general workflow you have to go through to get the
> >> ellipsoid out of proj.db.
> >>
> >> proj_list_ellps() simply shows you the same list as you would get from calling
> >> `proj -le`, i.e. ellipsoids that can be used with `+ellps=xxx` parameters. This
> >> is confusing and I shall think of a way to change the docs so it is less confusing :-)
> >>
> >> It would be interesting to see the difference between the ellipsoid tables from
> >> The QGIS and PROJ databases.
> >>
> >> /Kristian
> >>
> >> On 18 Mar 2019, at 04:39, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> >>
> >> Hi list,
> >>
> >> So (thanks for sponsorship from the ICSM), I'm working on porting QGIS
> >> to the Proj 6 API. I suspect I'll have many more questions (especially
> >> as I attempt to drop QGIS' own custom projection database in favour of
> >> the upstream proj one). Let's get started...
> >>
> >> I thought I'd begin with a simple task of replacing QGIS' ellipsoid db
> >> with proj's, using proj_list_ellps(). QGIS has this table of
> >> "standard" ellipsoids, built up from... somewhere... in the vast
> >> history of the QGIS project. When comparing against proj's db, it
> >> includes many items which are missing in proj's:
> >>
> >> Adrastea2000: Adrastea2000 10000.0/7000.0
> >> Amalthea2000: Amalthea2000 125000.0/64000.0
> >> Ananke2000: Ananke2000 10000.0/10000.0
> >> Ariel2000: Ariel2000 581100.0/577700.0
> >> Atlas2000: Atlas2000 18500.0/13500.0
> >> Belinda2000: Belinda2000 33000.0/33000.0
> >> Bianca2000: Bianca2000 21000.0/21000.0
> >> Callisto2000: Callisto2000 2409400.0/2409300.0
> >> Calypso2000: Calypso2000 15000.0/8000.0
> >> Carme2000: Carme2000 15000.0/15000.0
> >> Charon2000: Charon2000 593000.0/593000.0
> >> IGNF:ELG004: Clarke 1866 6378206.4/6356583.799998981
> >> IGNF:ELG003: Clarke 1880 Anglais 6378249.1453/6356514.8698
> >> IGNF:ELG010: Clarke 1880 IGN 6378249.2/6356514.999978254
> >> cape: Clarke 1880 mod. 6378249.145/6356514.966398753
> >> Cordelia2000: Cordelia2000 13000.0/13000.0
> >> Cressida2000: Cressida2000 31000.0/31000.0
> >> Deimos2000: Deimos2000 7500.0/5200.0
> >> Desdemona2000: Desdemona2000 27000.0/27000.0
> >> Despina2000: Despina2000 74000.0/74000.0
> >> Dione2000: Dione2000 560000.0/560000.0
> >> Earth2000: Earth2000 6378140.0/6356750.0
> >> Elara2000: Elara2000 40000.0/40000.0
> >> Enceladus2000: Enceladus2000 256300.0/244600.0
> >> Epimetheus2000: Epimetheus2000 69000.0/55000.0
> >> Europa2000: Europa2000 1564130.0/1560930.0
> >> Galatea2000: Galatea2000 79000.0/79000.0
> >> Ganymede2000: Ganymede2000 2632400.0/2632350.0
> >> Helene2000: Helene2000 16000.0/16000.0
> >> Himalia2000: Himalia2000 85000.0/85000.0
> >> Hyperion2000: Hyperion2000 164000.0/107000.0
> >> IGNF:ELG108: IAG GRS 1967 6378160.0/6356774.5161
> >> IGNF:ELG037: IAG GRS 1980 6378137.0/6356752.314140356
> >> Iapetus2000: Iapetus2000 718000.0/718000.0
> >> IGNF:ELG001: International-Hayford 1909 6378388.0/6356911.9461279465
> >> Io2000: Io2000 1829400.0/1815700.0
> >> Janus2000: Janus2000 97000.0/77000.0
> >> Juliet2000: Juliet2000 42000.0/42000.0
> >> Jupiter2000: Jupiter2000 71492000.0/66854000.0
> >> Larissa2000: Larissa2000 96000.0/96000.0
> >> Leda2000: Leda2000 5000.0/5000.0
> >> Lysithea2000: Lysithea2000 12000.0/12000.0
> >> Mars2000: Mars2000 3396190.0/3376200.0
> >> Mercury2000: Mercury2000 2439700.0/2439700.0
> >> Metis2000: Metis2000 21500.0/21500.0
> >> Mimas2000: Mimas2000 209100.0/191400.0
> >> Miranda2000: Miranda2000 240400.0/232900.0
> >> Moon2000: Moon2000 1737400.0/1737400.0
> >> Naiad2000: Naiad2000 29000.0/29000.0
> >> Neptune2000: Neptune2000 24764000.0/24341000.0
> >> Nereid2000: Nereid2000 170000.0/170000.0
> >> Oberon2000: Oberon2000 761400.0/761400.0
> >> Ophelia2000: Ophelia2000 15000.0/15000.0
> >> IGNF:ELG017: PLESSIS 1817 6376523.0/6355862.933255573
> >> Pan2000: Pan2000 10000.0/10000.0
> >> Pandora2000: Pandora2000 55000.0/31000.0
> >> Pasiphae2000: Pasiphae2000 18000.0/18000.0
> >> Phobos2000: Phobos2000 13400.0/9200.0
> >> Phoebe2000: Phoebe2000 115000.0/105000.0
> >> Pluto2000: Pluto2000 1195000.0/1195000.0
> >> Portia2000: Portia2000 54000.0/54000.0
> >> Prometheus2000: Prometheus2000 74000.0/34000.0
> >> Proteus2000: Proteus2000 218000.0/201000.0
> >> Puck2000: Puck2000 77000.0/77000.0
> >> Rhea2000: Rhea2000 764000.0/764000.0
> >> Rosalind2000: Rosalind2000 27000.0/27000.0
> >> IGNF:ELG032: SPHERE PICARD 6371598.0/6371598.0
> >> Saturn2000: Saturn2000 60268000.0/54364000.0
> >> Sinope2000: Sinope2000 14000.0/14000.0
> >> Telesto2000: Telesto2000 15000.0/7500.0
> >> Tethys2000: Tethys2000 535600.0/525800.0
> >> Thalassa2000: Thalassa2000 40000.0/40000.0
> >> Thebe2000: Thebe2000 58000.0/42000.0
> >> Titan2000: Titan2000 2575000.0/2575000.0
> >> Titania2000: Titania2000 788900.0/788900.0
> >> Triton2000: Triton2000 1352600.0/1352600.0
> >> Umbriel2000: Umbriel2000 584700.0/584700.0
> >> Uranus2000: Uranus2000 25559000.0/24973000.0
> >> Venus2000: Venus2000 6051800.0/6051800.0
> >> IGNF:ELG052: WGS72 6378135.0/6356750.520016094
> >> IGNF:ELG102: WGS72 (NWL-10F) 6378135.0/6356750.520016094
> >> IGNF:ELG053: WGS84 6378137.0/6356752.314245179
> >>
> >> The vast majority of these are planetary ellipsoids/moons, but there's
> >> others which are less obvious (cape/IGNF*). So
> >>
> >> Question 1: should the non-Earth ellipsoids be included in the proj database?
> >>
> >> Question 2: What about cape/IGNF* ? Should they be included in proj,
> >> or are they mistakes and should not even be included in the current
> >> QGIS db?
> >>
> >> Nyall
> >> _______________________________________________
> >> PROJ mailing list
> >> PROJ at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/proj
> >>
> >>
> >> _______________________________________________
> >> PROJ mailing list
> >> PROJ at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/proj
> >>
> >>
>

From kreve at sdfe.dk  Mon Mar 18 03:19:11 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 18 Mar 2019 10:19:11 +0000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <CAB28AsiW18bZvUKXigcOv_509CYOhgsMxTeyjgUJmofWUkOLvw@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
 <CAB28AsipCSyLgguNokYy=qC_R5Y0oMw7yF0WasFK7kk4JkUN8Q@mail.gmail.com>
 <5D8ADDC3-9D77-4772-9A56-EB961C009FBD@sdfe.dk>
 <CAB28AsimhXiSBk9Y+z5C9VHDHfsOYMTbj+WsavEVkgeXZhpc5Q@mail.gmail.com>
 <8B0750B6-7DCA-4F5A-9F06-0FBBD1AD2A22@sdfe.dk>
 <CAB28AsiW18bZvUKXigcOv_509CYOhgsMxTeyjgUJmofWUkOLvw@mail.gmail.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF0CCAFD@S000014.PROD.SITAD.DK>

Instead of using the acronym you can just use the parameters from
proj_ellipsoid_get_parameters() directly, so that 

     +ellpsg=GRS80 

becomes 

    + a=6378137.0  +rf=298.257222101.

For both your use cases that should work fine. You will of course have
to do a bit of string manipulation to achieve this.

/Kristian

-----Oprindelig meddelelse-----
Fra: PROJ <proj-bounces at lists.osgeo.org> På vegne af Nyall Dawson
Sendt: 18. marts 2019 10:40
Til: Kristian Evers <kreve at sdfe.dk>
Cc: PROJ <proj at lists.osgeo.org>
Emne: Re: [PROJ] Proj 6 API questions

On Mon, 18 Mar 2019 at 17:34, Kristian Evers <kreve at sdfe.dk> wrote:
>
> I may be wrong but I don’t think there are acronyms for them. It’s based
> on the EPSG dataset and acronyms are not assigned in that regime. Do
> you actually need them or is this just so that it fits better in existing QGIS
> infrastructure?

There's two things QGIS uses this for:

1. When a user selects the CRS for their project, the project
ellipsoid (used when calculating geodetic distances/areas for the
project) is automatically set to match the ellipsoid corresponding to
this CRS. i.e. select EPSG:28356 and the project ellipsoid is set to
GRS80, set it to EPSG:102013 and you get International 1909.  So we
need a way to get the ellipsoid from an acronym (or alternatively,
directly from a CRS).

2. When performing geodetic distance/area calculations, QGIS
transforms coordinates from the layer's source CRS to a crs crafted
from "+proj=longlat +ellps=XXXXX +nodefs", and then uses the result
when performing the geodetic calculations. So we need a way to obtain
the ellipsoid acronym given an ellipsoid definition (where a
corresponding one exists).

(Full disclaimer: I'm not fully aware of the background behind this
logic, and there may be superior logic to follow. Let me know if you
think there is!)

Nyall


>
> We could potentially assign acronyms for all ellipsoids but I fear that will
> become a maintenance mess whenever the EPSG dataset is updated.
>
> /Kristian
>
> > On 18 Mar 2019, at 08:27, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> >
> > On Mon, 18 Mar 2019 at 16:56, Kristian Evers <kreve at sdfe.dk> wrote:
> >>
> >> You use proj_get_authorities_from_database() for that. Generally there’s functions
> >> for retrieving all info like that, just search around in the function reference a bit and you’ll
> >> find it.
> >
> > Ok, that part is working, and I'm seeing a LOT more! But now I'm a bit
> > confused... if I use this approach to iterate through the ellipsoids,
> > is there anyway to get the ellipsoid acronym from them? Using
> > proj_list_ellps I could get PJ_ELLPS->id.
> >
> > Nyall
> >
> >
> >
> >>
> >> /Kristian
> >>
> >> On 18 Mar 2019, at 07:52, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> >>
> >> On Mon, 18 Mar 2019 at 16:42, Kristian Evers <kreve at sdfe.dk> wrote:
> >>
> >>
> >> Hi Nyall,
> >>
> >> I am very happy to see that you have started working on this!
> >>
> >> You will probably get less discrepancies between the QGIS list of ellipsoids
> >> and the PROJ equivalent if you instead use proj_get_codes_from_database
> >> using type PJ_TYPE_ELLIPSOID.
> >>
> >>
> >> What should I use as auth_name if I want to get ALL ellipsoids? The
> >> dox state it must not be null...
> >>
> >> Thanks for the detailed pointers, I'll let you know the result!
> >>
> >> Nyall
> >>
> >>
> >> You should then be able to get the
> >> parameters with proj_ellipsoid_get_parameters. This is untested on my part
> >> but I believe that is the general workflow you have to go through to get the
> >> ellipsoid out of proj.db.
> >>
> >> proj_list_ellps() simply shows you the same list as you would get from calling
> >> `proj -le`, i.e. ellipsoids that can be used with `+ellps=xxx` parameters. This
> >> is confusing and I shall think of a way to change the docs so it is less confusing :-)
> >>
> >> It would be interesting to see the difference between the ellipsoid tables from
> >> The QGIS and PROJ databases.
> >>
> >> /Kristian
> >>
> >> On 18 Mar 2019, at 04:39, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> >>
> >> Hi list,
> >>
> >> So (thanks for sponsorship from the ICSM), I'm working on porting QGIS
> >> to the Proj 6 API. I suspect I'll have many more questions (especially
> >> as I attempt to drop QGIS' own custom projection database in favour of
> >> the upstream proj one). Let's get started...
> >>
> >> I thought I'd begin with a simple task of replacing QGIS' ellipsoid db
> >> with proj's, using proj_list_ellps(). QGIS has this table of
> >> "standard" ellipsoids, built up from... somewhere... in the vast
> >> history of the QGIS project. When comparing against proj's db, it
> >> includes many items which are missing in proj's:
> >>
> >> Adrastea2000: Adrastea2000 10000.0/7000.0
> >> Amalthea2000: Amalthea2000 125000.0/64000.0
> >> Ananke2000: Ananke2000 10000.0/10000.0
> >> Ariel2000: Ariel2000 581100.0/577700.0
> >> Atlas2000: Atlas2000 18500.0/13500.0
> >> Belinda2000: Belinda2000 33000.0/33000.0
> >> Bianca2000: Bianca2000 21000.0/21000.0
> >> Callisto2000: Callisto2000 2409400.0/2409300.0
> >> Calypso2000: Calypso2000 15000.0/8000.0
> >> Carme2000: Carme2000 15000.0/15000.0
> >> Charon2000: Charon2000 593000.0/593000.0
> >> IGNF:ELG004: Clarke 1866 6378206.4/6356583.799998981
> >> IGNF:ELG003: Clarke 1880 Anglais 6378249.1453/6356514.8698
> >> IGNF:ELG010: Clarke 1880 IGN 6378249.2/6356514.999978254
> >> cape: Clarke 1880 mod. 6378249.145/6356514.966398753
> >> Cordelia2000: Cordelia2000 13000.0/13000.0
> >> Cressida2000: Cressida2000 31000.0/31000.0
> >> Deimos2000: Deimos2000 7500.0/5200.0
> >> Desdemona2000: Desdemona2000 27000.0/27000.0
> >> Despina2000: Despina2000 74000.0/74000.0
> >> Dione2000: Dione2000 560000.0/560000.0
> >> Earth2000: Earth2000 6378140.0/6356750.0
> >> Elara2000: Elara2000 40000.0/40000.0
> >> Enceladus2000: Enceladus2000 256300.0/244600.0
> >> Epimetheus2000: Epimetheus2000 69000.0/55000.0
> >> Europa2000: Europa2000 1564130.0/1560930.0
> >> Galatea2000: Galatea2000 79000.0/79000.0
> >> Ganymede2000: Ganymede2000 2632400.0/2632350.0
> >> Helene2000: Helene2000 16000.0/16000.0
> >> Himalia2000: Himalia2000 85000.0/85000.0
> >> Hyperion2000: Hyperion2000 164000.0/107000.0
> >> IGNF:ELG108: IAG GRS 1967 6378160.0/6356774.5161
> >> IGNF:ELG037: IAG GRS 1980 6378137.0/6356752.314140356
> >> Iapetus2000: Iapetus2000 718000.0/718000.0
> >> IGNF:ELG001: International-Hayford 1909 6378388.0/6356911.9461279465
> >> Io2000: Io2000 1829400.0/1815700.0
> >> Janus2000: Janus2000 97000.0/77000.0
> >> Juliet2000: Juliet2000 42000.0/42000.0
> >> Jupiter2000: Jupiter2000 71492000.0/66854000.0
> >> Larissa2000: Larissa2000 96000.0/96000.0
> >> Leda2000: Leda2000 5000.0/5000.0
> >> Lysithea2000: Lysithea2000 12000.0/12000.0
> >> Mars2000: Mars2000 3396190.0/3376200.0
> >> Mercury2000: Mercury2000 2439700.0/2439700.0
> >> Metis2000: Metis2000 21500.0/21500.0
> >> Mimas2000: Mimas2000 209100.0/191400.0
> >> Miranda2000: Miranda2000 240400.0/232900.0
> >> Moon2000: Moon2000 1737400.0/1737400.0
> >> Naiad2000: Naiad2000 29000.0/29000.0
> >> Neptune2000: Neptune2000 24764000.0/24341000.0
> >> Nereid2000: Nereid2000 170000.0/170000.0
> >> Oberon2000: Oberon2000 761400.0/761400.0
> >> Ophelia2000: Ophelia2000 15000.0/15000.0
> >> IGNF:ELG017: PLESSIS 1817 6376523.0/6355862.933255573
> >> Pan2000: Pan2000 10000.0/10000.0
> >> Pandora2000: Pandora2000 55000.0/31000.0
> >> Pasiphae2000: Pasiphae2000 18000.0/18000.0
> >> Phobos2000: Phobos2000 13400.0/9200.0
> >> Phoebe2000: Phoebe2000 115000.0/105000.0
> >> Pluto2000: Pluto2000 1195000.0/1195000.0
> >> Portia2000: Portia2000 54000.0/54000.0
> >> Prometheus2000: Prometheus2000 74000.0/34000.0
> >> Proteus2000: Proteus2000 218000.0/201000.0
> >> Puck2000: Puck2000 77000.0/77000.0
> >> Rhea2000: Rhea2000 764000.0/764000.0
> >> Rosalind2000: Rosalind2000 27000.0/27000.0
> >> IGNF:ELG032: SPHERE PICARD 6371598.0/6371598.0
> >> Saturn2000: Saturn2000 60268000.0/54364000.0
> >> Sinope2000: Sinope2000 14000.0/14000.0
> >> Telesto2000: Telesto2000 15000.0/7500.0
> >> Tethys2000: Tethys2000 535600.0/525800.0
> >> Thalassa2000: Thalassa2000 40000.0/40000.0
> >> Thebe2000: Thebe2000 58000.0/42000.0
> >> Titan2000: Titan2000 2575000.0/2575000.0
> >> Titania2000: Titania2000 788900.0/788900.0
> >> Triton2000: Triton2000 1352600.0/1352600.0
> >> Umbriel2000: Umbriel2000 584700.0/584700.0
> >> Uranus2000: Uranus2000 25559000.0/24973000.0
> >> Venus2000: Venus2000 6051800.0/6051800.0
> >> IGNF:ELG052: WGS72 6378135.0/6356750.520016094
> >> IGNF:ELG102: WGS72 (NWL-10F) 6378135.0/6356750.520016094
> >> IGNF:ELG053: WGS84 6378137.0/6356752.314245179
> >>
> >> The vast majority of these are planetary ellipsoids/moons, but there's
> >> others which are less obvious (cape/IGNF*). So
> >>
> >> Question 1: should the non-Earth ellipsoids be included in the proj database?
> >>
> >> Question 2: What about cape/IGNF* ? Should they be included in proj,
> >> or are they mistakes and should not even be included in the current
> >> QGIS db?
> >>
> >> Nyall
> >> _______________________________________________
> >> PROJ mailing list
> >> PROJ at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/proj
> >>
> >>
> >> _______________________________________________
> >> PROJ mailing list
> >> PROJ at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/proj
> >>
> >>
>
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

From nyall.dawson at gmail.com  Mon Mar 18 03:28:40 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Mon, 18 Mar 2019 20:28:40 +1000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF0CCAFD@S000014.PROD.SITAD.DK>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
 <CAB28AsipCSyLgguNokYy=qC_R5Y0oMw7yF0WasFK7kk4JkUN8Q@mail.gmail.com>
 <5D8ADDC3-9D77-4772-9A56-EB961C009FBD@sdfe.dk>
 <CAB28AsimhXiSBk9Y+z5C9VHDHfsOYMTbj+WsavEVkgeXZhpc5Q@mail.gmail.com>
 <8B0750B6-7DCA-4F5A-9F06-0FBBD1AD2A22@sdfe.dk>
 <CAB28AsiW18bZvUKXigcOv_509CYOhgsMxTeyjgUJmofWUkOLvw@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0CCAFD@S000014.PROD.SITAD.DK>
Message-ID: <CAB28Asi3R_nCkok0Cmn9A_QSbcgyoNYu+jjNW=FwXV8ipQquWw@mail.gmail.com>

On Mon, 18 Mar 2019 at 20:19, Kristian Evers <kreve at sdfe.dk> wrote:
>
> Instead of using the acronym you can just use the parameters from
> proj_ellipsoid_get_parameters() directly, so that
>
>      +ellpsg=GRS80
>
> becomes
>
>     + a=6378137.0  +rf=298.257222101.
>
> For both your use cases that should work fine. You will of course have
> to do a bit of string manipulation to achieve this.

Ok, and I guess I can use proj_get_name on the ellipsoid object to get
the friendly name too. Are these names unique? Or is there no
guarantee for that?

Nyall

>
> /Kristian
>
> -----Oprindelig meddelelse-----
> Fra: PROJ <proj-bounces at lists.osgeo.org> På vegne af Nyall Dawson
> Sendt: 18. marts 2019 10:40
> Til: Kristian Evers <kreve at sdfe.dk>
> Cc: PROJ <proj at lists.osgeo.org>
> Emne: Re: [PROJ] Proj 6 API questions
>
> On Mon, 18 Mar 2019 at 17:34, Kristian Evers <kreve at sdfe.dk> wrote:
> >
> > I may be wrong but I don’t think there are acronyms for them. It’s based
> > on the EPSG dataset and acronyms are not assigned in that regime. Do
> > you actually need them or is this just so that it fits better in existing QGIS
> > infrastructure?
>
> There's two things QGIS uses this for:
>
> 1. When a user selects the CRS for their project, the project
> ellipsoid (used when calculating geodetic distances/areas for the
> project) is automatically set to match the ellipsoid corresponding to
> this CRS. i.e. select EPSG:28356 and the project ellipsoid is set to
> GRS80, set it to EPSG:102013 and you get International 1909.  So we
> need a way to get the ellipsoid from an acronym (or alternatively,
> directly from a CRS).
>
> 2. When performing geodetic distance/area calculations, QGIS
> transforms coordinates from the layer's source CRS to a crs crafted
> from "+proj=longlat +ellps=XXXXX +nodefs", and then uses the result
> when performing the geodetic calculations. So we need a way to obtain
> the ellipsoid acronym given an ellipsoid definition (where a
> corresponding one exists).
>
> (Full disclaimer: I'm not fully aware of the background behind this
> logic, and there may be superior logic to follow. Let me know if you
> think there is!)
>
> Nyall
>
>
> >
> > We could potentially assign acronyms for all ellipsoids but I fear that will
> > become a maintenance mess whenever the EPSG dataset is updated.
> >
> > /Kristian
> >
> > > On 18 Mar 2019, at 08:27, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> > >
> > > On Mon, 18 Mar 2019 at 16:56, Kristian Evers <kreve at sdfe.dk> wrote:
> > >>
> > >> You use proj_get_authorities_from_database() for that. Generally there’s functions
> > >> for retrieving all info like that, just search around in the function reference a bit and you’ll
> > >> find it.
> > >
> > > Ok, that part is working, and I'm seeing a LOT more! But now I'm a bit
> > > confused... if I use this approach to iterate through the ellipsoids,
> > > is there anyway to get the ellipsoid acronym from them? Using
> > > proj_list_ellps I could get PJ_ELLPS->id.
> > >
> > > Nyall
> > >
> > >
> > >
> > >>
> > >> /Kristian
> > >>
> > >> On 18 Mar 2019, at 07:52, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> > >>
> > >> On Mon, 18 Mar 2019 at 16:42, Kristian Evers <kreve at sdfe.dk> wrote:
> > >>
> > >>
> > >> Hi Nyall,
> > >>
> > >> I am very happy to see that you have started working on this!
> > >>
> > >> You will probably get less discrepancies between the QGIS list of ellipsoids
> > >> and the PROJ equivalent if you instead use proj_get_codes_from_database
> > >> using type PJ_TYPE_ELLIPSOID.
> > >>
> > >>
> > >> What should I use as auth_name if I want to get ALL ellipsoids? The
> > >> dox state it must not be null...
> > >>
> > >> Thanks for the detailed pointers, I'll let you know the result!
> > >>
> > >> Nyall
> > >>
> > >>
> > >> You should then be able to get the
> > >> parameters with proj_ellipsoid_get_parameters. This is untested on my part
> > >> but I believe that is the general workflow you have to go through to get the
> > >> ellipsoid out of proj.db.
> > >>
> > >> proj_list_ellps() simply shows you the same list as you would get from calling
> > >> `proj -le`, i.e. ellipsoids that can be used with `+ellps=xxx` parameters. This
> > >> is confusing and I shall think of a way to change the docs so it is less confusing :-)
> > >>
> > >> It would be interesting to see the difference between the ellipsoid tables from
> > >> The QGIS and PROJ databases.
> > >>
> > >> /Kristian
> > >>
> > >> On 18 Mar 2019, at 04:39, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> > >>
> > >> Hi list,
> > >>
> > >> So (thanks for sponsorship from the ICSM), I'm working on porting QGIS
> > >> to the Proj 6 API. I suspect I'll have many more questions (especially
> > >> as I attempt to drop QGIS' own custom projection database in favour of
> > >> the upstream proj one). Let's get started...
> > >>
> > >> I thought I'd begin with a simple task of replacing QGIS' ellipsoid db
> > >> with proj's, using proj_list_ellps(). QGIS has this table of
> > >> "standard" ellipsoids, built up from... somewhere... in the vast
> > >> history of the QGIS project. When comparing against proj's db, it
> > >> includes many items which are missing in proj's:
> > >>
> > >> Adrastea2000: Adrastea2000 10000.0/7000.0
> > >> Amalthea2000: Amalthea2000 125000.0/64000.0
> > >> Ananke2000: Ananke2000 10000.0/10000.0
> > >> Ariel2000: Ariel2000 581100.0/577700.0
> > >> Atlas2000: Atlas2000 18500.0/13500.0
> > >> Belinda2000: Belinda2000 33000.0/33000.0
> > >> Bianca2000: Bianca2000 21000.0/21000.0
> > >> Callisto2000: Callisto2000 2409400.0/2409300.0
> > >> Calypso2000: Calypso2000 15000.0/8000.0
> > >> Carme2000: Carme2000 15000.0/15000.0
> > >> Charon2000: Charon2000 593000.0/593000.0
> > >> IGNF:ELG004: Clarke 1866 6378206.4/6356583.799998981
> > >> IGNF:ELG003: Clarke 1880 Anglais 6378249.1453/6356514.8698
> > >> IGNF:ELG010: Clarke 1880 IGN 6378249.2/6356514.999978254
> > >> cape: Clarke 1880 mod. 6378249.145/6356514.966398753
> > >> Cordelia2000: Cordelia2000 13000.0/13000.0
> > >> Cressida2000: Cressida2000 31000.0/31000.0
> > >> Deimos2000: Deimos2000 7500.0/5200.0
> > >> Desdemona2000: Desdemona2000 27000.0/27000.0
> > >> Despina2000: Despina2000 74000.0/74000.0
> > >> Dione2000: Dione2000 560000.0/560000.0
> > >> Earth2000: Earth2000 6378140.0/6356750.0
> > >> Elara2000: Elara2000 40000.0/40000.0
> > >> Enceladus2000: Enceladus2000 256300.0/244600.0
> > >> Epimetheus2000: Epimetheus2000 69000.0/55000.0
> > >> Europa2000: Europa2000 1564130.0/1560930.0
> > >> Galatea2000: Galatea2000 79000.0/79000.0
> > >> Ganymede2000: Ganymede2000 2632400.0/2632350.0
> > >> Helene2000: Helene2000 16000.0/16000.0
> > >> Himalia2000: Himalia2000 85000.0/85000.0
> > >> Hyperion2000: Hyperion2000 164000.0/107000.0
> > >> IGNF:ELG108: IAG GRS 1967 6378160.0/6356774.5161
> > >> IGNF:ELG037: IAG GRS 1980 6378137.0/6356752.314140356
> > >> Iapetus2000: Iapetus2000 718000.0/718000.0
> > >> IGNF:ELG001: International-Hayford 1909 6378388.0/6356911.9461279465
> > >> Io2000: Io2000 1829400.0/1815700.0
> > >> Janus2000: Janus2000 97000.0/77000.0
> > >> Juliet2000: Juliet2000 42000.0/42000.0
> > >> Jupiter2000: Jupiter2000 71492000.0/66854000.0
> > >> Larissa2000: Larissa2000 96000.0/96000.0
> > >> Leda2000: Leda2000 5000.0/5000.0
> > >> Lysithea2000: Lysithea2000 12000.0/12000.0
> > >> Mars2000: Mars2000 3396190.0/3376200.0
> > >> Mercury2000: Mercury2000 2439700.0/2439700.0
> > >> Metis2000: Metis2000 21500.0/21500.0
> > >> Mimas2000: Mimas2000 209100.0/191400.0
> > >> Miranda2000: Miranda2000 240400.0/232900.0
> > >> Moon2000: Moon2000 1737400.0/1737400.0
> > >> Naiad2000: Naiad2000 29000.0/29000.0
> > >> Neptune2000: Neptune2000 24764000.0/24341000.0
> > >> Nereid2000: Nereid2000 170000.0/170000.0
> > >> Oberon2000: Oberon2000 761400.0/761400.0
> > >> Ophelia2000: Ophelia2000 15000.0/15000.0
> > >> IGNF:ELG017: PLESSIS 1817 6376523.0/6355862.933255573
> > >> Pan2000: Pan2000 10000.0/10000.0
> > >> Pandora2000: Pandora2000 55000.0/31000.0
> > >> Pasiphae2000: Pasiphae2000 18000.0/18000.0
> > >> Phobos2000: Phobos2000 13400.0/9200.0
> > >> Phoebe2000: Phoebe2000 115000.0/105000.0
> > >> Pluto2000: Pluto2000 1195000.0/1195000.0
> > >> Portia2000: Portia2000 54000.0/54000.0
> > >> Prometheus2000: Prometheus2000 74000.0/34000.0
> > >> Proteus2000: Proteus2000 218000.0/201000.0
> > >> Puck2000: Puck2000 77000.0/77000.0
> > >> Rhea2000: Rhea2000 764000.0/764000.0
> > >> Rosalind2000: Rosalind2000 27000.0/27000.0
> > >> IGNF:ELG032: SPHERE PICARD 6371598.0/6371598.0
> > >> Saturn2000: Saturn2000 60268000.0/54364000.0
> > >> Sinope2000: Sinope2000 14000.0/14000.0
> > >> Telesto2000: Telesto2000 15000.0/7500.0
> > >> Tethys2000: Tethys2000 535600.0/525800.0
> > >> Thalassa2000: Thalassa2000 40000.0/40000.0
> > >> Thebe2000: Thebe2000 58000.0/42000.0
> > >> Titan2000: Titan2000 2575000.0/2575000.0
> > >> Titania2000: Titania2000 788900.0/788900.0
> > >> Triton2000: Triton2000 1352600.0/1352600.0
> > >> Umbriel2000: Umbriel2000 584700.0/584700.0
> > >> Uranus2000: Uranus2000 25559000.0/24973000.0
> > >> Venus2000: Venus2000 6051800.0/6051800.0
> > >> IGNF:ELG052: WGS72 6378135.0/6356750.520016094
> > >> IGNF:ELG102: WGS72 (NWL-10F) 6378135.0/6356750.520016094
> > >> IGNF:ELG053: WGS84 6378137.0/6356752.314245179
> > >>
> > >> The vast majority of these are planetary ellipsoids/moons, but there's
> > >> others which are less obvious (cape/IGNF*). So
> > >>
> > >> Question 1: should the non-Earth ellipsoids be included in the proj database?
> > >>
> > >> Question 2: What about cape/IGNF* ? Should they be included in proj,
> > >> or are they mistakes and should not even be included in the current
> > >> QGIS db?
> > >>
> > >> Nyall
> > >> _______________________________________________
> > >> PROJ mailing list
> > >> PROJ at lists.osgeo.org
> > >> https://lists.osgeo.org/mailman/listinfo/proj
> > >>
> > >>
> > >> _______________________________________________
> > >> PROJ mailing list
> > >> PROJ at lists.osgeo.org
> > >> https://lists.osgeo.org/mailman/listinfo/proj
> > >>
> > >>
> >
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

From kreve at sdfe.dk  Mon Mar 18 03:39:24 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 18 Mar 2019 10:39:24 +0000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <CAB28Asi3R_nCkok0Cmn9A_QSbcgyoNYu+jjNW=FwXV8ipQquWw@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
 <CAB28AsipCSyLgguNokYy=qC_R5Y0oMw7yF0WasFK7kk4JkUN8Q@mail.gmail.com>
 <5D8ADDC3-9D77-4772-9A56-EB961C009FBD@sdfe.dk>
 <CAB28AsimhXiSBk9Y+z5C9VHDHfsOYMTbj+WsavEVkgeXZhpc5Q@mail.gmail.com>
 <8B0750B6-7DCA-4F5A-9F06-0FBBD1AD2A22@sdfe.dk>
 <CAB28AsiW18bZvUKXigcOv_509CYOhgsMxTeyjgUJmofWUkOLvw@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0CCAFD@S000014.PROD.SITAD.DK>
 <CAB28Asi3R_nCkok0Cmn9A_QSbcgyoNYu+jjNW=FwXV8ipQquWw@mail.gmail.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF0CCB6E@S000014.PROD.SITAD.DK>

I don't think there's duplicates at the moment but I am not sure
there's a guarantee for that always being the case. Here's the
relevant SQL create statement:

CREATE TABLE ellipsoid (
    auth_name TEXT NOT NULL CHECK (length(auth_name) >= 1),
    code TEXT NOT NULL CHECK (length(code) >= 1),
    name TEXT NOT NULL CHECK (length(name) >= 2),
    description TEXT,
    celestial_body_auth_name TEXT NOT NULL,
    celestial_body_code TEXT NOT NULL,
    semi_major_axis FLOAT NOT NULL CHECK (semi_major_axis > 0),
    uom_auth_name TEXT NOT NULL,
    uom_code TEXT NOT NULL,
    inv_flattening FLOAT CHECK (inv_flattening = 0 OR inv_flattening >= 1.0),
    semi_minor_axis FLOAT CHECK (semi_minor_axis > 0 AND semi_minor_axis <= semi_major_axis),
    deprecated BOOLEAN NOT NULL CHECK (deprecated IN (0, 1)),
    CONSTRAINT pk_ellipsoid PRIMARY KEY (auth_name, code),
    CONSTRAINT fk_ellipsoid_celestial_body FOREIGN KEY (celestial_body_auth_name, celestial_body_code) REFERENCES celestial_body(auth_name, code),
    CONSTRAINT fk_ellipsoid_unit_of_measure FOREIGN KEY (uom_auth_name, uom_code) REFERENCES unit_of_measure(auth_name, code)
);

from https://github.com/OSGeo/proj.4/blob/master/data/sql/proj_db_table_defs.sql 

I guess name should have a unique constraint if we were to guarantee unique names.
I may be missing something though - I am not particularly skilled in the ways of SQL.

/Kristian

-----Oprindelig meddelelse-----
Fra: Nyall Dawson <nyall.dawson at gmail.com> 
Sendt: 18. marts 2019 11:29
Til: Kristian Evers <kreve at sdfe.dk>
Cc: PROJ <proj at lists.osgeo.org>
Emne: Re: [PROJ] Proj 6 API questions

On Mon, 18 Mar 2019 at 20:19, Kristian Evers <kreve at sdfe.dk> wrote:
>
> Instead of using the acronym you can just use the parameters from
> proj_ellipsoid_get_parameters() directly, so that
>
>      +ellpsg=GRS80
>
> becomes
>
>     + a=6378137.0  +rf=298.257222101.
>
> For both your use cases that should work fine. You will of course have
> to do a bit of string manipulation to achieve this.

Ok, and I guess I can use proj_get_name on the ellipsoid object to get
the friendly name too. Are these names unique? Or is there no
guarantee for that?

Nyall

>
> /Kristian
>
> -----Oprindelig meddelelse-----
> Fra: PROJ <proj-bounces at lists.osgeo.org> På vegne af Nyall Dawson
> Sendt: 18. marts 2019 10:40
> Til: Kristian Evers <kreve at sdfe.dk>
> Cc: PROJ <proj at lists.osgeo.org>
> Emne: Re: [PROJ] Proj 6 API questions
>
> On Mon, 18 Mar 2019 at 17:34, Kristian Evers <kreve at sdfe.dk> wrote:
> >
> > I may be wrong but I don’t think there are acronyms for them. It’s based
> > on the EPSG dataset and acronyms are not assigned in that regime. Do
> > you actually need them or is this just so that it fits better in existing QGIS
> > infrastructure?
>
> There's two things QGIS uses this for:
>
> 1. When a user selects the CRS for their project, the project
> ellipsoid (used when calculating geodetic distances/areas for the
> project) is automatically set to match the ellipsoid corresponding to
> this CRS. i.e. select EPSG:28356 and the project ellipsoid is set to
> GRS80, set it to EPSG:102013 and you get International 1909.  So we
> need a way to get the ellipsoid from an acronym (or alternatively,
> directly from a CRS).
>
> 2. When performing geodetic distance/area calculations, QGIS
> transforms coordinates from the layer's source CRS to a crs crafted
> from "+proj=longlat +ellps=XXXXX +nodefs", and then uses the result
> when performing the geodetic calculations. So we need a way to obtain
> the ellipsoid acronym given an ellipsoid definition (where a
> corresponding one exists).
>
> (Full disclaimer: I'm not fully aware of the background behind this
> logic, and there may be superior logic to follow. Let me know if you
> think there is!)
>
> Nyall
>
>
> >
> > We could potentially assign acronyms for all ellipsoids but I fear that will
> > become a maintenance mess whenever the EPSG dataset is updated.
> >
> > /Kristian
> >
> > > On 18 Mar 2019, at 08:27, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> > >
> > > On Mon, 18 Mar 2019 at 16:56, Kristian Evers <kreve at sdfe.dk> wrote:
> > >>
> > >> You use proj_get_authorities_from_database() for that. Generally there’s functions
> > >> for retrieving all info like that, just search around in the function reference a bit and you’ll
> > >> find it.
> > >
> > > Ok, that part is working, and I'm seeing a LOT more! But now I'm a bit
> > > confused... if I use this approach to iterate through the ellipsoids,
> > > is there anyway to get the ellipsoid acronym from them? Using
> > > proj_list_ellps I could get PJ_ELLPS->id.
> > >
> > > Nyall
> > >
> > >
> > >
> > >>
> > >> /Kristian
> > >>
> > >> On 18 Mar 2019, at 07:52, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> > >>
> > >> On Mon, 18 Mar 2019 at 16:42, Kristian Evers <kreve at sdfe.dk> wrote:
> > >>
> > >>
> > >> Hi Nyall,
> > >>
> > >> I am very happy to see that you have started working on this!
> > >>
> > >> You will probably get less discrepancies between the QGIS list of ellipsoids
> > >> and the PROJ equivalent if you instead use proj_get_codes_from_database
> > >> using type PJ_TYPE_ELLIPSOID.
> > >>
> > >>
> > >> What should I use as auth_name if I want to get ALL ellipsoids? The
> > >> dox state it must not be null...
> > >>
> > >> Thanks for the detailed pointers, I'll let you know the result!
> > >>
> > >> Nyall
> > >>
> > >>
> > >> You should then be able to get the
> > >> parameters with proj_ellipsoid_get_parameters. This is untested on my part
> > >> but I believe that is the general workflow you have to go through to get the
> > >> ellipsoid out of proj.db.
> > >>
> > >> proj_list_ellps() simply shows you the same list as you would get from calling
> > >> `proj -le`, i.e. ellipsoids that can be used with `+ellps=xxx` parameters. This
> > >> is confusing and I shall think of a way to change the docs so it is less confusing :-)
> > >>
> > >> It would be interesting to see the difference between the ellipsoid tables from
> > >> The QGIS and PROJ databases.
> > >>
> > >> /Kristian
> > >>
> > >> On 18 Mar 2019, at 04:39, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> > >>
> > >> Hi list,
> > >>
> > >> So (thanks for sponsorship from the ICSM), I'm working on porting QGIS
> > >> to the Proj 6 API. I suspect I'll have many more questions (especially
> > >> as I attempt to drop QGIS' own custom projection database in favour of
> > >> the upstream proj one). Let's get started...
> > >>
> > >> I thought I'd begin with a simple task of replacing QGIS' ellipsoid db
> > >> with proj's, using proj_list_ellps(). QGIS has this table of
> > >> "standard" ellipsoids, built up from... somewhere... in the vast
> > >> history of the QGIS project. When comparing against proj's db, it
> > >> includes many items which are missing in proj's:
> > >>
> > >> Adrastea2000: Adrastea2000 10000.0/7000.0
> > >> Amalthea2000: Amalthea2000 125000.0/64000.0
> > >> Ananke2000: Ananke2000 10000.0/10000.0
> > >> Ariel2000: Ariel2000 581100.0/577700.0
> > >> Atlas2000: Atlas2000 18500.0/13500.0
> > >> Belinda2000: Belinda2000 33000.0/33000.0
> > >> Bianca2000: Bianca2000 21000.0/21000.0
> > >> Callisto2000: Callisto2000 2409400.0/2409300.0
> > >> Calypso2000: Calypso2000 15000.0/8000.0
> > >> Carme2000: Carme2000 15000.0/15000.0
> > >> Charon2000: Charon2000 593000.0/593000.0
> > >> IGNF:ELG004: Clarke 1866 6378206.4/6356583.799998981
> > >> IGNF:ELG003: Clarke 1880 Anglais 6378249.1453/6356514.8698
> > >> IGNF:ELG010: Clarke 1880 IGN 6378249.2/6356514.999978254
> > >> cape: Clarke 1880 mod. 6378249.145/6356514.966398753
> > >> Cordelia2000: Cordelia2000 13000.0/13000.0
> > >> Cressida2000: Cressida2000 31000.0/31000.0
> > >> Deimos2000: Deimos2000 7500.0/5200.0
> > >> Desdemona2000: Desdemona2000 27000.0/27000.0
> > >> Despina2000: Despina2000 74000.0/74000.0
> > >> Dione2000: Dione2000 560000.0/560000.0
> > >> Earth2000: Earth2000 6378140.0/6356750.0
> > >> Elara2000: Elara2000 40000.0/40000.0
> > >> Enceladus2000: Enceladus2000 256300.0/244600.0
> > >> Epimetheus2000: Epimetheus2000 69000.0/55000.0
> > >> Europa2000: Europa2000 1564130.0/1560930.0
> > >> Galatea2000: Galatea2000 79000.0/79000.0
> > >> Ganymede2000: Ganymede2000 2632400.0/2632350.0
> > >> Helene2000: Helene2000 16000.0/16000.0
> > >> Himalia2000: Himalia2000 85000.0/85000.0
> > >> Hyperion2000: Hyperion2000 164000.0/107000.0
> > >> IGNF:ELG108: IAG GRS 1967 6378160.0/6356774.5161
> > >> IGNF:ELG037: IAG GRS 1980 6378137.0/6356752.314140356
> > >> Iapetus2000: Iapetus2000 718000.0/718000.0
> > >> IGNF:ELG001: International-Hayford 1909 6378388.0/6356911.9461279465
> > >> Io2000: Io2000 1829400.0/1815700.0
> > >> Janus2000: Janus2000 97000.0/77000.0
> > >> Juliet2000: Juliet2000 42000.0/42000.0
> > >> Jupiter2000: Jupiter2000 71492000.0/66854000.0
> > >> Larissa2000: Larissa2000 96000.0/96000.0
> > >> Leda2000: Leda2000 5000.0/5000.0
> > >> Lysithea2000: Lysithea2000 12000.0/12000.0
> > >> Mars2000: Mars2000 3396190.0/3376200.0
> > >> Mercury2000: Mercury2000 2439700.0/2439700.0
> > >> Metis2000: Metis2000 21500.0/21500.0
> > >> Mimas2000: Mimas2000 209100.0/191400.0
> > >> Miranda2000: Miranda2000 240400.0/232900.0
> > >> Moon2000: Moon2000 1737400.0/1737400.0
> > >> Naiad2000: Naiad2000 29000.0/29000.0
> > >> Neptune2000: Neptune2000 24764000.0/24341000.0
> > >> Nereid2000: Nereid2000 170000.0/170000.0
> > >> Oberon2000: Oberon2000 761400.0/761400.0
> > >> Ophelia2000: Ophelia2000 15000.0/15000.0
> > >> IGNF:ELG017: PLESSIS 1817 6376523.0/6355862.933255573
> > >> Pan2000: Pan2000 10000.0/10000.0
> > >> Pandora2000: Pandora2000 55000.0/31000.0
> > >> Pasiphae2000: Pasiphae2000 18000.0/18000.0
> > >> Phobos2000: Phobos2000 13400.0/9200.0
> > >> Phoebe2000: Phoebe2000 115000.0/105000.0
> > >> Pluto2000: Pluto2000 1195000.0/1195000.0
> > >> Portia2000: Portia2000 54000.0/54000.0
> > >> Prometheus2000: Prometheus2000 74000.0/34000.0
> > >> Proteus2000: Proteus2000 218000.0/201000.0
> > >> Puck2000: Puck2000 77000.0/77000.0
> > >> Rhea2000: Rhea2000 764000.0/764000.0
> > >> Rosalind2000: Rosalind2000 27000.0/27000.0
> > >> IGNF:ELG032: SPHERE PICARD 6371598.0/6371598.0
> > >> Saturn2000: Saturn2000 60268000.0/54364000.0
> > >> Sinope2000: Sinope2000 14000.0/14000.0
> > >> Telesto2000: Telesto2000 15000.0/7500.0
> > >> Tethys2000: Tethys2000 535600.0/525800.0
> > >> Thalassa2000: Thalassa2000 40000.0/40000.0
> > >> Thebe2000: Thebe2000 58000.0/42000.0
> > >> Titan2000: Titan2000 2575000.0/2575000.0
> > >> Titania2000: Titania2000 788900.0/788900.0
> > >> Triton2000: Triton2000 1352600.0/1352600.0
> > >> Umbriel2000: Umbriel2000 584700.0/584700.0
> > >> Uranus2000: Uranus2000 25559000.0/24973000.0
> > >> Venus2000: Venus2000 6051800.0/6051800.0
> > >> IGNF:ELG052: WGS72 6378135.0/6356750.520016094
> > >> IGNF:ELG102: WGS72 (NWL-10F) 6378135.0/6356750.520016094
> > >> IGNF:ELG053: WGS84 6378137.0/6356752.314245179
> > >>
> > >> The vast majority of these are planetary ellipsoids/moons, but there's
> > >> others which are less obvious (cape/IGNF*). So
> > >>
> > >> Question 1: should the non-Earth ellipsoids be included in the proj database?
> > >>
> > >> Question 2: What about cape/IGNF* ? Should they be included in proj,
> > >> or are they mistakes and should not even be included in the current
> > >> QGIS db?
> > >>
> > >> Nyall
> > >> _______________________________________________
> > >> PROJ mailing list
> > >> PROJ at lists.osgeo.org
> > >> https://lists.osgeo.org/mailman/listinfo/proj
> > >>
> > >>
> > >> _______________________________________________
> > >> PROJ mailing list
> > >> PROJ at lists.osgeo.org
> > >> https://lists.osgeo.org/mailman/listinfo/proj
> > >>
> > >>
> >
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

From even.rouault at spatialys.com  Mon Mar 18 04:18:08 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 18 Mar 2019 12:18:08 +0100
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF0CCB6E@S000014.PROD.SITAD.DK>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <CAB28Asi3R_nCkok0Cmn9A_QSbcgyoNYu+jjNW=FwXV8ipQquWw@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0CCB6E@S000014.PROD.SITAD.DK>
Message-ID: <30467587.xDqvUeCMXo@even-i700>

> I guess name should have a unique constraint if we were to guarantee unique
> names.

There is no guarantee that names are uniques, the EPSG database table 
declaration has no such guarantee itself, and we mix data from different 
authorities.
Only the tuple (auth_name, code) is guaranteed to be unique.
Actually in the proj.db, there are dupllicated names, like the following 
(after a fix I've just done since the code for the ESRI object was incorrect)

OGRFeature(SELECT):0
  auth_name (String) = EPSG
  code (String) = 1024
  name (String) = CGCS2000
  description (String) = (null)
  celestial_body_auth_name (String) = PROJ
  celestial_body_code (String) = EARTH
  semi_major_axis (Real) = 6378137
  uom_auth_name (String) = EPSG
  uom_code (String) = 9001
  inv_flattening (Real) = 298.257222101
  semi_minor_axis (Real) = (null)
  deprecated (Integer) = 0

OGRFeature(SELECT):1
  auth_name (String) = ESRI
  code (String) = 107038
  name (String) = CGCS2000
  description (String) = China Geodetic Coordinate System 2000
  celestial_body_auth_name (String) = PROJ
  celestial_body_code (String) = EARTH
  semi_major_axis (Real) = 6378137
  uom_auth_name (String) = EPSG
  uom_code (String) = 9001
  inv_flattening (Real) = 298.257222101
  semi_minor_axis (Real) = (null)
  deprecated (Integer) = 1

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From nyall.dawson at gmail.com  Mon Mar 18 04:51:14 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Mon, 18 Mar 2019 21:51:14 +1000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <30467587.xDqvUeCMXo@even-i700>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <CAB28Asi3R_nCkok0Cmn9A_QSbcgyoNYu+jjNW=FwXV8ipQquWw@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0CCB6E@S000014.PROD.SITAD.DK>
 <30467587.xDqvUeCMXo@even-i700>
Message-ID: <CAB28Asgo6t0aHw3w2xdGhG9hKCtzucB_PTgJ7rHt+E8CQ22ZbA@mail.gmail.com>

On Mon, 18 Mar 2019 at 21:18, Even Rouault <even.rouault at spatialys.com> wrote:
>
> > I guess name should have a unique constraint if we were to guarantee unique
> > names.
>
> There is no guarantee that names are uniques, the EPSG database table
> declaration has no such guarantee itself, and we mix data from different
> authorities.

Thanks for the confirmation Even!

> OGRFeature(SELECT):1
>   description (String) = China Geodetic Coordinate System 2000
>   celestial_body_code (String) = EARTH

What api can I use to get the description and celestial body for an ellipsoid?

Nyall

From even.rouault at spatialys.com  Mon Mar 18 04:56:57 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 18 Mar 2019 12:56:57 +0100
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <CAB28Asgo6t0aHw3w2xdGhG9hKCtzucB_PTgJ7rHt+E8CQ22ZbA@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <30467587.xDqvUeCMXo@even-i700>
 <CAB28Asgo6t0aHw3w2xdGhG9hKCtzucB_PTgJ7rHt+E8CQ22ZbA@mail.gmail.com>
Message-ID: <2072527.Cyz0ADoTsH@even-i700>

> > OGRFeature(SELECT):1
> > 
> >   description (String) = China Geodetic Coordinate System 2000
> >   celestial_body_code (String) = EARTH
> 
> What api can I use to get the description and celestial body for an
> ellipsoid?

There's no API for that. description is mostly a provisional field, not set 
for EPSG data (it is set for ESRI data though). And celestial body was also a 
provision for which there's no C API

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From jmckenna at gatewaygeomatics.com  Mon Mar 18 12:27:36 2019
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Mon, 18 Mar 2019 16:27:36 -0300
Subject: [PROJ] Announcing PROJ 6.0.0
In-Reply-To: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk>
References: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk>
Message-ID: <fab96772-942f-364a-c015-61ee5d0300c5@gatewaygeomatics.com>

Hi Kristian,

Just an update that I've brought this release to Sandro's attention on 
the spatialite-users list 
(https://groups.google.com/forum/#!topic/spatialite-users/eNkl3Ec8kfQ).

Thanks again for your hard work,

-jeff



On 2019-03-01 2:19 PM, Kristian Evers wrote:
> PROJ 6 has undergone extensive changes to increase its functional scope from a
> cartographic projection engine with so-called "early-binding" geodetic datum
> transformation capabilities to a more complete library supporting coordinate
> transformations and coordinate reference systems.
> 
> As a foundation for other enhancements, PROJ now includes a C++ implementation
> of the modelisation propopsed by the ISO-19111:2019 standard / OGC Abstract
> Specification Topic 2: "Referencing By Coordinates", for geodetic reference
> frames (datums), coordinate reference systems and coordinate operations.
> Construction and query of those geodetic objects is available through a new C++
> API, and also accessible for the most part from bindings in the C API.
> 
> Those geodetic objects can be imported and exported from and into the OGC
> Well-Known Text format (WKT) in its different variants: ESRI WKT, GDAL WKT 1,
> WKT2:2015 (ISO 19162:2015) and WKT2:2018 (ISO 19162:2018). Import and export of
> CRS objects from and into PROJ strings is also supported. This functionality
> was previously available in the GDAL software library (except WKT2 support
> which is a new feature), and is now an integral part of PROJ.
> 
> A unified database of geodetic objects, coordinate reference systems and their
> metadata, and coordinate operations between those CRS is now available in a
> SQLite3 database file, proj.db. This includes definitions imported from the
> IOGP EPSG dataset (v9.6.0 release), the IGNF (French national mapping agency)
> geodetic registry and the ESRI projection engine database. PROJ is now the
> reference software in the "OSGeo C stack" for this CRS and coordinate operation
> database, whereas previously this functionality was spread over PROJ, GDAL and
> libgeotiff, and used CSV or other adhoc text-based formats.
> 
> Late-binding coordinate operation capabilities, that takes  metadata such as
> area of use and accuracy into account, has been added. This can avoid in a
> number of situations the past requirement of using WGS84 as a pivot system,
> which could cause unneeded accuracy loss, or was not doable at all sometimes
> when transformation to WGS84 was not available. Those late-binding capabilities
> are now used by the proj_create_crs_to_crs() function and the cs2cs utility.
> 
> A new command line utility, projinfo, has been added to query information about
> a geodetic object of the database, import and export geodetic objects from/into
> WKT and PROJ strings, and display coordinate operations available between two
> CRSs.
> 
> Download the source distribution here:
> 
>    https://download.osgeo.org/proj/proj-6.0.0.tar.gz
>    https://download.osgeo.org/proj/proj-6.0.0.zip
> 
> 
> In addition to the new version of PROJ we are also releasing new datum grid
> packages:
> 
> proj-datumgrid-europe 1.2:
> 
>    https://download.osgeo.org/proj/proj-datumgrid-europe-1.2.tar.gz
>    https://download.osgeo.org/proj/proj-datumgrid-europe-1.2.zip
> 
>    Changes include: Grids covering the UK, France and Sweden.
> 
> proj-datumgrid-north-america 1.2:
> 
>    https://download.osgeo.org/proj/proj-datumgrid-north-america-1.2.tar.gz
>    https://download.osgeo.org/proj/proj-datumgrid-north-america-1.2.zip
> 
>    Changes include: NAD83 -> NAD83(HPGN) grids, GEOIDB12 grids and the
>    Canadian ntv2_0.gsb grid
> 
> proj-datumgrid-world 1.0
> 
>    https://download.osgeo.org/proj/proj-datumgrid-world-1.0.tar.gz
>    https://download.osgeo.org/proj/proj-datumgrid-world-1.0.zip
> 
>    This is the first version of the world wide package. Currently it only holds
>    the EGM2008 geoid grid.
> 
> 
-- 
Jeff McKenna
MapServer Consulting and Training Services
https://gatewaygeomatics.com/






From jmckenna at gatewaygeomatics.com  Mon Mar 18 13:07:17 2019
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Mon, 18 Mar 2019 17:07:17 -0300
Subject: [PROJ] Announcing PROJ 6.0.0
In-Reply-To: <fab96772-942f-364a-c015-61ee5d0300c5@gatewaygeomatics.com>
References: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk>
 <fab96772-942f-364a-c015-61ee5d0300c5@gatewaygeomatics.com>
Message-ID: <fb11fa96-c390-5068-782c-8ecbb5b08c51@gatewaygeomatics.com>

Thanks to Bas for pointing this out: the spatialite ticket link is 
https://www.gaia-gis.it/fossil/libspatialite/info/6eabdf0e6d3520a7

-jeff



On 2019-03-18 4:27 PM, Jeff McKenna wrote:
> Hi Kristian,
> 
> Just an update that I've brought this release to Sandro's attention on 
> the spatialite-users list 
> (https://groups.google.com/forum/#!topic/spatialite-users/eNkl3Ec8kfQ).
> 
> Thanks again for your hard work,
> 
> -jeff
> 
> 
> 
> On 2019-03-01 2:19 PM, Kristian Evers wrote:
>> PROJ 6 has undergone extensive changes to increase its functional 
>> scope from a
>> cartographic projection engine with so-called "early-binding" geodetic 
>> datum
>> transformation capabilities to a more complete library supporting 
>> coordinate
>> transformations and coordinate reference systems.
>>
>> As a foundation for other enhancements, PROJ now includes a C++ 
>> implementation
>> of the modelisation propopsed by the ISO-19111:2019 standard / OGC 
>> Abstract
>> Specification Topic 2: "Referencing By Coordinates", for geodetic 
>> reference
>> frames (datums), coordinate reference systems and coordinate operations.
>> Construction and query of those geodetic objects is available through 
>> a new C++
>> API, and also accessible for the most part from bindings in the C API.
>>
>> Those geodetic objects can be imported and exported from and into the OGC
>> Well-Known Text format (WKT) in its different variants: ESRI WKT, GDAL 
>> WKT 1,
>> WKT2:2015 (ISO 19162:2015) and WKT2:2018 (ISO 19162:2018). Import and 
>> export of
>> CRS objects from and into PROJ strings is also supported. This 
>> functionality
>> was previously available in the GDAL software library (except WKT2 
>> support
>> which is a new feature), and is now an integral part of PROJ.
>>
>> A unified database of geodetic objects, coordinate reference systems 
>> and their
>> metadata, and coordinate operations between those CRS is now available 
>> in a
>> SQLite3 database file, proj.db. This includes definitions imported 
>> from the
>> IOGP EPSG dataset (v9.6.0 release), the IGNF (French national mapping 
>> agency)
>> geodetic registry and the ESRI projection engine database. PROJ is now 
>> the
>> reference software in the "OSGeo C stack" for this CRS and coordinate 
>> operation
>> database, whereas previously this functionality was spread over PROJ, 
>> GDAL and
>> libgeotiff, and used CSV or other adhoc text-based formats.
>>
>> Late-binding coordinate operation capabilities, that takes  metadata 
>> such as
>> area of use and accuracy into account, has been added. This can avoid 
>> in a
>> number of situations the past requirement of using WGS84 as a pivot 
>> system,
>> which could cause unneeded accuracy loss, or was not doable at all 
>> sometimes
>> when transformation to WGS84 was not available. Those late-binding 
>> capabilities
>> are now used by the proj_create_crs_to_crs() function and the cs2cs 
>> utility.
>>
>> A new command line utility, projinfo, has been added to query 
>> information about
>> a geodetic object of the database, import and export geodetic objects 
>> from/into
>> WKT and PROJ strings, and display coordinate operations available 
>> between two
>> CRSs.
>>
>> Download the source distribution here:
>>
>>    https://download.osgeo.org/proj/proj-6.0.0.tar.gz
>>    https://download.osgeo.org/proj/proj-6.0.0.zip
>>
>>
>> In addition to the new version of PROJ we are also releasing new datum 
>> grid
>> packages:
>>
>> proj-datumgrid-europe 1.2:
>>
>>    https://download.osgeo.org/proj/proj-datumgrid-europe-1.2.tar.gz
>>    https://download.osgeo.org/proj/proj-datumgrid-europe-1.2.zip
>>
>>    Changes include: Grids covering the UK, France and Sweden.
>>
>> proj-datumgrid-north-america 1.2:
>>
>>    
>> https://download.osgeo.org/proj/proj-datumgrid-north-america-1.2.tar.gz
>>    https://download.osgeo.org/proj/proj-datumgrid-north-america-1.2.zip
>>
>>    Changes include: NAD83 -> NAD83(HPGN) grids, GEOIDB12 grids and the
>>    Canadian ntv2_0.gsb grid
>>
>> proj-datumgrid-world 1.0
>>
>>    https://download.osgeo.org/proj/proj-datumgrid-world-1.0.tar.gz
>>    https://download.osgeo.org/proj/proj-datumgrid-world-1.0.zip
>>
>>    This is the first version of the world wide package. Currently it 
>> only holds
>>    the EGM2008 geoid grid.
>>
>>


-- 
Jeff McKenna
MapServer Consulting and Training Services
https://gatewaygeomatics.com/

From sebastic at xs4all.nl  Mon Mar 18 13:15:30 2019
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Mon, 18 Mar 2019 21:15:30 +0100
Subject: [PROJ] Announcing PROJ 6.0.0
In-Reply-To: <fb11fa96-c390-5068-782c-8ecbb5b08c51@gatewaygeomatics.com>
References: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk>
 <fab96772-942f-364a-c015-61ee5d0300c5@gatewaygeomatics.com>
 <fb11fa96-c390-5068-782c-8ecbb5b08c51@gatewaygeomatics.com>
Message-ID: <08642438-aecf-f8eb-899c-b64809e65e22@xs4all.nl>

On 3/18/19 9:07 PM, Jeff McKenna wrote:
> Thanks to Bas for pointing this out: the spatialite ticket link is
> https://www.gaia-gis.it/fossil/libspatialite/info/6eabdf0e6d3520a7

And as mentioned elsewhere on this list [0], that link and others are
included in the proj.h adoption status wiki:

 https://github.com/OSGeo/proj.4/wiki/proj.h-adoption-status

[0] https://lists.osgeo.org/pipermail/proj/2019-March/008330.html

Kind Regards,

Bas

-- 
 GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

From jmckenna at gatewaygeomatics.com  Mon Mar 18 13:24:04 2019
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Mon, 18 Mar 2019 17:24:04 -0300
Subject: [PROJ] Announcing PROJ 6.0.0
In-Reply-To: <08642438-aecf-f8eb-899c-b64809e65e22@xs4all.nl>
References: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk>
 <fab96772-942f-364a-c015-61ee5d0300c5@gatewaygeomatics.com>
 <fb11fa96-c390-5068-782c-8ecbb5b08c51@gatewaygeomatics.com>
 <08642438-aecf-f8eb-899c-b64809e65e22@xs4all.nl>
Message-ID: <93e77a50-ec65-7e4b-7a13-6b3d8fe86e54@gatewaygeomatics.com>

On 2019-03-18 5:15 PM, Sebastiaan Couwenberg wrote:
> On 3/18/19 9:07 PM, Jeff McKenna wrote:
>> Thanks to Bas for pointing this out: the spatialite ticket link is
>> https://www.gaia-gis.it/fossil/libspatialite/info/6eabdf0e6d3520a7
> 
> And as mentioned elsewhere on this list [0], that link and others are
> included in the proj.h adoption status wiki:
> 
>   https://github.com/OSGeo/proj.4/wiki/proj.h-adoption-status
> 
> [0] https://lists.osgeo.org/pipermail/proj/2019-March/008330.html
> 
> Kind Regards,
> 
> Bas
> 

Understood.

In any case, I think discussing the plans on the spatialite-users list 
is also good for the community to know the issue.

Anyway, sorry for the noise.

-jeff



-- 
Jeff McKenna
MapServer Consulting and Training Services
https://gatewaygeomatics.com/

From nyall.dawson at gmail.com  Mon Mar 18 15:33:11 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Tue, 19 Mar 2019 08:33:11 +1000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <2072527.Cyz0ADoTsH@even-i700>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <30467587.xDqvUeCMXo@even-i700>
 <CAB28Asgo6t0aHw3w2xdGhG9hKCtzucB_PTgJ7rHt+E8CQ22ZbA@mail.gmail.com>
 <2072527.Cyz0ADoTsH@even-i700>
Message-ID: <CAB28AsgO+mp5J=ZfLy0Yd73O6-hPbnohDUa=JpTMvur5nqFd1w@mail.gmail.com>

On Mon, 18 Mar 2019 at 21:56, Even Rouault <even.rouault at spatialys.com> wrote:
>
> > > OGRFeature(SELECT):1
> > >
> > >   description (String) = China Geodetic Coordinate System 2000
> > >   celestial_body_code (String) = EARTH
> >
> > What api can I use to get the description and celestial body for an
> > ellipsoid?
>
> There's no API for that. description is mostly a provisional field, not set
> for EPSG data (it is set for ESRI data though). And celestial body was also a
> provision for which there's no C API

Is this negotiable? Would a PR exposing these be welcome?

Nyall

From nyall.dawson at gmail.com  Mon Mar 18 18:19:44 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Tue, 19 Mar 2019 11:19:44 +1000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF0CCAFD@S000014.PROD.SITAD.DK>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
 <CAB28AsipCSyLgguNokYy=qC_R5Y0oMw7yF0WasFK7kk4JkUN8Q@mail.gmail.com>
 <5D8ADDC3-9D77-4772-9A56-EB961C009FBD@sdfe.dk>
 <CAB28AsimhXiSBk9Y+z5C9VHDHfsOYMTbj+WsavEVkgeXZhpc5Q@mail.gmail.com>
 <8B0750B6-7DCA-4F5A-9F06-0FBBD1AD2A22@sdfe.dk>
 <CAB28AsiW18bZvUKXigcOv_509CYOhgsMxTeyjgUJmofWUkOLvw@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0CCAFD@S000014.PROD.SITAD.DK>
Message-ID: <CAB28Asgqzf9nMMMebWwAhzV_6GQOpY-+QmhNj5KSc9zpASjiTg@mail.gmail.com>

On Mon, 18 Mar 2019 at 20:19, Kristian Evers <kreve at sdfe.dk> wrote:
>
> Instead of using the acronym you can just use the parameters from
> proj_ellipsoid_get_parameters() directly, so that
>
>      +ellpsg=GRS80
>
> becomes
>
>     + a=6378137.0  +rf=298.257222101.
>
> For both your use cases that should work fine. You will of course have
> to do a bit of string manipulation to achieve this.

I'm a little confused by some of the results I'm seeing here. Eg:

> bin/projinfo -o all "Airy 1830"

PROJ string:
+ellps=airy

WKT2_2015 string:
ELLIPSOID["Airy 1830",6377563.396,299.3249646,
    LENGTHUNIT["metre",1],
    ID["EPSG",7001]]
...

Looks good. But if I try querying EPSG:7001, I get

> bin/projinfo -o all "EPSG:7001"

input string: parsing of user string failed: crs not found

Shouldn't that give the same results as searching by name?

Nyall







>
> /Kristian
>
> -----Oprindelig meddelelse-----
> Fra: PROJ <proj-bounces at lists.osgeo.org> På vegne af Nyall Dawson
> Sendt: 18. marts 2019 10:40
> Til: Kristian Evers <kreve at sdfe.dk>
> Cc: PROJ <proj at lists.osgeo.org>
> Emne: Re: [PROJ] Proj 6 API questions
>
> On Mon, 18 Mar 2019 at 17:34, Kristian Evers <kreve at sdfe.dk> wrote:
> >
> > I may be wrong but I don’t think there are acronyms for them. It’s based
> > on the EPSG dataset and acronyms are not assigned in that regime. Do
> > you actually need them or is this just so that it fits better in existing QGIS
> > infrastructure?
>
> There's two things QGIS uses this for:
>
> 1. When a user selects the CRS for their project, the project
> ellipsoid (used when calculating geodetic distances/areas for the
> project) is automatically set to match the ellipsoid corresponding to
> this CRS. i.e. select EPSG:28356 and the project ellipsoid is set to
> GRS80, set it to EPSG:102013 and you get International 1909.  So we
> need a way to get the ellipsoid from an acronym (or alternatively,
> directly from a CRS).
>
> 2. When performing geodetic distance/area calculations, QGIS
> transforms coordinates from the layer's source CRS to a crs crafted
> from "+proj=longlat +ellps=XXXXX +nodefs", and then uses the result
> when performing the geodetic calculations. So we need a way to obtain
> the ellipsoid acronym given an ellipsoid definition (where a
> corresponding one exists).
>
> (Full disclaimer: I'm not fully aware of the background behind this
> logic, and there may be superior logic to follow. Let me know if you
> think there is!)
>
> Nyall
>
>
> >
> > We could potentially assign acronyms for all ellipsoids but I fear that will
> > become a maintenance mess whenever the EPSG dataset is updated.
> >
> > /Kristian
> >
> > > On 18 Mar 2019, at 08:27, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> > >
> > > On Mon, 18 Mar 2019 at 16:56, Kristian Evers <kreve at sdfe.dk> wrote:
> > >>
> > >> You use proj_get_authorities_from_database() for that. Generally there’s functions
> > >> for retrieving all info like that, just search around in the function reference a bit and you’ll
> > >> find it.
> > >
> > > Ok, that part is working, and I'm seeing a LOT more! But now I'm a bit
> > > confused... if I use this approach to iterate through the ellipsoids,
> > > is there anyway to get the ellipsoid acronym from them? Using
> > > proj_list_ellps I could get PJ_ELLPS->id.
> > >
> > > Nyall
> > >
> > >
> > >
> > >>
> > >> /Kristian
> > >>
> > >> On 18 Mar 2019, at 07:52, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> > >>
> > >> On Mon, 18 Mar 2019 at 16:42, Kristian Evers <kreve at sdfe.dk> wrote:
> > >>
> > >>
> > >> Hi Nyall,
> > >>
> > >> I am very happy to see that you have started working on this!
> > >>
> > >> You will probably get less discrepancies between the QGIS list of ellipsoids
> > >> and the PROJ equivalent if you instead use proj_get_codes_from_database
> > >> using type PJ_TYPE_ELLIPSOID.
> > >>
> > >>
> > >> What should I use as auth_name if I want to get ALL ellipsoids? The
> > >> dox state it must not be null...
> > >>
> > >> Thanks for the detailed pointers, I'll let you know the result!
> > >>
> > >> Nyall
> > >>
> > >>
> > >> You should then be able to get the
> > >> parameters with proj_ellipsoid_get_parameters. This is untested on my part
> > >> but I believe that is the general workflow you have to go through to get the
> > >> ellipsoid out of proj.db.
> > >>
> > >> proj_list_ellps() simply shows you the same list as you would get from calling
> > >> `proj -le`, i.e. ellipsoids that can be used with `+ellps=xxx` parameters. This
> > >> is confusing and I shall think of a way to change the docs so it is less confusing :-)
> > >>
> > >> It would be interesting to see the difference between the ellipsoid tables from
> > >> The QGIS and PROJ databases.
> > >>
> > >> /Kristian
> > >>
> > >> On 18 Mar 2019, at 04:39, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> > >>
> > >> Hi list,
> > >>
> > >> So (thanks for sponsorship from the ICSM), I'm working on porting QGIS
> > >> to the Proj 6 API. I suspect I'll have many more questions (especially
> > >> as I attempt to drop QGIS' own custom projection database in favour of
> > >> the upstream proj one). Let's get started...
> > >>
> > >> I thought I'd begin with a simple task of replacing QGIS' ellipsoid db
> > >> with proj's, using proj_list_ellps(). QGIS has this table of
> > >> "standard" ellipsoids, built up from... somewhere... in the vast
> > >> history of the QGIS project. When comparing against proj's db, it
> > >> includes many items which are missing in proj's:
> > >>
> > >> Adrastea2000: Adrastea2000 10000.0/7000.0
> > >> Amalthea2000: Amalthea2000 125000.0/64000.0
> > >> Ananke2000: Ananke2000 10000.0/10000.0
> > >> Ariel2000: Ariel2000 581100.0/577700.0
> > >> Atlas2000: Atlas2000 18500.0/13500.0
> > >> Belinda2000: Belinda2000 33000.0/33000.0
> > >> Bianca2000: Bianca2000 21000.0/21000.0
> > >> Callisto2000: Callisto2000 2409400.0/2409300.0
> > >> Calypso2000: Calypso2000 15000.0/8000.0
> > >> Carme2000: Carme2000 15000.0/15000.0
> > >> Charon2000: Charon2000 593000.0/593000.0
> > >> IGNF:ELG004: Clarke 1866 6378206.4/6356583.799998981
> > >> IGNF:ELG003: Clarke 1880 Anglais 6378249.1453/6356514.8698
> > >> IGNF:ELG010: Clarke 1880 IGN 6378249.2/6356514.999978254
> > >> cape: Clarke 1880 mod. 6378249.145/6356514.966398753
> > >> Cordelia2000: Cordelia2000 13000.0/13000.0
> > >> Cressida2000: Cressida2000 31000.0/31000.0
> > >> Deimos2000: Deimos2000 7500.0/5200.0
> > >> Desdemona2000: Desdemona2000 27000.0/27000.0
> > >> Despina2000: Despina2000 74000.0/74000.0
> > >> Dione2000: Dione2000 560000.0/560000.0
> > >> Earth2000: Earth2000 6378140.0/6356750.0
> > >> Elara2000: Elara2000 40000.0/40000.0
> > >> Enceladus2000: Enceladus2000 256300.0/244600.0
> > >> Epimetheus2000: Epimetheus2000 69000.0/55000.0
> > >> Europa2000: Europa2000 1564130.0/1560930.0
> > >> Galatea2000: Galatea2000 79000.0/79000.0
> > >> Ganymede2000: Ganymede2000 2632400.0/2632350.0
> > >> Helene2000: Helene2000 16000.0/16000.0
> > >> Himalia2000: Himalia2000 85000.0/85000.0
> > >> Hyperion2000: Hyperion2000 164000.0/107000.0
> > >> IGNF:ELG108: IAG GRS 1967 6378160.0/6356774.5161
> > >> IGNF:ELG037: IAG GRS 1980 6378137.0/6356752.314140356
> > >> Iapetus2000: Iapetus2000 718000.0/718000.0
> > >> IGNF:ELG001: International-Hayford 1909 6378388.0/6356911.9461279465
> > >> Io2000: Io2000 1829400.0/1815700.0
> > >> Janus2000: Janus2000 97000.0/77000.0
> > >> Juliet2000: Juliet2000 42000.0/42000.0
> > >> Jupiter2000: Jupiter2000 71492000.0/66854000.0
> > >> Larissa2000: Larissa2000 96000.0/96000.0
> > >> Leda2000: Leda2000 5000.0/5000.0
> > >> Lysithea2000: Lysithea2000 12000.0/12000.0
> > >> Mars2000: Mars2000 3396190.0/3376200.0
> > >> Mercury2000: Mercury2000 2439700.0/2439700.0
> > >> Metis2000: Metis2000 21500.0/21500.0
> > >> Mimas2000: Mimas2000 209100.0/191400.0
> > >> Miranda2000: Miranda2000 240400.0/232900.0
> > >> Moon2000: Moon2000 1737400.0/1737400.0
> > >> Naiad2000: Naiad2000 29000.0/29000.0
> > >> Neptune2000: Neptune2000 24764000.0/24341000.0
> > >> Nereid2000: Nereid2000 170000.0/170000.0
> > >> Oberon2000: Oberon2000 761400.0/761400.0
> > >> Ophelia2000: Ophelia2000 15000.0/15000.0
> > >> IGNF:ELG017: PLESSIS 1817 6376523.0/6355862.933255573
> > >> Pan2000: Pan2000 10000.0/10000.0
> > >> Pandora2000: Pandora2000 55000.0/31000.0
> > >> Pasiphae2000: Pasiphae2000 18000.0/18000.0
> > >> Phobos2000: Phobos2000 13400.0/9200.0
> > >> Phoebe2000: Phoebe2000 115000.0/105000.0
> > >> Pluto2000: Pluto2000 1195000.0/1195000.0
> > >> Portia2000: Portia2000 54000.0/54000.0
> > >> Prometheus2000: Prometheus2000 74000.0/34000.0
> > >> Proteus2000: Proteus2000 218000.0/201000.0
> > >> Puck2000: Puck2000 77000.0/77000.0
> > >> Rhea2000: Rhea2000 764000.0/764000.0
> > >> Rosalind2000: Rosalind2000 27000.0/27000.0
> > >> IGNF:ELG032: SPHERE PICARD 6371598.0/6371598.0
> > >> Saturn2000: Saturn2000 60268000.0/54364000.0
> > >> Sinope2000: Sinope2000 14000.0/14000.0
> > >> Telesto2000: Telesto2000 15000.0/7500.0
> > >> Tethys2000: Tethys2000 535600.0/525800.0
> > >> Thalassa2000: Thalassa2000 40000.0/40000.0
> > >> Thebe2000: Thebe2000 58000.0/42000.0
> > >> Titan2000: Titan2000 2575000.0/2575000.0
> > >> Titania2000: Titania2000 788900.0/788900.0
> > >> Triton2000: Triton2000 1352600.0/1352600.0
> > >> Umbriel2000: Umbriel2000 584700.0/584700.0
> > >> Uranus2000: Uranus2000 25559000.0/24973000.0
> > >> Venus2000: Venus2000 6051800.0/6051800.0
> > >> IGNF:ELG052: WGS72 6378135.0/6356750.520016094
> > >> IGNF:ELG102: WGS72 (NWL-10F) 6378135.0/6356750.520016094
> > >> IGNF:ELG053: WGS84 6378137.0/6356752.314245179
> > >>
> > >> The vast majority of these are planetary ellipsoids/moons, but there's
> > >> others which are less obvious (cape/IGNF*). So
> > >>
> > >> Question 1: should the non-Earth ellipsoids be included in the proj database?
> > >>
> > >> Question 2: What about cape/IGNF* ? Should they be included in proj,
> > >> or are they mistakes and should not even be included in the current
> > >> QGIS db?
> > >>
> > >> Nyall
> > >> _______________________________________________
> > >> PROJ mailing list
> > >> PROJ at lists.osgeo.org
> > >> https://lists.osgeo.org/mailman/listinfo/proj
> > >>
> > >>
> > >> _______________________________________________
> > >> PROJ mailing list
> > >> PROJ at lists.osgeo.org
> > >> https://lists.osgeo.org/mailman/listinfo/proj
> > >>
> > >>
> >
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

From nyall.dawson at gmail.com  Mon Mar 18 20:20:25 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Tue, 19 Mar 2019 13:20:25 +1000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
Message-ID: <CAB28AsgxK24Yj4wMLNHaW7sHdggurS2U3+JmKvWdhGJ6XSZUFw@mail.gmail.com>

On Mon, 18 Mar 2019 at 16:42, Kristian Evers <kreve at sdfe.dk> wrote:

> It would be interesting to see the difference between the ellipsoid tables from
> The QGIS and PROJ databases.
>

Using the latest approach, the older QGIS ellipsoids I haven't been
able to match are whittled down to:

acronym/name/major/minor

['andrae','Andrae 1876 (Den., Iclnd.)', 6377104.43,6355847.415233333],
['CPM','Comm. des Poids et Mesures 1799',6375738.7,6356666.221912112],
['delmbr','Delambre 1810 (Belgium)',6376428.0,6355957.926163724],
['Earth2000','Earth2000',6378140.0,6356750.0],
['kaula','Kaula 1961',6378163.0,6356776.99208691],
['lerch','Lerch 1979',6378139.0,6356754.291510342],
['MERIT','MERIT 1983',6378137.0,6356752.298215969],
['mprts','Maupertius 1738',6397300.0,6363806.282722513],
['new_intl','New International 1967',6378157.5,6356772.2],
['WGS60','WGS60',6378165.0,6356783.286959437]

Any clues on these?

Nyall



> /Kristian
>
> On 18 Mar 2019, at 04:39, Nyall Dawson <nyall.dawson at gmail.com> wrote:
>
> Hi list,
>
> So (thanks for sponsorship from the ICSM), I'm working on porting QGIS
> to the Proj 6 API. I suspect I'll have many more questions (especially
> as I attempt to drop QGIS' own custom projection database in favour of
> the upstream proj one). Let's get started...
>
> I thought I'd begin with a simple task of replacing QGIS' ellipsoid db
> with proj's, using proj_list_ellps(). QGIS has this table of
> "standard" ellipsoids, built up from... somewhere... in the vast
> history of the QGIS project. When comparing against proj's db, it
> includes many items which are missing in proj's:
>
> Adrastea2000: Adrastea2000 10000.0/7000.0
> Amalthea2000: Amalthea2000 125000.0/64000.0
> Ananke2000: Ananke2000 10000.0/10000.0
> Ariel2000: Ariel2000 581100.0/577700.0
> Atlas2000: Atlas2000 18500.0/13500.0
> Belinda2000: Belinda2000 33000.0/33000.0
> Bianca2000: Bianca2000 21000.0/21000.0
> Callisto2000: Callisto2000 2409400.0/2409300.0
> Calypso2000: Calypso2000 15000.0/8000.0
> Carme2000: Carme2000 15000.0/15000.0
> Charon2000: Charon2000 593000.0/593000.0
> IGNF:ELG004: Clarke 1866 6378206.4/6356583.799998981
> IGNF:ELG003: Clarke 1880 Anglais 6378249.1453/6356514.8698
> IGNF:ELG010: Clarke 1880 IGN 6378249.2/6356514.999978254
> cape: Clarke 1880 mod. 6378249.145/6356514.966398753
> Cordelia2000: Cordelia2000 13000.0/13000.0
> Cressida2000: Cressida2000 31000.0/31000.0
> Deimos2000: Deimos2000 7500.0/5200.0
> Desdemona2000: Desdemona2000 27000.0/27000.0
> Despina2000: Despina2000 74000.0/74000.0
> Dione2000: Dione2000 560000.0/560000.0
> Earth2000: Earth2000 6378140.0/6356750.0
> Elara2000: Elara2000 40000.0/40000.0
> Enceladus2000: Enceladus2000 256300.0/244600.0
> Epimetheus2000: Epimetheus2000 69000.0/55000.0
> Europa2000: Europa2000 1564130.0/1560930.0
> Galatea2000: Galatea2000 79000.0/79000.0
> Ganymede2000: Ganymede2000 2632400.0/2632350.0
> Helene2000: Helene2000 16000.0/16000.0
> Himalia2000: Himalia2000 85000.0/85000.0
> Hyperion2000: Hyperion2000 164000.0/107000.0
> IGNF:ELG108: IAG GRS 1967 6378160.0/6356774.5161
> IGNF:ELG037: IAG GRS 1980 6378137.0/6356752.314140356
> Iapetus2000: Iapetus2000 718000.0/718000.0
> IGNF:ELG001: International-Hayford 1909 6378388.0/6356911.9461279465
> Io2000: Io2000 1829400.0/1815700.0
> Janus2000: Janus2000 97000.0/77000.0
> Juliet2000: Juliet2000 42000.0/42000.0
> Jupiter2000: Jupiter2000 71492000.0/66854000.0
> Larissa2000: Larissa2000 96000.0/96000.0
> Leda2000: Leda2000 5000.0/5000.0
> Lysithea2000: Lysithea2000 12000.0/12000.0
> Mars2000: Mars2000 3396190.0/3376200.0
> Mercury2000: Mercury2000 2439700.0/2439700.0
> Metis2000: Metis2000 21500.0/21500.0
> Mimas2000: Mimas2000 209100.0/191400.0
> Miranda2000: Miranda2000 240400.0/232900.0
> Moon2000: Moon2000 1737400.0/1737400.0
> Naiad2000: Naiad2000 29000.0/29000.0
> Neptune2000: Neptune2000 24764000.0/24341000.0
> Nereid2000: Nereid2000 170000.0/170000.0
> Oberon2000: Oberon2000 761400.0/761400.0
> Ophelia2000: Ophelia2000 15000.0/15000.0
> IGNF:ELG017: PLESSIS 1817 6376523.0/6355862.933255573
> Pan2000: Pan2000 10000.0/10000.0
> Pandora2000: Pandora2000 55000.0/31000.0
> Pasiphae2000: Pasiphae2000 18000.0/18000.0
> Phobos2000: Phobos2000 13400.0/9200.0
> Phoebe2000: Phoebe2000 115000.0/105000.0
> Pluto2000: Pluto2000 1195000.0/1195000.0
> Portia2000: Portia2000 54000.0/54000.0
> Prometheus2000: Prometheus2000 74000.0/34000.0
> Proteus2000: Proteus2000 218000.0/201000.0
> Puck2000: Puck2000 77000.0/77000.0
> Rhea2000: Rhea2000 764000.0/764000.0
> Rosalind2000: Rosalind2000 27000.0/27000.0
> IGNF:ELG032: SPHERE PICARD 6371598.0/6371598.0
> Saturn2000: Saturn2000 60268000.0/54364000.0
> Sinope2000: Sinope2000 14000.0/14000.0
> Telesto2000: Telesto2000 15000.0/7500.0
> Tethys2000: Tethys2000 535600.0/525800.0
> Thalassa2000: Thalassa2000 40000.0/40000.0
> Thebe2000: Thebe2000 58000.0/42000.0
> Titan2000: Titan2000 2575000.0/2575000.0
> Titania2000: Titania2000 788900.0/788900.0
> Triton2000: Triton2000 1352600.0/1352600.0
> Umbriel2000: Umbriel2000 584700.0/584700.0
> Uranus2000: Uranus2000 25559000.0/24973000.0
> Venus2000: Venus2000 6051800.0/6051800.0
> IGNF:ELG052: WGS72 6378135.0/6356750.520016094
> IGNF:ELG102: WGS72 (NWL-10F) 6378135.0/6356750.520016094
> IGNF:ELG053: WGS84 6378137.0/6356752.314245179
>
> The vast majority of these are planetary ellipsoids/moons, but there's
> others which are less obvious (cape/IGNF*). So
>
> Question 1: should the non-Earth ellipsoids be included in the proj database?
>
> Question 2: What about cape/IGNF* ? Should they be included in proj,
> or are they mistakes and should not even be included in the current
> QGIS db?
>
> Nyall
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
>

From kreve at sdfe.dk  Mon Mar 18 22:36:01 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 19 Mar 2019 05:36:01 +0000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <CAB28Asgqzf9nMMMebWwAhzV_6GQOpY-+QmhNj5KSc9zpASjiTg@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
 <CAB28AsipCSyLgguNokYy=qC_R5Y0oMw7yF0WasFK7kk4JkUN8Q@mail.gmail.com>
 <5D8ADDC3-9D77-4772-9A56-EB961C009FBD@sdfe.dk>
 <CAB28AsimhXiSBk9Y+z5C9VHDHfsOYMTbj+WsavEVkgeXZhpc5Q@mail.gmail.com>
 <8B0750B6-7DCA-4F5A-9F06-0FBBD1AD2A22@sdfe.dk>
 <CAB28AsiW18bZvUKXigcOv_509CYOhgsMxTeyjgUJmofWUkOLvw@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0CCAFD@S000014.PROD.SITAD.DK>
 <CAB28Asgqzf9nMMMebWwAhzV_6GQOpY-+QmhNj5KSc9zpASjiTg@mail.gmail.com>
Message-ID: <5E76C96B-383B-4737-A196-2D5A8EC2FAEA@sdfe.dk>



> On 19 Mar 2019, at 02:19, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> 
> On Mon, 18 Mar 2019 at 20:19, Kristian Evers <kreve at sdfe.dk> wrote:
>> 
>> Instead of using the acronym you can just use the parameters from
>> proj_ellipsoid_get_parameters() directly, so that
>> 
>>     +ellpsg=GRS80
>> 
>> becomes
>> 
>>    + a=6378137.0  +rf=298.257222101.
>> 
>> For both your use cases that should work fine. You will of course have
>> to do a bit of string manipulation to achieve this.
> 
> I'm a little confused by some of the results I'm seeing here. Eg:
> 
>> bin/projinfo -o all "Airy 1830"
> 
> PROJ string:
> +ellps=airy
> 
> WKT2_2015 string:
> ELLIPSOID["Airy 1830",6377563.396,299.3249646,
>    LENGTHUNIT["metre",1],
>    ID["EPSG",7001]]
> ...
> 
> Looks good. But if I try querying EPSG:7001, I get
> 
>> bin/projinfo -o all "EPSG:7001"
> 
> input string: parsing of user string failed: crs not found
> 
> Shouldn't that give the same results as searching by name?
> 

From the projinfo docs:

"where {object_definition} or {object_definition} is a PROJ string, a WKT string,
an object name or a AUTHORITY:CODE (where AUTHORITY is the name of a
CRS authority and CODE the code of a CRS found in the proj.db database)."

You are giving a authority:code combination so it is only looking for a CRS. With
the -k switch you can change that behaviour to look for a operation instead. 

Maybe there’s a need for more options to the -k switch? Like ellipsoid, axis, AoU
and so on?

> Nyall
> 
> 
> 
> 
> 
> 
> 
>> 
>> /Kristian
>> 
>> -----Oprindelig meddelelse-----
>> Fra: PROJ <proj-bounces at lists.osgeo.org> På vegne af Nyall Dawson
>> Sendt: 18. marts 2019 10:40
>> Til: Kristian Evers <kreve at sdfe.dk>
>> Cc: PROJ <proj at lists.osgeo.org>
>> Emne: Re: [PROJ] Proj 6 API questions
>> 
>> On Mon, 18 Mar 2019 at 17:34, Kristian Evers <kreve at sdfe.dk> wrote:
>>> 
>>> I may be wrong but I don’t think there are acronyms for them. It’s based
>>> on the EPSG dataset and acronyms are not assigned in that regime. Do
>>> you actually need them or is this just so that it fits better in existing QGIS
>>> infrastructure?
>> 
>> There's two things QGIS uses this for:
>> 
>> 1. When a user selects the CRS for their project, the project
>> ellipsoid (used when calculating geodetic distances/areas for the
>> project) is automatically set to match the ellipsoid corresponding to
>> this CRS. i.e. select EPSG:28356 and the project ellipsoid is set to
>> GRS80, set it to EPSG:102013 and you get International 1909.  So we
>> need a way to get the ellipsoid from an acronym (or alternatively,
>> directly from a CRS).
>> 
>> 2. When performing geodetic distance/area calculations, QGIS
>> transforms coordinates from the layer's source CRS to a crs crafted
>> from "+proj=longlat +ellps=XXXXX +nodefs", and then uses the result
>> when performing the geodetic calculations. So we need a way to obtain
>> the ellipsoid acronym given an ellipsoid definition (where a
>> corresponding one exists).
>> 
>> (Full disclaimer: I'm not fully aware of the background behind this
>> logic, and there may be superior logic to follow. Let me know if you
>> think there is!)
>> 
>> Nyall
>> 
>> 
>>> 
>>> We could potentially assign acronyms for all ellipsoids but I fear that will
>>> become a maintenance mess whenever the EPSG dataset is updated.
>>> 
>>> /Kristian
>>> 
>>>> On 18 Mar 2019, at 08:27, Nyall Dawson <nyall.dawson at gmail.com> wrote:
>>>> 
>>>> On Mon, 18 Mar 2019 at 16:56, Kristian Evers <kreve at sdfe.dk> wrote:
>>>>> 
>>>>> You use proj_get_authorities_from_database() for that. Generally there’s functions
>>>>> for retrieving all info like that, just search around in the function reference a bit and you’ll
>>>>> find it.
>>>> 
>>>> Ok, that part is working, and I'm seeing a LOT more! But now I'm a bit
>>>> confused... if I use this approach to iterate through the ellipsoids,
>>>> is there anyway to get the ellipsoid acronym from them? Using
>>>> proj_list_ellps I could get PJ_ELLPS->id.
>>>> 
>>>> Nyall
>>>> 
>>>> 
>>>> 
>>>>> 
>>>>> /Kristian
>>>>> 
>>>>> On 18 Mar 2019, at 07:52, Nyall Dawson <nyall.dawson at gmail.com> wrote:
>>>>> 
>>>>> On Mon, 18 Mar 2019 at 16:42, Kristian Evers <kreve at sdfe.dk> wrote:
>>>>> 
>>>>> 
>>>>> Hi Nyall,
>>>>> 
>>>>> I am very happy to see that you have started working on this!
>>>>> 
>>>>> You will probably get less discrepancies between the QGIS list of ellipsoids
>>>>> and the PROJ equivalent if you instead use proj_get_codes_from_database
>>>>> using type PJ_TYPE_ELLIPSOID.
>>>>> 
>>>>> 
>>>>> What should I use as auth_name if I want to get ALL ellipsoids? The
>>>>> dox state it must not be null...
>>>>> 
>>>>> Thanks for the detailed pointers, I'll let you know the result!
>>>>> 
>>>>> Nyall
>>>>> 
>>>>> 
>>>>> You should then be able to get the
>>>>> parameters with proj_ellipsoid_get_parameters. This is untested on my part
>>>>> but I believe that is the general workflow you have to go through to get the
>>>>> ellipsoid out of proj.db.
>>>>> 
>>>>> proj_list_ellps() simply shows you the same list as you would get from calling
>>>>> `proj -le`, i.e. ellipsoids that can be used with `+ellps=xxx` parameters. This
>>>>> is confusing and I shall think of a way to change the docs so it is less confusing :-)
>>>>> 
>>>>> It would be interesting to see the difference between the ellipsoid tables from
>>>>> The QGIS and PROJ databases.
>>>>> 
>>>>> /Kristian
>>>>> 
>>>>> On 18 Mar 2019, at 04:39, Nyall Dawson <nyall.dawson at gmail.com> wrote:
>>>>> 
>>>>> Hi list,
>>>>> 
>>>>> So (thanks for sponsorship from the ICSM), I'm working on porting QGIS
>>>>> to the Proj 6 API. I suspect I'll have many more questions (especially
>>>>> as I attempt to drop QGIS' own custom projection database in favour of
>>>>> the upstream proj one). Let's get started...
>>>>> 
>>>>> I thought I'd begin with a simple task of replacing QGIS' ellipsoid db
>>>>> with proj's, using proj_list_ellps(). QGIS has this table of
>>>>> "standard" ellipsoids, built up from... somewhere... in the vast
>>>>> history of the QGIS project. When comparing against proj's db, it
>>>>> includes many items which are missing in proj's:
>>>>> 
>>>>> Adrastea2000: Adrastea2000 10000.0/7000.0
>>>>> Amalthea2000: Amalthea2000 125000.0/64000.0
>>>>> Ananke2000: Ananke2000 10000.0/10000.0
>>>>> Ariel2000: Ariel2000 581100.0/577700.0
>>>>> Atlas2000: Atlas2000 18500.0/13500.0
>>>>> Belinda2000: Belinda2000 33000.0/33000.0
>>>>> Bianca2000: Bianca2000 21000.0/21000.0
>>>>> Callisto2000: Callisto2000 2409400.0/2409300.0
>>>>> Calypso2000: Calypso2000 15000.0/8000.0
>>>>> Carme2000: Carme2000 15000.0/15000.0
>>>>> Charon2000: Charon2000 593000.0/593000.0
>>>>> IGNF:ELG004: Clarke 1866 6378206.4/6356583.799998981
>>>>> IGNF:ELG003: Clarke 1880 Anglais 6378249.1453/6356514.8698
>>>>> IGNF:ELG010: Clarke 1880 IGN 6378249.2/6356514.999978254
>>>>> cape: Clarke 1880 mod. 6378249.145/6356514.966398753
>>>>> Cordelia2000: Cordelia2000 13000.0/13000.0
>>>>> Cressida2000: Cressida2000 31000.0/31000.0
>>>>> Deimos2000: Deimos2000 7500.0/5200.0
>>>>> Desdemona2000: Desdemona2000 27000.0/27000.0
>>>>> Despina2000: Despina2000 74000.0/74000.0
>>>>> Dione2000: Dione2000 560000.0/560000.0
>>>>> Earth2000: Earth2000 6378140.0/6356750.0
>>>>> Elara2000: Elara2000 40000.0/40000.0
>>>>> Enceladus2000: Enceladus2000 256300.0/244600.0
>>>>> Epimetheus2000: Epimetheus2000 69000.0/55000.0
>>>>> Europa2000: Europa2000 1564130.0/1560930.0
>>>>> Galatea2000: Galatea2000 79000.0/79000.0
>>>>> Ganymede2000: Ganymede2000 2632400.0/2632350.0
>>>>> Helene2000: Helene2000 16000.0/16000.0
>>>>> Himalia2000: Himalia2000 85000.0/85000.0
>>>>> Hyperion2000: Hyperion2000 164000.0/107000.0
>>>>> IGNF:ELG108: IAG GRS 1967 6378160.0/6356774.5161
>>>>> IGNF:ELG037: IAG GRS 1980 6378137.0/6356752.314140356
>>>>> Iapetus2000: Iapetus2000 718000.0/718000.0
>>>>> IGNF:ELG001: International-Hayford 1909 6378388.0/6356911.9461279465
>>>>> Io2000: Io2000 1829400.0/1815700.0
>>>>> Janus2000: Janus2000 97000.0/77000.0
>>>>> Juliet2000: Juliet2000 42000.0/42000.0
>>>>> Jupiter2000: Jupiter2000 71492000.0/66854000.0
>>>>> Larissa2000: Larissa2000 96000.0/96000.0
>>>>> Leda2000: Leda2000 5000.0/5000.0
>>>>> Lysithea2000: Lysithea2000 12000.0/12000.0
>>>>> Mars2000: Mars2000 3396190.0/3376200.0
>>>>> Mercury2000: Mercury2000 2439700.0/2439700.0
>>>>> Metis2000: Metis2000 21500.0/21500.0
>>>>> Mimas2000: Mimas2000 209100.0/191400.0
>>>>> Miranda2000: Miranda2000 240400.0/232900.0
>>>>> Moon2000: Moon2000 1737400.0/1737400.0
>>>>> Naiad2000: Naiad2000 29000.0/29000.0
>>>>> Neptune2000: Neptune2000 24764000.0/24341000.0
>>>>> Nereid2000: Nereid2000 170000.0/170000.0
>>>>> Oberon2000: Oberon2000 761400.0/761400.0
>>>>> Ophelia2000: Ophelia2000 15000.0/15000.0
>>>>> IGNF:ELG017: PLESSIS 1817 6376523.0/6355862.933255573
>>>>> Pan2000: Pan2000 10000.0/10000.0
>>>>> Pandora2000: Pandora2000 55000.0/31000.0
>>>>> Pasiphae2000: Pasiphae2000 18000.0/18000.0
>>>>> Phobos2000: Phobos2000 13400.0/9200.0
>>>>> Phoebe2000: Phoebe2000 115000.0/105000.0
>>>>> Pluto2000: Pluto2000 1195000.0/1195000.0
>>>>> Portia2000: Portia2000 54000.0/54000.0
>>>>> Prometheus2000: Prometheus2000 74000.0/34000.0
>>>>> Proteus2000: Proteus2000 218000.0/201000.0
>>>>> Puck2000: Puck2000 77000.0/77000.0
>>>>> Rhea2000: Rhea2000 764000.0/764000.0
>>>>> Rosalind2000: Rosalind2000 27000.0/27000.0
>>>>> IGNF:ELG032: SPHERE PICARD 6371598.0/6371598.0
>>>>> Saturn2000: Saturn2000 60268000.0/54364000.0
>>>>> Sinope2000: Sinope2000 14000.0/14000.0
>>>>> Telesto2000: Telesto2000 15000.0/7500.0
>>>>> Tethys2000: Tethys2000 535600.0/525800.0
>>>>> Thalassa2000: Thalassa2000 40000.0/40000.0
>>>>> Thebe2000: Thebe2000 58000.0/42000.0
>>>>> Titan2000: Titan2000 2575000.0/2575000.0
>>>>> Titania2000: Titania2000 788900.0/788900.0
>>>>> Triton2000: Triton2000 1352600.0/1352600.0
>>>>> Umbriel2000: Umbriel2000 584700.0/584700.0
>>>>> Uranus2000: Uranus2000 25559000.0/24973000.0
>>>>> Venus2000: Venus2000 6051800.0/6051800.0
>>>>> IGNF:ELG052: WGS72 6378135.0/6356750.520016094
>>>>> IGNF:ELG102: WGS72 (NWL-10F) 6378135.0/6356750.520016094
>>>>> IGNF:ELG053: WGS84 6378137.0/6356752.314245179
>>>>> 
>>>>> The vast majority of these are planetary ellipsoids/moons, but there's
>>>>> others which are less obvious (cape/IGNF*). So
>>>>> 
>>>>> Question 1: should the non-Earth ellipsoids be included in the proj database?
>>>>> 
>>>>> Question 2: What about cape/IGNF* ? Should they be included in proj,
>>>>> or are they mistakes and should not even be included in the current
>>>>> QGIS db?
>>>>> 
>>>>> Nyall
>>>>> _______________________________________________
>>>>> PROJ mailing list
>>>>> PROJ at lists.osgeo.org
>>>>> https://lists.osgeo.org/mailman/listinfo/proj
>>>>> 
>>>>> 
>>>>> _______________________________________________
>>>>> PROJ mailing list
>>>>> PROJ at lists.osgeo.org
>>>>> https://lists.osgeo.org/mailman/listinfo/proj
>>>>> 
>>>>> 
>>> 
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From kreve at sdfe.dk  Mon Mar 18 22:46:08 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 19 Mar 2019 05:46:08 +0000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <CAB28AsgxK24Yj4wMLNHaW7sHdggurS2U3+JmKvWdhGJ6XSZUFw@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
 <CAB28AsgxK24Yj4wMLNHaW7sHdggurS2U3+JmKvWdhGJ6XSZUFw@mail.gmail.com>
Message-ID: <C427C564-27F5-4145-9452-2FCE18CF79FA@sdfe.dk>



On 19 Mar 2019, at 04:20, Nyall Dawson <nyall.dawson at gmail.com<mailto:nyall.dawson at gmail.com>> wrote:

On Mon, 18 Mar 2019 at 16:42, Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:

It would be interesting to see the difference between the ellipsoid tables from
The QGIS and PROJ databases.


Using the latest approach, the older QGIS ellipsoids I haven't been
able to match are whittled down to:

acronym/name/major/minor

['andrae','Andrae 1876 (Den., Iclnd.)', 6377104.43,6355847.415233333],
['CPM','Comm. des Poids et Mesures 1799',6375738.7,6356666.221912112],
['delmbr','Delambre 1810 (Belgium)',6376428.0,6355957.926163724],
['Earth2000','Earth2000',6378140.0,6356750.0],
['kaula','Kaula 1961',6378163.0,6356776.99208691],
['lerch','Lerch 1979',6378139.0,6356754.291510342],
['MERIT','MERIT 1983',6378137.0,6356752.298215969],
['mprts','Maupertius 1738',6397300.0,6363806.282722513],
['new_intl','New International 1967',6378157.5,6356772.2],
['WGS60','WGS60',6378165.0,6356783.286959437]


Okay, that’s not too bad. Most of them are also in `proj -le`. I think only EARTH2000 and MERIT
are unknown to PROJ today.

Any clues on these?


They can be added to the database as custom ellipsoids under the PROJ authority. The
reason they are not there now must be because they are unused by the operations in
the EPSG registry. Pull requests are welcome :-)

/Kristian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190319/d5c2c5cc/attachment-0001.html>

From kreve at sdfe.dk  Mon Mar 18 23:52:52 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 19 Mar 2019 06:52:52 +0000
Subject: [PROJ] Announcing PROJ 6.0.0
In-Reply-To: <93e77a50-ec65-7e4b-7a13-6b3d8fe86e54@gatewaygeomatics.com>
References: <BBC1C2D3-A5BA-4248-A03A-E3A1192B6531@sdfe.dk>
 <fab96772-942f-364a-c015-61ee5d0300c5@gatewaygeomatics.com>
 <fb11fa96-c390-5068-782c-8ecbb5b08c51@gatewaygeomatics.com>
 <08642438-aecf-f8eb-899c-b64809e65e22@xs4all.nl>
 <93e77a50-ec65-7e4b-7a13-6b3d8fe86e54@gatewaygeomatics.com>
Message-ID: <96F7D902-8A64-4172-8089-E957C2D9A21B@sdfe.dk>

Thanks for raising the issue, Jeff. No need to be sorry, it doesn’t hurt reiterating the point.

/Kristian

> On 18 Mar 2019, at 21:24, Jeff McKenna <jmckenna at gatewaygeomatics.com> wrote:
> 
> On 2019-03-18 5:15 PM, Sebastiaan Couwenberg wrote:
>> On 3/18/19 9:07 PM, Jeff McKenna wrote:
>>> Thanks to Bas for pointing this out: the spatialite ticket link is
>>> https://www.gaia-gis.it/fossil/libspatialite/info/6eabdf0e6d3520a7
>> And as mentioned elsewhere on this list [0], that link and others are
>> included in the proj.h adoption status wiki:
>>  https://github.com/OSGeo/proj.4/wiki/proj.h-adoption-status
>> [0] https://lists.osgeo.org/pipermail/proj/2019-March/008330.html
>> Kind Regards,
>> Bas
> 
> Understood.
> 
> In any case, I think discussing the plans on the spatialite-users list is also good for the community to know the issue.
> 
> Anyway, sorry for the noise.
> 
> -jeff
> 
> 
> 
> -- 
> Jeff McKenna
> MapServer Consulting and Training Services
> https://gatewaygeomatics.com/
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From nyall.dawson at gmail.com  Tue Mar 19 03:00:56 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Tue, 19 Mar 2019 20:00:56 +1000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <5E76C96B-383B-4737-A196-2D5A8EC2FAEA@sdfe.dk>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
 <CAB28AsipCSyLgguNokYy=qC_R5Y0oMw7yF0WasFK7kk4JkUN8Q@mail.gmail.com>
 <5D8ADDC3-9D77-4772-9A56-EB961C009FBD@sdfe.dk>
 <CAB28AsimhXiSBk9Y+z5C9VHDHfsOYMTbj+WsavEVkgeXZhpc5Q@mail.gmail.com>
 <8B0750B6-7DCA-4F5A-9F06-0FBBD1AD2A22@sdfe.dk>
 <CAB28AsiW18bZvUKXigcOv_509CYOhgsMxTeyjgUJmofWUkOLvw@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0CCAFD@S000014.PROD.SITAD.DK>
 <CAB28Asgqzf9nMMMebWwAhzV_6GQOpY-+QmhNj5KSc9zpASjiTg@mail.gmail.com>
 <5E76C96B-383B-4737-A196-2D5A8EC2FAEA@sdfe.dk>
Message-ID: <CAB28AshFB+-zMSmUxV2wH9Gd7z_oesOZXf3rdy7j26uioJzEAg@mail.gmail.com>

On Tue, 19 Mar 2019 at 15:36, Kristian Evers <kreve at sdfe.dk> wrote:
>
>
>
> > On 19 Mar 2019, at 02:19, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> >
> > On Mon, 18 Mar 2019 at 20:19, Kristian Evers <kreve at sdfe.dk> wrote:
> >>
> >> Instead of using the acronym you can just use the parameters from
> >> proj_ellipsoid_get_parameters() directly, so that
> >>
> >>     +ellpsg=GRS80
> >>
> >> becomes
> >>
> >>    + a=6378137.0  +rf=298.257222101.
> >>
> >> For both your use cases that should work fine. You will of course have
> >> to do a bit of string manipulation to achieve this.
> >
> > I'm a little confused by some of the results I'm seeing here. Eg:
> >
> >> bin/projinfo -o all "Airy 1830"
> >
> > PROJ string:
> > +ellps=airy
> >
> > WKT2_2015 string:
> > ELLIPSOID["Airy 1830",6377563.396,299.3249646,
> >    LENGTHUNIT["metre",1],
> >    ID["EPSG",7001]]
> > ...
> >
> > Looks good. But if I try querying EPSG:7001, I get
> >
> >> bin/projinfo -o all "EPSG:7001"
> >
> > input string: parsing of user string failed: crs not found
> >
> > Shouldn't that give the same results as searching by name?
> >
>
> From the projinfo docs:
>
> "where {object_definition} or {object_definition} is a PROJ string, a WKT string,
> an object name or a AUTHORITY:CODE (where AUTHORITY is the name of a
> CRS authority and CODE the code of a CRS found in the proj.db database)."
>
> You are giving a authority:code combination so it is only looking for a CRS. With
> the -k switch you can change that behaviour to look for a operation instead.
>
> Maybe there’s a need for more options to the -k switch? Like ellipsoid, axis, AoU
> and so on?

Thanks for the explanation. I'd say, yes, the ability to query
ellipsoid/etc by code would be handy. But most of all I'd like to see
an "all" option, which would list everything with the matching code.
That'd be handy when you have a code alone, and no idea what type of
object it represents....

Nyall

>
> > Nyall
> >
> >
> >
> >
> >
> >
> >
> >>
> >> /Kristian
> >>
> >> -----Oprindelig meddelelse-----
> >> Fra: PROJ <proj-bounces at lists.osgeo.org> På vegne af Nyall Dawson
> >> Sendt: 18. marts 2019 10:40
> >> Til: Kristian Evers <kreve at sdfe.dk>
> >> Cc: PROJ <proj at lists.osgeo.org>
> >> Emne: Re: [PROJ] Proj 6 API questions
> >>
> >> On Mon, 18 Mar 2019 at 17:34, Kristian Evers <kreve at sdfe.dk> wrote:
> >>>
> >>> I may be wrong but I don’t think there are acronyms for them. It’s based
> >>> on the EPSG dataset and acronyms are not assigned in that regime. Do
> >>> you actually need them or is this just so that it fits better in existing QGIS
> >>> infrastructure?
> >>
> >> There's two things QGIS uses this for:
> >>
> >> 1. When a user selects the CRS for their project, the project
> >> ellipsoid (used when calculating geodetic distances/areas for the
> >> project) is automatically set to match the ellipsoid corresponding to
> >> this CRS. i.e. select EPSG:28356 and the project ellipsoid is set to
> >> GRS80, set it to EPSG:102013 and you get International 1909.  So we
> >> need a way to get the ellipsoid from an acronym (or alternatively,
> >> directly from a CRS).
> >>
> >> 2. When performing geodetic distance/area calculations, QGIS
> >> transforms coordinates from the layer's source CRS to a crs crafted
> >> from "+proj=longlat +ellps=XXXXX +nodefs", and then uses the result
> >> when performing the geodetic calculations. So we need a way to obtain
> >> the ellipsoid acronym given an ellipsoid definition (where a
> >> corresponding one exists).
> >>
> >> (Full disclaimer: I'm not fully aware of the background behind this
> >> logic, and there may be superior logic to follow. Let me know if you
> >> think there is!)
> >>
> >> Nyall
> >>
> >>
> >>>
> >>> We could potentially assign acronyms for all ellipsoids but I fear that will
> >>> become a maintenance mess whenever the EPSG dataset is updated.
> >>>
> >>> /Kristian
> >>>
> >>>> On 18 Mar 2019, at 08:27, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> >>>>
> >>>> On Mon, 18 Mar 2019 at 16:56, Kristian Evers <kreve at sdfe.dk> wrote:
> >>>>>
> >>>>> You use proj_get_authorities_from_database() for that. Generally there’s functions
> >>>>> for retrieving all info like that, just search around in the function reference a bit and you’ll
> >>>>> find it.
> >>>>
> >>>> Ok, that part is working, and I'm seeing a LOT more! But now I'm a bit
> >>>> confused... if I use this approach to iterate through the ellipsoids,
> >>>> is there anyway to get the ellipsoid acronym from them? Using
> >>>> proj_list_ellps I could get PJ_ELLPS->id.
> >>>>
> >>>> Nyall
> >>>>
> >>>>
> >>>>
> >>>>>
> >>>>> /Kristian
> >>>>>
> >>>>> On 18 Mar 2019, at 07:52, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> >>>>>
> >>>>> On Mon, 18 Mar 2019 at 16:42, Kristian Evers <kreve at sdfe.dk> wrote:
> >>>>>
> >>>>>
> >>>>> Hi Nyall,
> >>>>>
> >>>>> I am very happy to see that you have started working on this!
> >>>>>
> >>>>> You will probably get less discrepancies between the QGIS list of ellipsoids
> >>>>> and the PROJ equivalent if you instead use proj_get_codes_from_database
> >>>>> using type PJ_TYPE_ELLIPSOID.
> >>>>>
> >>>>>
> >>>>> What should I use as auth_name if I want to get ALL ellipsoids? The
> >>>>> dox state it must not be null...
> >>>>>
> >>>>> Thanks for the detailed pointers, I'll let you know the result!
> >>>>>
> >>>>> Nyall
> >>>>>
> >>>>>
> >>>>> You should then be able to get the
> >>>>> parameters with proj_ellipsoid_get_parameters. This is untested on my part
> >>>>> but I believe that is the general workflow you have to go through to get the
> >>>>> ellipsoid out of proj.db.
> >>>>>
> >>>>> proj_list_ellps() simply shows you the same list as you would get from calling
> >>>>> `proj -le`, i.e. ellipsoids that can be used with `+ellps=xxx` parameters. This
> >>>>> is confusing and I shall think of a way to change the docs so it is less confusing :-)
> >>>>>
> >>>>> It would be interesting to see the difference between the ellipsoid tables from
> >>>>> The QGIS and PROJ databases.
> >>>>>
> >>>>> /Kristian
> >>>>>
> >>>>> On 18 Mar 2019, at 04:39, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> >>>>>
> >>>>> Hi list,
> >>>>>
> >>>>> So (thanks for sponsorship from the ICSM), I'm working on porting QGIS
> >>>>> to the Proj 6 API. I suspect I'll have many more questions (especially
> >>>>> as I attempt to drop QGIS' own custom projection database in favour of
> >>>>> the upstream proj one). Let's get started...
> >>>>>
> >>>>> I thought I'd begin with a simple task of replacing QGIS' ellipsoid db
> >>>>> with proj's, using proj_list_ellps(). QGIS has this table of
> >>>>> "standard" ellipsoids, built up from... somewhere... in the vast
> >>>>> history of the QGIS project. When comparing against proj's db, it
> >>>>> includes many items which are missing in proj's:
> >>>>>
> >>>>> Adrastea2000: Adrastea2000 10000.0/7000.0
> >>>>> Amalthea2000: Amalthea2000 125000.0/64000.0
> >>>>> Ananke2000: Ananke2000 10000.0/10000.0
> >>>>> Ariel2000: Ariel2000 581100.0/577700.0
> >>>>> Atlas2000: Atlas2000 18500.0/13500.0
> >>>>> Belinda2000: Belinda2000 33000.0/33000.0
> >>>>> Bianca2000: Bianca2000 21000.0/21000.0
> >>>>> Callisto2000: Callisto2000 2409400.0/2409300.0
> >>>>> Calypso2000: Calypso2000 15000.0/8000.0
> >>>>> Carme2000: Carme2000 15000.0/15000.0
> >>>>> Charon2000: Charon2000 593000.0/593000.0
> >>>>> IGNF:ELG004: Clarke 1866 6378206.4/6356583.799998981
> >>>>> IGNF:ELG003: Clarke 1880 Anglais 6378249.1453/6356514.8698
> >>>>> IGNF:ELG010: Clarke 1880 IGN 6378249.2/6356514.999978254
> >>>>> cape: Clarke 1880 mod. 6378249.145/6356514.966398753
> >>>>> Cordelia2000: Cordelia2000 13000.0/13000.0
> >>>>> Cressida2000: Cressida2000 31000.0/31000.0
> >>>>> Deimos2000: Deimos2000 7500.0/5200.0
> >>>>> Desdemona2000: Desdemona2000 27000.0/27000.0
> >>>>> Despina2000: Despina2000 74000.0/74000.0
> >>>>> Dione2000: Dione2000 560000.0/560000.0
> >>>>> Earth2000: Earth2000 6378140.0/6356750.0
> >>>>> Elara2000: Elara2000 40000.0/40000.0
> >>>>> Enceladus2000: Enceladus2000 256300.0/244600.0
> >>>>> Epimetheus2000: Epimetheus2000 69000.0/55000.0
> >>>>> Europa2000: Europa2000 1564130.0/1560930.0
> >>>>> Galatea2000: Galatea2000 79000.0/79000.0
> >>>>> Ganymede2000: Ganymede2000 2632400.0/2632350.0
> >>>>> Helene2000: Helene2000 16000.0/16000.0
> >>>>> Himalia2000: Himalia2000 85000.0/85000.0
> >>>>> Hyperion2000: Hyperion2000 164000.0/107000.0
> >>>>> IGNF:ELG108: IAG GRS 1967 6378160.0/6356774.5161
> >>>>> IGNF:ELG037: IAG GRS 1980 6378137.0/6356752.314140356
> >>>>> Iapetus2000: Iapetus2000 718000.0/718000.0
> >>>>> IGNF:ELG001: International-Hayford 1909 6378388.0/6356911.9461279465
> >>>>> Io2000: Io2000 1829400.0/1815700.0
> >>>>> Janus2000: Janus2000 97000.0/77000.0
> >>>>> Juliet2000: Juliet2000 42000.0/42000.0
> >>>>> Jupiter2000: Jupiter2000 71492000.0/66854000.0
> >>>>> Larissa2000: Larissa2000 96000.0/96000.0
> >>>>> Leda2000: Leda2000 5000.0/5000.0
> >>>>> Lysithea2000: Lysithea2000 12000.0/12000.0
> >>>>> Mars2000: Mars2000 3396190.0/3376200.0
> >>>>> Mercury2000: Mercury2000 2439700.0/2439700.0
> >>>>> Metis2000: Metis2000 21500.0/21500.0
> >>>>> Mimas2000: Mimas2000 209100.0/191400.0
> >>>>> Miranda2000: Miranda2000 240400.0/232900.0
> >>>>> Moon2000: Moon2000 1737400.0/1737400.0
> >>>>> Naiad2000: Naiad2000 29000.0/29000.0
> >>>>> Neptune2000: Neptune2000 24764000.0/24341000.0
> >>>>> Nereid2000: Nereid2000 170000.0/170000.0
> >>>>> Oberon2000: Oberon2000 761400.0/761400.0
> >>>>> Ophelia2000: Ophelia2000 15000.0/15000.0
> >>>>> IGNF:ELG017: PLESSIS 1817 6376523.0/6355862.933255573
> >>>>> Pan2000: Pan2000 10000.0/10000.0
> >>>>> Pandora2000: Pandora2000 55000.0/31000.0
> >>>>> Pasiphae2000: Pasiphae2000 18000.0/18000.0
> >>>>> Phobos2000: Phobos2000 13400.0/9200.0
> >>>>> Phoebe2000: Phoebe2000 115000.0/105000.0
> >>>>> Pluto2000: Pluto2000 1195000.0/1195000.0
> >>>>> Portia2000: Portia2000 54000.0/54000.0
> >>>>> Prometheus2000: Prometheus2000 74000.0/34000.0
> >>>>> Proteus2000: Proteus2000 218000.0/201000.0
> >>>>> Puck2000: Puck2000 77000.0/77000.0
> >>>>> Rhea2000: Rhea2000 764000.0/764000.0
> >>>>> Rosalind2000: Rosalind2000 27000.0/27000.0
> >>>>> IGNF:ELG032: SPHERE PICARD 6371598.0/6371598.0
> >>>>> Saturn2000: Saturn2000 60268000.0/54364000.0
> >>>>> Sinope2000: Sinope2000 14000.0/14000.0
> >>>>> Telesto2000: Telesto2000 15000.0/7500.0
> >>>>> Tethys2000: Tethys2000 535600.0/525800.0
> >>>>> Thalassa2000: Thalassa2000 40000.0/40000.0
> >>>>> Thebe2000: Thebe2000 58000.0/42000.0
> >>>>> Titan2000: Titan2000 2575000.0/2575000.0
> >>>>> Titania2000: Titania2000 788900.0/788900.0
> >>>>> Triton2000: Triton2000 1352600.0/1352600.0
> >>>>> Umbriel2000: Umbriel2000 584700.0/584700.0
> >>>>> Uranus2000: Uranus2000 25559000.0/24973000.0
> >>>>> Venus2000: Venus2000 6051800.0/6051800.0
> >>>>> IGNF:ELG052: WGS72 6378135.0/6356750.520016094
> >>>>> IGNF:ELG102: WGS72 (NWL-10F) 6378135.0/6356750.520016094
> >>>>> IGNF:ELG053: WGS84 6378137.0/6356752.314245179
> >>>>>
> >>>>> The vast majority of these are planetary ellipsoids/moons, but there's
> >>>>> others which are less obvious (cape/IGNF*). So
> >>>>>
> >>>>> Question 1: should the non-Earth ellipsoids be included in the proj database?
> >>>>>
> >>>>> Question 2: What about cape/IGNF* ? Should they be included in proj,
> >>>>> or are they mistakes and should not even be included in the current
> >>>>> QGIS db?
> >>>>>
> >>>>> Nyall
> >>>>> _______________________________________________
> >>>>> PROJ mailing list
> >>>>> PROJ at lists.osgeo.org
> >>>>> https://lists.osgeo.org/mailman/listinfo/proj
> >>>>>
> >>>>>
> >>>>> _______________________________________________
> >>>>> PROJ mailing list
> >>>>> PROJ at lists.osgeo.org
> >>>>> https://lists.osgeo.org/mailman/listinfo/proj
> >>>>>
> >>>>>
> >>>
> >> _______________________________________________
> >> PROJ mailing list
> >> PROJ at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/proj
> > _______________________________________________
> > PROJ mailing list
> > PROJ at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/proj
>

From nyall.dawson at gmail.com  Tue Mar 19 03:06:40 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Tue, 19 Mar 2019 20:06:40 +1000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <C427C564-27F5-4145-9452-2FCE18CF79FA@sdfe.dk>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
 <CAB28AsgxK24Yj4wMLNHaW7sHdggurS2U3+JmKvWdhGJ6XSZUFw@mail.gmail.com>
 <C427C564-27F5-4145-9452-2FCE18CF79FA@sdfe.dk>
Message-ID: <CAB28AsjJqnLpGQF9_p9s3tndzMycrFU9xHKOLs0eB7U5989fmA@mail.gmail.com>

On Tue, 19 Mar 2019 at 15:46, Kristian Evers <kreve at sdfe.dk> wrote:
>
>
>
> On 19 Mar 2019, at 04:20, Nyall Dawson <nyall.dawson at gmail.com> wrote:
>
> On Mon, 18 Mar 2019 at 16:42, Kristian Evers <kreve at sdfe.dk> wrote:
>
> It would be interesting to see the difference between the ellipsoid tables from
> The QGIS and PROJ databases.
>
>
> Using the latest approach, the older QGIS ellipsoids I haven't been
> able to match are whittled down to:
>
> acronym/name/major/minor
>
> ['andrae','Andrae 1876 (Den., Iclnd.)', 6377104.43,6355847.415233333],
> ['CPM','Comm. des Poids et Mesures 1799',6375738.7,6356666.221912112],
> ['delmbr','Delambre 1810 (Belgium)',6376428.0,6355957.926163724],
> ['Earth2000','Earth2000',6378140.0,6356750.0],
> ['kaula','Kaula 1961',6378163.0,6356776.99208691],
> ['lerch','Lerch 1979',6378139.0,6356754.291510342],
> ['MERIT','MERIT 1983',6378137.0,6356752.298215969],
> ['mprts','Maupertius 1738',6397300.0,6363806.282722513],
> ['new_intl','New International 1967',6378157.5,6356772.2],
> ['WGS60','WGS60',6378165.0,6356783.286959437]
>
>
> Okay, that’s not too bad. Most of them are also in `proj -le`. I think only EARTH2000 and MERIT
> are unknown to PROJ today.
>
> Any clues on these?
>
>
> They can be added to the database as custom ellipsoids under the PROJ authority. The
> reason they are not there now must be because they are unused by the operations in
> the EPSG registry. Pull requests are welcome :-)
>

Sure -- got any tips on where this is done? I'm new to the proj code.

Nyall


> /Kristian

From even.rouault at spatialys.com  Tue Mar 19 03:12:13 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 19 Mar 2019 11:12:13 +0100
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <5E76C96B-383B-4737-A196-2D5A8EC2FAEA@sdfe.dk>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <CAB28Asgqzf9nMMMebWwAhzV_6GQOpY-+QmhNj5KSc9zpASjiTg@mail.gmail.com>
 <5E76C96B-383B-4737-A196-2D5A8EC2FAEA@sdfe.dk>
Message-ID: <3970042.ZnY2fkBcZd@even-i700>

> >> bin/projinfo -o all "Airy 1830"
> > 
> > 
> > PROJ string:
> > +ellps=airy
> > 
> > WKT2_2015 string:
> > ELLIPSOID["Airy 1830",6377563.396,299.3249646,
> > 
> >    LENGTHUNIT["metre",1],
> >    ID["EPSG",7001]]
> > 
> > ...
> > 
> > Looks good. But if I try querying EPSG:7001, I get
> > 
> > 
> >> bin/projinfo -o all "EPSG:7001"
> > 
> > 
> > input string: parsing of user string failed: crs not found
> > 
> > Shouldn't that give the same results as searching by name?
> > 
> 
> 
> From the projinfo docs:
> 
> "where {object_definition} or {object_definition} is a PROJ string, a WKT
> string,
 an object name or a AUTHORITY:CODE (where AUTHORITY is the name of
> a CRS authority and CODE the code of a CRS found in the proj.db database)."
> 
> You are giving a authority:code combination so it is only looking for a CRS.
> With
 the -k switch you can change that behaviour to look for a operation
> instead. 
> Maybe there’s a need for more options to the -k switch? Like ellipsoid,
> axis, AoU
 and so on?

It also accepts OGC URNs, such as urn:ogc:def:ellipsoid:EPSG::7001

I've just improved the docs about that.

Even


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Tue Mar 19 03:14:46 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 19 Mar 2019 11:14:46 +0100
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <CAB28AsgO+mp5J=ZfLy0Yd73O6-hPbnohDUa=JpTMvur5nqFd1w@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <2072527.Cyz0ADoTsH@even-i700>
 <CAB28AsgO+mp5J=ZfLy0Yd73O6-hPbnohDUa=JpTMvur5nqFd1w@mail.gmail.com>
Message-ID: <2202647.CXdvM5vAtu@even-i700>

On mardi 19 mars 2019 08:33:11 CET Nyall Dawson wrote:
> On Mon, 18 Mar 2019 at 21:56, Even Rouault <even.rouault at spatialys.com> 
wrote:
> > > > OGRFeature(SELECT):1
> > > > 
> > > >   description (String) = China Geodetic Coordinate System 2000
> > > >   celestial_body_code (String) = EARTH
> > > 
> > > What api can I use to get the description and celestial body for an
> > > ellipsoid?
> > 
> > There's no API for that. description is mostly a provisional field, not
> > set
> > for EPSG data (it is set for ESRI data though). And celestial body was
> > also a provision for which there's no C API
> 
> Is this negotiable? Would a PR exposing these be welcome?

No opposition from me.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From kreve at sdfe.dk  Tue Mar 19 03:15:19 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 19 Mar 2019 10:15:19 +0000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <CAB28AsjJqnLpGQF9_p9s3tndzMycrFU9xHKOLs0eB7U5989fmA@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
 <CAB28AsgxK24Yj4wMLNHaW7sHdggurS2U3+JmKvWdhGJ6XSZUFw@mail.gmail.com>
 <C427C564-27F5-4145-9452-2FCE18CF79FA@sdfe.dk>
 <CAB28AsjJqnLpGQF9_p9s3tndzMycrFU9xHKOLs0eB7U5989fmA@mail.gmail.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF0CEFA7@S000014.PROD.SITAD.DK>

> Sure -- got any tips on where this is done? I'm new to the proj code.

I am no expert in this, but generally a good starting point is here:
https://github.com/OSGeo/proj.4/tree/master/data/sql

I would recommend adding a new SQL file instead of appending an
existing one.  You will probably have to adjust makefiles in the parent
directory as well.

/Kristian



From even.rouault at spatialys.com  Tue Mar 19 03:27:13 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 19 Mar 2019 11:27:13 +0100
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF0CEFA7@S000014.PROD.SITAD.DK>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <CAB28AsjJqnLpGQF9_p9s3tndzMycrFU9xHKOLs0eB7U5989fmA@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0CEFA7@S000014.PROD.SITAD.DK>
Message-ID: <11964499.0QU5muzRs1@even-i700>

On mardi 19 mars 2019 10:15:19 CET Kristian Evers wrote:
> > Sure -- got any tips on where this is done? I'm new to the proj code.
> 
> 
> I am no expert in this, but generally a good starting point is here:
> https://github.com/OSGeo/proj.4/tree/master/data/sql
> 
> I would recommend adding a new SQL file instead of appending an
> existing one.  You will probably have to adjust makefiles in the parent
> directory as well.

There are 2 files currently that are open for manual modifications:
https://github.com/OSGeo/proj.4/blob/master/data/sql/customizations.sql
https://github.com/OSGeo/proj.4/blob/master/data/sql/grid_transformation_custom.sql

(the DDL are in proj_db_table_defs.sql)

customizations.sql would be the appropriate one for adding custom ellipsoids.
We might revisit the structure of this in the future if they grow a bit out of
control, but hopefully the 'PROJ' authority will not have to grow too much...

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From deanhowell2009 at gmail.com  Tue Mar 19 22:01:14 2019
From: deanhowell2009 at gmail.com (Dean Howell)
Date: Wed, 20 Mar 2019 15:31:14 +1030
Subject: [PROJ] Helmert transform
Message-ID: <CAJvi=wP9Ui=UA8NKthWfTY34NK1AS=r-tDmpyspJ9dTjLVN3Xw@mail.gmail.com>

Hello all,

We have a project that is using the helmert transformation and we are
trying to get an understanding of what level of residuals is acceptable and
how we interpret the results.

If anyone has experience in using the helmert transformation, I would be
interested in your feedback.

Regards

Dean Howell
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190320/a35ee9b4/attachment.html>

From nyall.dawson at gmail.com  Wed Mar 20 02:01:16 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Wed, 20 Mar 2019 19:01:16 +1000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <11964499.0QU5muzRs1@even-i700>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <CAB28AsjJqnLpGQF9_p9s3tndzMycrFU9xHKOLs0eB7U5989fmA@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0CEFA7@S000014.PROD.SITAD.DK>
 <11964499.0QU5muzRs1@even-i700>
Message-ID: <CAB28Asi29++DS6jBb9x_CzD05E-xUMO1yyy7dY-cUdzsYcjB0Q@mail.gmail.com>

On Tue, 19 Mar 2019 at 20:27, Even Rouault <even.rouault at spatialys.com> wrote:
>
> On mardi 19 mars 2019 10:15:19 CET Kristian Evers wrote:
> > > Sure -- got any tips on where this is done? I'm new to the proj code.
> >
> >
> > I am no expert in this, but generally a good starting point is here:
> > https://github.com/OSGeo/proj.4/tree/master/data/sql
> >
> > I would recommend adding a new SQL file instead of appending an
> > existing one.  You will probably have to adjust makefiles in the parent
> > directory as well.
>
> There are 2 files currently that are open for manual modifications:
> https://github.com/OSGeo/proj.4/blob/master/data/sql/customizations.sql
> https://github.com/OSGeo/proj.4/blob/master/data/sql/grid_transformation_custom.sql
>
> (the DDL are in proj_db_table_defs.sql)
>
> customizations.sql would be the appropriate one for adding custom ellipsoids.
> We might revisit the structure of this in the future if they grow a bit out of
> control, but hopefully the 'PROJ' authority will not have to grow too much...

Perfect, thanks.

Any preference for a starting point for the PROJ:xxxx identifier for
ellipsoids? PROJ:1 / PROJ:0001 looks a bit odd to me, so I'm thinking
PROJ:1001 to begin, but maybe I'm just too used to the 4/5 digit EPSG
codes....

Nyall

From even.rouault at spatialys.com  Wed Mar 20 03:27:56 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 20 Mar 2019 11:27:56 +0100
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <CAB28Asi29++DS6jBb9x_CzD05E-xUMO1yyy7dY-cUdzsYcjB0Q@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <11964499.0QU5muzRs1@even-i700>
 <CAB28Asi29++DS6jBb9x_CzD05E-xUMO1yyy7dY-cUdzsYcjB0Q@mail.gmail.com>
Message-ID: <2125709.zRlFY0XmJQ@even-i700>

On mercredi 20 mars 2019 19:01:16 CET Nyall Dawson wrote:
> On Tue, 19 Mar 2019 at 20:27, Even Rouault <even.rouault at spatialys.com> 
wrote:
> > On mardi 19 mars 2019 10:15:19 CET Kristian Evers wrote:
> > > > Sure -- got any tips on where this is done? I'm new to the proj code.
> > > 
> > > I am no expert in this, but generally a good starting point is here:
> > > https://github.com/OSGeo/proj.4/tree/master/data/sql
> > > 
> > > I would recommend adding a new SQL file instead of appending an
> > > existing one.  You will probably have to adjust makefiles in the parent
> > > directory as well.
> > 
> > There are 2 files currently that are open for manual modifications:
> > https://github.com/OSGeo/proj.4/blob/master/data/sql/customizations.sql
> > https://github.com/OSGeo/proj.4/blob/master/data/sql/grid_transformation_c
> > ustom.sql
> > 
> > (the DDL are in proj_db_table_defs.sql)
> > 
> > customizations.sql would be the appropriate one for adding custom
> > ellipsoids. We might revisit the structure of this in the future if they
> > grow a bit out of control, but hopefully the 'PROJ' authority will not
> > have to grow too much...
> Perfect, thanks.
> 
> Any preference for a starting point for the PROJ:xxxx identifier for
> ellipsoids? PROJ:1 / PROJ:0001 looks a bit odd to me, so I'm thinking
> PROJ:1001 to begin, but maybe I'm just too used to the 4/5 digit EPSG
> codes....

I don't really have a preference here. You may also use non numeric 
identifiers: PROJ:ANDRAE, PROJ:CPM, etc...

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From kreve at sdfe.dk  Wed Mar 20 03:43:18 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 20 Mar 2019 10:43:18 +0000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <2125709.zRlFY0XmJQ@even-i700>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <11964499.0QU5muzRs1@even-i700>
 <CAB28Asi29++DS6jBb9x_CzD05E-xUMO1yyy7dY-cUdzsYcjB0Q@mail.gmail.com>
 <2125709.zRlFY0XmJQ@even-i700>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF0D1621@S000014.PROD.SITAD.DK>

I would prefer non-numeric identifiers. It lessens the chance of ID collisions across tables.
It has always annoyed me that the same EPSG identifier can refer to both a CRS, a
transformation and all other types of objects in the registry.

/Kristian

-----Oprindelig meddelelse-----
Fra: Even Rouault <even.rouault at spatialys.com> 
Sendt: 20. marts 2019 11:28
Til: Nyall Dawson <nyall.dawson at gmail.com>
Cc: PROJ <proj at lists.osgeo.org>; Kristian Evers <kreve at sdfe.dk>
Emne: Re: [PROJ] Proj 6 API questions

On mercredi 20 mars 2019 19:01:16 CET Nyall Dawson wrote:
> On Tue, 19 Mar 2019 at 20:27, Even Rouault <even.rouault at spatialys.com> 
wrote:
> > On mardi 19 mars 2019 10:15:19 CET Kristian Evers wrote:
> > > > Sure -- got any tips on where this is done? I'm new to the proj code.
> > > 
> > > I am no expert in this, but generally a good starting point is here:
> > > https://github.com/OSGeo/proj.4/tree/master/data/sql
> > > 
> > > I would recommend adding a new SQL file instead of appending an
> > > existing one.  You will probably have to adjust makefiles in the parent
> > > directory as well.
> > 
> > There are 2 files currently that are open for manual modifications:
> > https://github.com/OSGeo/proj.4/blob/master/data/sql/customizations.sql
> > https://github.com/OSGeo/proj.4/blob/master/data/sql/grid_transformation_c
> > ustom.sql
> > 
> > (the DDL are in proj_db_table_defs.sql)
> > 
> > customizations.sql would be the appropriate one for adding custom
> > ellipsoids. We might revisit the structure of this in the future if they
> > grow a bit out of control, but hopefully the 'PROJ' authority will not
> > have to grow too much...
> Perfect, thanks.
> 
> Any preference for a starting point for the PROJ:xxxx identifier for
> ellipsoids? PROJ:1 / PROJ:0001 looks a bit odd to me, so I'm thinking
> PROJ:1001 to begin, but maybe I'm just too used to the 4/5 digit EPSG
> codes....

I don't really have a preference here. You may also use non numeric 
identifiers: PROJ:ANDRAE, PROJ:CPM, etc...

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From Jochem.Lesparre at kadaster.nl  Wed Mar 20 07:46:01 2019
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Wed, 20 Mar 2019 14:46:01 +0000
Subject: [PROJ] Helmert transform
In-Reply-To: <CAJvi=wP9Ui=UA8NKthWfTY34NK1AS=r-tDmpyspJ9dTjLVN3Xw@mail.gmail.com>
References: <CAJvi=wP9Ui=UA8NKthWfTY34NK1AS=r-tDmpyspJ9dTjLVN3Xw@mail.gmail.com>
Message-ID: <VI1P192MB02558DF0B8CE2C53B780E1F1EF410@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>

Hi Dean,

Do you use existing parameters for the Helmert transformation or do you estimate parameters yourself?

The quality and residuals of estimated parameters depends on the quality and distribution of the coordinates used for the estimation. For a Helmert transformation between a triangulated and a GNSS data set of an entire country of some hundreds of kilometres across, residuals over 1 metre are not uncommon. For two datasets of permanent GNSS stations of a small area, residuals can be under 1 centrimetre.

Kind regards, Jochem


Van: PROJ <proj-bounces at lists.osgeo.org> Namens Dean Howell
Verzonden: woensdag 20 maart 2019 06:01
Aan: proj at lists.osgeo.org
Onderwerp: [PROJ] Helmert transform

Hello all,

We have a project that is using the helmert transformation and we are trying to get an understanding of what level of residuals is acceptable and how we interpret the results.

If anyone has experience in using the helmert transformation, I would be interested in your feedback.

Regards

Dean Howell


Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster 
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u 
dit direct te melden aan de verzender en het bericht te vernietigen. 
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent 
of the Kadaster is unlawful. If you have received this message, but are not the addressee, 
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190320/18c60b2d/attachment-0001.html>

From even.rouault at spatialys.com  Wed Mar 20 08:03:39 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 20 Mar 2019 16:03:39 +0100
Subject: [PROJ] Helmert transform
In-Reply-To: <CAJvi=wP9Ui=UA8NKthWfTY34NK1AS=r-tDmpyspJ9dTjLVN3Xw@mail.gmail.com>
References: <CAJvi=wP9Ui=UA8NKthWfTY34NK1AS=r-tDmpyspJ9dTjLVN3Xw@mail.gmail.com>
Message-ID: <3970306.rF5PcFdI9a@even-i700>

On mercredi 20 mars 2019 15:31:14 CET Dean Howell wrote:
> Hello all,
> 
> We have a project that is using the helmert transformation and we are
> trying to get an understanding of what level of residuals is acceptable and
> how we interpret the results.
> 
> If anyone has experience in using the helmert transformation, I would be
> interested in your feedback.

Dean,

if you use Helmert transformations from the EPSG dataset, they are accompanied 
with their accuracy.

For example, if you use latest PROJ 6,

$ projinfo -s EPSG:4214 -t EPSG:4326 --spatial-test intersects
Candidate operations found: 7
-------------------------------------
Operation n°1:

EPSG:15921, Beijing 1954 to WGS 84 (4), 1.0 m, China - Tarim - 77.5°E to 88°E 
and 37°N to 42°N

PROJ string:
+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert 
+xy_in=deg +xy_out=rad +step +proj=push +v_3 +step +proj=cart +ellps=krass 
+step +proj=helmert +x=15.8 +y=-154.4 +z=-82.3 +step +inv +proj=cart 
+ellps=WGS84 +step +proj=pop +v_3 +step +proj=unitconvert +xy_in=rad 
+xy_out=deg +step +proj=axisswap +order=2,1

WKT2_2018 string:
COORDINATEOPERATION["Beijing 1954 to WGS 84 (4)",
    SOURCECRS[
        GEOGCRS["Beijing 1954",
            DATUM["Beijing 1954",
                ELLIPSOID["Krassowsky 1940",6378245,298.3,
                    LENGTHUNIT["metre",1]]],
            PRIMEM["Greenwich",0,
                ANGLEUNIT["degree",0.0174532925199433]],
            CS[ellipsoidal,2],
                AXIS["geodetic latitude (Lat)",north,
                    ORDER[1],
                    ANGLEUNIT["degree",0.0174532925199433]],
                AXIS["geodetic longitude (Lon)",east,
                    ORDER[2],
                    ANGLEUNIT["degree",0.0174532925199433]]]],
    TARGETCRS[
        GEOGCRS["WGS 84",
            DATUM["World Geodetic System 1984",
                ELLIPSOID["WGS 84",6378137,298.257223563,
                    LENGTHUNIT["metre",1]]],
            PRIMEM["Greenwich",0,
                ANGLEUNIT["degree",0.0174532925199433]],
            CS[ellipsoidal,2],
                AXIS["geodetic latitude (Lat)",north,
                    ORDER[1],
                    ANGLEUNIT["degree",0.0174532925199433]],
                AXIS["geodetic longitude (Lon)",east,
                    ORDER[2],
                    ANGLEUNIT["degree",0.0174532925199433]]]],
    METHOD["Geocentric translations (geog2D domain)",
        ID["EPSG",9603]],
    PARAMETER["X-axis translation",15.8,
        LENGTHUNIT["metre",1],
        ID["EPSG",8605]],
    PARAMETER["Y-axis translation",-154.4,
        LENGTHUNIT["metre",1],
        ID["EPSG",8606]],
    PARAMETER["Z-axis translation",-82.3,
        LENGTHUNIT["metre",1],
        ID["EPSG",8607]],
    OPERATIONACCURACY[1.0],
    USAGE[
        SCOPE["unknown"],
        AREA["China - Tarim - 77.5°E to 88°E and 37°N to 42°N"],
        BBOX[37,77.45,41.99,88]],
    ID["EPSG",15921]]

[...]

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From nyall.dawson at gmail.com  Wed Mar 20 15:50:37 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Thu, 21 Mar 2019 08:50:37 +1000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <5E76C96B-383B-4737-A196-2D5A8EC2FAEA@sdfe.dk>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
 <CAB28AsipCSyLgguNokYy=qC_R5Y0oMw7yF0WasFK7kk4JkUN8Q@mail.gmail.com>
 <5D8ADDC3-9D77-4772-9A56-EB961C009FBD@sdfe.dk>
 <CAB28AsimhXiSBk9Y+z5C9VHDHfsOYMTbj+WsavEVkgeXZhpc5Q@mail.gmail.com>
 <8B0750B6-7DCA-4F5A-9F06-0FBBD1AD2A22@sdfe.dk>
 <CAB28AsiW18bZvUKXigcOv_509CYOhgsMxTeyjgUJmofWUkOLvw@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0CCAFD@S000014.PROD.SITAD.DK>
 <CAB28Asgqzf9nMMMebWwAhzV_6GQOpY-+QmhNj5KSc9zpASjiTg@mail.gmail.com>
 <5E76C96B-383B-4737-A196-2D5A8EC2FAEA@sdfe.dk>
Message-ID: <CAB28AsgDtNk8jFO1zDNzKsAruVtBDxXXwbAkV8tc1YsrNARuNA@mail.gmail.com>

On Tue, 19 Mar 2019 at 15:36, Kristian Evers <kreve at sdfe.dk> wrote:

> From the projinfo docs:
>
> "where {object_definition} or {object_definition} is a PROJ string, a WKT string,
> an object name or a AUTHORITY:CODE (where AUTHORITY is the name of a
> CRS authority and CODE the code of a CRS found in the proj.db database)."
>
> You are giving a authority:code combination so it is only looking for a CRS. With
> the -k switch you can change that behaviour to look for a operation instead.
>
> Maybe there’s a need for more options to the -k switch? Like ellipsoid, axis, AoU
> and so on?

A -k ellipsoid option is added here:

https://github.com/OSGeo/proj.4/pull/1338

Nyall

From nyall.dawson at gmail.com  Wed Mar 20 15:57:28 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Thu, 21 Mar 2019 08:57:28 +1000
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <C427C564-27F5-4145-9452-2FCE18CF79FA@sdfe.dk>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <62A5C760-A117-44C2-B13B-E68CF3E9E607@sdfe.dk>
 <CAB28AsgxK24Yj4wMLNHaW7sHdggurS2U3+JmKvWdhGJ6XSZUFw@mail.gmail.com>
 <C427C564-27F5-4145-9452-2FCE18CF79FA@sdfe.dk>
Message-ID: <CAB28AsjsVZZa+0MK9z6dNKizWvfzmnSXb-1mtw_9TBrXu_Hrzg@mail.gmail.com>

On Tue, 19 Mar 2019 at 15:46, Kristian Evers <kreve at sdfe.dk> wrote:
>
>
>
> On 19 Mar 2019, at 04:20, Nyall Dawson <nyall.dawson at gmail.com> wrote:
>
> On Mon, 18 Mar 2019 at 16:42, Kristian Evers <kreve at sdfe.dk> wrote:
>
> It would be interesting to see the difference between the ellipsoid tables from
> The QGIS and PROJ databases.
>
>
> Using the latest approach, the older QGIS ellipsoids I haven't been
> able to match are whittled down to:
>
> acronym/name/major/minor
>
> ['andrae','Andrae 1876 (Den., Iclnd.)', 6377104.43,6355847.415233333],
> ['CPM','Comm. des Poids et Mesures 1799',6375738.7,6356666.221912112],
> ['delmbr','Delambre 1810 (Belgium)',6376428.0,6355957.926163724],
> ['Earth2000','Earth2000',6378140.0,6356750.0],
> ['kaula','Kaula 1961',6378163.0,6356776.99208691],
> ['lerch','Lerch 1979',6378139.0,6356754.291510342],
> ['MERIT','MERIT 1983',6378137.0,6356752.298215969],
> ['mprts','Maupertius 1738',6397300.0,6363806.282722513],
> ['new_intl','New International 1967',6378157.5,6356772.2],
> ['WGS60','WGS60',6378165.0,6356783.286959437]
>
>
> Okay, that’s not too bad. Most of them are also in `proj -le`. I think only EARTH2000 and MERIT
> are unknown to PROJ today.
>
> Any clues on these?
>
>
> They can be added to the database as custom ellipsoids under the PROJ authority. The
> reason they are not there now must be because they are unused by the operations in
> the EPSG registry. Pull requests are welcome :-)

Done in https://github.com/OSGeo/proj.4/pull/1337

Now -- my final question on this topic (I hope!)

The interplanetary ellipsoid definitions in proj vary from those in
QGIS' database. E.g.

Adrastea2000
Proj: +R=8200
QGIS: +a=10000 +b=7000

Thebe2000
Proj: +R=49300
QGIS: +a=58000 +b=42000

The QGIS ones were introduced by
https://github.com/qgis/QGIS/commit/6055a4f566c16e4ae4686d5f666fa12408f2de03
- but there's no source listed there, and I cannot find where these
values were taken from, or why they differ from Proj.

Unless anyone has any clues, I'm inclined to ignore this difference
and accept proj's values as the standard used by QGIS (and if there's
any future objection the discussion can be directed to the proj
project, where it belongs).

Nyall

From even.rouault at spatialys.com  Wed Mar 20 16:12:53 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 21 Mar 2019 00:12:53 +0100
Subject: [PROJ] Proj 6 API questions
In-Reply-To: <CAB28AsjsVZZa+0MK9z6dNKizWvfzmnSXb-1mtw_9TBrXu_Hrzg@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <C427C564-27F5-4145-9452-2FCE18CF79FA@sdfe.dk>
 <CAB28AsjsVZZa+0MK9z6dNKizWvfzmnSXb-1mtw_9TBrXu_Hrzg@mail.gmail.com>
Message-ID: <2873419.kiKqd3I2jC@even-i700>

> Done in https://github.com/OSGeo/proj.4/pull/1337
> 
> Now -- my final question on this topic (I hope!)
> 
> The interplanetary ellipsoid definitions in proj vary from those in
> QGIS' database. E.g.
> 
> Adrastea2000
> Proj: +R=8200
> QGIS: +a=10000 +b=7000
> 
> Thebe2000
> Proj: +R=49300
> QGIS: +a=58000 +b=42000
> 
> The QGIS ones were introduced by
> https://github.com/qgis/QGIS/commit/6055a4f566c16e4ae4686d5f666fa12408f2de03
> - but there's no source listed there, and I cannot find where these values
> were taken from, or why they differ from Proj.

Those are non-Earth ellipsoids. For PROJ, they have been imported from ESRI dictionaries at 
https://github.com/Esri/projection-engine-db-doc/blob/master/csv/pe_list_spheroid.csv
which are sourced from IAU 2000 apparently

The QGIS values seem conformant with
https://svn.osgeo.org/metacrs/sr.org/srsbrowser/data/IAU2000.wkt

So it seems ESRI tooks a spherical view, whereas IAU2000.wkt/QGIS an ellipsoidal one.

Interestingly, I just found
https://raw.githubusercontent.com/USGS-Astrogeology/GDAL_scripts/master/OGC_IAU2000_WKT_v2/IAU2000_v2.wkt
which uses the spherical view too.
I guess the _v2 implies some updates where done compared to the original
https://svn.osgeo.org/metacrs/sr.org/srsbrowser/data/IAU2000.wkt

CC'ing Trent Hare who might have some clues about where the "truth" is :-)

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Thu Mar 21 01:09:17 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 21 Mar 2019 09:09:17 +0100
Subject: [PROJ] [EXTERNAL] Re:  Proj 6 API questions
In-Reply-To: <CAB6t5t8394tFVbOk45_gw3a9i8v7hQoqKvJHeLmKsU60A+reLw@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <2873419.kiKqd3I2jC@even-i700>
 <CAB6t5t8394tFVbOk45_gw3a9i8v7hQoqKvJHeLmKsU60A+reLw@mail.gmail.com>
Message-ID: <2329656.f7vFet86Cj@even-i700>

Trent,

thanks, this was helpful. So the situation was that QGIS database and old 
https://svn.osgeo.org/metacrs/sr.org/srsbrowser/data/IAU2000.wkt incorrectly 
used the IAU2000_Semimajor and IAU2000_Semiminor to create a bi-axial 
ellipsoid for bodies where the three axis values where different. Which got 
fixed by 
https://github.com/USGS-Astrogeology/GDAL_scripts/blob/master/
OGC_IAU2000_WKT_v2/IAU2000_v2.wkt and what ESRI has picked up, which uses a 
sphere with IAU2000_Mean instead.

> 
> We are also working toward providing these "IAU" codes to GDAL.

You meant PROJ, right ? ;-) GDAL has no longer any CRS database now.

> Unfortunately, this will in addition to any planetary Esri codes already
> supported.

There could be several options:
- remove the ESRI definitions since the ellipsoid they define are not used by 
other objects
- do not touch the ESRI definitions, and add IAU next to it
- (more involved, would require database schema change, and likely software 
logic too to make something useful of it). Import IAU, and create a link from 
ESRI definitions to IAU ones (when identical/compatible)

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From Jochem.Lesparre at kadaster.nl  Thu Mar 21 08:52:08 2019
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Thu, 21 Mar 2019 15:52:08 +0000
Subject: [PROJ] PROJ 6.0.0 cs2cs: cannot instantiate source
	coordinate	system - program abnormally terminated
In-Reply-To: <4088763.IZorUh4B0U@even-i700>
References: <eb210117-1ee7-3e97-e86f-e8bbc6c67187@xs4all.nl>
 <2467727.RkYqY6r1eU@even-i700>
 <1f9e8e24-a2ed-c6d1-4b7a-3033855d855d@xs4all.nl>
 <4088763.IZorUh4B0U@even-i700>
Message-ID: <VI1P192MB0255E425E9059A513BA01F9BEF420@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>

Hi Even,

What is unclear here? I still don't understand the early and late binding terminology so I can't understand your explanation.
The RD and NAP grid files are correct for transformation to ETRS89 not for transformation to WGS84.

Regards, Jochem

-----Original Message-----
From: PROJ <proj-bounces at lists.osgeo.org> On Behalf Of Even Rouault
Sent: Saturday, March 9, 2019 8:36 PM
To: proj at lists.osgeo.org
Cc: Sebastiaan Couwenberg <sebastic at xs4all.nl>
Subject: Re: [PROJ] PROJ 6.0.0 cs2cs: cannot instantiate source coordinate system - program abnormally terminated

On vendredi 8 mars 2019 18:39:30 CET Sebastiaan Couwenberg wrote:
> On 3/8/19 6:17 PM, Even Rouault wrote:
> > On vendredi 8 mars 2019 16:28:07 CET Sebastiaan Couwenberg wrote:
> >> The cs2cs tests in the proj-rdnap package [0] fail with PROJ 6.0.0:
> >>  Rel. 6.0.0, March 1st, 2019
> >>  <cs2cs>:
> >>  cannot initialize transformation
> >>  cause: (null)
> >>  program abnormally terminated
> >> 
> >> The problem seems to be the minimal epsg file in PROJ_LIB, removing 
> >> is works around the issue.
> >> 
> >> Should cs2cs really terminate abnormally when an problematic init 
> >> file is present in PROJ_LIB?
> > 
> > Actually, this is rather subtle. The issue is that the definition of
> > epsg:4258 in the minimum epsg file is interpretated as a Geographic 
> > 2D CRS, whereas rdnap:rdnap is interpretated as as CompoundCRS 
> > (horizontal + vertical). Normally the code that computes the 
> > possible transformation paths would find a Geographic 3D CRS that 
> > corresponds to the Geographic 2D CRS, but in the case of a 
> > '+proj=longlat +ellps=GRS80
> > +towgs84=0,0,0,0,0,0,0 +no_defs' definition, there's no single such 
> > +3D
> > CRS. So no transformation path is returned at all.
> > 
> > When using the EPSG:4258 definition from proj.db, then the EPSG:4937
> > (ETRS89 3D) is used internally.
> 
> So if I understand correctly, the abnormal termination is expected and 
> not a bug.
> 
> Having updated the RDNAP test script for PROJ 6.0.0, all test test 
> still fail because the output for the transformation exceeds the threshold.
> 
> Are these large differences expected too when using PROJ 6.0.0?

They look like the datum shifts are not applied.

Yes, when testing

src/projinfo -s EPSG:4258  -t "+proj=sterea +lat_0=52.15616055555555 
+lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 
++ellps=bessel nadgrids=@rdtrans2008.gsb +geoidgrids=@naptrans2008.gtx 
++units=m +no_defs type=crs"

we get

PROJ string:
+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert 
+xy_in=deg +xy_out=rad +step +proj=sterea +lat_0=52.1561605555556
+lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 
++ellps=bessel


So the nadgrids and geoidgrids terms are ignored. The reason here is that they are used as a hint for transformations to WGS84, but EPSG:4258 definition doesn't include any such explicit transformation with a towgs84/geoidgrids/ nadgrids. So we are in a grey situation that is neither a pure late-binding or pure early-binding situation. Opinions welcome if in such a situation where there is a early binding style CRS we should try hard to research a transformation from the other CRS to WGS84.

Even


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj


Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster 
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u 
dit direct te melden aan de verzender en het bericht te vernietigen. 
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent 
of the Kadaster is unlawful. If you have received this message, but are not the addressee, 
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message

From even.rouault at spatialys.com  Thu Mar 21 09:48:43 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 21 Mar 2019 17:48:43 +0100
Subject: [PROJ] PROJ 6.0.0 cs2cs: cannot instantiate source coordinate
	system - program abnormally terminated
In-Reply-To: <VI1P192MB0255E425E9059A513BA01F9BEF420@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
References: <eb210117-1ee7-3e97-e86f-e8bbc6c67187@xs4all.nl>
 <4088763.IZorUh4B0U@even-i700>
 <VI1P192MB0255E425E9059A513BA01F9BEF420@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
Message-ID: <3797456.TbWctu2OzU@even-i700>

Jochem,

> What is unclear here? I still don't understand the early and late binding
> terminology so I can't understand your explanation.

Yeah, sorry. I'm not sure there's even a universally admitted definition for 
those. So in my mind,
- early-binding implies using WGS84 as a pivot when going from CRS A to CRS B. 
This was the compulsory approach when using PROJ < 6. Actually if using 
geoidgrids/nadgrids in CRS A and towgs84=0,0,0 in CRS B, the pivot CRS would 
be something else than WGS84, but was a bit of cheating
- late-binding implies that if you want to go from CRS A to CRS B, the 
software will first research if there is a direct transformation between both, 
before researching tranformations through a potential pivot, such as WGS84. 
This is the default behaviour of PROJ 6.

When transforming from EPSG:4258 to "+proj=sterea +lat_0=52.15616055555555 
+lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel 
+nadgrids=rdtrans2008.gsb +geoidgrids=naptrans2008.gtx +units=m +no_defs 
+type=crs", we are in a middle situation.

EPSG:4258 is a CRS definition, that is not bound to a particular pivot

Whereas "+proj=sterea ... +nadgrids=.... +geoidgrids=...." implies normally a 
WGS84 pivot, but as you mentionned here, in fact the nadgrids here was mean 
for going to the Netherlands' datum to ETRS89 directly, and PROJ has no way of 
figuring that out from the +proj= expression.

With PROJ master or latest state of 6.0 branch (not 6.0.0), if you expand 
EPSG:4258 definition to "+proj=longlat +ellps=GRS80 +towgs84=0,0,0 +type=crs", 
you'll get the expected result:

$ src/projinfo -s "+proj=longlat +ellps=GRS80 +towgs84=0,0,0 +type=crs"  -t 
"+proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 
+x_0=155000 +y_0=463000 +ellps=bessel +nadgrids=@rdtrans2008.gsb 
+geoidgrids=@naptrans2008.gtx +units=m +no_defs +type=crs" -o PROJ

Candidate operations found: 1
-------------------------------------
Operation n°1:

unknown id, Transformation from unknown to WGS84 + Null geographic offset from 
WGS 84 to WGS 84 + unknown + unknown to WGS84 + unknown to WGS84 ellipsoidal 
height, unknown accuracy, World, at least one grid missing

PROJ string:
+proj=pipeline +step +proj=unitconvert +xy_in=deg +xy_out=rad +step +inv 
+proj=vgridshift +grids=@naptrans2008.gtx +multiplier=1 +step +inv 
+proj=hgridshift +grids=@rdtrans2008.gsb +step +proj=sterea 
+lat_0=52.1561605555556 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 
+y_0=463000 +ellps=bessel

Grid @naptrans2008.gtx needed but not found on the system.
Grid @rdtrans2008.gsb needed but not found on the system.

~~~~~

Another approach here would be to use also a WKT definition from the +proj= 
part or a EPSG code, since the rdtrans2008.gsb grid is referenced in EPSG:

For example, if using EPSG:4289 (Amersfoort geographic CRS), you get:

$ src/projinfo -s EPSG:4258  -t EPSG:4289 -o PROJ
Candidate operations found: 5
-------------------------------------
Operation n°1:

INVERSE(EPSG):15739, Inverse of Amersfoort to ETRS89 (3), 0.5 m, Netherlands - 
onshore

PROJ string:
+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert 
+xy_in=deg +xy_out=rad +step +proj=push +v_3 +step +proj=cart +ellps=GRS80 
+step +inv +proj=helmert +x=565.2369 +y=50.0087 +z=465.658 
+rx=0.406857330322398 +ry=-0.350732676542563 +rz=1.8703473836068 +s=4.0812 
+convention=coordinate_frame +step +inv +proj=cart +ellps=bessel +step 
+proj=pop +v_3 +step +proj=unitconvert +xy_in=rad +xy_out=deg +step 
+proj=axisswap +order=2,1

-------------------------------------
Operation n°2:

INVERSE(EPSG):15740, Inverse of Amersfoort to ETRS89 (4), 0.5 m, Netherlands - 
onshore

PROJ string:
+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert 
+xy_in=deg +xy_out=rad +step +proj=push +v_3 +step +proj=cart +ellps=GRS80 
+step +inv +proj=molobadekas +x=593.0297 +y=26.0038 +z=478.7534 
+rx=0.406857330322398 +ry=-0.350732676542563 +rz=1.8703473836068 +s=4.0812 
+px=3903453.1482 +py=368135.3134 +pz=5012970.3051 +convention=coordinate_frame 
+step +inv +proj=cart +ellps=bessel +step +proj=pop +v_3 +step 
+proj=unitconvert +xy_in=rad +xy_out=deg +step +proj=axisswap +order=2,1

-------------------------------------
Operation n°3:

INVERSE(EPSG):4830, Inverse of Amersfoort to ETRS89 (5), 0.5 m, Netherlands - 
onshore

PROJ string:
+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert 
+xy_in=deg +xy_out=rad +step +proj=push +v_3 +step +proj=cart +ellps=GRS80 
+step +inv +proj=helmert +x=565.4171 +y=50.3319 +z=465.5524 
+rx=0.398957388243134 +ry=-0.343987817378283 +rz=1.87740163998045 +s=4.0725 
+convention=coordinate_frame +step +inv +proj=cart +ellps=bessel +step 
+proj=pop +v_3 +step +proj=unitconvert +xy_in=rad +xy_out=deg +step 
+proj=axisswap +order=2,1

-------------------------------------
Operation n°4:

INVERSE(EPSG):4831, Inverse of Amersfoort to ETRS89 (6), 0.5 m, Netherlands - 
onshore

PROJ string:
+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert 
+xy_in=deg +xy_out=rad +step +proj=push +v_3 +step +proj=cart +ellps=GRS80 
+step +inv +proj=molobadekas +x=593.0248 +y=25.9984 +z=478.7459 
+rx=0.398957388243134 +ry=-0.343987817378283 +rz=1.87740163998045 +s=4.0725 
+px=3903453.1482 +py=368135.3134 +pz=5012970.3051 +convention=coordinate_frame 
+step +inv +proj=cart +ellps=bessel +step +proj=pop +v_3 +step 
+proj=unitconvert +xy_in=rad +xy_out=deg +step +proj=axisswap +order=2,1

-------------------------------------
Operation n°5:

INVERSE(EPSG):7000, Inverse of Amersfoort to ETRS89 (7), 0.001 m, Netherlands 
- onshore, at least one grid missing

PROJ string:
+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert 
+xy_in=deg +xy_out=rad +step +inv +proj=hgridshift +grids=rdtrans2008.gsb 
+step +proj=unitconvert +xy_in=rad +xy_out=deg +step +proj=axisswap +order=2,1

Grid rdtrans2008.gsb needed but not found on the system.


The vertical part is also there:

$ src/projinfo -s EPSG:5709  -t EPSG:4937 -o PROJ
Candidate operations found: 1
-------------------------------------
Operation n°1:

INVERSE(EPSG):7001, Inverse of ETRS89 to NAP height (1), 0.01 m, Netherlands - 
onshore, at least one grid missing

PROJ string:
+proj=pipeline +step +inv +proj=vgridshift +grids=naptrans2008.gtx 
+multiplier=1

Grid naptrans2008.gtx needed but not found on the system.

~~~~~~

So it is a matter of creating a CompoundCRS WKT with the ProjectedCRS using 
the Amersfoort geographic CRS and the vertical CRS using EPSG:5709, and asking 
to transform that to EPSG:4937

COMPOUNDCRS["unknown",
  PROJCRS["unknown",
    BASEGEOGCRS["Amersfoort",
            DATUM["Amersfoort",
                ELLIPSOID["Bessel 1841",6377397.155,299.1528128,
                    LENGTHUNIT["metre",1]]],
            PRIMEM["Greenwich",0,
                ANGLEUNIT["degree",0.0174532925199433]]],
    CONVERSION["unknown",
        METHOD["Oblique Stereographic",
            ID["EPSG",9809]],
        PARAMETER["Latitude of natural origin",52.1561605555556,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8801]],
        PARAMETER["Longitude of natural origin",5.38763888888889,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8802]],
        PARAMETER["Scale factor at natural origin",0.9999079,
            SCALEUNIT["unity",1],
            ID["EPSG",8805]],
        PARAMETER["False easting",155000,
            LENGTHUNIT["metre",1],
            ID["EPSG",8806]],
        PARAMETER["False northing",463000,
            LENGTHUNIT["metre",1],
            ID["EPSG",8807]]],
    CS[Cartesian,2],
        AXIS["(E)",east,
            ORDER[1],
            LENGTHUNIT["metre",1,
                ID["EPSG",9001]]],
        AXIS["(N)",north,
            ORDER[2],
            LENGTHUNIT["metre",1,
                ID["EPSG",9001]]]],
  VERTCRS["NAP height",
    VDATUM["Normaal Amsterdams Peil"],
    CS[vertical,1],
        AXIS["gravity-related height (H)",up,
            LENGTHUNIT["metre",1]],
    USAGE[
        SCOPE["unknown"],
        AREA["Netherlands - onshore"],
        BBOX[50.75,3.2,53.7,7.22]],
    ID["EPSG",5709]]]

The vertical part is correctly handled, but for the horizontal part, there's 
currently an issue to detect the Amersfoort datum and the associated grid 
transformation to ETRS89. I've just filed this as
https://github.com/OSGeo/proj.4/issues/1343

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From nyall.dawson at gmail.com  Thu Mar 21 16:37:47 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Fri, 22 Mar 2019 09:37:47 +1000
Subject: [PROJ] [EXTERNAL] Re:  Proj 6 API questions
In-Reply-To: <2329656.f7vFet86Cj@even-i700>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <2873419.kiKqd3I2jC@even-i700>
 <CAB6t5t8394tFVbOk45_gw3a9i8v7hQoqKvJHeLmKsU60A+reLw@mail.gmail.com>
 <2329656.f7vFet86Cj@even-i700>
Message-ID: <CAB28AsgN0mxxHRP_hE_fV4aV+Jy_3SY9eQ+eoSViEmPH-HfZLw@mail.gmail.com>

On Thu, 21 Mar 2019 at 18:09, Even Rouault <even.rouault at spatialys.com> wrote:
>
> Trent,
>
> thanks, this was helpful. So the situation was that QGIS database and old
> https://svn.osgeo.org/metacrs/sr.org/srsbrowser/data/IAU2000.wkt incorrectly
> used the IAU2000_Semimajor and IAU2000_Semiminor to create a bi-axial
> ellipsoid for bodies where the three axis values where different. Which got
> fixed by
> https://github.com/USGS-Astrogeology/GDAL_scripts/blob/master/
> OGC_IAU2000_WKT_v2/IAU2000_v2.wkt and what ESRI has picked up, which uses a
> sphere with IAU2000_Mean instead.

Ok, good. That means QGIS is safe to use the existing proj db values
and get "better" results then currently.

> > We are also working toward providing these "IAU" codes to GDAL.
>
> You meant PROJ, right ? ;-) GDAL has no longer any CRS database now.
>
> > Unfortunately, this will in addition to any planetary Esri codes already
> > supported.
>
> There could be several options:
> - remove the ESRI definitions since the ellipsoid they define are not used by
> other objects

Well - as soon as I'm done porting QGIS to proj6, it will be possible
for users to create projects using these ESRI:xxxx ellipsoid codes.
Could they be deprecated instead of removed? That would avoid any
possible regression for users.

Nyall

> - do not touch the ESRI definitions, and add IAU next to it
> - (more involved, would require database schema change, and likely software
> logic too to make something useful of it). Import IAU, and create a link from
> ESRI definitions to IAU ones (when identical/compatible)
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com

From even.rouault at spatialys.com  Fri Mar 22 03:14:46 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 22 Mar 2019 11:14:46 +0100
Subject: [PROJ] [EXTERNAL] Re:  Proj 6 API questions
In-Reply-To: <CAB28AsgN0mxxHRP_hE_fV4aV+Jy_3SY9eQ+eoSViEmPH-HfZLw@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <2329656.f7vFet86Cj@even-i700>
 <CAB28AsgN0mxxHRP_hE_fV4aV+Jy_3SY9eQ+eoSViEmPH-HfZLw@mail.gmail.com>
Message-ID: <14534765.LVM0i5d8yL@even-i700>

> Well - as soon as I'm done porting QGIS to proj6, it will be possible
> for users to create projects using these ESRI:xxxx ellipsoid codes.
> Could they be deprecated instead of removed? That would avoid any
> possible regression for users.

OK, we'll keep them then.

<cultural_question>
I'm interested to know why in QGIS an ellipsoid code is directly manipulated, 
or stored. I would have though QGIS would only manipulate higher level objects 
like CRS, and perhaps query their ellipsoid parameters for some computations. 
This is what I wondered while reviewing https://github.com/qgis/QGIS/pull/9557 
with QgsEllipsoidUtils offering API starting with an ellipsoid name.
</cultural_question>

> 
> Nyall
> 
> > - do not touch the ESRI definitions, and add IAU next to it
> > - (more involved, would require database schema change, and likely
> > software
> > logic too to make something useful of it). Import IAU, and create a link
> > from ESRI definitions to IAU ones (when identical/compatible)
> > 
> > Even
> > 
> > --
> > Spatialys - Geospatial professional services
> > http://www.spatialys.com


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Mon Mar 25 09:44:45 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 25 Mar 2019 17:44:45 +0100
Subject: [PROJ] Backport policy to 6.0.x for database content and structure
	change ?
Message-ID: <81790640.I7WdMudotk@even-i700>

Hi,

In https://github.com/OSGeo/proj.4/pull/1368 , I've committed a few changes:
- update of database with latest content of EPSG, IGNF and ESRI registries
- add an extra column (operation_version) to tables that store coordinate 
operations. This change was triggered by the fact that very recent evolutions 
of the WKT2:2018 candidate standard have lead to adding this information in 
WKT2, and this wasn't imported into the database until now since there was no 
use in the code base before.

Are there thoughts about if this is material appropriate for backport to 
6.0.x? (the backport iself is technically trivial)

My point of view is that generally stable branches should be for bugfixes 
only, and not feature changes, and such changes could be considered as 
features.

But as 6.0.0 is really a version with a lot of changes that takes time to be 
adopted, we might perhaps consider that its first bugfix release can receive 
more changes withouth having bad consequences (apart from the database content 
change, the only consequence would be if people use the capability to attach 
extra custom databases to the main one, and in that case those databases must 
have the same table structure as the main one, but I'm not aware of anyone 
having used that)

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From schwehr at gmail.com  Mon Mar 25 10:00:28 2019
From: schwehr at gmail.com (Kurt Schwehr)
Date: Mon, 25 Mar 2019 10:00:28 -0700
Subject: [PROJ] Using the Proj 6 database in geotools?
Message-ID: <CACmBxyu+b7cvj4K=SREWEc7xq40vyqAn85m8ocVP-TQk+WdEWA@mail.gmail.com>

On the crazy thoughts front, I'm wondering about GeoTools using the Proj
database via a epsg-proj plugin to read the sqlite database.  The HSQLDB
plugin works, but is painful and way out of date.  Or less exciting, would
be to freshen the hsqldb from the proj sqlite?  Thoughts?

https://github.com/geotools/geotools/tree/master/modules/plugin/epsg-hsql
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190325/f497b39d/attachment.html>

From nyall.dawson at gmail.com  Mon Mar 25 15:43:00 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Tue, 26 Mar 2019 08:43:00 +1000
Subject: [PROJ] [EXTERNAL] Re:  Proj 6 API questions
In-Reply-To: <14534765.LVM0i5d8yL@even-i700>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <2329656.f7vFet86Cj@even-i700>
 <CAB28AsgN0mxxHRP_hE_fV4aV+Jy_3SY9eQ+eoSViEmPH-HfZLw@mail.gmail.com>
 <14534765.LVM0i5d8yL@even-i700>
Message-ID: <CAB28AsjRw7XHm7FFT950UNNJV5G1WN5GrR46N4GSenoQNcQDog@mail.gmail.com>

On Fri, 22 Mar 2019 at 20:14, Even Rouault <even.rouault at spatialys.com> wrote:
>
> > Well - as soon as I'm done porting QGIS to proj6, it will be possible
> > for users to create projects using these ESRI:xxxx ellipsoid codes.
> > Could they be deprecated instead of removed? That would avoid any
> > possible regression for users.
>
> OK, we'll keep them then.
>
> <cultural_question>
> I'm interested to know why in QGIS an ellipsoid code is directly manipulated,
> or stored. I would have though QGIS would only manipulate higher level objects
> like CRS, and perhaps query their ellipsoid parameters for some computations.
> This is what I wondered while reviewing https://github.com/qgis/QGIS/pull/9557
> with QgsEllipsoidUtils offering API starting with an ellipsoid name.
> </cultural_question>

(Disclaimer: this functionality has been around much longer than I've
been involved with QGIS, so I may be missing some of the background
here)

QGIS exposes the choice of ellipsoid on a per-project level. This
project ellipsoid is independent of the map CRS[1][2], so a project in
WGS84 could have an ellipsoid of GRS80, and a project in Web Mercator
could use the WGS84 ellipsoid. The project ellipsoid is used ONLY when
calculating geodetic distances and areas of features. (It's also
possible to set no ellipsoid, which means distances/area calculation
is always purely Cartesian). It's also possible for users to enter a
custom ellipsoid for a project, if they have some compelling reason to
do so!

So we need a way to store the project ellipsoid within the project. In
current QGIS versions that's done by the ellipsoid name, from QGIS'
custom ellipsoid db. When we move to proj6 api I'm replacing this with
the unique auth:code combination.

Does that help clarify?

Nyall


[1] The choice is kept separate from project CRS, because a single
project can have many different CRSes (individual canvases can have
different CRS, layout map items can override the CRS, etc). Hence we
push the choice for an appropriate project-wide ellipsoid for
distance/area calculations back to the user -- it's their
responsibility to make an appropriate choice based on their particular
project.

[2] QGIS *does* initially set the default ellipsoid for the project to
match the main canvas CRS when you start a new project. But that's
just to help "guide" users to a mostly-appropriate choice.



>
> >
> > Nyall
> >
> > > - do not touch the ESRI definitions, and add IAU next to it
> > > - (more involved, would require database schema change, and likely
> > > software
> > > logic too to make something useful of it). Import IAU, and create a link
> > > from ESRI definitions to IAU ones (when identical/compatible)
> > >
> > > Even
> > >
> > > --
> > > Spatialys - Geospatial professional services
> > > http://www.spatialys.com
>
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com

From gdt at lexort.com  Mon Mar 25 16:42:27 2019
From: gdt at lexort.com (Greg Troxel)
Date: Mon, 25 Mar 2019 19:42:27 -0400
Subject: [PROJ] Backport policy to 6.0.x for database content and
	structure change ?
In-Reply-To: <81790640.I7WdMudotk@even-i700> (Even Rouault's message of "Mon, 
 25 Mar 2019 17:44:45 +0100")
References: <81790640.I7WdMudotk@even-i700>
Message-ID: <smur2au1py4.fsf@linuxpal.mit.edu>

Even Rouault <even.rouault at spatialys.com> writes:

> Are there thoughts about if this is material appropriate for backport to 
> 6.0.x? (the backport iself is technically trivial)

seems ok

> My point of view is that generally stable branches should be for bugfixes 
> only, and not feature changes, and such changes could be considered as 
> features.

Mostly agreed, but what is really needed in a stable branch is
stability, which means a very high confidence that given any platform
where the release branch builds, when applying a change that new branch
will build and work correctly and have the same API and ABI both.  This
includes platforms on which the person applying the change cannot test.

That's of course a definition that can only be shown to be false by
example, but as a working plan it seems reasonable.

And agreed that 6.0 is itself a huge change, so more measured changes on
the way to 6.1 or whatever it is called are not so important.  This is
particularly true before packaging systems actually adopt 6 as the main
approach.   So far there are so many depending packages with issues that
I am not aware of that happening.


From even.rouault at spatialys.com  Mon Mar 25 16:47:42 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 26 Mar 2019 00:47:42 +0100
Subject: [PROJ] [EXTERNAL] Re:  Proj 6 API questions
In-Reply-To: <CAB28AsjRw7XHm7FFT950UNNJV5G1WN5GrR46N4GSenoQNcQDog@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <14534765.LVM0i5d8yL@even-i700>
 <CAB28AsjRw7XHm7FFT950UNNJV5G1WN5GrR46N4GSenoQNcQDog@mail.gmail.com>
Message-ID: <2457015.pcH7lf472Q@even-i700>

> (Disclaimer: this functionality has been around much longer than I've
> been involved with QGIS, so I may be missing some of the background
> here)
> 
> QGIS exposes the choice of ellipsoid on a per-project level. This
> project ellipsoid is independent of the map CRS[1][2], so a project in
> WGS84 could have an ellipsoid of GRS80, and a project in Web Mercator
> could use the WGS84 ellipsoid. The project ellipsoid is used ONLY when
> calculating geodetic distances and areas of features. (It's also
> possible to set no ellipsoid, which means distances/area calculation
> is always purely Cartesian). It's also possible for users to enter a
> custom ellipsoid for a project, if they have some compelling reason to
> do so!
> 
> So we need a way to store the project ellipsoid within the project. In
> current QGIS versions that's done by the ellipsoid name, from QGIS'
> custom ellipsoid db. When we move to proj6 api I'm replacing this with
> the unique auth:code combination.
> 
> Does that help clarify?

Yes, thanks. OK, I see it now in Properties/General/Measurement.
Defining an ellipsoid that is not the same as the ellipsoid of the per-project 
CRS makes no sense to me. And I see this is what happens if opening for 
example a raster in UTM NAD27 in an empty project: the ellipsoid is set (or 
likely let to its default value of) WGS84 ! Aouch ! If it was me, I would just 
kill this definition of a custom ellipsoid...

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From kristianevers at gmail.com  Mon Mar 25 22:25:31 2019
From: kristianevers at gmail.com (Kristian Evers)
Date: Tue, 26 Mar 2019 06:25:31 +0100
Subject: [PROJ] [EXTERNAL] Re:  Proj 6 API questions
In-Reply-To: <2457015.pcH7lf472Q@even-i700>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <14534765.LVM0i5d8yL@even-i700>
 <CAB28AsjRw7XHm7FFT950UNNJV5G1WN5GrR46N4GSenoQNcQDog@mail.gmail.com>
 <2457015.pcH7lf472Q@even-i700>
Message-ID: <31797AC1-4B24-4C12-B473-7DA7365C7EDE@gmail.com>



> On 26 Mar 2019, at 00:47, Even Rouault <even.rouault at spatialys.com> wrote:
> 
>> (Disclaimer: this functionality has been around much longer than I've
>> been involved with QGIS, so I may be missing some of the background
>> here)
>> 
>> QGIS exposes the choice of ellipsoid on a per-project level. This
>> project ellipsoid is independent of the map CRS[1][2], so a project in
>> WGS84 could have an ellipsoid of GRS80, and a project in Web Mercator
>> could use the WGS84 ellipsoid. The project ellipsoid is used ONLY when
>> calculating geodetic distances and areas of features. (It's also
>> possible to set no ellipsoid, which means distances/area calculation
>> is always purely Cartesian). It's also possible for users to enter a
>> custom ellipsoid for a project, if they have some compelling reason to
>> do so!
>> 
>> So we need a way to store the project ellipsoid within the project. In
>> current QGIS versions that's done by the ellipsoid name, from QGIS'
>> custom ellipsoid db. When we move to proj6 api I'm replacing this with
>> the unique auth:code combination.
>> 
>> Does that help clarify?
> 
> Yes, thanks. OK, I see it now in Properties/General/Measurement.
> Defining an ellipsoid that is not the same as the ellipsoid of the per-project 
> CRS makes no sense to me. And I see this is what happens if opening for 
> example a raster in UTM NAD27 in an empty project: the ellipsoid is set (or 
> likely let to its default value of) WGS84 ! Aouch ! If it was me, I would just 
> kill this definition of a custom ellipsoid…
> 

I absolutely agree with Even here. This behaviour is odd and not what I
expected as user of QGIS. Now I wonder if I have introduced errors
somewhere in the past because I wasn’t aware of this (probably not, I
mostly work with GRS80 and WGS84).

/Kristian


> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From nyall.dawson at gmail.com  Mon Mar 25 22:43:12 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Tue, 26 Mar 2019 15:43:12 +1000
Subject: [PROJ] [EXTERNAL] Re: Proj 6 API questions
In-Reply-To: <31797AC1-4B24-4C12-B473-7DA7365C7EDE@gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <14534765.LVM0i5d8yL@even-i700>
 <CAB28AsjRw7XHm7FFT950UNNJV5G1WN5GrR46N4GSenoQNcQDog@mail.gmail.com>
 <2457015.pcH7lf472Q@even-i700>
 <31797AC1-4B24-4C12-B473-7DA7365C7EDE@gmail.com>
Message-ID: <CAB28Asi3ETDC003dniDwAjJDmS-0=7LQ=s1hLxSFN8_oj=ZuAA@mail.gmail.com>

On Tue, 26 Mar 2019 at 15:25, Kristian Evers <kristianevers at gmail.com> wrote:
>
>
>
> > On 26 Mar 2019, at 00:47, Even Rouault <even.rouault at spatialys.com> wrote:
> >
> >> (Disclaimer: this functionality has been around much longer than I've
> >> been involved with QGIS, so I may be missing some of the background
> >> here)
> >>
> >> QGIS exposes the choice of ellipsoid on a per-project level. This
> >> project ellipsoid is independent of the map CRS[1][2], so a project in
> >> WGS84 could have an ellipsoid of GRS80, and a project in Web Mercator
> >> could use the WGS84 ellipsoid. The project ellipsoid is used ONLY when
> >> calculating geodetic distances and areas of features. (It's also
> >> possible to set no ellipsoid, which means distances/area calculation
> >> is always purely Cartesian). It's also possible for users to enter a
> >> custom ellipsoid for a project, if they have some compelling reason to
> >> do so!
> >>
> >> So we need a way to store the project ellipsoid within the project. In
> >> current QGIS versions that's done by the ellipsoid name, from QGIS'
> >> custom ellipsoid db. When we move to proj6 api I'm replacing this with
> >> the unique auth:code combination.
> >>
> >> Does that help clarify?
> >
> > Yes, thanks. OK, I see it now in Properties/General/Measurement.
> > Defining an ellipsoid that is not the same as the ellipsoid of the per-project
> > CRS makes no sense to me. And I see this is what happens if opening for
> > example a raster in UTM NAD27 in an empty project: the ellipsoid is set (or
> > likely let to its default value of) WGS84 ! Aouch ! If it was me, I would just
> > kill this definition of a custom ellipsoid…
> >
>
> I absolutely agree with Even here. This behaviour is odd and not what I
> expected as user of QGIS. Now I wonder if I have introduced errors
> somewhere in the past because I wasn’t aware of this (probably not, I
> mostly work with GRS80 and WGS84).

I honestly don't have any plans to change this behavior. I cannot see
a way to remove this choice from users, as QGIS projects don't have a
single CRS, but they DO need a single ellipsoid. The best we can do is
make sure that a good default selection is given to users, but we
cannot totally remove this choice.

Looking into this a bit, there is issues with the current matching of
initial CRS to ellipsoid. I'm hopeful the move to proj 6 will fix this
(the current code seems unable to correctly determine the ellipsoid
for some projections).

Nyall




>
> /Kristian
>
>
> > --
> > Spatialys - Geospatial professional services
> > http://www.spatialys.com
> > _______________________________________________
> > PROJ mailing list
> > PROJ at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/proj
>

From kristianevers at gmail.com  Mon Mar 25 23:09:44 2019
From: kristianevers at gmail.com (Kristian Evers)
Date: Tue, 26 Mar 2019 07:09:44 +0100
Subject: [PROJ] [EXTERNAL] Re: Proj 6 API questions
In-Reply-To: <CAB28Asi3ETDC003dniDwAjJDmS-0=7LQ=s1hLxSFN8_oj=ZuAA@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <14534765.LVM0i5d8yL@even-i700>
 <CAB28AsjRw7XHm7FFT950UNNJV5G1WN5GrR46N4GSenoQNcQDog@mail.gmail.com>
 <2457015.pcH7lf472Q@even-i700>
 <31797AC1-4B24-4C12-B473-7DA7365C7EDE@gmail.com>
 <CAB28Asi3ETDC003dniDwAjJDmS-0=7LQ=s1hLxSFN8_oj=ZuAA@mail.gmail.com>
Message-ID: <36C901F0-61CE-4C4E-9BD7-66B6E5B473FE@gmail.com>



> On 26 Mar 2019, at 06:43, Nyall Dawson <nyall.dawson at gmail.com> wrote:
> 
> On Tue, 26 Mar 2019 at 15:25, Kristian Evers <kristianevers at gmail.com <mailto:kristianevers at gmail.com>> wrote:
>> 
>> 
>> 
>>> On 26 Mar 2019, at 00:47, Even Rouault <even.rouault at spatialys.com> wrote:
>>> 
>>>> (Disclaimer: this functionality has been around much longer than I've
>>>> been involved with QGIS, so I may be missing some of the background
>>>> here)
>>>> 
>>>> QGIS exposes the choice of ellipsoid on a per-project level. This
>>>> project ellipsoid is independent of the map CRS[1][2], so a project in
>>>> WGS84 could have an ellipsoid of GRS80, and a project in Web Mercator
>>>> could use the WGS84 ellipsoid. The project ellipsoid is used ONLY when
>>>> calculating geodetic distances and areas of features. (It's also
>>>> possible to set no ellipsoid, which means distances/area calculation
>>>> is always purely Cartesian). It's also possible for users to enter a
>>>> custom ellipsoid for a project, if they have some compelling reason to
>>>> do so!
>>>> 
>>>> So we need a way to store the project ellipsoid within the project. In
>>>> current QGIS versions that's done by the ellipsoid name, from QGIS'
>>>> custom ellipsoid db. When we move to proj6 api I'm replacing this with
>>>> the unique auth:code combination.
>>>> 
>>>> Does that help clarify?
>>> 
>>> Yes, thanks. OK, I see it now in Properties/General/Measurement.
>>> Defining an ellipsoid that is not the same as the ellipsoid of the per-project
>>> CRS makes no sense to me. And I see this is what happens if opening for
>>> example a raster in UTM NAD27 in an empty project: the ellipsoid is set (or
>>> likely let to its default value of) WGS84 ! Aouch ! If it was me, I would just
>>> kill this definition of a custom ellipsoid…
>>> 
>> 
>> I absolutely agree with Even here. This behaviour is odd and not what I
>> expected as user of QGIS. Now I wonder if I have introduced errors
>> somewhere in the past because I wasn’t aware of this (probably not, I
>> mostly work with GRS80 and WGS84).
> 
> I honestly don't have any plans to change this behavior. I cannot see
> a way to remove this choice from users, as QGIS projects don't have a
> single CRS, but they DO need a single ellipsoid. The best we can do is
> make sure that a good default selection is given to users, but we
> cannot totally remove this choice.
> 

There’s only one project CRS, right? I would say that the using the ellipsoid from that is a
good default and very likely what 99% of users would want.

In case there’s a mismatch between the user-selected ellipsoid and the ellipsoid of the
map/project CRS, how do you convert between the two ellipsoids?

/Kristian

> Looking into this a bit, there is issues with the current matching of
> initial CRS to ellipsoid. I'm hopeful the move to proj 6 will fix this
> (the current code seems unable to correctly determine the ellipsoid
> for some projections).
> 
> Nyall
> 
> 
> 
> 
>> 
>> /Kristian
>> 
>> 
>>> --
>>> Spatialys - Geospatial professional services
>>> http://www.spatialys.com <http://www.spatialys.com/>
>>> _______________________________________________
>>> PROJ mailing list
>>> PROJ at lists.osgeo.org <mailto:PROJ at lists.osgeo.org>
>>> https://lists.osgeo.org/mailman/listinfo/proj <https://lists.osgeo.org/mailman/listinfo/proj>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190326/0fecbc08/attachment-0001.html>

From kreve at sdfe.dk  Mon Mar 25 23:15:45 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 26 Mar 2019 06:15:45 +0000
Subject: [PROJ] Backport policy to 6.0.x for database content and
 structure	change ?
In-Reply-To: <81790640.I7WdMudotk@even-i700>
References: <81790640.I7WdMudotk@even-i700>
Message-ID: <EB764E48-E71F-4219-97ED-9708522DEC74@sdfe.dk>

I think we should accept that some changes will be required during the first
few months of PROJ 6. So, I am fine with this change.

In the future (maybe from 6.1.0?) we should stick to the concepts of semantic
versioning, in the same way we do with code. So, only bug fixes in patch-releases,
which for the database I think should also include data updates. Minor version
releases can add new tables etc, but not remove anything and of course breaking
changes should only be allowed in major version releases.

/Kristian

> On 25 Mar 2019, at 17:44, Even Rouault <even.rouault at spatialys.com> wrote:
> 
> Hi,
> 
> In https://github.com/OSGeo/proj.4/pull/1368 , I've committed a few changes:
> - update of database with latest content of EPSG, IGNF and ESRI registries
> - add an extra column (operation_version) to tables that store coordinate 
> operations. This change was triggered by the fact that very recent evolutions 
> of the WKT2:2018 candidate standard have lead to adding this information in 
> WKT2, and this wasn't imported into the database until now since there was no 
> use in the code base before.
> 
> Are there thoughts about if this is material appropriate for backport to 
> 6.0.x? (the backport iself is technically trivial)
> 
> My point of view is that generally stable branches should be for bugfixes 
> only, and not feature changes, and such changes could be considered as 
> features.
> 
> But as 6.0.0 is really a version with a lot of changes that takes time to be 
> adopted, we might perhaps consider that its first bugfix release can receive 
> more changes withouth having bad consequences (apart from the database content 
> change, the only consequence would be if people use the capability to attach 
> extra custom databases to the main one, and in that case those databases must 
> have the same table structure as the main one, but I'm not aware of anyone 
> having used that)
> 
> Even
> 
> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From Jochem.Lesparre at kadaster.nl  Tue Mar 26 00:56:55 2019
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Tue, 26 Mar 2019 07:56:55 +0000
Subject: [PROJ] [EXTERNAL] Re: Proj 6 API questions
In-Reply-To: <36C901F0-61CE-4C4E-9BD7-66B6E5B473FE@gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <14534765.LVM0i5d8yL@even-i700>
 <CAB28AsjRw7XHm7FFT950UNNJV5G1WN5GrR46N4GSenoQNcQDog@mail.gmail.com>
 <2457015.pcH7lf472Q@even-i700>
 <31797AC1-4B24-4C12-B473-7DA7365C7EDE@gmail.com>
 <CAB28Asi3ETDC003dniDwAjJDmS-0=7LQ=s1hLxSFN8_oj=ZuAA@mail.gmail.com>
 <36C901F0-61CE-4C4E-9BD7-66B6E5B473FE@gmail.com>
Message-ID: <VI1P192MB02551C0058FE555B38B1B8F0EF5F0@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>


> I honestly don't have any plans to change this behavior. I cannot see
> a way to remove this choice from users, as QGIS projects don't have a
> single CRS, but they DO need a single ellipsoid. The best we can do is
> make sure that a good default selection is given to users, but we
> cannot totally remove this choice.

To add a 3rd opinion in the debate: I think the ellipsoid should should NOT automatically be set to the ellipsoid of a CRS used by the user, but it should by default kept set to GRS80, unless the user explicitly manually selects another ellipsoid. GRS80 is scientifically the best ellipsoid, all others are outdated (not the most accurate estimation of the size of the earth), unconventional (seldomly used) or wrong (e.g. due to rounding of parameters). The only exception would be extra-terrestrial CRSs: there GRS80 make no sense and the scientifically best ellipsoid of the planet in question should be selected by default. When a user is using a national CRS based on a old ellipsoid, (s)he mostly doesn't want distances and areas based on this outdated ellispoid but distances and areas computed in the best way possible, which is GRS80.
 
Kind regards, Jochem



Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster 
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u 
dit direct te melden aan de verzender en het bericht te vernietigen. 
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent 
of the Kadaster is unlawful. If you have received this message, but are not the addressee, 
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message

From nyall.dawson at gmail.com  Tue Mar 26 02:56:22 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Tue, 26 Mar 2019 19:56:22 +1000
Subject: [PROJ] [EXTERNAL] Re: Proj 6 API questions
In-Reply-To: <VI1P192MB02551C0058FE555B38B1B8F0EF5F0@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <14534765.LVM0i5d8yL@even-i700>
 <CAB28AsjRw7XHm7FFT950UNNJV5G1WN5GrR46N4GSenoQNcQDog@mail.gmail.com>
 <2457015.pcH7lf472Q@even-i700>
 <31797AC1-4B24-4C12-B473-7DA7365C7EDE@gmail.com>
 <CAB28Asi3ETDC003dniDwAjJDmS-0=7LQ=s1hLxSFN8_oj=ZuAA@mail.gmail.com>
 <36C901F0-61CE-4C4E-9BD7-66B6E5B473FE@gmail.com>
 <VI1P192MB02551C0058FE555B38B1B8F0EF5F0@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
Message-ID: <CAB28AsjTde_b4U+Fr7a-p=VWHKOXYFTLb--o1zXMQpVkpQ-9Aw@mail.gmail.com>

On Tue, 26 Mar 2019 at 17:58, Lesparre, Jochem
<Jochem.Lesparre at kadaster.nl> wrote:
>
>
> > I honestly don't have any plans to change this behavior. I cannot see
> > a way to remove this choice from users, as QGIS projects don't have a
> > single CRS, but they DO need a single ellipsoid. The best we can do is
> > make sure that a good default selection is given to users, but we
> > cannot totally remove this choice.
>
> To add a 3rd opinion in the debate: I think the ellipsoid should should NOT automatically be set to the ellipsoid of a CRS used by the user, but it should by default kept set to GRS80, unless the user explicitly manually selects another ellipsoid. GRS80 is scientifically the best ellipsoid, all others are outdated (not the most accurate estimation of the size of the earth), unconventional (seldomly used) or wrong (e.g. due to rounding of parameters). The only exception would be extra-terrestrial CRSs: there GRS80 make no sense and the scientifically best ellipsoid of the planet in question should be selected by default. When a user is using a national CRS based on a old ellipsoid, (s)he mostly doesn't want distances and areas based on this outdated ellispoid but distances and areas computed in the best way possible, which is GRS80.

I'm very much in favour of this approach!

I wonder if this is something which belongs in the proj db itself.
I.e. some API to query the recommended ellipsoid for a given planetary
body.

Nyall

>
> Kind regards, Jochem
>
>
>
> Disclaimer:
> De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
> Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster
> is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u
> dit direct te melden aan de verzender en het bericht te vernietigen.
> Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.
>
> Disclaimer:
> The content of this message is meant to be received by the addressee only.
> Use of the content of this message by anyone other than the addressee without the consent
> of the Kadaster is unlawful. If you have received this message, but are not the addressee,
> please contact the sender immediately and destroy the message.
> No rights can be derived from the content of this message

From even.rouault at spatialys.com  Tue Mar 26 03:57:48 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 26 Mar 2019 11:57:48 +0100
Subject: [PROJ] [EXTERNAL] Re: Proj 6 API questions
In-Reply-To: <CAB28AsjTde_b4U+Fr7a-p=VWHKOXYFTLb--o1zXMQpVkpQ-9Aw@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <VI1P192MB02551C0058FE555B38B1B8F0EF5F0@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <CAB28AsjTde_b4U+Fr7a-p=VWHKOXYFTLb--o1zXMQpVkpQ-9Aw@mail.gmail.com>
Message-ID: <34550180.roYkxK0FuH@even-i700>

On mardi 26 mars 2019 19:56:22 CET Nyall Dawson wrote:
> On Tue, 26 Mar 2019 at 17:58, Lesparre, Jochem
> 
> <Jochem.Lesparre at kadaster.nl> wrote:
> > > I honestly don't have any plans to change this behavior. I cannot see
> > > a way to remove this choice from users, as QGIS projects don't have a
> > > single CRS, but they DO need a single ellipsoid. The best we can do is
> > > make sure that a good default selection is given to users, but we
> > > cannot totally remove this choice.
> > 
> > To add a 3rd opinion in the debate: I think the ellipsoid should should
> > NOT automatically be set to the ellipsoid of a CRS used by the user, but
> > it should by default kept set to GRS80, unless the user explicitly
> > manually selects another ellipsoid. GRS80 is scientifically the best
> > ellipsoid, all others are outdated (not the most accurate estimation of
> > the size of the earth), unconventional (seldomly used) or wrong (e.g. due
> > to rounding of parameters). The only exception would be extra-terrestrial
> > CRSs: there GRS80 make no sense and the scientifically best ellipsoid of
> > the planet in question should be selected by default. When a user is
> > using a national CRS based on a old ellipsoid, (s)he mostly doesn't want
> > distances and areas based on this outdated ellispoid but distances and
> > areas computed in the best way possible, which is GRS80.
> I'm very much in favour of this approach!

The question raised by Kristian is still valid. How do you convert from 
project coordinates to coordinates on the measurement ellipsoid ?
- is is a no-op conversion, that is
    lon,lat(measurement_ellipsoid) = lon,lat(project_crs)  ?
  That would be wrong.
- or some form of coordinate transformation from the project CRS to the
  measurement ellipsoid, but then you'll get no datum shifts. That said, for
  measurement, that probably doesn't make a lot of difference in the resulting
  computation (assuming that the shift would be almost homogeneous on the area
  of interest)

> I wonder if this is something which belongs in the proj db itself.
> I.e. some API to query the recommended ellipsoid for a given planetary
> body.

Before the API, we would need the information. The database doesn't store a 
concept of recommended ellipsoid. Could be a new column in 'ellipsoid' table 
with a check that there's a single recommended ellipsoid for a celestial_body, 
and that for each body, there's a recommended ellipsoid (commit.sql can be 
used to add consistency checks that don't fall in usual SQL constraints)
(thinking out loud. haven't given that more thought)

Even
-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From schwehr at gmail.com  Tue Mar 26 04:56:43 2019
From: schwehr at gmail.com (Kurt Schwehr)
Date: Tue, 26 Mar 2019 04:56:43 -0700
Subject: [PROJ] Backport policy to 6.0.x for database content and
 structure change ?
In-Reply-To: <EB764E48-E71F-4219-97ED-9708522DEC74@sdfe.dk>
References: <81790640.I7WdMudotk@even-i700>
 <EB764E48-E71F-4219-97ED-9708522DEC74@sdfe.dk>
Message-ID: <CACmBxytRdWZ9A8Oi4nR==b4oqmzBb=eAMJUeUtok74wYDqh_MA@mail.gmail.com>

+1 for this type of backport

On Mon, Mar 25, 2019, 11:15 PM Kristian Evers <kreve at sdfe.dk> wrote:

> I think we should accept that some changes will be required during the
> first
> few months of PROJ 6. So, I am fine with this change.
>
> In the future (maybe from 6.1.0?) we should stick to the concepts of
> semantic
> versioning, in the same way we do with code. So, only bug fixes in
> patch-releases,
> which for the database I think should also include data updates. Minor
> version
> releases can add new tables etc, but not remove anything and of course
> breaking
> changes should only be allowed in major version releases.
>
> /Kristian
>
> > On 25 Mar 2019, at 17:44, Even Rouault <even.rouault at spatialys.com>
> wrote:
> >
> > Hi,
> >
> > In https://github.com/OSGeo/proj.4/pull/1368 , I've committed a few
> changes:
> > - update of database with latest content of EPSG, IGNF and ESRI
> registries
> > - add an extra column (operation_version) to tables that store
> coordinate
> > operations. This change was triggered by the fact that very recent
> evolutions
> > of the WKT2:2018 candidate standard have lead to adding this information
> in
> > WKT2, and this wasn't imported into the database until now since there
> was no
> > use in the code base before.
> >
> > Are there thoughts about if this is material appropriate for backport to
> > 6.0.x? (the backport iself is technically trivial)
> >
> > My point of view is that generally stable branches should be for
> bugfixes
> > only, and not feature changes, and such changes could be considered as
> > features.
> >
> > But as 6.0.0 is really a version with a lot of changes that takes time
> to be
> > adopted, we might perhaps consider that its first bugfix release can
> receive
> > more changes withouth having bad consequences (apart from the database
> content
> > change, the only consequence would be if people use the capability to
> attach
> > extra custom databases to the main one, and in that case those databases
> must
> > have the same table structure as the main one, but I'm not aware of
> anyone
> > having used that)
> >
> > Even
> >
> > --
> > Spatialys - Geospatial professional services
> > http://www.spatialys.com
> > _______________________________________________
> > PROJ mailing list
> > PROJ at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/proj
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190326/8ccfd661/attachment-0001.html>

From nyall.dawson at gmail.com  Tue Mar 26 18:28:10 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Wed, 27 Mar 2019 11:28:10 +1000
Subject: [PROJ] [EXTERNAL] Re: Proj 6 API questions
In-Reply-To: <34550180.roYkxK0FuH@even-i700>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <VI1P192MB02551C0058FE555B38B1B8F0EF5F0@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <CAB28AsjTde_b4U+Fr7a-p=VWHKOXYFTLb--o1zXMQpVkpQ-9Aw@mail.gmail.com>
 <34550180.roYkxK0FuH@even-i700>
Message-ID: <CAB28Asi8r3bA+SrZWYXQ1bnZciEg2OreS1dwJ1q8wVSusXPjzg@mail.gmail.com>

On Tue, 26 Mar 2019 at 20:57, Even Rouault <even.rouault at spatialys.com> wrote:
>
> On mardi 26 mars 2019 19:56:22 CET Nyall Dawson wrote:
> > On Tue, 26 Mar 2019 at 17:58, Lesparre, Jochem
> >
> > <Jochem.Lesparre at kadaster.nl> wrote:
> > > > I honestly don't have any plans to change this behavior. I cannot see
> > > > a way to remove this choice from users, as QGIS projects don't have a
> > > > single CRS, but they DO need a single ellipsoid. The best we can do is
> > > > make sure that a good default selection is given to users, but we
> > > > cannot totally remove this choice.
> > >
> > > To add a 3rd opinion in the debate: I think the ellipsoid should should
> > > NOT automatically be set to the ellipsoid of a CRS used by the user, but
> > > it should by default kept set to GRS80, unless the user explicitly
> > > manually selects another ellipsoid. GRS80 is scientifically the best
> > > ellipsoid, all others are outdated (not the most accurate estimation of
> > > the size of the earth), unconventional (seldomly used) or wrong (e.g. due
> > > to rounding of parameters). The only exception would be extra-terrestrial
> > > CRSs: there GRS80 make no sense and the scientifically best ellipsoid of
> > > the planet in question should be selected by default. When a user is
> > > using a national CRS based on a old ellipsoid, (s)he mostly doesn't want
> > > distances and areas based on this outdated ellispoid but distances and
> > > areas computed in the best way possible, which is GRS80.
> > I'm very much in favour of this approach!
>
> The question raised by Kristian is still valid. How do you convert from
> project coordinates to coordinates on the measurement ellipsoid ?
> - is is a no-op conversion, that is
>     lon,lat(measurement_ellipsoid) = lon,lat(project_crs)  ?
>   That would be wrong.
> - or some form of coordinate transformation from the project CRS to the
>   measurement ellipsoid, but then you'll get no datum shifts. That said, for
>   measurement, that probably doesn't make a lot of difference in the resulting
>   computation (assuming that the shift would be almost homogeneous on the area
>   of interest)

See earlier in this thread -- it's the second, we reproject from the
layer coordinates to a "+proj=longlat +a=%1 +b=%2 +no_defs" or
"+proj=longlat +a=%1 +rf=%2 +no_defs" definition.

>
> > I wonder if this is something which belongs in the proj db itself.
> > I.e. some API to query the recommended ellipsoid for a given planetary
> > body.
>
> Before the API, we would need the information. The database doesn't store a
> concept of recommended ellipsoid. Could be a new column in 'ellipsoid' table
> with a check that there's a single recommended ellipsoid for a celestial_body,
> and that for each body, there's a recommended ellipsoid (commit.sql can be
> used to add consistency checks that don't fall in usual SQL constraints)
> (thinking out loud. haven't given that more thought)

That's exactly what I had in mind.

What's semi_major_axis in the celestial_body table used for? To me
this is basically a default ellipsoid definition for those bodies, but
bypassing the ellipsoid table. Maybe it makes sense to remove this
column?

Nyall


>
> Even
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com

From nyall.dawson at gmail.com  Tue Mar 26 22:19:17 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Wed, 27 Mar 2019 15:19:17 +1000
Subject: [PROJ] Source and target ellipsoid do not belong to the same
	celestial body
Message-ID: <CAB28Asi9G2gbUzU7-jgaGocdskHTWr0mqKo6ijK=fPJrV9VDPA@mail.gmail.com>

Hi list,

I'm a little confused (again)!

If I run the command:

    echo 1 1 0 0 | bin/cct +proj=sinu +lon_0=38.62122605364 +x_0=0
+y_0=0 +a=33960000 +b=3396000 +units=m +no_defs

It looks ok:
    -22298586.4112      5928.0320        0.0000        0.0000


But using the same definition via the proj api:

    proj_create_crs_to_crs( pContext, "EPSG:4326", "+proj=sinu
+lon_0=38.62122605364 +x_0=0 +y_0=0 +a=3396000 +b=3396000 +units=m
+no_defs", nullptr )

I get the error: proj_create_operations: Source and target ellipsoid
do not belong to the same celestial body

What am I missing?

Nyall

From even.rouault at spatialys.com  Wed Mar 27 03:27:06 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 27 Mar 2019 11:27:06 +0100
Subject: [PROJ] [EXTERNAL] Re: Proj 6 API questions
In-Reply-To: <CAB28Asi8r3bA+SrZWYXQ1bnZciEg2OreS1dwJ1q8wVSusXPjzg@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <34550180.roYkxK0FuH@even-i700>
 <CAB28Asi8r3bA+SrZWYXQ1bnZciEg2OreS1dwJ1q8wVSusXPjzg@mail.gmail.com>
Message-ID: <16554319.IYNpYuKDOM@even-i700>

> That's exactly what I had in mind.
> 
> What's semi_major_axis in the celestial_body table used for? To me
> this is basically a default ellipsoid definition for those bodies, but
> bypassing the ellipsoid table. Maybe it makes sense to remove this
> column?

As neither WKT nor PROJ strings have an information on the body, this value is 
used by the Ellipsoid::guessBodyName() method to find a reasonable candidate 
from the semi-major axis value found in the WKT or PROJ string (it uses a 
relative error of 0.5% to decide if there is match or not. Of course that 
would fail if we have 2 bodies of same shape...).
If we have a default ellipsoid concept and a link with the body, then yes this 
column could be removed.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From kreve at sdfe.dk  Wed Mar 27 03:29:18 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 27 Mar 2019 10:29:18 +0000
Subject: [PROJ] [EXTERNAL] Re: Proj 6 API questions
In-Reply-To: <CAB28Asi8r3bA+SrZWYXQ1bnZciEg2OreS1dwJ1q8wVSusXPjzg@mail.gmail.com>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <VI1P192MB02551C0058FE555B38B1B8F0EF5F0@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <CAB28AsjTde_b4U+Fr7a-p=VWHKOXYFTLb--o1zXMQpVkpQ-9Aw@mail.gmail.com>
 <34550180.roYkxK0FuH@even-i700>
 <CAB28Asi8r3bA+SrZWYXQ1bnZciEg2OreS1dwJ1q8wVSusXPjzg@mail.gmail.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF0FE1D8@S000014.PROD.SITAD.DK>

In response to Jochem, Nyall wrote:

> > > To add a 3rd opinion in the debate: I think the ellipsoid should should
> > > NOT automatically be set to the ellipsoid of a CRS used by the user, but
> > > it should by default kept set to GRS80, unless the user explicitly
> > > manually selects another ellipsoid. GRS80 is scientifically the best
> > > ellipsoid, all others are outdated (not the most accurate estimation of
> > > the size of the earth), unconventional (seldomly used) or wrong (e.g. due
> > > to rounding of parameters). The only exception would be extra-terrestrial
> > > CRSs: there GRS80 make no sense and the scientifically best ellipsoid of
> > > the planet in question should be selected by default. When a user is
> > > using a national CRS based on a old ellipsoid, (s)he mostly doesn't want
> > > distances and areas based on this outdated ellispoid but distances and
> > > areas computed in the best way possible, which is GRS80.

> > I'm very much in favour of this approach!

I can understand that you are in favour of this approach; It is easy and simple.
Unfortunately, geodesy is rarely easy and simple. If you want your calculations
to be correct you need to accept this fact. Even though the solution is not
always straight forward. To explain this we need to brush up our understanding
of what a coordinate reference system is. According to the EPSG guidance note
7-1 a CRS is comprised of a datum and a coordinate system. The datum is where
we define the ellipsoid (and often times other parameters) and the coordinate
system is broadly speaking the projection. This division works really well with
modern data where we can easily separate the two because we have access
to global positioning systems. For legacy coordinate reference systems
the datum and coordinate system are often times very tightly tied together
because physical measurements of coordinates rely on both the datum and
the coordinate system. This has many unfortunate effects, for instance that
the scale factor of the used projection is affecting distances measures etc.

The whole point of back-projecting coordinates to the ellipsoid is to be able
to determine distances without being affected by distortions inherent to the
used projection. If we back-project linear coordinates to a different ellipsoid
than the one a CRS is based on we inherently introduce scale differences
again. So this should be avoided if the aim is to provide as exact distance
and area measurements as possible.

On the surface this can seem like a problem from the past that we in modern
days do not have to deal with, but that is unfortunately not the case. There
are many examples of modern day use of legacy CRS's, for example cadastral
work in many countries and in territorial disputes between national states
where the original data is usually only available in older CRS's. Both scenarios
are involve lawyers and incorrect area calculations can end up having severe
consequences for those involved. That is my reason for pointing this out - It
would be nice if my GIS tools of choice dealt with this correctly so I don't have
to worry about it.

So, to handle this correctly I would suggest a two-step approach:

1. back-project the projected coordinates to geodetic coordinates using the
    Ellipsoid parameters of the CRS datum.
2. Perform geodesic calculations using the ellipsoid parameters of the CRS datum

This is best done on a per dataset/layer basis, using the CRS that the data is
registered as in the metadata of the file.

If I undertand the documentation correctly I believe that using a PJ
returned from proj_crs_get_coordoperation in the inverse direction should be
able to transform projected coordinates to geodetic coordinates using the
proper ellipsoid.

/Kristian


-----Oprindelig meddelelse-----
Fra: PROJ <proj-bounces at lists.osgeo.org> På vegne af Nyall Dawson
Sendt: 27. marts 2019 02:28
Til: Even Rouault <even.rouault at spatialys.com>
Cc: PROJ <proj at lists.osgeo.org>
Emne: Re: [PROJ] [EXTERNAL] Re: Proj 6 API questions

On Tue, 26 Mar 2019 at 20:57, Even Rouault <even.rouault at spatialys.com> wrote:
>
> On mardi 26 mars 2019 19:56:22 CET Nyall Dawson wrote:
> > On Tue, 26 Mar 2019 at 17:58, Lesparre, Jochem
> >
> > <Jochem.Lesparre at kadaster.nl> wrote:
> > > > I honestly don't have any plans to change this behavior. I cannot see
> > > > a way to remove this choice from users, as QGIS projects don't have a
> > > > single CRS, but they DO need a single ellipsoid. The best we can do is
> > > > make sure that a good default selection is given to users, but we
> > > > cannot totally remove this choice.
> > >
>
> The question raised by Kristian is still valid. How do you convert from
> project coordinates to coordinates on the measurement ellipsoid ?
> - is is a no-op conversion, that is
>     lon,lat(measurement_ellipsoid) = lon,lat(project_crs)  ?
>   That would be wrong.
> - or some form of coordinate transformation from the project CRS to the
>   measurement ellipsoid, but then you'll get no datum shifts. That said, for
>   measurement, that probably doesn't make a lot of difference in the resulting
>   computation (assuming that the shift would be almost homogeneous on the area
>   of interest)

See earlier in this thread -- it's the second, we reproject from the
layer coordinates to a "+proj=longlat +a=%1 +b=%2 +no_defs" or
"+proj=longlat +a=%1 +rf=%2 +no_defs" definition.

>
> > I wonder if this is something which belongs in the proj db itself.
> > I.e. some API to query the recommended ellipsoid for a given planetary
> > body.
>
> Before the API, we would need the information. The database doesn't store a
> concept of recommended ellipsoid. Could be a new column in 'ellipsoid' table
> with a check that there's a single recommended ellipsoid for a celestial_body,
> and that for each body, there's a recommended ellipsoid (commit.sql can be
> used to add consistency checks that don't fall in usual SQL constraints)
> (thinking out loud. haven't given that more thought)

That's exactly what I had in mind.

What's semi_major_axis in the celestial_body table used for? To me
this is basically a default ellipsoid definition for those bodies, but
bypassing the ellipsoid table. Maybe it makes sense to remove this
column?

Nyall


>
> Even
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

From even.rouault at spatialys.com  Wed Mar 27 03:37:29 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 27 Mar 2019 11:37:29 +0100
Subject: [PROJ] Source and target ellipsoid do not belong to the same
	celestial body
In-Reply-To: <CAB28Asi9G2gbUzU7-jgaGocdskHTWr0mqKo6ijK=fPJrV9VDPA@mail.gmail.com>
References: <CAB28Asi9G2gbUzU7-jgaGocdskHTWr0mqKo6ijK=fPJrV9VDPA@mail.gmail.com>
Message-ID: <8754339.yfeca3AZTO@even-i700>

On mercredi 27 mars 2019 15:19:17 CET Nyall Dawson wrote:
> Hi list,
> 
> I'm a little confused (again)!
> 
> If I run the command:
> 
>     echo 1 1 0 0 | bin/cct +proj=sinu +lon_0=38.62122605364 +x_0=0
> +y_0=0 +a=33960000 +b=3396000 +units=m +no_defs
> 
> It looks ok:
>     -22298586.4112      5928.0320        0.0000        0.0000
> 
> 
> But using the same definition via the proj api:
> 
>     proj_create_crs_to_crs( pContext, "EPSG:4326", "+proj=sinu
> +lon_0=38.62122605364 +x_0=0 +y_0=0 +a=3396000 +b=3396000 +units=m
> +no_defs", nullptr )
> 
> I get the error: proj_create_operations: Source and target ellipsoid
> do not belong to the same celestial body
> 
> What am I missing?

In the cct case, there's no ellipsoid change. You're just doing a map 
projection.

In the proj_create_crs_to_crs() case, a datum change is detected since on the 
left you have WGS84 and on the right a sphere, and in the code that builds the 
coordinate operation object, I added a check to detect non-sensical ellipsoid 
changes. I wans't sure if this was appropriate or not, but let it, waiting for 
reactions :-)

If you intented to do the same as the cct command, you should replace EPSG:
4326 by "+proj=longlat +a=3396000 +b=3396000".
Note: you can use cs2cs to test proj_create_crs_to_crs() (starting with PROJ 
6)

$ echo "1 1 0 0" | cs2cs "+proj=longlat +a=3396000 +b=3396000" "+proj=sinu 
+lon_0=38.62122605364 +x_0=0 +y_0=0 +a=33960000 +b=3396000 +units=m +no_defs"
22298586.41	5928.03 0.00 0

Note also that using EPSG:4326 now implies latitude, longitude order, wheras 
"+proj=longlat ..." will be longitude, latitude


Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From kreve at sdfe.dk  Wed Mar 27 03:48:22 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 27 Mar 2019 10:48:22 +0000
Subject: [PROJ] Source and target ellipsoid do not belong to the
	same	celestial body
In-Reply-To: <8754339.yfeca3AZTO@even-i700>
References: <CAB28Asi9G2gbUzU7-jgaGocdskHTWr0mqKo6ijK=fPJrV9VDPA@mail.gmail.com>
 <8754339.yfeca3AZTO@even-i700>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF0FE244@S000014.PROD.SITAD.DK>

> In the proj_create_crs_to_crs() case, a datum change is detected since on the 
> left you have WGS84 and on the right a sphere, and in the code that builds the 
> coordinate operation object, I added a check to detect non-sensical ellipsoid 
> changes. I wans't sure if this was appropriate or not, but let it, waiting for 
> reactions :-)

This check is absolutely appropriate. The function call

proj_create_crs_to_crs( pContext, "EPSG:4326", "+proj=sinu
 +lon_0=38.62122605364 +x_0=0 +y_0=0 +a=3396000 +b=3396000 +units=m
 +no_defs", nullptr )

asks for WGS84 coordinates, that is, coordinates on Earth originating from the GPS system,
being somehow transformed to projected Sinusoidal coordinates on Mars (note the radius
of the sphere). That is not going to fly :-)

This sort of stuff may have worked in PROJ in the past but it has always been
nonsensical.

As far as I know there's not a Marsian equivalent to WGS84 but 
"+proj=latlong +R=+3396000" should do the trick.

/Kristian

From Jochem.Lesparre at kadaster.nl  Wed Mar 27 03:53:40 2019
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Wed, 27 Mar 2019 10:53:40 +0000
Subject: [PROJ] [EXTERNAL] Re: Proj 6 API questions
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF0FE1D8@S000014.PROD.SITAD.DK>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <VI1P192MB02551C0058FE555B38B1B8F0EF5F0@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <CAB28AsjTde_b4U+Fr7a-p=VWHKOXYFTLb--o1zXMQpVkpQ-9Aw@mail.gmail.com>
 <34550180.roYkxK0FuH@even-i700>
 <CAB28Asi8r3bA+SrZWYXQ1bnZciEg2OreS1dwJ1q8wVSusXPjzg@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0FE1D8@S000014.PROD.SITAD.DK>
Message-ID: <VI1P192MB02559B0904FCE52BB07D1476EF580@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>

Kristian is right that just using a modern ellipsoid for distances/areas in an old but still used national CRS would give errors.
However, I think computing distances/areas using the old ellipsoid of that CRS is also not correct for most users. Therefore, I suggest:

1. Back-project the projected coordinates to geodetic coordinates using the Ellipsoid parameters of the CRS datum.
2. Perform datum transformation to the most recent realisation of the currently accepted scientific CRS of that planet (currently ITRF2014 for Earth) with its ellipsoid (currently GRS80 for Earth).
3. Perform geodesic calculations using this ellipsoid parameters of this CRS datum.

Kind regards, Jochem



Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster 
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u 
dit direct te melden aan de verzender en het bericht te vernietigen. 
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent 
of the Kadaster is unlawful. If you have received this message, but are not the addressee, 
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message

From kreve at sdfe.dk  Wed Mar 27 04:08:58 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 27 Mar 2019 11:08:58 +0000
Subject: [PROJ] [EXTERNAL] Re: Proj 6 API questions
In-Reply-To: <VI1P192MB02559B0904FCE52BB07D1476EF580@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <VI1P192MB02551C0058FE555B38B1B8F0EF5F0@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <CAB28AsjTde_b4U+Fr7a-p=VWHKOXYFTLb--o1zXMQpVkpQ-9Aw@mail.gmail.com>
 <34550180.roYkxK0FuH@even-i700>
 <CAB28Asi8r3bA+SrZWYXQ1bnZciEg2OreS1dwJ1q8wVSusXPjzg@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0FE1D8@S000014.PROD.SITAD.DK>
 <VI1P192MB02559B0904FCE52BB07D1476EF580@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF0FE2EC@S000014.PROD.SITAD.DK>

This approach assumes that a sufficiently accurate transformation between the legacy CRS
and the modern CRS exists. That cannot be guaranteed and it most cases I would argue
that such a transformation comes with a fair amount of uncertainty. Not doing a datum shift
and simply working within the original datum avoids the introduction of errors and ensures
consistency with the coordinates as they were originally measured.

I am most familiar with Danish systems and for those I would not be comfortable adding a datum
shift into the mix. The transformations are simply not accurate enough across the entirety of the
country (near control points everything is good, between them... who knows?).

/Kristian

-----Oprindelig meddelelse-----
Fra: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl> 
Sendt: 27. marts 2019 11:54
Til: Kristian Evers <kreve at sdfe.dk>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
Cc: PROJ <proj at lists.osgeo.org>
Emne: RE: [PROJ] [EXTERNAL] Re: Proj 6 API questions

Kristian is right that just using a modern ellipsoid for distances/areas in an old but still used national CRS would give errors.
However, I think computing distances/areas using the old ellipsoid of that CRS is also not correct for most users. Therefore, I suggest:

1. Back-project the projected coordinates to geodetic coordinates using the Ellipsoid parameters of the CRS datum.
2. Perform datum transformation to the most recent realisation of the currently accepted scientific CRS of that planet (currently ITRF2014 for Earth) with its ellipsoid (currently GRS80 for Earth).
3. Perform geodesic calculations using this ellipsoid parameters of this CRS datum.

Kind regards, Jochem



Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster 
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u 
dit direct te melden aan de verzender en het bericht te vernietigen. 
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent 
of the Kadaster is unlawful. If you have received this message, but are not the addressee, 
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message

From kreve at sdfe.dk  Wed Mar 27 04:23:15 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 27 Mar 2019 11:23:15 +0000
Subject: [PROJ] [EXTERNAL] Re: Proj 6 API questions
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF0FE2EC@S000014.PROD.SITAD.DK>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <VI1P192MB02551C0058FE555B38B1B8F0EF5F0@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <CAB28AsjTde_b4U+Fr7a-p=VWHKOXYFTLb--o1zXMQpVkpQ-9Aw@mail.gmail.com>
 <34550180.roYkxK0FuH@even-i700>
 <CAB28Asi8r3bA+SrZWYXQ1bnZciEg2OreS1dwJ1q8wVSusXPjzg@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0FE1D8@S000014.PROD.SITAD.DK>
 <VI1P192MB02559B0904FCE52BB07D1476EF580@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <2E885BB293AF0448A0181138489E9A0EAF0FE2EC@S000014.PROD.SITAD.DK>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF0FE32F@S000014.PROD.SITAD.DK>

A further point to consider, ITRF2014 is a Cartesian coordinate system and
has no knowledge of the shape of the earth. It is defined by the mass center
of the Earth and not much else is related to the planet we live on - it is a
purely geometric system. You can use any ellipsoid you like to convert
ITRF coordinates to geodetic coordinates. The GRS80 ellipsoid, however,
is recommended by the IERS.

Just to clarify, the thing QGIS is doing is purely a mathematical exercise:
Conversion between different coordinate systems and determining
distances and areas between known points. This can be done without
loss of accuracy (well, except for miniscule floating point rounding errors
in the computer). The points are moved from projected space to the ellipsoid
to avoid distortions in the projection.

When datum shifts are involved we are in the realm of physics where we
have to take a whole range of other errors into account. This should be avoided
in this case.

/Kristian


-----Oprindelig meddelelse-----
Fra: PROJ <proj-bounces at lists.osgeo.org> På vegne af Kristian Evers
Sendt: 27. marts 2019 12:09
Til: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
Cc: PROJ <proj at lists.osgeo.org>
Emne: Re: [PROJ] [EXTERNAL] Re: Proj 6 API questions

This approach assumes that a sufficiently accurate transformation between the legacy CRS
and the modern CRS exists. That cannot be guaranteed and it most cases I would argue
that such a transformation comes with a fair amount of uncertainty. Not doing a datum shift
and simply working within the original datum avoids the introduction of errors and ensures
consistency with the coordinates as they were originally measured.

I am most familiar with Danish systems and for those I would not be comfortable adding a datum
shift into the mix. The transformations are simply not accurate enough across the entirety of the
country (near control points everything is good, between them... who knows?).

/Kristian

-----Oprindelig meddelelse-----
Fra: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl> 
Sendt: 27. marts 2019 11:54
Til: Kristian Evers <kreve at sdfe.dk>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
Cc: PROJ <proj at lists.osgeo.org>
Emne: RE: [PROJ] [EXTERNAL] Re: Proj 6 API questions

Kristian is right that just using a modern ellipsoid for distances/areas in an old but still used national CRS would give errors.
However, I think computing distances/areas using the old ellipsoid of that CRS is also not correct for most users. Therefore, I suggest:

1. Back-project the projected coordinates to geodetic coordinates using the Ellipsoid parameters of the CRS datum.
2. Perform datum transformation to the most recent realisation of the currently accepted scientific CRS of that planet (currently ITRF2014 for Earth) with its ellipsoid (currently GRS80 for Earth).
3. Perform geodesic calculations using this ellipsoid parameters of this CRS datum.

Kind regards, Jochem



Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster 
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u 
dit direct te melden aan de verzender en het bericht te vernietigen. 
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent 
of the Kadaster is unlawful. If you have received this message, but are not the addressee, 
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

From even.rouault at spatialys.com  Wed Mar 27 05:03:45 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 27 Mar 2019 13:03:45 +0100
Subject: [PROJ] Coverity Scan
Message-ID: <4636133.KPEHZDX1IM@even-i700>

Hi,

I've setup Coverity Scan to do static code analysis of the PROJ codebase:
https://scan.coverity.com/projects/osgeo-proj-4
(proprietary service/tool, gratis for open source projects)

For now only me and Kristian have full access to the detailed issues. If other 
people (PSC members and main code contributors) are also interested, tell me.

There's the possibility of integrating the tool with Travis-CI to launch 
analysis on a regular basis, but I've not setup this, and have just done 
manual builds.

For those with admin rights on the Coverity PROJ account, the procedure 
(documented on Coverity Scan) to follow to do such a build:

First time: download the tool to do the local part of the analysis 
from https://scan.coverity.com/download and untar it.

For every build: do something along:

[./configure]
make clean
rm -rf proj.tgz
~/cov-analysis-linux64-2017.07/bin/cov-build --dir cov-int make -j 8
tar cvzf proj.tgz cov-int

Go to
https://scan.coverity.com/projects/osgeo-proj-4/builds/new?tab=upload
and upload the above proj.tgz file. Wait for some time for it to be uploaded 
and analyzed on their server.

~~~~

The tool is not perfect, but can find some issues that other ones we use 
(cppcheck, clang static analyzer) don't, and vice-versa. In the initial pass, 
it found few real issues, probably since we use also other tools that have 
helped us chasing them.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From nyall.dawson at gmail.com  Wed Mar 27 17:52:50 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Thu, 28 Mar 2019 10:52:50 +1000
Subject: [PROJ] Axis ordering and proj_trans
Message-ID: <CAB28Asib+kmyDkGOmok6av1=eoLE+HLxOGMV35j5wbF5DDieQA@mail.gmail.com>

Hi list,

It's my interpretation of reading the docs that when calling
proj_trans the order of values in PJ_COORD.v must match the expected
axis order (when using EPSG codes for the transform parameters).

What's unclear is if this **doesn't** apply when calling
proj_trans_generic? Is it safe to assume that for proj_trans_generic x
is ALWAYS x (or longitude), y is ALWAYS y (or latitude), etc?

And on a related note: For one-off, single point transforms, is it
preferable to use proj_trans? Or is it equally efficient to use
proj_trans_generic with one element arrays?

Nyall

From nyall.dawson at gmail.com  Wed Mar 27 19:32:33 2019
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Thu, 28 Mar 2019 12:32:33 +1000
Subject: [PROJ] Source and target ellipsoid do not belong to the same
 celestial body
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF0FE244@S000014.PROD.SITAD.DK>
References: <CAB28Asi9G2gbUzU7-jgaGocdskHTWr0mqKo6ijK=fPJrV9VDPA@mail.gmail.com>
 <8754339.yfeca3AZTO@even-i700>
 <2E885BB293AF0448A0181138489E9A0EAF0FE244@S000014.PROD.SITAD.DK>
Message-ID: <CAB28AsjbcAhaSx03n2tpB8jLX1KMBUsjPuRV9Wxht2JHbYRKGA@mail.gmail.com>

On Wed, 27 Mar 2019 at 20:48, Kristian Evers <kreve at sdfe.dk> wrote:

> This sort of stuff may have worked in PROJ in the past but it has always been
> nonsensical.

Argh gosh - that makes sense. As explanation of my craziness I was
running a bunch of random proj strings I found locally through some
converted proj code and this string was in there. No idea where it
originated from!

Nyall

From knudsen.thomas at gmail.com  Thu Mar 28 00:16:44 2019
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Thu, 28 Mar 2019 08:16:44 +0100
Subject: [PROJ] Axis ordering and proj_trans
In-Reply-To: <CAB28Asib+kmyDkGOmok6av1=eoLE+HLxOGMV35j5wbF5DDieQA@mail.gmail.com>
References: <CAB28Asib+kmyDkGOmok6av1=eoLE+HLxOGMV35j5wbF5DDieQA@mail.gmail.com>
Message-ID: <CAH0YoENXdBof76McKKS1QhEjKpLWkAPo3Rnw1W34zAxnPA9=Rg@mail.gmail.com>

Nyall,

If you take a look at the source code for proj_trans_generic() over at
https://github.com/OSGeo/proj.4/blob/6.0/src/4D_api.cpp
you will see in line 414, that it works by calling proj_trans() for each
coordinate tuple in the generic data structure.

So proj_trans_generic() works exactly like proj_trans().

In fact, don't get fooled by whatever names are used to denote the
elementary coordinates in a coordinate tuple: They are just identifiers
representing the index of the coordinate in the tuple, but since the C
programming language does not allow numericals as identifiers, xyzt are
used instead of 0123.

Until release 5.0 PROJ was still suffering under the wrong assumption that
there exists some "God given axis order that all systems must adhere to",
and some "God given fundamental coordinate system, that all other systems
are defined in terms of".

It was a long, tough trip to clean out these assumptions from the code, so
it wasn't done in one step. In hindsight, it would have been better to
represent a coordinate tuple as an array of four doubles + a pointer to a
(potentially const) PJ-object, describing the system. But in 2016, this
would not have flown: It takes some time getting used to the thought that
the world is more chaotic than you have grown used to assume.

So initially, building up the understanding (and later consensus) among
developers, that AXIS ORDER IS A PART OF THE COORDINATE SYSTEM DEFINITION,
and may/will differ between coordinate systems, was an important part of
that trip. Hence the alphabetical, rather than numeric, identifiers of the
PJ_COORD object: The ingrained PROJ assumptions had to be changed, and that
took some time.

A few releases down the line it will hopefully be common consensus that you
should NEVER have any assumtions about the internal structure of a PJ_COORD
object.

Until then: just read x, y, z, t as "first, second, third, fourth"
coordinate of a 4D coordinate tuple, and accept that the meaning of those
coordinates are defined entirely by the coordinate system identification.
Without the system identification it is just four numbers.

For example, if your reference frame is WGS84, and your coordinate tuple
has axis order (longitude, latitude), then it's not EPSG:4326, but
something else, that can be transformed to EPSG:4326 by swapping the two
first axis.

/thomas

Den tor. 28. mar. 2019 kl. 01.53 skrev Nyall Dawson <nyall.dawson at gmail.com
>:

> Hi list,
>
> It's my interpretation of reading the docs that when calling
> proj_trans the order of values in PJ_COORD.v must match the expected
> axis order (when using EPSG codes for the transform parameters).
>
> What's unclear is if this **doesn't** apply when calling
> proj_trans_generic? Is it safe to assume that for proj_trans_generic x
> is ALWAYS x (or longitude), y is ALWAYS y (or latitude), etc?
>
> And on a related note: For one-off, single point transforms, is it
> preferable to use proj_trans? Or is it equally efficient to use
> proj_trans_generic with one element arrays?
>
> Nyall
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190328/b4e0c67b/attachment.html>

From Jochem.Lesparre at kadaster.nl  Thu Mar 28 08:22:55 2019
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Thu, 28 Mar 2019 15:22:55 +0000
Subject: [PROJ] PROJ 6.0.0 cs2cs: cannot instantiate source coordinate
 system - program abnormally terminated
In-Reply-To: <3797456.TbWctu2OzU@even-i700>
References: <eb210117-1ee7-3e97-e86f-e8bbc6c67187@xs4all.nl>
 <4088763.IZorUh4B0U@even-i700>
 <VI1P192MB0255E425E9059A513BA01F9BEF420@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <3797456.TbWctu2OzU@even-i700>
Message-ID: <VI1P192MB025517B8C7378F2F2AA5C8DFEF590@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>

Hi Even,

Soon we will publish a new NTv2 and Vdatum grids and new 7 parameters for EPSG:: 7415 to EPSG:: 4937. So I wouldlike to know how to avoid that it is unclear to Proj. what this is realated to. But maybe I should first attend the Proj. tutorial at the EUREF symposium in May, because I do not yet understand the Proj.6 syntax that you list.

By the way, ETRS89 (e.g. EPSG:4258) is bound to ITRS en WGS84  is linked to ITRS too.

Regards, Jochem 


-----Original Message-----
From: Even Rouault <even.rouault at spatialys.com> 
Sent: Thursday, March 21, 2019 5:49 PM
To: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>
Cc: proj at lists.osgeo.org; Sebastiaan Couwenberg <sebastic at xs4all.nl>
Subject: Re: [PROJ] PROJ 6.0.0 cs2cs: cannot instantiate source coordinate system - program abnormally terminated

Jochem,

> What is unclear here? I still don't understand the early and late 
> binding terminology so I can't understand your explanation.

Yeah, sorry. I'm not sure there's even a universally admitted definition for those. So in my mind,
- early-binding implies using WGS84 as a pivot when going from CRS A to CRS B. 
This was the compulsory approach when using PROJ < 6. Actually if using geoidgrids/nadgrids in CRS A and towgs84=0,0,0 in CRS B, the pivot CRS would be something else than WGS84, but was a bit of cheating
- late-binding implies that if you want to go from CRS A to CRS B, the software will first research if there is a direct transformation between both, before researching tranformations through a potential pivot, such as WGS84. 
This is the default behaviour of PROJ 6.

When transforming from EPSG:4258 to "+proj=sterea +lat_0=52.15616055555555 
+lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 
++ellps=bessel nadgrids=rdtrans2008.gsb +geoidgrids=naptrans2008.gtx 
++units=m +no_defs type=crs", we are in a middle situation.

EPSG:4258 is a CRS definition, that is not bound to a particular pivot

Whereas "+proj=sterea ... +nadgrids=.... +geoidgrids=...." implies normally a
WGS84 pivot, but as you mentionned here, in fact the nadgrids here was mean for going to the Netherlands' datum to ETRS89 directly, and PROJ has no way of figuring that out from the +proj= expression.

With PROJ master or latest state of 6.0 branch (not 6.0.0), if you expand
EPSG:4258 definition to "+proj=longlat +ellps=GRS80 +towgs84=0,0,0 +type=crs", you'll get the expected result:

$ src/projinfo -s "+proj=longlat +ellps=GRS80 +towgs84=0,0,0 +type=crs"  -t "+proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 
+x_0=155000 +y_0=463000 +ellps=bessel +nadgrids=@rdtrans2008.gsb 
+geoidgrids=@naptrans2008.gtx +units=m +no_defs +type=crs" -o PROJ

Candidate operations found: 1
-------------------------------------
Operation n°1:

unknown id, Transformation from unknown to WGS84 + Null geographic offset from WGS 84 to WGS 84 + unknown + unknown to WGS84 + unknown to WGS84 ellipsoidal height, unknown accuracy, World, at least one grid missing

PROJ string:
+proj=pipeline +step +proj=unitconvert +xy_in=deg +xy_out=rad +step +inv 
+proj=vgridshift +grids=@naptrans2008.gtx +multiplier=1 +step +inv 
+proj=hgridshift +grids=@rdtrans2008.gsb +step +proj=sterea
+lat_0=52.1561605555556 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000
+y_0=463000 +ellps=bessel

Grid @naptrans2008.gtx needed but not found on the system.
Grid @rdtrans2008.gsb needed but not found on the system.

~~~~~

Another approach here would be to use also a WKT definition from the +proj= part or a EPSG code, since the rdtrans2008.gsb grid is referenced in EPSG:

For example, if using EPSG:4289 (Amersfoort geographic CRS), you get:

$ src/projinfo -s EPSG:4258  -t EPSG:4289 -o PROJ Candidate operations found: 5
-------------------------------------
Operation n°1:

INVERSE(EPSG):15739, Inverse of Amersfoort to ETRS89 (3), 0.5 m, Netherlands - onshore

PROJ string:
+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert 
+xy_in=deg +xy_out=rad +step +proj=push +v_3 +step +proj=cart 
++ellps=GRS80 step +inv +proj=helmert +x=565.2369 +y=50.0087 +z=465.658
+rx=0.406857330322398 +ry=-0.350732676542563 +rz=1.8703473836068 
++s=4.0812 convention=coordinate_frame +step +inv +proj=cart 
++ellps=bessel +step proj=pop +v_3 +step +proj=unitconvert +xy_in=rad 
++xy_out=deg +step proj=axisswap +order=2,1

-------------------------------------
Operation n°2:

INVERSE(EPSG):15740, Inverse of Amersfoort to ETRS89 (4), 0.5 m, Netherlands - onshore

PROJ string:
+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert 
+xy_in=deg +xy_out=rad +step +proj=push +v_3 +step +proj=cart 
++ellps=GRS80 step +inv +proj=molobadekas +x=593.0297 +y=26.0038 
++z=478.7534
+rx=0.406857330322398 +ry=-0.350732676542563 +rz=1.8703473836068 
++s=4.0812
+px=3903453.1482 +py=368135.3134 +pz=5012970.3051 
++convention=coordinate_frame step +inv +proj=cart +ellps=bessel +step 
++proj=pop +v_3 +step proj=unitconvert +xy_in=rad +xy_out=deg +step 
++proj=axisswap +order=2,1

-------------------------------------
Operation n°3:

INVERSE(EPSG):4830, Inverse of Amersfoort to ETRS89 (5), 0.5 m, Netherlands - onshore

PROJ string:
+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert 
+xy_in=deg +xy_out=rad +step +proj=push +v_3 +step +proj=cart 
++ellps=GRS80 step +inv +proj=helmert +x=565.4171 +y=50.3319 +z=465.5524
+rx=0.398957388243134 +ry=-0.343987817378283 +rz=1.87740163998045 
++s=4.0725 convention=coordinate_frame +step +inv +proj=cart 
++ellps=bessel +step proj=pop +v_3 +step +proj=unitconvert +xy_in=rad 
++xy_out=deg +step proj=axisswap +order=2,1

-------------------------------------
Operation n°4:

INVERSE(EPSG):4831, Inverse of Amersfoort to ETRS89 (6), 0.5 m, Netherlands - onshore

PROJ string:
+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert 
+xy_in=deg +xy_out=rad +step +proj=push +v_3 +step +proj=cart 
++ellps=GRS80 step +inv +proj=molobadekas +x=593.0248 +y=25.9984 
++z=478.7459
+rx=0.398957388243134 +ry=-0.343987817378283 +rz=1.87740163998045 
++s=4.0725
+px=3903453.1482 +py=368135.3134 +pz=5012970.3051 
++convention=coordinate_frame step +inv +proj=cart +ellps=bessel +step 
++proj=pop +v_3 +step proj=unitconvert +xy_in=rad +xy_out=deg +step 
++proj=axisswap +order=2,1

-------------------------------------
Operation n°5:

INVERSE(EPSG):7000, Inverse of Amersfoort to ETRS89 (7), 0.001 m, Netherlands
- onshore, at least one grid missing

PROJ string:
+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=unitconvert 
+xy_in=deg +xy_out=rad +step +inv +proj=hgridshift 
++grids=rdtrans2008.gsb step +proj=unitconvert +xy_in=rad +xy_out=deg 
++step +proj=axisswap +order=2,1

Grid rdtrans2008.gsb needed but not found on the system.


The vertical part is also there:

$ src/projinfo -s EPSG:5709  -t EPSG:4937 -o PROJ Candidate operations found: 1
-------------------------------------
Operation n°1:

INVERSE(EPSG):7001, Inverse of ETRS89 to NAP height (1), 0.01 m, Netherlands - onshore, at least one grid missing

PROJ string:
+proj=pipeline +step +inv +proj=vgridshift +grids=naptrans2008.gtx
+multiplier=1

Grid naptrans2008.gtx needed but not found on the system.

~~~~~~

So it is a matter of creating a CompoundCRS WKT with the ProjectedCRS using the Amersfoort geographic CRS and the vertical CRS using EPSG:5709, and asking to transform that to EPSG:4937

COMPOUNDCRS["unknown",
  PROJCRS["unknown",
    BASEGEOGCRS["Amersfoort",
            DATUM["Amersfoort",
                ELLIPSOID["Bessel 1841",6377397.155,299.1528128,
                    LENGTHUNIT["metre",1]]],
            PRIMEM["Greenwich",0,
                ANGLEUNIT["degree",0.0174532925199433]]],
    CONVERSION["unknown",
        METHOD["Oblique Stereographic",
            ID["EPSG",9809]],
        PARAMETER["Latitude of natural origin",52.1561605555556,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8801]],
        PARAMETER["Longitude of natural origin",5.38763888888889,
            ANGLEUNIT["degree",0.0174532925199433],
            ID["EPSG",8802]],
        PARAMETER["Scale factor at natural origin",0.9999079,
            SCALEUNIT["unity",1],
            ID["EPSG",8805]],
        PARAMETER["False easting",155000,
            LENGTHUNIT["metre",1],
            ID["EPSG",8806]],
        PARAMETER["False northing",463000,
            LENGTHUNIT["metre",1],
            ID["EPSG",8807]]],
    CS[Cartesian,2],
        AXIS["(E)",east,
            ORDER[1],
            LENGTHUNIT["metre",1,
                ID["EPSG",9001]]],
        AXIS["(N)",north,
            ORDER[2],
            LENGTHUNIT["metre",1,
                ID["EPSG",9001]]]],
  VERTCRS["NAP height",
    VDATUM["Normaal Amsterdams Peil"],
    CS[vertical,1],
        AXIS["gravity-related height (H)",up,
            LENGTHUNIT["metre",1]],
    USAGE[
        SCOPE["unknown"],
        AREA["Netherlands - onshore"],
        BBOX[50.75,3.2,53.7,7.22]],
    ID["EPSG",5709]]]

The vertical part is correctly handled, but for the horizontal part, there's currently an issue to detect the Amersfoort datum and the associated grid transformation to ETRS89. I've just filed this as
https://github.com/OSGeo/proj.4/issues/1343

Even

--
Spatialys - Geospatial professional services http://www.spatialys.com


Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster 
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u 
dit direct te melden aan de verzender en het bericht te vernietigen. 
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent 
of the Kadaster is unlawful. If you have received this message, but are not the addressee, 
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message

From even.rouault at spatialys.com  Thu Mar 28 08:53:29 2019
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 28 Mar 2019 16:53:29 +0100
Subject: [PROJ] PROJ 6.0.0 cs2cs: cannot instantiate source coordinate
	system - program abnormally terminated
In-Reply-To: <VI1P192MB025517B8C7378F2F2AA5C8DFEF590@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
References: <eb210117-1ee7-3e97-e86f-e8bbc6c67187@xs4all.nl>
 <3797456.TbWctu2OzU@even-i700>
 <VI1P192MB025517B8C7378F2F2AA5C8DFEF590@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
Message-ID: <3509613.9cJrm9d3lH@even-i700>

Jochem,

> 
> Soon we will publish a new NTv2 and Vdatum grids and new 7 parameters for
> EPSG:: 7415 to EPSG:: 4937.

Ah, you didn't mention that there was a EPSG code for the +proj=sterea... 
definition. Sorry I don't know the EPSG database by heart (yet...) :-)

So if you do 
$ projinfo -s EPSG:7415 -t EPSG:4937

you'll get (with PROJ master or the 6.0 branch with a fix I did a few days 
ago)


Candidate operations found: 10
-------------------------------------
Operation n°1:

unknown id, Inverse of RD New + Amersfoort to ETRS89 (7) + Inverse of ETRS89 
to NAP height (1), 0.011 m, Netherlands - onshore, at least one grid missing

PROJ string:
+proj=pipeline +step +inv +proj=sterea +lat_0=52.1561605555556 
+lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel 
+step +proj=hgridshift +grids=rdtrans2008.gsb +step +proj=vgridshift 
+grids=naptrans2008.gtx +multiplier=1 +step +proj=unitconvert +xy_in=rad 
+xy_out=deg +step +proj=axisswap +order=2,1

-------------------------------------
Operation n°2:

unknown id, Inverse of RD New + Amersfoort to ETRS89 (3) + Inverse of ETRS89 
to NAP height (1), 0.51 m, Netherlands - onshore, at least one grid missing

PROJ string:
+proj=pipeline +step +inv +proj=sterea +lat_0=52.1561605555556 
+lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel 
+step +proj=push +v_3 +step +proj=cart +ellps=bessel +step +proj=helmert 
+x=565.2369 +y=50.0087 +z=465.658 +rx=0.406857330322398 +ry=-0.350732676542563 
+rz=1.8703473836068 +s=4.0812 +convention=coordinate_frame +step +inv 
+proj=cart +ellps=GRS80 +step +proj=pop +v_3 +step +proj=vgridshift 
+grids=naptrans2008.gtx +multiplier=1 +step +proj=unitconvert +xy_in=rad 
+xy_out=deg +step +proj=axisswap +order=2,1

etc etc.


So basically this works out of the box, applying both horizontal and vertical 
grids when they are available.


> So I wouldlike to know how to avoid that it is
> unclear to Proj.

If the new data is added in the EPSG registry as it was for the current one, 
there shouldn't be any issue.

 
> By the way, ETRS89 (e.g. EPSG:4258) is bound to ITRS en WGS84  is linked to
> ITRS too.

EPSG has also a direct transformation between ETRS89 and WGS84 (EPSG:1149), 
which is a null geocentric translation, with a accuracy of 1m.

What I mean is that PROJ currently lacks a special processing for the case 
when transforming between CRS, where one has a towgs84/nadgrids clause and the 
other one is a EPSG code. I've filed this as
https://github.com/OSGeo/proj.4/issues/1388

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From Jochem.Lesparre at kadaster.nl  Thu Mar 28 08:59:52 2019
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Thu, 28 Mar 2019 15:59:52 +0000
Subject: [PROJ] [EXTERNAL] Re: Proj 6 API questions
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF0FE2EC@S000014.PROD.SITAD.DK>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <VI1P192MB02551C0058FE555B38B1B8F0EF5F0@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <CAB28AsjTde_b4U+Fr7a-p=VWHKOXYFTLb--o1zXMQpVkpQ-9Aw@mail.gmail.com>
 <34550180.roYkxK0FuH@even-i700>
 <CAB28Asi8r3bA+SrZWYXQ1bnZciEg2OreS1dwJ1q8wVSusXPjzg@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0FE1D8@S000014.PROD.SITAD.DK>
 <VI1P192MB02559B0904FCE52BB07D1476EF580@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <2E885BB293AF0448A0181138489E9A0EAF0FE2EC@S000014.PROD.SITAD.DK>
Message-ID: <VI1P192MB0255E9655F05B03F8892685AEF590@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>

Kristian,

For the Dutch national CRS (named RD), the datum transformation has an absolute precision of <1mm (since we define it by the transformation ITRS-ETRS89-RD). Here, transforming to ITRF would be more accurate since it would remove the scale error of the national CRS of 4mm/km and the NTv2-corrections of up to 25 cm. 

For some of the Dutch Caribbean islands, the scale factor is really large. Although the datum transformation is only known at metre level, I convinced that despite this inaccuracy, transforming to ITRS would give more reliable distances. I've done some consultancy in other countries too, and, I don't think the inaccuray of the datum transformation in general would harm more than the inaccuracy of legacy CRSs.

Kind regards, Jochem
 

-----Original Message-----
From: Kristian Evers <kreve at sdfe.dk> 
Sent: Wednesday, March 27, 2019 12:09 PM
To: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
Cc: PROJ <proj at lists.osgeo.org>
Subject: SV: [PROJ] [EXTERNAL] Re: Proj 6 API questions

This approach assumes that a sufficiently accurate transformation between the legacy CRS and the modern CRS exists. That cannot be guaranteed and it most cases I would argue that such a transformation comes with a fair amount of uncertainty. Not doing a datum shift and simply working within the original datum avoids the introduction of errors and ensures consistency with the coordinates as they were originally measured.

I am most familiar with Danish systems and for those I would not be comfortable adding a datum shift into the mix. The transformations are simply not accurate enough across the entirety of the country (near control points everything is good, between them... who knows?).

/Kristian

-----Oprindelig meddelelse-----
Fra: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>
Sendt: 27. marts 2019 11:54
Til: Kristian Evers <kreve at sdfe.dk>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
Cc: PROJ <proj at lists.osgeo.org>
Emne: RE: [PROJ] [EXTERNAL] Re: Proj 6 API questions

Kristian is right that just using a modern ellipsoid for distances/areas in an old but still used national CRS would give errors.
However, I think computing distances/areas using the old ellipsoid of that CRS is also not correct for most users. Therefore, I suggest:

1. Back-project the projected coordinates to geodetic coordinates using the Ellipsoid parameters of the CRS datum.
2. Perform datum transformation to the most recent realisation of the currently accepted scientific CRS of that planet (currently ITRF2014 for Earth) with its ellipsoid (currently GRS80 for Earth).
3. Perform geodesic calculations using this ellipsoid parameters of this CRS datum.

Kind regards, Jochem



Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u dit direct te melden aan de verzender en het bericht te vernietigen. 
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent of the Kadaster is unlawful. If you have received this message, but are not the addressee, please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message


Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster 
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u 
dit direct te melden aan de verzender en het bericht te vernietigen. 
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent 
of the Kadaster is unlawful. If you have received this message, but are not the addressee, 
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message

From kreve at sdfe.dk  Thu Mar 28 09:15:00 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 28 Mar 2019 16:15:00 +0000
Subject: [PROJ] [EXTERNAL] Re: Proj 6 API questions
In-Reply-To: <VI1P192MB0255E9655F05B03F8892685AEF590@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <VI1P192MB02551C0058FE555B38B1B8F0EF5F0@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <CAB28AsjTde_b4U+Fr7a-p=VWHKOXYFTLb--o1zXMQpVkpQ-9Aw@mail.gmail.com>
 <34550180.roYkxK0FuH@even-i700>
 <CAB28Asi8r3bA+SrZWYXQ1bnZciEg2OreS1dwJ1q8wVSusXPjzg@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0FE1D8@S000014.PROD.SITAD.DK>
 <VI1P192MB02559B0904FCE52BB07D1476EF580@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <2E885BB293AF0448A0181138489E9A0EAF0FE2EC@S000014.PROD.SITAD.DK>
 <VI1P192MB0255E9655F05B03F8892685AEF590@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF100109@S000014.PROD.SITAD.DK>

Jochem,

We are definitely in nit-picking territory at this stage. I agree with you that it is not going to do much harm in many cases but I can think of a few where it will. Mind you, for the specific use case in QGIS a generic solution is preferable (and likely required). I believe I have proposed such a solution.

/Kristian

-----Oprindelig meddelelse-----
Fra: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl> 
Sendt: 28. marts 2019 17:00
Til: Kristian Evers <kreve at sdfe.dk>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
Cc: PROJ <proj at lists.osgeo.org>
Emne: RE: [PROJ] [EXTERNAL] Re: Proj 6 API questions

Kristian,

For the Dutch national CRS (named RD), the datum transformation has an absolute precision of <1mm (since we define it by the transformation ITRS-ETRS89-RD). Here, transforming to ITRF would be more accurate since it would remove the scale error of the national CRS of 4mm/km and the NTv2-corrections of up to 25 cm. 

For some of the Dutch Caribbean islands, the scale factor is really large. Although the datum transformation is only known at metre level, I convinced that despite this inaccuracy, transforming to ITRS would give more reliable distances. I've done some consultancy in other countries too, and, I don't think the inaccuray of the datum transformation in general would harm more than the inaccuracy of legacy CRSs.

Kind regards, Jochem
 

-----Original Message-----
From: Kristian Evers <kreve at sdfe.dk> 
Sent: Wednesday, March 27, 2019 12:09 PM
To: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
Cc: PROJ <proj at lists.osgeo.org>
Subject: SV: [PROJ] [EXTERNAL] Re: Proj 6 API questions

This approach assumes that a sufficiently accurate transformation between the legacy CRS and the modern CRS exists. That cannot be guaranteed and it most cases I would argue that such a transformation comes with a fair amount of uncertainty. Not doing a datum shift and simply working within the original datum avoids the introduction of errors and ensures consistency with the coordinates as they were originally measured.

I am most familiar with Danish systems and for those I would not be comfortable adding a datum shift into the mix. The transformations are simply not accurate enough across the entirety of the country (near control points everything is good, between them... who knows?).

/Kristian

-----Oprindelig meddelelse-----
Fra: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>
Sendt: 27. marts 2019 11:54
Til: Kristian Evers <kreve at sdfe.dk>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
Cc: PROJ <proj at lists.osgeo.org>
Emne: RE: [PROJ] [EXTERNAL] Re: Proj 6 API questions

Kristian is right that just using a modern ellipsoid for distances/areas in an old but still used national CRS would give errors.
However, I think computing distances/areas using the old ellipsoid of that CRS is also not correct for most users. Therefore, I suggest:

1. Back-project the projected coordinates to geodetic coordinates using the Ellipsoid parameters of the CRS datum.
2. Perform datum transformation to the most recent realisation of the currently accepted scientific CRS of that planet (currently ITRF2014 for Earth) with its ellipsoid (currently GRS80 for Earth).
3. Perform geodesic calculations using this ellipsoid parameters of this CRS datum.

Kind regards, Jochem



Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u dit direct te melden aan de verzender en het bericht te vernietigen. 
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent of the Kadaster is unlawful. If you have received this message, but are not the addressee, please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message


Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster 
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u 
dit direct te melden aan de verzender en het bericht te vernietigen. 
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent 
of the Kadaster is unlawful. If you have received this message, but are not the addressee, 
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message

From Jochem.Lesparre at kadaster.nl  Thu Mar 28 10:02:02 2019
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Thu, 28 Mar 2019 17:02:02 +0000
Subject: [PROJ] [EXTERNAL] Re: Proj 6 API questions
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAF100109@S000014.PROD.SITAD.DK>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <VI1P192MB02551C0058FE555B38B1B8F0EF5F0@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <CAB28AsjTde_b4U+Fr7a-p=VWHKOXYFTLb--o1zXMQpVkpQ-9Aw@mail.gmail.com>
 <34550180.roYkxK0FuH@even-i700>
 <CAB28Asi8r3bA+SrZWYXQ1bnZciEg2OreS1dwJ1q8wVSusXPjzg@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0FE1D8@S000014.PROD.SITAD.DK>
 <VI1P192MB02559B0904FCE52BB07D1476EF580@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <2E885BB293AF0448A0181138489E9A0EAF0FE2EC@S000014.PROD.SITAD.DK>
 <VI1P192MB0255E9655F05B03F8892685AEF590@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <2E885BB293AF0448A0181138489E9A0EAF100109@S000014.PROD.SITAD.DK>
Message-ID: <VI1P192MB0255041879374625D7747F7EEF590@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>

Kristian,

I have the feeling that when we continue with what you call nit-picking, we might come to a better solution than either of us forsaw at the beginning.

You are right that for a generic solution the datum transformation might be a bit tricky. The solution you proposed is ok, but could be a bit confusing to users. It might be clearer for users to give them the choice to compute distances in either the original CRS (default) or transformed to ITRS or any another CRS of choice. In that case it would make more sense to give the cartesian distance (for a projected or geocentric CRS) instead and only give ellisoidal distances for a geographic CRS. 

That would give the user full controll; e.g. when computing the distance between points in a projected legacy CRS, by selecting the appropriate CRS (s)he can get: the planar distance in the projection plane, the ellispodal distance in the legacy CRS, the ellispoidal distance in ITRS with GRS80, the cartesian distance in geocentric coordinates (in ITRS), or any other option (s)he prefers.

Kind regards, Jochem


-----Original Message-----
From: Kristian Evers <kreve at sdfe.dk> 
Sent: Thursday, March 28, 2019 5:15 PM
To: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
Cc: PROJ <proj at lists.osgeo.org>
Subject: SV: [PROJ] [EXTERNAL] Re: Proj 6 API questions

Jochem,

We are definitely in nit-picking territory at this stage. I agree with you that it is not going to do much harm in many cases but I can think of a few where it will. Mind you, for the specific use case in QGIS a generic solution is preferable (and likely required). I believe I have proposed such a solution.

/Kristian

-----Oprindelig meddelelse-----
Fra: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>
Sendt: 28. marts 2019 17:00
Til: Kristian Evers <kreve at sdfe.dk>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
Cc: PROJ <proj at lists.osgeo.org>
Emne: RE: [PROJ] [EXTERNAL] Re: Proj 6 API questions

Kristian,

For the Dutch national CRS (named RD), the datum transformation has an absolute precision of <1mm (since we define it by the transformation ITRS-ETRS89-RD). Here, transforming to ITRF would be more accurate since it would remove the scale error of the national CRS of 4mm/km and the NTv2-corrections of up to 25 cm. 

For some of the Dutch Caribbean islands, the scale factor is really large. Although the datum transformation is only known at metre level, I convinced that despite this inaccuracy, transforming to ITRS would give more reliable distances. I've done some consultancy in other countries too, and, I don't think the inaccuray of the datum transformation in general would harm more than the inaccuracy of legacy CRSs.

Kind regards, Jochem
 

-----Original Message-----
From: Kristian Evers <kreve at sdfe.dk>
Sent: Wednesday, March 27, 2019 12:09 PM
To: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
Cc: PROJ <proj at lists.osgeo.org>
Subject: SV: [PROJ] [EXTERNAL] Re: Proj 6 API questions

This approach assumes that a sufficiently accurate transformation between the legacy CRS and the modern CRS exists. That cannot be guaranteed and it most cases I would argue that such a transformation comes with a fair amount of uncertainty. Not doing a datum shift and simply working within the original datum avoids the introduction of errors and ensures consistency with the coordinates as they were originally measured.

I am most familiar with Danish systems and for those I would not be comfortable adding a datum shift into the mix. The transformations are simply not accurate enough across the entirety of the country (near control points everything is good, between them... who knows?).

/Kristian

-----Oprindelig meddelelse-----
Fra: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>
Sendt: 27. marts 2019 11:54
Til: Kristian Evers <kreve at sdfe.dk>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
Cc: PROJ <proj at lists.osgeo.org>
Emne: RE: [PROJ] [EXTERNAL] Re: Proj 6 API questions

Kristian is right that just using a modern ellipsoid for distances/areas in an old but still used national CRS would give errors.
However, I think computing distances/areas using the old ellipsoid of that CRS is also not correct for most users. Therefore, I suggest:

1. Back-project the projected coordinates to geodetic coordinates using the Ellipsoid parameters of the CRS datum.
2. Perform datum transformation to the most recent realisation of the currently accepted scientific CRS of that planet (currently ITRF2014 for Earth) with its ellipsoid (currently GRS80 for Earth).
3. Perform geodesic calculations using this ellipsoid parameters of this CRS datum.

Kind regards, Jochem



Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u dit direct te melden aan de verzender en het bericht te vernietigen. 
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent of the Kadaster is unlawful. If you have received this message, but are not the addressee, please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message


Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u dit direct te melden aan de verzender en het bericht te vernietigen. 
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent of the Kadaster is unlawful. If you have received this message, but are not the addressee, please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message


Disclaimer:
De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster 
is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u 
dit direct te melden aan de verzender en het bericht te vernietigen. 
Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.

Disclaimer:
The content of this message is meant to be received by the addressee only.
Use of the content of this message by anyone other than the addressee without the consent 
of the Kadaster is unlawful. If you have received this message, but are not the addressee, 
please contact the sender immediately and destroy the message.
No rights can be derived from the content of this message

From kreve at sdfe.dk  Thu Mar 28 10:27:21 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 28 Mar 2019 17:27:21 +0000
Subject: [PROJ] [EXTERNAL] Re: Proj 6 API questions
In-Reply-To: <VI1P192MB0255041879374625D7747F7EEF590@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
References: <CAB28AsgGZfOav_V=7j69_Va8T6KV-jMZLBrWScHwCnJ8akzdfQ@mail.gmail.com>
 <VI1P192MB02551C0058FE555B38B1B8F0EF5F0@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <CAB28AsjTde_b4U+Fr7a-p=VWHKOXYFTLb--o1zXMQpVkpQ-9Aw@mail.gmail.com>
 <34550180.roYkxK0FuH@even-i700>
 <CAB28Asi8r3bA+SrZWYXQ1bnZciEg2OreS1dwJ1q8wVSusXPjzg@mail.gmail.com>
 <2E885BB293AF0448A0181138489E9A0EAF0FE1D8@S000014.PROD.SITAD.DK>
 <VI1P192MB02559B0904FCE52BB07D1476EF580@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <2E885BB293AF0448A0181138489E9A0EAF0FE2EC@S000014.PROD.SITAD.DK>
 <VI1P192MB0255E9655F05B03F8892685AEF590@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
 <2E885BB293AF0448A0181138489E9A0EAF100109@S000014.PROD.SITAD.DK>
 <VI1P192MB0255041879374625D7747F7EEF590@VI1P192MB0255.EURP192.PROD.OUTLOOK.COM>
Message-ID: <568CE7F5-6919-4236-AA44-B47C50A13BEE@sdfe.dk>



> On 28 Mar 2019, at 18:02, Lesparre, Jochem <Jochem.Lesparre at kadaster.nl> wrote:
> 
> Kristian,
> 
> I have the feeling that when we continue with what you call nit-picking, we might come to a better solution than either of us forsaw at the beginning.
> 

Don't get me wrong, I am enjoying this discussion immensely! I absolutely agree that there’s a good chance that a better solution is found when the problem is discussed properly.


> You are right that for a generic solution the datum transformation might be a bit tricky. The solution you proposed is ok, but could be a bit confusing to users.
> It might be clearer for users to give them the choice to compute distances in either the original CRS (default) or transformed to ITRS or any another CRS of choice.

I am proposing a better and more robust default solution than what is currently available in QGIS. I am all for a highly configurable setup but that is not available today. Personally I would be pleased to be able to twist and turn the knobs but I am not sure that is the best option for a GIS user who is not aware of the intricasies of geodesy.

> In that case it would make more sense to give the cartesian distance (for a projected or geocentric CRS) instead and only give ellisoidal distances for a geographic CRS.

I disagree. I think that will be the source of many very wrong distance and area calculations. But this is more of a user experience problem than a geodetic problem.

> That would give the user full controll; e.g. when computing the distance between points in a projected legacy CRS, by selecting the appropriate CRS (s)he can get: the planar distance in the projection plane, the ellispodal distance in the legacy CRS, the ellispoidal distance in ITRS with GRS80, the cartesian distance in geocentric coordinates (in ITRS), or any other option (s)he prefers.

Again, this would be cool to have, but I am not sure that it appeals to that many GIS user. I have seen something similar to this in a commercial GIS and I am glad that I had some knowledge about the topic beforehand, otherwise I would not have been able to figure it out. Sensible defaults should in my opinion be offered out of the box and not be hidden behind a configurable switchboard. Luckliy those two options are not mutually exclusive. Maybe some day we will see both :-) 

/Kristian

> 
> Kind regards, Jochem
> 
> 
> -----Original Message-----
> From: Kristian Evers <kreve at sdfe.dk> 
> Sent: Thursday, March 28, 2019 5:15 PM
> To: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
> Cc: PROJ <proj at lists.osgeo.org>
> Subject: SV: [PROJ] [EXTERNAL] Re: Proj 6 API questions
> 
> Jochem,
> 
> We are definitely in nit-picking territory at this stage. I agree with you that it is not going to do much harm in many cases but I can think of a few where it will. Mind you, for the specific use case in QGIS a generic solution is preferable (and likely required). I believe I have proposed such a solution.
> 
> /Kristian
> 
> -----Oprindelig meddelelse-----
> Fra: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>
> Sendt: 28. marts 2019 17:00
> Til: Kristian Evers <kreve at sdfe.dk>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
> Cc: PROJ <proj at lists.osgeo.org>
> Emne: RE: [PROJ] [EXTERNAL] Re: Proj 6 API questions
> 
> Kristian,
> 
> For the Dutch national CRS (named RD), the datum transformation has an absolute precision of <1mm (since we define it by the transformation ITRS-ETRS89-RD). Here, transforming to ITRF would be more accurate since it would remove the scale error of the national CRS of 4mm/km and the NTv2-corrections of up to 25 cm. 
> 
> For some of the Dutch Caribbean islands, the scale factor is really large. Although the datum transformation is only known at metre level, I convinced that despite this inaccuracy, transforming to ITRS would give more reliable distances. I've done some consultancy in other countries too, and, I don't think the inaccuray of the datum transformation in general would harm more than the inaccuracy of legacy CRSs.
> 
> Kind regards, Jochem
> 
> 
> -----Original Message-----
> From: Kristian Evers <kreve at sdfe.dk>
> Sent: Wednesday, March 27, 2019 12:09 PM
> To: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
> Cc: PROJ <proj at lists.osgeo.org>
> Subject: SV: [PROJ] [EXTERNAL] Re: Proj 6 API questions
> 
> This approach assumes that a sufficiently accurate transformation between the legacy CRS and the modern CRS exists. That cannot be guaranteed and it most cases I would argue that such a transformation comes with a fair amount of uncertainty. Not doing a datum shift and simply working within the original datum avoids the introduction of errors and ensures consistency with the coordinates as they were originally measured.
> 
> I am most familiar with Danish systems and for those I would not be comfortable adding a datum shift into the mix. The transformations are simply not accurate enough across the entirety of the country (near control points everything is good, between them... who knows?).
> 
> /Kristian
> 
> -----Oprindelig meddelelse-----
> Fra: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>
> Sendt: 27. marts 2019 11:54
> Til: Kristian Evers <kreve at sdfe.dk>; Nyall Dawson <nyall.dawson at gmail.com>; Even Rouault <even.rouault at spatialys.com>
> Cc: PROJ <proj at lists.osgeo.org>
> Emne: RE: [PROJ] [EXTERNAL] Re: Proj 6 API questions
> 
> Kristian is right that just using a modern ellipsoid for distances/areas in an old but still used national CRS would give errors.
> However, I think computing distances/areas using the old ellipsoid of that CRS is also not correct for most users. Therefore, I suggest:
> 
> 1. Back-project the projected coordinates to geodetic coordinates using the Ellipsoid parameters of the CRS datum.
> 2. Perform datum transformation to the most recent realisation of the currently accepted scientific CRS of that planet (currently ITRF2014 for Earth) with its ellipsoid (currently GRS80 for Earth).
> 3. Perform geodesic calculations using this ellipsoid parameters of this CRS datum.
> 
> Kind regards, Jochem
> 
> 
> 
> Disclaimer:
> De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
> Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u dit direct te melden aan de verzender en het bericht te vernietigen. 
> Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.
> 
> Disclaimer:
> The content of this message is meant to be received by the addressee only.
> Use of the content of this message by anyone other than the addressee without the consent of the Kadaster is unlawful. If you have received this message, but are not the addressee, please contact the sender immediately and destroy the message.
> No rights can be derived from the content of this message
> 
> 
> Disclaimer:
> De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
> Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u dit direct te melden aan de verzender en het bericht te vernietigen. 
> Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.
> 
> Disclaimer:
> The content of this message is meant to be received by the addressee only.
> Use of the content of this message by anyone other than the addressee without the consent of the Kadaster is unlawful. If you have received this message, but are not the addressee, please contact the sender immediately and destroy the message.
> No rights can be derived from the content of this message
> 
> 
> Disclaimer:
> De inhoud van dit bericht is uitsluitend bestemd voor geadresseerde.
> Gebruik van de inhoud van dit bericht door anderen zonder toestemming van het Kadaster 
> is onrechtmatig. Mocht dit bericht ten onrechte bij u terecht komen, dan verzoeken wij u 
> dit direct te melden aan de verzender en het bericht te vernietigen. 
> Aan de inhoud van dit bericht kunnen geen rechten worden ontleend.
> 
> Disclaimer:
> The content of this message is meant to be received by the addressee only.
> Use of the content of this message by anyone other than the addressee without the consent 
> of the Kadaster is unlawful. If you have received this message, but are not the addressee, 
> please contact the sender immediately and destroy the message.
> No rights can be derived from the content of this message


From kreve at sdfe.dk  Thu Mar 28 14:29:31 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 28 Mar 2019 21:29:31 +0000
Subject: [PROJ] [Non-DoD Source] Re: Incubate PROJ as an OSGeo Project?
In-Reply-To: <22B706FF-C09B-46D5-AAD4-332F59B3B21E@gmail.com>
References: <FCF71272-4553-428B-A8AC-74BB7DA60399@hobu.co>
 <415a8a2d-7f63-a494-b7bf-99dd4a91ad74@xs4all.nl>
 <4E20D13C-3633-4768-8871-A3E810046923@gmail.com>
 <DF6D8A4B-0E47-469E-AA96-BAD513FFF23D@sdfe.dk>
 <4C66D80A-C535-4AFA-85B2-36A2B1DC39D8@sdfe.dk>
 <22B706FF-C09B-46D5-AAD4-332F59B3B21E@gmail.com>
Message-ID: <D9CB562D-CBFE-447F-9391-2D3BD5485E64@sdfe.dk>

All,

A quick follow-up on the OSGeo incubation situation. I have just submitted a request for incubation: https://trac.osgeo.org/osgeo/ticket/2268#ticket

Please let me know if I have made any mistakes or forgot something when answering the questionnaire.

/Kristian

On 3 Mar 2019, at 13:24, michael.smith.erdc at gmail.com<mailto:michael.smith.erdc at gmail.com> wrote:

Kristian,

I think the next step is that I make a formal request to the incubation committee and we start on a wiki page that documents how PROJ meets the project guidelines (https://www.osgeo.org/wp-content/uploads/graduation_checklist.pdf). Most of these will go quite fast, I suspect, as most, if not all of this is already done for PROJ.
The only thing I see that could take some time is the provenance check and making sure all files files have the copyright notices and contribution agreements on all the contributions.

Mike



On Mar 3, 2019, at 6:32 AM, Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:

Just for fun I did a Twitter poll on the subject of PROJ going through
OSGeo incubation. I think the results are quite conclusive:

Yes:             84%
No:                3%
Don’t care:  13%

There were 58 respondents.

As there have been no negative feedback on the mailing list either, I
think that we should just get the process started.

Mike, how should be proceed from here?

/Kristian

On 27 Feb 2019, at 22:15, Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:

It was indeed my intention to get the incubation process started
last year but I never really found the time to do so. It was my
intention to pick it up after the 6.0 release, so I am glad that
Mike and Howard has taken this up again. I am of course in
favour of PROJ becoming a proper OSGeo project.

/Kristian

On 27 Feb 2019, at 20:36, Michael Smith <michael.smith.erdc at gmail.com<mailto:michael.smith.erdc at gmail.com>> wrote:

That was the stated intention, I was just working to move the process along.

Mike


--
Michael Smith
OSGeo Foundation Treasurer
treasurer at osgeo.org<mailto:treasurer at osgeo.org>



﻿-----Original Message-----
From: PROJ <proj-bounces at lists.osgeo.org<mailto:proj-bounces at lists.osgeo.org>> on behalf of Sebastiaan Couwenberg <sebastic at xs4all.nl<mailto:sebastic at xs4all.nl>>
Date: Wednesday, February 27, 2019 at  2:32 PM
To: "proj at lists.osgeo.org<mailto:proj at lists.osgeo.org>" <proj at lists.osgeo.org<mailto:proj at lists.osgeo.org>>
Subject: [Non-DoD Source] Re: [PROJ] Incubate PROJ as an OSGeo Project?
Resent-From: Michael Smith <michael.smith at usace.army.mil<mailto:michael.smith at usace.army.mil>>
Resent-Date: Wednesday, February 27, 2019 at  2:31 PM

 On 2/27/19 5:37 PM, Howard Butler wrote:
At this point, I think incubation into OSGeo is a fairly innocuous and reasonable thing for the PROJ project to undertake, but I would like to gauge the community's enthusiasm for such a thing.

 Wasn't that already the plan, as mentioned by Kristian back in August:

  BlockedBlockedhttps://lists.osgeo.org/pipermail/metacrs/2018-August/000989.htmlBlocked

 Kind Regards,

 Bas

 --
  GPG Key ID: 4096R/6750F10AE88D4AF1
 Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
 _______________________________________________
 PROJ mailing list
 PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
 BlockedBlockedhttps://lists.osgeo.org/mailman/listinfo/projBlocked



_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj

_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj

_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190328/ee0c8f30/attachment.html>

From michael.smith.erdc at gmail.com  Thu Mar 28 14:30:56 2019
From: michael.smith.erdc at gmail.com (Michael Smith)
Date: Thu, 28 Mar 2019 17:30:56 -0400
Subject: [PROJ] [Non-DoD Source] Re: Incubate PROJ as an OSGeo Project?
In-Reply-To: <D9CB562D-CBFE-447F-9391-2D3BD5485E64@sdfe.dk>
References: <FCF71272-4553-428B-A8AC-74BB7DA60399@hobu.co>
 <415a8a2d-7f63-a494-b7bf-99dd4a91ad74@xs4all.nl>
 <4E20D13C-3633-4768-8871-A3E810046923@gmail.com>
 <DF6D8A4B-0E47-469E-AA96-BAD513FFF23D@sdfe.dk>
 <4C66D80A-C535-4AFA-85B2-36A2B1DC39D8@sdfe.dk>
 <22B706FF-C09B-46D5-AAD4-332F59B3B21E@gmail.com>
 <D9CB562D-CBFE-447F-9391-2D3BD5485E64@sdfe.dk>
Message-ID: <2FD54AAD-60AE-4893-94C1-A3E12F572B15@gmail.com>

Kristian,

 

You beat me to it. I had about 1/3 of it done and got distracted. Glad you got it all filled out. I’ll look over it. 

 

Mike

 

 

-- 

Michael Smith

Remote Sensing/GIS Center

US Army Corps of Engineers

 

 

From: Kristian Evers <kreve at sdfe.dk>
Date: Thursday, March 28, 2019 at 5:29 PM
To: "proj at lists.osgeo.org" <proj at lists.osgeo.org>
Cc: Michael Smith <michael.smith.erdc at gmail.com>
Subject: Re: [PROJ] [Non-DoD Source] Re: Incubate PROJ as an OSGeo Project?

 

All, 

 

A quick follow-up on the OSGeo incubation situation. I have just submitted a request for incubation: https://trac.osgeo.org/osgeo/ticket/2268#ticket 

 

Please let me know if I have made any mistakes or forgot something when answering the questionnaire.

 

/Kristian



On 3 Mar 2019, at 13:24, michael.smith.erdc at gmail.com wrote:

 

Kristian, 

 

I think the next step is that I make a formal request to the incubation committee and we start on a wiki page that documents how PROJ meets the project guidelines (https://www.osgeo.org/wp-content/uploads/graduation_checklist.pdf). Most of these will go quite fast, I suspect, as most, if not all of this is already done for PROJ. 

The only thing I see that could take some time is the provenance check and making sure all files files have the copyright notices and contribution agreements on all the contributions.

 

Mike

 

 


On Mar 3, 2019, at 6:32 AM, Kristian Evers <kreve at sdfe.dk> wrote:

Just for fun I did a Twitter poll on the subject of PROJ going through
OSGeo incubation. I think the results are quite conclusive:

Yes:             84%
No:                3%
Don’t care:  13%

There were 58 respondents.

As there have been no negative feedback on the mailing list either, I
think that we should just get the process started.

Mike, how should be proceed from here?

/Kristian



On 27 Feb 2019, at 22:15, Kristian Evers <kreve at sdfe.dk> wrote:

 

It was indeed my intention to get the incubation process started

last year but I never really found the time to do so. It was my

intention to pick it up after the 6.0 release, so I am glad that

Mike and Howard has taken this up again. I am of course in

favour of PROJ becoming a proper OSGeo project.

 

/Kristian

 

On 27 Feb 2019, at 20:36, Michael Smith <michael.smith.erdc at gmail.com> wrote:

 

That was the stated intention, I was just working to move the process along.

 

Mike

 

 

--

Michael Smith

OSGeo Foundation Treasurer

treasurer at osgeo.org

 

 

 

﻿-----Original Message-----

From: PROJ <proj-bounces at lists.osgeo.org> on behalf of Sebastiaan Couwenberg <sebastic at xs4all.nl>

Date: Wednesday, February 27, 2019 at  2:32 PM

To: "proj at lists.osgeo.org" <proj at lists.osgeo.org>

Subject: [Non-DoD Source] Re: [PROJ] Incubate PROJ as an OSGeo Project?

Resent-From: Michael Smith <michael.smith at usace.army.mil>

Resent-Date: Wednesday, February 27, 2019 at  2:31 PM

 

 On 2/27/19 5:37 PM, Howard Butler wrote:

At this point, I think incubation into OSGeo is a fairly innocuous and reasonable thing for the PROJ project to undertake, but I would like to gauge the community's enthusiasm for such a thing.

 

 Wasn't that already the plan, as mentioned by Kristian back in August:

 

  BlockedBlockedhttps://lists.osgeo.org/pipermail/metacrs/2018-August/000989.htmlBlocked

 

 Kind Regards,

 

 Bas

 

 -- 

  GPG Key ID: 4096R/6750F10AE88D4AF1

 Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1

 _______________________________________________

 PROJ mailing list

 PROJ at lists.osgeo.org

 BlockedBlockedhttps://lists.osgeo.org/mailman/listinfo/projBlocked

 

 

 

_______________________________________________

PROJ mailing list

PROJ at lists.osgeo.org

https://lists.osgeo.org/mailman/listinfo/proj

 

_______________________________________________

PROJ mailing list

PROJ at lists.osgeo.org

https://lists.osgeo.org/mailman/listinfo/proj

 

_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190328/284edbbc/attachment-0001.html>

From kreve at sdfe.dk  Thu Mar 28 14:35:14 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 28 Mar 2019 21:35:14 +0000
Subject: [PROJ] [Non-DoD Source] Re: Incubate PROJ as an OSGeo Project?
In-Reply-To: <2FD54AAD-60AE-4893-94C1-A3E12F572B15@gmail.com>
References: <FCF71272-4553-428B-A8AC-74BB7DA60399@hobu.co>
 <415a8a2d-7f63-a494-b7bf-99dd4a91ad74@xs4all.nl>
 <4E20D13C-3633-4768-8871-A3E810046923@gmail.com>
 <DF6D8A4B-0E47-469E-AA96-BAD513FFF23D@sdfe.dk>
 <4C66D80A-C535-4AFA-85B2-36A2B1DC39D8@sdfe.dk>
 <22B706FF-C09B-46D5-AAD4-332F59B3B21E@gmail.com>
 <D9CB562D-CBFE-447F-9391-2D3BD5485E64@sdfe.dk>
 <2FD54AAD-60AE-4893-94C1-A3E12F572B15@gmail.com>
Message-ID: <8511141C-D38C-471D-97E0-D08A2CF0939E@sdfe.dk>

I figured you’d got side-tracked. And it was probably a lot easier for me to fill out anyway.

Thanks.

/Kristian

On 28 Mar 2019, at 22:30, Michael Smith <michael.smith.erdc at gmail.com<mailto:michael.smith.erdc at gmail.com>> wrote:

Kristian,

You beat me to it. I had about 1/3 of it done and got distracted. Glad you got it all filled out. I’ll look over it.

Mike


--
Michael Smith
Remote Sensing/GIS Center
US Army Corps of Engineers



-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190328/58957e1d/attachment.html>

From schwehr at gmail.com  Thu Mar 28 18:45:32 2019
From: schwehr at gmail.com (Kurt Schwehr)
Date: Thu, 28 Mar 2019 18:45:32 -0700
Subject: [PROJ] [Non-DoD Source] Re: Incubate PROJ as an OSGeo Project?
In-Reply-To: <8511141C-D38C-471D-97E0-D08A2CF0939E@sdfe.dk>
References: <FCF71272-4553-428B-A8AC-74BB7DA60399@hobu.co>
 <415a8a2d-7f63-a494-b7bf-99dd4a91ad74@xs4all.nl>
 <4E20D13C-3633-4768-8871-A3E810046923@gmail.com>
 <DF6D8A4B-0E47-469E-AA96-BAD513FFF23D@sdfe.dk>
 <4C66D80A-C535-4AFA-85B2-36A2B1DC39D8@sdfe.dk>
 <22B706FF-C09B-46D5-AAD4-332F59B3B21E@gmail.com>
 <D9CB562D-CBFE-447F-9391-2D3BD5485E64@sdfe.dk>
 <2FD54AAD-60AE-4893-94C1-A3E12F572B15@gmail.com>
 <8511141C-D38C-471D-97E0-D08A2CF0939E@sdfe.dk>
Message-ID: <CACmBxyt-gRX+MxHRcieCyfPCs+KkY=KChH=15sBmDKZzekDwjA@mail.gmail.com>

+1. Thanks!

One thought on standards: I think it should mention the upstream EPSG
catalog.

On Thu, Mar 28, 2019, 2:35 PM Kristian Evers <kreve at sdfe.dk> wrote:

> I figured you’d got side-tracked. And it was probably a lot easier for me
> to fill out anyway.
>
> Thanks.
>
> /Kristian
>
> On 28 Mar 2019, at 22:30, Michael Smith <michael.smith.erdc at gmail.com>
> wrote:
>
> Kristian,
>
> You beat me to it. I had about 1/3 of it done and got distracted. Glad you
> got it all filled out. I’ll look over it.
>
> Mike
>
>
> --
> Michael Smith
> Remote Sensing/GIS Center
> US Army Corps of Engineers
>
>
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190328/de8b1f77/attachment.html>

From kreve at sdfe.dk  Fri Mar 29 02:23:03 2019
From: kreve at sdfe.dk (Kristian Evers)
Date: Fri, 29 Mar 2019 09:23:03 +0000
Subject: [PROJ] [Non-DoD Source] Re: Incubate PROJ as an OSGeo Project?
In-Reply-To: <CACmBxyt-gRX+MxHRcieCyfPCs+KkY=KChH=15sBmDKZzekDwjA@mail.gmail.com>
References: <FCF71272-4553-428B-A8AC-74BB7DA60399@hobu.co>
 <415a8a2d-7f63-a494-b7bf-99dd4a91ad74@xs4all.nl>
 <4E20D13C-3633-4768-8871-A3E810046923@gmail.com>
 <DF6D8A4B-0E47-469E-AA96-BAD513FFF23D@sdfe.dk>
 <4C66D80A-C535-4AFA-85B2-36A2B1DC39D8@sdfe.dk>
 <22B706FF-C09B-46D5-AAD4-332F59B3B21E@gmail.com>
 <D9CB562D-CBFE-447F-9391-2D3BD5485E64@sdfe.dk>
 <2FD54AAD-60AE-4893-94C1-A3E12F572B15@gmail.com>
 <8511141C-D38C-471D-97E0-D08A2CF0939E@sdfe.dk>
 <CACmBxyt-gRX+MxHRcieCyfPCs+KkY=KChH=15sBmDKZzekDwjA@mail.gmail.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAF1031FE@S000014.PROD.SITAD.DK>

That is a good point, Kurt. It should also be mentioned under licensing I think.
I’ll update the ticket.

/Kristian

Fra: Kurt Schwehr <schwehr at gmail.com>
Sendt: 29. marts 2019 02:46
Til: Kristian Evers <kreve at sdfe.dk>
Cc: Michael Smith <michael.smith.erdc at gmail.com>; PROJ <proj at lists.osgeo.org>
Emne: Re: [PROJ] [Non-DoD Source] Re: Incubate PROJ as an OSGeo Project?

+1. Thanks!

One thought on standards: I think it should mention the upstream EPSG catalog.

On Thu, Mar 28, 2019, 2:35 PM Kristian Evers <kreve at sdfe.dk<mailto:kreve at sdfe.dk>> wrote:
I figured you’d got side-tracked. And it was probably a lot easier for me to fill out anyway.

Thanks.

/Kristian


On 28 Mar 2019, at 22:30, Michael Smith <michael.smith.erdc at gmail.com<mailto:michael.smith.erdc at gmail.com>> wrote:

Kristian,

You beat me to it. I had about 1/3 of it done and got distracted. Glad you got it all filled out. I’ll look over it.

Mike


--
Michael Smith
Remote Sensing/GIS Center
US Army Corps of Engineers



_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20190329/2b13bae8/attachment-0001.html>

