From kristianevers at gmail.com  Tue Sep  1 00:12:08 2020
From: kristianevers at gmail.com (Kristian Evers)
Date: Tue, 1 Sep 2020 09:12:08 +0200
Subject: [PROJ] PROJ 7.1.1RC1
In-Reply-To: <7F7A17F6-9FDF-48FF-9813-A1C36E594792@gmail.com>
References: <7F7A17F6-9FDF-48FF-9813-A1C36E594792@gmail.com>
Message-ID: <7D798D4D-2020-4141-B4C0-5690FF8E92DC@gmail.com>

I completely forgot to motion that PROJ 7.1.1RC1 and PROJ-data 1.2RC1 get
promoted to final releases. I assume that no PSC member has any problems
releasing the two packages but we should of course stick to the procedures. So,

I hereby motion that PROJ 7.1.1RC1 and PROJ-data 1.2RC1 get promoted
to their final releases.

I’ll start with my +1.

I am preparing the final releases right now but will hold back on the announcement
until we have a couple of +1’s in favour of the releases.

/Kristian


> On 24 Aug 2020, at 21:09, Kristian Evers <kristianevers at gmail.com> wrote:
> 
> All, 
> 
> The release of PROJ 7.1.1 is coming up on September 1st. In preparation for that I have
> just uploaded a release candidate. Downloads available here:
> 
> http://download.osgeo.org/proj/proj-7.1.1RC1.tar.gz
> http://download.osgeo.org/proj/proj-7.1.1RC1.zip
> 
> As usual everyone who uses PROJ is encouraged to try out the release candidates and report
> back their experiences either here on the mailing list or in the issue tracker on GitHub. 
> 
> /Kristian
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From Witold.Interewicz at imgw.pl  Tue Sep  1 00:43:15 2020
From: Witold.Interewicz at imgw.pl (Witold Interewicz)
Date: Tue, 1 Sep 2020 07:43:15 +0000
Subject: [PROJ] Q about proj.5.2.0 sources
Message-ID: <AM0PR08MB401770891E5B411819356ED8F92E0@AM0PR08MB4017.eurprd08.prod.outlook.com>

Dear PROJ Code Keepers/Admins,
Dear All,

I'm trying to build proj.5.2.0 as a minimalistic prerequisite for CDO 1.9.8.

Build is at the linux platform with Intel 2017.
I downloaded proj-5.2.0.tar.gz via PROJ website ( https://proj.org/download.html ).
Next I had to modify the sources so that Intel compiler doesn't throw errors (missing casts, invalid casts, mixing of enums with ints, enum definitions within structures invisible in a wider scope - at least for Intel compiler).

Unfortunately, at the library link stage, build ends up with a bunch of undefined references as cited below.
Case-insensitive grepping of sources suggests, that some modules are missing in the proj-5.2.0.tar.gz pack I downloaded (and it is rather not the question of compiler names mangling scheme (?)).

Can you please tell me were and how may I get a correct, complete source code package for PROJ 5.2.0?

Build commands I used are following:
./configure \
--without-jni \
--prefix=<some path>
make

(As you see, Java interface was excluded.)

Final result I got is (paths removed):
...
libtool: link: ( cd ".libs" && rm -f "libproj.la" && ln -s "../libproj.la" "libproj.la" )
/bin/sh ../libtool  --tag=CC   --mode=link icpc -Wall -Wdeclaration-after-statement -diag-disable 188,1684,2259,2304,3280,11074,11076 -Wextra -Winit-self -Wunused-parameter -Wmissing-prototypes -Wmissing-declarations -Wformat -Wshorten-64-to-32 -Wshadow -Werror=vla -Wdeclaration-after-statement -std=gnu89 -g -O2 -fp-model precise -DHAVE_C99_MATH=1   -o proj proj.o gen_cheb.o p_series.o libproj.la -lpthread -lm
libtool: link: icpc -Wall -Wdeclaration-after-statement -diag-disable 188,1684,2259,2304,3280,11074,11076 -Wextra -Winit-self -Wunused-parameter -Wmissing-prototypes -Wmissing-declarations -Wformat -Wshorten-64-to-32 -Wshadow -Werror=vla -Wdeclaration-after-statement -std=gnu89 -g -O2 -fp-model precise -DHAVE_C99_MATH=1 -o .libs/proj proj.o gen_cheb.o p_series.o  ./.libs/libproj.so -lpthread -lm -Wl,-rpath -Wl,<some path>/lib
./.libs/libproj.so: undefined reference to `pj_urmfps(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_bonne(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_wink2(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_rouss(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_tissot(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_wag6(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_collg(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_ortho(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_nzmg(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_lcc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_merc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_putp4p(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_geocent(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_somerc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_crast(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_mbtfpq(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_wag4(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_omerc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_putp2(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_helmert(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_august(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_gs48(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_wink1(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_pconic(PJconsts*)'
./.libs/libproj.so: undefined reference to `proj_errno_reset(PJconsts const*)'
./.libs/libproj.so: undefined reference to `pj_natearth(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_tpeqd(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_sinu(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_unitconvert(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_imw_p(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_gall(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_putp5p(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_fouc_s(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_bacon(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_alsk(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_ocea(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_tmerc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_robin(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_hgridshift(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_nell(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_oea(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_eqc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_qsc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_axisswap(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_comill(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_latlong(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_misrsom(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_fahey(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_mbtfpp(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_loxim(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_boggs(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_etmerc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_apian(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_wag1(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_wag2(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_cc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_putp1(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_eck5(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_vandg2(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_tcc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_geos(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_tcea(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_lee_os(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_ob_tran(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_eck2(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_aea(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_qua_aut(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_weren(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_gins8(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_vandg3(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_eck4(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_nicol(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_igh(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_lsat(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_calcofi(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_cart(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_molodensky(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_mil_os(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_stere(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_tpers(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_wag5(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_leac(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_krovak(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_euler(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_vandg(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_nsper(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_chamb(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_putp6p(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_laea(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_pipeline(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_denoy(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_sch(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_mbt_s(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_vitk1(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_healpix(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_list'
./.libs/libproj.so: undefined reference to `pj_hatano(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_poly(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_longlat(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_aitoff(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_eck1(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_gstmerc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_labrd(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_mbtfps(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_eck3(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_nell_h(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_moll(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_cea(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_cass(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_wag3(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_kav5(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_vandg4(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_eqearth(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_rpoly(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_putp6(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_murd2(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_putp5(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_fouc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_eck6(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_lcca(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_murd1(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_isea(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_hammer(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_aeqd(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_ccon(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_lask(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_putp3p(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_ups(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_lagrng(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_kav7(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_ortel(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_airy(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_latlon(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_gn_sinu(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_larr(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_mbt_fps(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_times(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_bipc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_vgridshift(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_gnom(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_urm5(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_mill(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_sterea(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_murd3(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_utm(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_goode(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_wag7(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_webmerc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_gs50(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_natearth2(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_geoc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_horner(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_putp3(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_wintri(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_patterson(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_eqdc(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_lonlat(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_deformation(PJconsts*)'
./.libs/libproj.so: undefined reference to `pj_rhealpix(PJconsts*)'
make[2]: *** [proj] Error 1

And the names mentioned above are missing in sources (case-insensitive search).

Thanks in advance for the answer(s).

Witold Interewicz
Starszy Specjalista
Laboratorium Zaawansowanych Metod Modelowania Meteorologicznego / Zakład Prognoz Numerycznych COSMO
T. (+48) 22 569 41 32
IMGW-PIB | 01-673 Warszawa, Podleśna 61

meteo.imgw.pl - nowy serwis pogodowy dla Polski IMGW-PIB

IMGW-PIB | 01-673 Warszawa, Podleśna 61 | www.imgw.pl
Media Office 24/7/365: Twitter @IMGWMeteo
Social Media: Facebook, Instagram, Linkedin.
Należymy do Światowej Organizacji Meteorologicznej (WMO) oraz EUMETSAT
Niniejsza wiadomość jest przeznaczona wyłącznie dla wskazanego w niej odbiorcy i może zawierać informacje poufne. Jeśli nie są Państwo adresatem tej informacji prosimy o niezwłoczne poinformowanie o tym fakcie nadawcy pocztą elektroniczną oraz niekopiowanie i nieprzekazywanie tej wiadomości osobom nieupoważnionym. Dziękujemy | Zanim wydrukujesz, pomyśl o środowisku!


From even.rouault at spatialys.com  Tue Sep  1 01:12:10 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 01 Sep 2020 10:12:10 +0200
Subject: [PROJ] PROJ 7.1.1RC1
In-Reply-To: <7D798D4D-2020-4141-B4C0-5690FF8E92DC@gmail.com>
References: <7F7A17F6-9FDF-48FF-9813-A1C36E594792@gmail.com>
 <7D798D4D-2020-4141-B4C0-5690FF8E92DC@gmail.com>
Message-ID: <2768983.l9FMmPQE9p@even-i700>

On mardi 1 septembre 2020 09:12:08 CEST Kristian Evers wrote:
> I completely forgot to motion that PROJ 7.1.1RC1 and PROJ-data 1.2RC1 get
> promoted to final releases. I assume that no PSC member has any problems
> releasing the two packages but we should of course stick to the procedures.
> So,
> 
> I hereby motion that PROJ 7.1.1RC1 and PROJ-data 1.2RC1 get promoted
> to their final releases.
> 
> I’ll start with my +1.

+1 Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200901/b7021f9c/attachment-0001.html>

From knudsen.thomas at gmail.com  Tue Sep  1 02:51:45 2020
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Tue, 1 Sep 2020 11:51:45 +0200
Subject: [PROJ] PROJ 7.1.1RC1
In-Reply-To: <7D798D4D-2020-4141-B4C0-5690FF8E92DC@gmail.com>
References: <7F7A17F6-9FDF-48FF-9813-A1C36E594792@gmail.com>
 <7D798D4D-2020-4141-B4C0-5690FF8E92DC@gmail.com>
Message-ID: <CAH0YoEPKCU+E+oSc9eWtE4ZP7fokVOx3GttnbT7h8nQydj2BGQ@mail.gmail.com>

+1 /thomas

Den tir. 1. sep. 2020 kl. 09.12 skrev Kristian Evers <
kristianevers at gmail.com>:

> I completely forgot to motion that PROJ 7.1.1RC1 and PROJ-data 1.2RC1 get
> promoted to final releases. I assume that no PSC member has any problems
> releasing the two packages but we should of course stick to the
> procedures. So,
>
> I hereby motion that PROJ 7.1.1RC1 and PROJ-data 1.2RC1 get promoted
> to their final releases.
>
> I’ll start with my +1.
>
> I am preparing the final releases right now but will hold back on the
> announcement
> until we have a couple of +1’s in favour of the releases.
>
> /Kristian
>
>
> > On 24 Aug 2020, at 21:09, Kristian Evers <kristianevers at gmail.com>
> wrote:
> >
> > All,
> >
> > The release of PROJ 7.1.1 is coming up on September 1st. In preparation
> for that I have
> > just uploaded a release candidate. Downloads available here:
> >
> > http://download.osgeo.org/proj/proj-7.1.1RC1.tar.gz
> > http://download.osgeo.org/proj/proj-7.1.1RC1.zip
> >
> > As usual everyone who uses PROJ is encouraged to try out the release
> candidates and report
> > back their experiences either here on the mailing list or in the issue
> tracker on GitHub.
> >
> > /Kristian
> >
> > _______________________________________________
> > PROJ mailing list
> > PROJ at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/proj
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200901/862a0c32/attachment.html>

From j1 at jimenezshaw.com  Tue Sep  1 03:46:33 2020
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Tue, 1 Sep 2020 12:46:33 +0200
Subject: [PROJ] Ellipsoidal height VCRS in WKT/EPSG
Message-ID: <CADRrdKteiJG7DJR02XK__O6vgvj6=S1-oOFBCM5i4RfKLS7O_A@mail.gmail.com>

Hi

Does exist any EPSG or WKT for a Vertical CRS that means "ellipsoidal
height"?

To define a 3D CRS I just make a compound CRS with a horizontal and a
vertical one.
I could just remove any VCRS for ellipsoidal heights. However I cannot make
the difference if the user actively selected "ellipsoidal height" for VCRS,
or just forgot (or don't know) it.

I don't want to "promoteTo3D" the 2D CRS  adding the third axis, because it
removes the authority.

Thanks.
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200901/23e2d37e/attachment.html>

From gdt at lexort.com  Tue Sep  1 04:56:27 2020
From: gdt at lexort.com (Greg Troxel)
Date: Tue, 01 Sep 2020 07:56:27 -0400
Subject: [PROJ] Ellipsoidal height VCRS in WKT/EPSG
In-Reply-To: <CADRrdKteiJG7DJR02XK__O6vgvj6=S1-oOFBCM5i4RfKLS7O_A@mail.gmail.com>
 (Javier Jimenez Shaw's message of "Tue, 1 Sep 2020 12:46:33 +0200")
References: <CADRrdKteiJG7DJR02XK__O6vgvj6=S1-oOFBCM5i4RfKLS7O_A@mail.gmail.com>
Message-ID: <rmituwh90d0.fsf@s1.lexort.com>


Javier Jimenez Shaw <j1 at jimenezshaw.com> writes:

> Does exist any EPSG or WKT for a Vertical CRS that means "ellipsoidal
> height"?
>
> To define a 3D CRS I just make a compound CRS with a horizontal and a
> vertical one.
> I could just remove any VCRS for ellipsoidal heights. However I cannot make
> the difference if the user actively selected "ellipsoidal height" for VCRS,
> or just forgot (or don't know) it.
>
> I don't want to "promoteTo3D" the 2D CRS  adding the third axis, because it
> removes the authority.

Interesting question!

First, beware that "ellipsoidal height" is incompletely specified, as
you neeed to specify the datum, both to know the ellipsoid, and to know
the ellipsoid position/orientation.  For example NAD83 ellipsoidal
height and ITRF2014 ellipsoidal heights are different at the same point.

I am not aware of any vertical-only ellipsoidal height CRS definitions.
I have only come across vertical-only CRSs such as NAVD88 and similar.

Probably there are no ellipsoidal height only CRS definitions because
when measuring ellipsoidal height, one obtains a 3D result.

I would suggest that when trying to add EH, you match the 2D CRS to see
if there is a corresponding 3D, with the same 2D component.  If the 2D
CRS is NAD83, WGS84, some ITRF, and probably some other satellite-era
national datums, then this can make sense.  If it's some CRS that it's
fundamentally* 2D only, then adding EH doesn't really make sense.

And, the user should have to specify the vertical datum; just checking
ellipsoidal height only makes sense if the 2D CRS is really a 2D view of
a 3D CRS and ellipsoidal height is unique.


* I realize original NAD83 isn't really 3D, but later ones are more 3D
  than not.
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 194 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200901/4e478f29/attachment.sig>

From charles at karney.com  Tue Sep  1 05:09:34 2020
From: charles at karney.com (Charles Karney)
Date: Tue, 1 Sep 2020 08:09:34 -0400
Subject: [PROJ] PROJ 7.1.1RC1
In-Reply-To: <2768983.l9FMmPQE9p@even-i700>
References: <7F7A17F6-9FDF-48FF-9813-A1C36E594792@gmail.com>
 <7D798D4D-2020-4141-B4C0-5690FF8E92DC@gmail.com>
 <2768983.l9FMmPQE9p@even-i700>
Message-ID: <268d8798-2146-b4b5-ee90-a0681f802f8f@karney.com>

+1 Charles

On 9/1/20 4:12 AM, Even Rouault wrote:
> On mardi 1 septembre 2020 09:12:08 CEST Kristian Evers wrote:
> 
>  > I completely forgot to motion that PROJ 7.1.1RC1 and PROJ-data 1.2RC1 get
> 
>  > promoted to final releases. I assume that no PSC member has any problems
> 
>  > releasing the two packages but we should of course stick to the 
> procedures.
> 
>  > So,
> 
>  >
> 
>  > I hereby motion that PROJ 7.1.1RC1 and PROJ-data 1.2RC1 get promoted
> 
>  > to their final releases.
> 
>  >
> 
>  > I’ll start with my +1.
> 
> +1 Even
> 

From even.rouault at spatialys.com  Tue Sep  1 06:25:46 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 01 Sep 2020 15:25:46 +0200
Subject: [PROJ] Ellipsoidal height VCRS in WKT/EPSG
In-Reply-To: <CADRrdKteiJG7DJR02XK__O6vgvj6=S1-oOFBCM5i4RfKLS7O_A@mail.gmail.com>
References: <CADRrdKteiJG7DJR02XK__O6vgvj6=S1-oOFBCM5i4RfKLS7O_A@mail.gmail.com>
Message-ID: <22537580.l3ivOUFmhG@even-i700>

Javier,

> Does exist any EPSG or WKT for a Vertical CRS that means "ellipsoidal
> height"?

No, and this is by design. Ellipsoidal height doesn't make sense, from a referencing point of 
view, if the longitude,latitude of the point where you measure it is not specified as well, 
hence the need for a Geographic3D CRS. This is contrary to a gravity-based height, where if 
someone gives you just the the elevation at 2 points, you can for example know from which 
point towards which one water would flow.

See http://docs.opengeospatial.org/is/18-010r7/18-010r7.html
"""
3.1.19 ellipsoidal height

    distance of a point from the reference ellipsoid along the perpendicular from the 
reference ellipsoid to this point, positive if upwards or outside of the reference ellipsoid

    Note 1 to entry: Only used as part of a three-dimensional ellipsoidal coordinate system or 
as part of a three-dimensional Cartesian coordinate system in a three-dimensional projected 
coordinate reference system, but never on its own.
"""

Very early versions of the EPSG dataset (like 10 years ago or more) add codes for vertical CRS 
with ellipsoidal height, but this was removed in later versions. Some remains of that are still 
found in the GeoTIFF 1.0 specification that hard-coded such dataset, but they have 
disappeared since, and are no longer allowed in GeoTIFF 1.1. I've seen recently also some 
WKT-1 string for LAS files that were using a ellipsoidal vertical CRS as part of a compound 
CRS, but this is no longer considered as geodetic-savy practice.

> I don't want to "promoteTo3D" the 2D CRS  adding the third axis, because it
> removes the authority.

For projected CRS, yes, since there is currently no Projected 3D CRS in EPSG
For geographic CRS, to the extent where there's a 3D version of the one you promote to 2D 
registered, promoteTo3D should attach the code of the 3D CRS:


$ projinfo EPSG:4326 --3d
[....snip ...]
    ID["EPSG",4979]]

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200901/e74fbfcb/attachment-0001.html>

From howard at hobu.co  Tue Sep  1 06:34:30 2020
From: howard at hobu.co (Howard Butler)
Date: Tue, 1 Sep 2020 08:34:30 -0500
Subject: [PROJ] PROJ 7.1.1RC1
In-Reply-To: <268d8798-2146-b4b5-ee90-a0681f802f8f@karney.com>
References: <7F7A17F6-9FDF-48FF-9813-A1C36E594792@gmail.com>
 <7D798D4D-2020-4141-B4C0-5690FF8E92DC@gmail.com>
 <2768983.l9FMmPQE9p@even-i700>
 <268d8798-2146-b4b5-ee90-a0681f802f8f@karney.com>
Message-ID: <43328420-0111-473F-88AB-069AFB222D68@hobu.co>



> On Sep 1, 2020, at 7:09 AM, Charles Karney <charles at karney.com> wrote:
> 
> +1 Charles
> 
> On 9/1/20 4:12 AM, Even Rouault wrote:
>> On mardi 1 septembre 2020 09:12:08 CEST Kristian Evers wrote:
>> > I completely forgot to motion that PROJ 7.1.1RC1 and PROJ-data 1.2RC1 get
>> > promoted to final releases. I assume that no PSC member has any problems
>> > releasing the two packages but we should of course stick to the procedures.
>> > So,
>> >
>> > I hereby motion that PROJ 7.1.1RC1 and PROJ-data 1.2RC1 get promoted
>> > to their final releases.
>> >
>> > I’ll start with my +1.
>> +1 Even

+1 Howard


From kristianevers at gmail.com  Tue Sep  1 07:06:48 2020
From: kristianevers at gmail.com (Kristian Evers)
Date: Tue, 1 Sep 2020 16:06:48 +0200
Subject: [PROJ] PROJ 7.1.1RC1
In-Reply-To: <43328420-0111-473F-88AB-069AFB222D68@hobu.co>
References: <7F7A17F6-9FDF-48FF-9813-A1C36E594792@gmail.com>
 <7D798D4D-2020-4141-B4C0-5690FF8E92DC@gmail.com>
 <2768983.l9FMmPQE9p@even-i700>
 <268d8798-2146-b4b5-ee90-a0681f802f8f@karney.com>
 <43328420-0111-473F-88AB-069AFB222D68@hobu.co>
Message-ID: <CALECs+eLLB++K=rGc4OxgpJrvg0gdPS9UNBOf8mEda7ksVRhXg@mail.gmail.com>

Motion passed with +1's from

Kristian
Even
Thomas
Charles
Howard

Release announcement will follow shortly.

/Kristian

On Tue, 1 Sep 2020 at 15:34, Howard Butler <howard at hobu.co> wrote:

>
>
> > On Sep 1, 2020, at 7:09 AM, Charles Karney <charles at karney.com> wrote:
> >
> > +1 Charles
> >
> > On 9/1/20 4:12 AM, Even Rouault wrote:
> >> On mardi 1 septembre 2020 09:12:08 CEST Kristian Evers wrote:
> >> > I completely forgot to motion that PROJ 7.1.1RC1 and PROJ-data 1.2RC1
> get
> >> > promoted to final releases. I assume that no PSC member has any
> problems
> >> > releasing the two packages but we should of course stick to the
> procedures.
> >> > So,
> >> >
> >> > I hereby motion that PROJ 7.1.1RC1 and PROJ-data 1.2RC1 get promoted
> >> > to their final releases.
> >> >
> >> > I’ll start with my +1.
> >> +1 Even
>
> +1 Howard
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200901/c4e4e8f4/attachment.html>

From kristianevers at gmail.com  Tue Sep  1 07:16:51 2020
From: kristianevers at gmail.com (Kristian Evers)
Date: Tue, 1 Sep 2020 16:16:51 +0200
Subject: [PROJ] PROJ 7.1.1 & PROJ-data 1.2
Message-ID: <CALECs+d-4PK8gzmdHOkGLNdZdZhEnYfd7O-L5rM5OSWUzwejow@mail.gmail.com>

All,

It is my pleasure to announce the release of PROJ 7.1.1 and PROJ-data 1.2.
The former primarily includes a number of bug fixes as well as updates to
the CRS database. The data package includes a few new transformation grids
for use in Brazil and the Canary Islands.

Get the packages here:

http://download.osgeo.org/proj/proj-7.1.1.tar.gz
http://download.osgeo.org/proj/proj-7.1.1.zip

http://download.osgeo.org/proj/proj-data-1.2.tar.gz
http://download.osgeo.org/proj/proj-data-1.2.zip

See the release notes below.

/Kristian

---------------------------------------------------------------------------------------

7.1.1 Release Notes
-------------------

 Updates
 -------

  o Added various Brazillian grids to the database #2277

  o Added geoid file for Canary Islands to the database #2312

  o Updated EPSG database to version 9.8.15 #2310

 Bug fixes
 ---------

  o WKT parser: do not raise warning when parsing a WKT2:2015 TIMECRS
    whose TIMEUNIT is at the CS level, and not inside #2281

  o Parse '+proj=something_not_latlong +vunits=' without +geoidgrids as a
    Projected3D CRS and not a compound CRS with a unknown datum #2289

  o C API: Avoid crashing due to missing SANITIZE_CTX() in entry points
#2293

  o CMake build: Check "target_clones" before use #2297

  o PROJ string export of +proj=krovak +czech: make sure we export +czech…
#2301

  o Helmert 2D: do not require a useless +convention= parameter #2305

  o Fix a few spelling errors ("vgridshit" vs. "vgridshift") #2307

  o Fix ability to identify EPSG:2154 as a candidate for 'RGF93_Lambert_93'
#2316

  o WKT importer: tune for Oracle WKT and 'Lambert Conformal Conic' #2322

  o Revert compiler generated Fused Multiply Addition optimized routines
#2328
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200901/18c1d302/attachment.html>

From j1 at jimenezshaw.com  Tue Sep  1 09:23:59 2020
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Tue, 1 Sep 2020 18:23:59 +0200
Subject: [PROJ] Ellipsoidal height VCRS in WKT/EPSG
In-Reply-To: <22537580.l3ivOUFmhG@even-i700>
References: <CADRrdKteiJG7DJR02XK__O6vgvj6=S1-oOFBCM5i4RfKLS7O_A@mail.gmail.com>
 <22537580.l3ivOUFmhG@even-i700>
Message-ID: <CADRrdKtmbv+hOHNCFTuc0cH0vhF1rRYP8_hvrmDg7s+erFXU=A@mail.gmail.com>

Thanks Even and Greg.

My problem is more oriented to *projected* CRS. Now I see that I have not
mentioned this term before.

I agree with you that the ellipsoidal height should refer to the proper
geographical CRS. In this case, the "base one" for the projected CRS in the
compound CRS. Something similar applies to other compound CRS combinations,
where the geographical CRS reference should match the projected and the
vertical, right?

My problem is locating points from a point cloud initially with GPS
coordinates. It is possible to convert from GPS coordinates in WGS84 - 3D
(EPSG:4979) to any State Plane (projected) + NAVD88. Is it possible also to
convert from WGS84 - 3D to the State Plane without any vertical CRS.

This is contrary to a gravity-based height, where if someone gives you just
the elevation at 2 points, you can for example know from which point
towards which one water would flow.

I need the elevation to note the point in a 3D space, not to show the
gravity-based height. In that case, of course, I need a gravity-based model.

I would like to store those points in the projected CRS in a LAS file.
If I just define the projected CRS (without vertical component) in the LAS,
what should I expect to be the Z values?

For projected CRS, yes, since there is currently no Projected 3D CRS in EPSG

Having Projected 3D CRS in EPSG would be a solution... is there any plan
for that? There were more than 7000 projected CRSs in EPSG. I hardly
imagine that they duplicate that number.

Related to this topic (I guess), if I run this "experiment",
echo 40 -90     0 | cs2cs EPSG:4979 EPSG:8734 -f "%.6f" ==> 2343275.132900
1213912.862240 107.186796
echo 40 -90 10000 | cs2cs EPSG:4979 EPSG:8734 -f "%.6f" ==> 2343275.132900
1213912.862240 32915.520130
(EPSG:8734 = NAD83 / Illinois West (ftUS) + NAVD88 height (ftUS)
<https://beta.epsg.org/crs_8734/NAD83-Illinois-West-ftUS-NAVD88-height-ftUS.html?sessionkey=23506x2d03>
)
I see there is no change in the x and y coordinates due to the change in z.
If the altitude is not changing the horizontal projection, can I assume
that the ellipsoidal height in EPSG:4979 is perpendicular to the projected
CRS? (I know it is very unlikely).

Thanks
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.



On Tue, 1 Sep 2020 at 15:25, Even Rouault <even.rouault at spatialys.com>
wrote:

> Javier,
>
>
>
> > Does exist any EPSG or WKT for a Vertical CRS that means "ellipsoidal
>
> > height"?
>
>
>
> No, and this is by design. Ellipsoidal height doesn't make sense, from a
> referencing point of view, if the longitude,latitude of the point where you
> measure it is not specified as well, hence the need for a Geographic3D CRS.
> This is contrary to a gravity-based height, where if someone gives you just
> the the elevation at 2 points, you can for example know from which point
> towards which one water would flow.
>
>
>
> See http://docs.opengeospatial.org/is/18-010r7/18-010r7.html
>
> """
>
> 3.1.19 ellipsoidal height
>
>
>
> distance of a point from the reference ellipsoid along the perpendicular
> from the reference ellipsoid to this point, positive if upwards or outside
> of the reference ellipsoid
>
>
>
> Note 1 to entry: Only used as part of a three-dimensional ellipsoidal
> coordinate system or as part of a three-dimensional Cartesian coordinate
> system in a three-dimensional projected coordinate reference system, but
> never on its own.
>
> """
>
>
>
> Very early versions of the EPSG dataset (like 10 years ago or more) add
> codes for vertical CRS with ellipsoidal height, but this was removed in
> later versions. Some remains of that are still found in the GeoTIFF 1.0
> specification that hard-coded such dataset, but they have disappeared
> since, and are no longer allowed in GeoTIFF 1.1. I've seen recently also
> some WKT-1 string for LAS files that were using a ellipsoidal vertical CRS
> as part of a compound CRS, but this is no longer considered as
> geodetic-savy practice.
>
>
>
> > I don't want to "promoteTo3D" the 2D CRS adding the third axis, because
> it
>
> > removes the authority.
>
>
>
> For projected CRS, yes, since there is currently no Projected 3D CRS in
> EPSG
>
> For geographic CRS, to the extent where there's a 3D version of the one
> you promote to 2D registered, promoteTo3D should attach the code of the 3D
> CRS:
>
>
>
>
>
> $ projinfo EPSG:4326 --3d
>
> [....snip ...]
>
> ID["EPSG",4979]]
>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200901/0f1537f4/attachment-0001.html>

From even.rouault at spatialys.com  Tue Sep  1 10:17:52 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 01 Sep 2020 19:17:52 +0200
Subject: [PROJ] Ellipsoidal height VCRS in WKT/EPSG
In-Reply-To: <CADRrdKtmbv+hOHNCFTuc0cH0vhF1rRYP8_hvrmDg7s+erFXU=A@mail.gmail.com>
References: <CADRrdKteiJG7DJR02XK__O6vgvj6=S1-oOFBCM5i4RfKLS7O_A@mail.gmail.com>
 <22537580.l3ivOUFmhG@even-i700>
 <CADRrdKtmbv+hOHNCFTuc0cH0vhF1rRYP8_hvrmDg7s+erFXU=A@mail.gmail.com>
Message-ID: <2600089.Xc1Stmfbg2@even-i700>

> I agree with you that the ellipsoidal height should refer to the proper
> geographical CRS. In this case, the "base one" for the projected CRS in the
> compound CRS. Something similar applies to other compound CRS combinations,
> where the geographical CRS reference should match the projected and the
> vertical, right?

Sorry, didn't get that.

> I would like to store those points in the projected CRS in a LAS file.
> If I just define the projected CRS (without vertical component) in the LAS,
> what should I expect to be the Z values?

I'm not sure. Something to check with people more LAS savy than me. I'd say that if there's 
no explicit vertical specification, Z values should be pretty undetermined... unless there are 
conventions in LAS about that.

> Having Projected 3D CRS in EPSG would be a solution... is there any plan
> for that? There were more than 7000 projected CRSs in EPSG. I hardly
> imagine that they duplicate that number.

I know they were considering what to do regarding that, but yes, they made likely the same 
observation that this would be overwhelming. I'm not aware of a short-term resolution for 
this, but you may check with IOGP.

> Related to this topic (I guess), if I run this "experiment",
> echo 40 -90     0 | cs2cs EPSG:4979 EPSG:8734 -f "%.6f" ==> 2343275.132900
> 1213912.862240 107.186796
> echo 40 -90 10000 | cs2cs EPSG:4979 EPSG:8734 -f "%.6f" ==> 2343275.132900
> 1213912.862240 32915.520130
> (EPSG:8734 = NAD83 / Illinois West (ftUS) + NAVD88 height (ftUS)
> <https://beta.epsg.org/crs_8734/NAD83-Illinois-West-ftUS-NAVD88-height-ftUS.
> html?sessionkey=23506x2d03> )

> I see there is no change in the x and y coordinates due to the change in z.
> If the altitude is not changing the horizontal projection, can I assume
> that the ellipsoidal height in EPSG:4979 is perpendicular to the projected
> CRS? (I know it is very unlikely).

PROJ synthesises the following pipeline for this transformation:

+proj=pipeline
	+step +proj=axisswap +order=2,1
	+step +proj=unitconvert +xy_in=deg +xy_out=rad
	+step +inv +proj=vgridshift +grids=us_noaa_geoid09_conus.tif +multiplier=1
	+step +proj=unitconvert +z_in=m +z_out=us-ft
   +step +inv +proj=hgridshift +grids=us_noaa_ilhpgn.tif
   +step +proj=tmerc +lat_0=36.6666666666667 +lon_0=-90.1666666666667
  	      +k=0.999941177 +x_0=699999.99998984 +y_0=0 +ellps=GRS80
   +step +proj=unitconvert +xy_in=m +xy_out=us-ft

So you can see that the vertical operations and horizontal ones are done independantly. 
Sometimes ago I raised on this ML the topic of using deflections of the vertical that 
accompanies some geoids, but this isn't implemented in PROJ and I'm not clear if that would 
be appropriate to use here. Basically what PROJ does follows EPSG guidelines for 
transformations, and they don't use that. So it is currently assumed that the normal to the 
ellipsoidal surface is the same as the vertical in NAVD88.

Side note: from past discussions with R. Lott, I understand that an issue with defining 
Projected 3D CRS was that the definition of the vertical direction for a Projected 3D CRS 
wasn't completely clear: should that be the one of the underlying Geographic 3D CRS, or 
something related to the projection surface that the projection method projects onto... PROJ 
more or less assumes this is the one of the underlying Geographic 3D CRS.
For a Compound CRS, there is no ambiguity: this is the one of the Vertical CRS

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200901/1666e1b8/attachment.html>

From ryan.elfman at ecometrica.com  Tue Sep  1 11:38:36 2020
From: ryan.elfman at ecometrica.com (Ryan Elfman)
Date: Tue, 1 Sep 2020 19:38:36 +0100
Subject: [PROJ] possible to auto detect possible projections from lat/lon
	coord
Message-ID: <CA+ttJDGe3eAsxG1mt3-EE53H9Uoc11hypDudrP0LBTvTnX2BCA@mail.gmail.com>

Hi Everyone,

Is it possible to do a spatial query of the proj db for a list of
projections that overlay a passed lat/lon? I have a lot of polygons in
wgs84, and being able to automatically detect and project to a
local/national crs would be great to improve area estimates etc.
Any tips would be greatly appreciated,
Thanks,
Ryan
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200901/a88da107/attachment.html>

From even.rouault at spatialys.com  Wed Sep  2 02:52:18 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 02 Sep 2020 11:52:18 +0200
Subject: [PROJ] possible to auto detect possible projections from
	lat/lon coord
In-Reply-To: <CA+ttJDGe3eAsxG1mt3-EE53H9Uoc11hypDudrP0LBTvTnX2BCA@mail.gmail.com>
References: <CA+ttJDGe3eAsxG1mt3-EE53H9Uoc11hypDudrP0LBTvTnX2BCA@mail.gmail.com>
Message-ID: <26667594.Obx1WLaJ5O@even-i700>

Ryan,

> Is it possible to do a spatial query of the proj db for a list of
> projections that overlay a passed lat/lon? I have a lot of polygons in
> wgs84, and being able to automatically detect and project to a
> local/national crs would be great to improve area estimates etc.
> Any tips would be greatly appreciated,

You can do that with
proj_get_crs_info_list_from_database()
(see https://proj.org/development/reference/functions.html),
by setting the bbox_valid, west_lon_degree, south_lat_degree, east_lon_degree
and north_lat_degree members of the provided PROJ_CRS_LIST_PARAMETERS parameter (see
https://proj.org/development/reference/datatypes.html#_CPPv424PROJ_CRS_LIST_PARAMETERS )

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200902/b9060e49/attachment.html>

From even.rouault at spatialys.com  Wed Sep  2 02:54:13 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 02 Sep 2020 11:54:13 +0200
Subject: [PROJ] Motion: adopt RFC 6
In-Reply-To: <3396504.RTC9enursF@even-i700>
References: <3396504.RTC9enursF@even-i700>
Message-ID: <6517086.JMD9gb7LzM@even-i700>

On jeudi 27 août 2020 17:36:09 CEST Even Rouault wrote:
> Hi,
> 
> I've just adjusted RFC 6 "triangulation-based transformations" to take into
> account the remaining feedback.
> 
> So, I move to adopt RFC 6 (https://github.com/OSGeo/PROJ/pull/2283)
> 

I declare this motion passed with +1 from PSC members ThomasK, CharlesK, KristianE 
and myself.

Even


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200902/fe626ca6/attachment.html>

From leiyang at fio.org.cn  Wed Sep  2 08:07:30 2020
From: leiyang at fio.org.cn (leiyang at fio.org.cn)
Date: Wed, 2 Sep 2020 23:07:30 +0800
Subject: [PROJ] How to transform the XYZ coordinate (ITRF) to
	Latitude/Longitude?
Message-ID: <202009022307289060798@fio.org.cn>

Hi, 
I am new to the Proj.
I want to transfrom the ITRF geocentric  coordinates to the Latitude/Longitude. I did not find the solution after reading the document in https://proj.org/operations/conversions/cart.html

I just found this:
echo 17.7562015132 45.3935192042 133.12 2017.8 | cct +proj=cart +ellps=GRS80
But I need the inverse transfrom. 

I guess the Proj have such function. 
Could someone help me?

Thanks.

Lei


leiyang at fio.org.cn
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200902/ac063f4b/attachment.html>

From even.rouault at spatialys.com  Wed Sep  2 14:18:55 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 02 Sep 2020 23:18:55 +0200
Subject: [PROJ] How to transform the XYZ coordinate (ITRF) to
	Latitude/Longitude?
In-Reply-To: <202009022307289060798@fio.org.cn>
References: <202009022307289060798@fio.org.cn>
Message-ID: <1675720.QbLTT7cQYu@even-i700>

Lei,

> I am new to the Proj.
> I want to transfrom the ITRF geocentric  coordinates to the
> Latitude/Longitude. I did not find the solution after reading the document
> in https://proj.org/operations/conversions/cart.html
 
> I just found this:
> echo 17.7562015132 45.3935192042 133.12 2017.8 | cct +proj=cart
> +ellps=GRS80
> But I need the inverse transfrom.
> 
> I guess the Proj have such function. 

Yes, see the -I switch : https://proj.org/apps/cct.html

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200902/ae85f125/attachment.html>

From leiyang at fio.org.cn  Wed Sep  2 17:40:47 2020
From: leiyang at fio.org.cn (leiyang at fio.org.cn)
Date: Thu, 3 Sep 2020 08:40:47 +0800
Subject: [PROJ] How to transform the XYZ coordinate (ITRF) to
	Latitude/Longitude?
References: <202009022307289060798@fio.org.cn>, <1675720.QbLTT7cQYu@even-i700>
Message-ID: <202009030840461579234@fio.org.cn>

Hi, Even
Thanks for your help. It works fine.
Now I am not very clear about the `+proj=string` meaning.  Such as `+proj=cart`.
Could give me a hint where to find the help document about this?
I would like to learn more.

Thanks

Lei



leiyang at fio.org.cn
 
From: Even Rouault
Date: 2020-09-03 05:18
To: proj
CC: leiyang at fio.org.cn
Subject: Re: [PROJ] How to transform the XYZ coordinate (ITRF) to Latitude/Longitude?
Lei,
 
> I am new to the Proj.
> I want to transfrom the ITRF geocentric coordinates to the
> Latitude/Longitude. I did not find the solution after reading the document
> in https://proj.org/operations/conversions/cart.html
> I just found this:
> echo 17.7562015132 45.3935192042 133.12 2017.8 | cct +proj=cart
> +ellps=GRS80
> But I need the inverse transfrom.
> 
> I guess the Proj have such function. 
 
Yes, see the -I switch : https://proj.org/apps/cct.html
 
Even
 
-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200903/b5475e86/attachment.html>

From phma at bezitopo.org  Thu Sep  3 21:54:51 2020
From: phma at bezitopo.org (Pierre Abbat)
Date: Fri, 04 Sep 2020 00:54:51 -0400
Subject: [PROJ] Indian foot
Message-ID: <2797892.YqazSvReao@mooncat>

PROJ disagrees with Bezitopo and PerfectTIN on the length of an Indian foot. 
PROJ says it's 0.30479841 m; PerfectTIN says it's 0.3047996 m. I got this 
figure from Wikipedia. Where did you get that one from?

Pierre
-- 
Jews use a lunisolar calendar; Muslims use a solely lunar calendar.




From j1 at jimenezshaw.com  Thu Sep  3 23:24:27 2020
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Fri, 4 Sep 2020 08:24:27 +0200
Subject: [PROJ] Indian foot
In-Reply-To: <2797892.YqazSvReao@mooncat>
References: <2797892.YqazSvReao@mooncat>
Message-ID: <CADRrdKs4d4BgQUefP65eWWb3BjE4FpzZSDu-GdnZNQuDz-K+FQ@mail.gmail.com>

Hi Pierre

There are 4 "different" Indian feet in PROJ, taken from the EPSG I guess:
https://beta.epsg.org/search/by-name?searchedTerms=indian+foot  (select the
"Units" tab. Click on "More" if you do not see it)
The foot you mention [0.30479841] is "Indian foot (1937)"
The other three are:
  Indian foot: 0.30479951024814694
  Indian foot (1962): 0.3047996
  Indian foot (1975): 0.3047995

Looking at the source code I see that the "Indian foot (1937)" is also
defined in ISO-19111

Cheers

.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.



On Fri, 4 Sep 2020 at 07:02, Pierre Abbat <phma at bezitopo.org> wrote:

> PROJ disagrees with Bezitopo and PerfectTIN on the length of an Indian
> foot.
> PROJ says it's 0.30479841 m; PerfectTIN says it's 0.3047996 m. I got this
> figure from Wikipedia. Where did you get that one from?
>
> Pierre
> --
> Jews use a lunisolar calendar; Muslims use a solely lunar calendar.
>
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200904/0f469772/attachment.html>

From henning at kaarta.com  Fri Sep  4 16:24:17 2020
From: henning at kaarta.com (henning at kaarta.com)
Date: Fri, 4 Sep 2020 19:24:17 -0400
Subject: [PROJ] Newbie cs2cs question
Message-ID: <399201d68312$827e65e0$877b31a0$@kaarta.com>

Hi all,

New to PROJ, using 7.1.1 on linux, still trying to learn the basics.

 

So it seems to me that one should get the same results from

cs2cs +init=<crs1> +to +init=<crs2> | cs2cs +init=<crs2> +to +init=<crs3>

as

cs2cs +init=<crs1> +to +init=<crs3>

 

i.e. a transform to an intermediate CRS shouldn't affect the final result,
but it seems in my case at least it does. 

E.g.

 

cs2cs -d 6 +init=epsg:4326 +to +init=epsg:7856+5711

151 -33 5

313152.777214   6346936.495810 -20.742001

 

vs.

 

cs2cs -d 6 +init=epsg:4326 +to +init=epsg:32756 | cs2cs -d 6
+init=epsg:32756 +to +init=epsg:7856+5711

151 -33 5

313153.271255   6346937.914960 -20.853001

 

Close, but off by about 1.7m. How would I know which one is correct, and why
are they different?

I must be missing something.thanks!

 

 

 



-- 
This email has been checked for viruses by AVG.
https://www.avg.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200904/429b2417/attachment.html>

From j1 at jimenezshaw.com  Sat Sep  5 01:43:04 2020
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Sat, 5 Sep 2020 10:43:04 +0200
Subject: [PROJ] Newbie cs2cs question
In-Reply-To: <399201d68312$827e65e0$877b31a0$@kaarta.com>
References: <399201d68312$827e65e0$877b31a0$@kaarta.com>
Message-ID: <CADRrdKuMisJnMk_BBUCDURwQ9Z7RhT93JLaorT5o2yDckRZnxQ@mail.gmail.com>

Hi

Something I learned this year is that those transformations are not like a
"conservative field". Many times there are "frictions", approximations,
that produce the effect you noticed. In the EPSG you can find many of those
transformations. But there is not always a direct transformation from A to
C (or different options). Definitely there are different precisions. PROJ
does its best to use the proper transformation(s), but it is not easy.
Including concatenating some of them.

AFAIK, PROJ4 always used WGS84 as the pivot CRS. Now it is more complex.

Maybe you can find more info in
https://proj.org/operations/operations_computation.html

Cheers.
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.



On Sat, 5 Sep 2020 at 01:24, <henning at kaarta.com> wrote:

> Hi all,
>
> New to PROJ, using 7.1.1 on linux, still trying to learn the basics.
>
>
>
> So it seems to me that one should get the same results from
>
> cs2cs +init=<crs1> +to +init=<crs2> | cs2cs +init=<crs2> +to +init=<crs3>
>
> as
>
> cs2cs +init=<crs1> +to +init=<crs3>
>
>
>
> i.e. a transform to an intermediate CRS shouldn’t affect the final result,
> but it seems in my case at least it does.
>
> E.g.
>
>
>
> cs2cs -d 6 +init=epsg:4326 +to +init=epsg:7856+5711
>
> 151 -33 5
>
> 313152.777214   6346936.495810 -20.742001
>
>
>
> vs.
>
>
>
> cs2cs -d 6 +init=epsg:4326 +to +init=epsg:32756 | cs2cs -d 6
> +init=epsg:32756 +to +init=epsg:7856+5711
>
> 151 -33 5
>
> 313153.271255   6346937.914960 -20.853001
>
>
>
> Close, but off by about 1.7m. How would I know which one is correct, and
> why are they different?
>
> I must be missing something…thanks!
>
>
>
>
>
>
>
>
> <http://www.avg.com/email-signature?utm_medium=email&utm_source=link&utm_campaign=sig-email&utm_content=emailclient> Virus-free.
> www.avg.com
> <http://www.avg.com/email-signature?utm_medium=email&utm_source=link&utm_campaign=sig-email&utm_content=emailclient>
> <#m_5335995481913226437_m_7380985001490801748_m_5932857843784429216_DAB4FAD8-2DD7-40BB-A1B8-4E2AA1F9FDF2>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200905/0b6b6915/attachment.html>

From even.rouault at spatialys.com  Sat Sep  5 03:04:15 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 05 Sep 2020 12:04:15 +0200
Subject: [PROJ] Newbie cs2cs question
In-Reply-To: <399201d68312$827e65e0$877b31a0$@kaarta.com>
References: <399201d68312$827e65e0$877b31a0$@kaarta.com>
Message-ID: <2121264.vif0I0csBt@even-i700>

Hi,

1) In the genral case, there is no transitivity when doing A -> B, and A -> C and then C -> B. You 
will generally not get the same result, if A, B and C are not in the same datum.

e.g:
GDA94 -> WGS 84 : null transformation (they were coincident in Jan 1st 1994)
WGS 84 -> GDA2020: null transformation (they were coincident in Jan 1st 2020)

but
GDA94 -> GDA2020: ~ 1.8m shift !

2) However, in your case, I'm not completely clear why you don't get transitivity in using 
EPSG:32756 since it uses the same datum as EPSG:4326... This seems related to using the 
deprecated +init=epsg:XXXX syntax instead of the EPSG:XXXX one (if you the EPSG:XXXX 
one, you'll need to specify the geographic coordinates in latitude, longitude order).

3) The result you get with "cs2cs -d 6 +init=epsg:4326 +to +init=epsg:7856+5711" is the 
optimal one I believe. Setting PROJ_DEBUG=3 as environment variable, I can see "
Using coordinate operation axis order change (geographic3D horizontal) + Inverse of 
GDA2020 to WGS 84 (2) + GDA2020 to AHD height (1) + Map Grid of Australia zone 56", which 
is the most reasonable option to me, using AUSGeoid2020 for the vertical adjustment.

4) But if you used the non deprecated syntax, "cs2cs -d 6 EPSG:4326 EPSG:7856+5711" you'd 
get a suboptimal result involving AGD66, GDA94 and AUSGeoid09 internal steps. I've traced 
that issue in
https://github.com/OSGeo/PROJ/issues/2348

5) If you are interested in centimer-level accuracy, and have a coordinate epoch associate 
with your WGS 84 coordinate (since WGS 84 is a dynamic datum), you'd better using EPSG:
9057 / "WGS 84 (G1762)" to get a non-null transformation between WGS 84 and GDA2020

e.g:

echo -33 151 5 2020.6 | cs2cs -d 8 "WGS 84 (G1762)" GDA2020

returns

-33.00000030	150.99999988 5.00013120 2020.6


Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200905/94848c5e/attachment.html>

From Roger.Bivand at nhh.no  Sun Sep  6 04:00:42 2020
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Sun, 6 Sep 2020 13:00:42 +0200
Subject: [PROJ] Any EPSG code for visualization order WGS84(s)?
Message-ID: <alpine.LFD.2.23.451.2009061243290.1404140@reclus.nhh.no>

There are plenty of EPSG codes for authority-conformant axis orders of 
WGS84 (not only 4326, but also 9053-9056, 9012, 9014, 9017, 9019, and 
possibly others). In userland in R (and most likely GRASS, QGIS, SAGA, 
PostGIS (?), pyproj, web mapping, etc.), visualization order is absolutely 
the most commonly used and expected.

We are starting to see visualization order points reported and saved as 
4326, with no indication that the declared CRS should have been 
axis-swapped before saving. This leads to chaos when the file is read and 
treated as real 4326 in another application.

It would be a real simplification if there was an EPSG code (or codes) for 
WGS84 GEOGCRS with visualization axis order to match the way that most 
applications have conceptualized objects up to now. For now we have ad-hoc 
work-arounds, but no way for non-global data sets to check that points are 
E/N or N/E.

Is there such an EPSG code (or codes); if not, who and how can apply to 
the "authorities" to provide support for such a wierd thing? Of course, 
having such an alternative set would permit easy coordinate operations of 
the +proj=axisswap +order=2,1 kind, but not as ad-hoc additions to 
existinng pipelines.

Many different ad-hoc fixes are less good than a single central and 
authorised resolution, and EPSG codes for visualization order WGS84-family 
GEOGCRS are clearly needed by most applications.

Any ideas?

Roger

-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From alansnow21 at gmail.com  Sun Sep  6 05:24:08 2020
From: alansnow21 at gmail.com (Alan Snow)
Date: Sun, 6 Sep 2020 07:24:08 -0500
Subject: [PROJ] Any EPSG code for visualization order WGS84(s)?
In-Reply-To: <alpine.LFD.2.23.451.2009061243290.1404140@reclus.nhh.no>
References: <alpine.LFD.2.23.451.2009061243290.1404140@reclus.nhh.no>
Message-ID: <CAGybdFTtbr19jX_-7PutN4doQfMPZ-eWvA+Lf=DqATtrKL1LLg@mail.gmail.com>

OGC:CRS84 is the equivalent to EPSG:4326 with the visualization axis order
change. It is the SRS used by GeoJSON. Should note that this only works
with GDAL 3+, PROJ 6+. Not sure about an equivalent for the other EPSG
codes.

Best,
Alan



On Sun, Sep 6, 2020, 6:08 AM Roger Bivand <Roger.Bivand at nhh.no> wrote:

> There are plenty of EPSG codes for authority-conformant axis orders of
> WGS84 (not only 4326, but also 9053-9056, 9012, 9014, 9017, 9019, and
> possibly others). In userland in R (and most likely GRASS, QGIS, SAGA,
> PostGIS (?), pyproj, web mapping, etc.), visualization order is absolutely
> the most commonly used and expected.
>
> We are starting to see visualization order points reported and saved as
> 4326, with no indication that the declared CRS should have been
> axis-swapped before saving. This leads to chaos when the file is read and
> treated as real 4326 in another application.
>
> It would be a real simplification if there was an EPSG code (or codes) for
> WGS84 GEOGCRS with visualization axis order to match the way that most
> applications have conceptualized objects up to now. For now we have ad-hoc
> work-arounds, but no way for non-global data sets to check that points are
> E/N or N/E.
>
> Is there such an EPSG code (or codes); if not, who and how can apply to
> the "authorities" to provide support for such a wierd thing? Of course,
> having such an alternative set would permit easy coordinate operations of
> the +proj=axisswap +order=2,1 kind, but not as ad-hoc additions to
> existinng pipelines.
>
> Many different ad-hoc fixes are less good than a single central and
> authorised resolution, and EPSG codes for visualization order WGS84-family
> GEOGCRS are clearly needed by most applications.
>
> Any ideas?
>
> Roger
>
> --
> Roger Bivand
> Department of Economics, Norwegian School of Economics,
> Helleveien 30, N-5045 Bergen, Norway.
> voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
> https://orcid.org/0000-0003-2392-6140
> https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200906/baae664f/attachment.html>

From even.rouault at spatialys.com  Sun Sep  6 06:12:25 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 06 Sep 2020 15:12:25 +0200
Subject: [PROJ] Any EPSG code for visualization order WGS84(s)?
In-Reply-To: <alpine.LFD.2.23.451.2009061455020.1406231@reclus.nhh.no>
References: <alpine.LFD.2.23.451.2009061243290.1404140@reclus.nhh.no>
 <1967402.POezidl6jr@even-i700>
 <alpine.LFD.2.23.451.2009061455020.1406231@reclus.nhh.no>
Message-ID: <28076535.PR7ZXJsT3A@even-i700>

On dimanche 6 septembre 2020 15:00:40 CEST Roger Bivand wrote:
> Thanks, Even and Alan,

Adding back the list

> 
> I didn't know about OGC:CRS84, and should have. However, I see the
> 
> confusing:
> > cat(wkt(CRS(SRS_string="urn:ogc:def:crs:OGC:1.3:CRS84")), "\n")
> 
> GEOGCRS["WGS 84 (CRS84)",
>      DATUM["World Geodetic System 1984",
>          ELLIPSOID["WGS 84",6378137,298.257223563,
>              LENGTHUNIT["metre",1]]],
>      PRIMEM["Greenwich",0,
>          ANGLEUNIT["degree",0.0174532925199433]],
>      CS[ellipsoidal,2],
>          AXIS["geodetic longitude (Lon)",east,
>              ORDER[1],
>              ANGLEUNIT["degree",0.0174532925199433]],
>          AXIS["geodetic latitude (Lat)",north,
>              ORDER[2],
>              ANGLEUNIT["degree",0.0174532925199433]],
>      USAGE[
>          SCOPE["unknown"],
>          AREA["World"],
>          BBOX[-90,-180,90,180]],
>      ID["OGC","CRS84"]]
> 
> usage node, with a counter-intuitive ordering of the bounding box. Is this
> a problem in terms of coordinate operation look-up? 

> Or are GEOGCRS BBOX
> minlat, minlon, maxlat, maxlon by definition, irrespecctive of axis order?

Exactly the later. See
http://docs.opengeospatial.org/is/18-010r7/18-010r7.html#33

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200906/bde0c40d/attachment.html>

From Roger.Bivand at nhh.no  Sun Sep  6 06:40:29 2020
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Sun, 6 Sep 2020 15:40:29 +0200
Subject: [PROJ] Any EPSG code for visualization order WGS84(s)?
In-Reply-To: <28076535.PR7ZXJsT3A@even-i700>
References: <alpine.LFD.2.23.451.2009061243290.1404140@reclus.nhh.no>
 <1967402.POezidl6jr@even-i700>
 <alpine.LFD.2.23.451.2009061455020.1406231@reclus.nhh.no>
 <28076535.PR7ZXJsT3A@even-i700>
Message-ID: <alpine.LFD.2.23.451.2009061539580.1406231@reclus.nhh.no>

On Sun, 6 Sep 2020, Even Rouault wrote:

> On dimanche 6 septembre 2020 15:00:40 CEST Roger Bivand wrote:
>> Thanks, Even and Alan,
>
> Adding back the list
>
>>
>> I didn't know about OGC:CRS84, and should have. However, I see the
>>
>> confusing:
>>> cat(wkt(CRS(SRS_string="urn:ogc:def:crs:OGC:1.3:CRS84")), "\n")
>>
>> GEOGCRS["WGS 84 (CRS84)",
>>      DATUM["World Geodetic System 1984",
>>          ELLIPSOID["WGS 84",6378137,298.257223563,
>>              LENGTHUNIT["metre",1]]],
>>      PRIMEM["Greenwich",0,
>>          ANGLEUNIT["degree",0.0174532925199433]],
>>      CS[ellipsoidal,2],
>>          AXIS["geodetic longitude (Lon)",east,
>>              ORDER[1],
>>              ANGLEUNIT["degree",0.0174532925199433]],
>>          AXIS["geodetic latitude (Lat)",north,
>>              ORDER[2],
>>              ANGLEUNIT["degree",0.0174532925199433]],
>>      USAGE[
>>          SCOPE["unknown"],
>>          AREA["World"],
>>          BBOX[-90,-180,90,180]],
>>      ID["OGC","CRS84"]]
>>
>> usage node, with a counter-intuitive ordering of the bounding box. Is this
>> a problem in terms of coordinate operation look-up?
>
>> Or are GEOGCRS BBOX
>> minlat, minlon, maxlat, maxlon by definition, irrespecctive of axis order?
>
> Exactly the later. See
> http://docs.opengeospatial.org/is/18-010r7/18-010r7.html#33

Thanks again, very useful.

Roger

>
>

-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From Roger.Bivand at nhh.no  Tue Sep  8 04:01:16 2020
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Tue, 8 Sep 2020 13:01:16 +0200
Subject: [PROJ] Any EPSG code for visualization order WGS84(s)?
In-Reply-To: <28076535.PR7ZXJsT3A@even-i700>
References: <alpine.LFD.2.23.451.2009061243290.1404140@reclus.nhh.no>
 <1967402.POezidl6jr@even-i700>
 <alpine.LFD.2.23.451.2009061455020.1406231@reclus.nhh.no>
 <28076535.PR7ZXJsT3A@even-i700>
Message-ID: <alpine.LFD.2.23.451.2009081254010.1434353@reclus.nhh.no>

On Sun, 6 Sep 2020, Even Rouault wrote:

> On dimanche 6 septembre 2020 15:00:40 CEST Roger Bivand wrote:
>> Thanks, Even and Alan,
>
> Adding back the list
>
>>
>> I didn't know about OGC:CRS84, and should have. However, I see the
>>
>> confusing:
>>> cat(wkt(CRS(SRS_string="urn:ogc:def:crs:OGC:1.3:CRS84")), "\n")
>>
>> GEOGCRS["WGS 84 (CRS84)",
>>      DATUM["World Geodetic System 1984",
>>          ELLIPSOID["WGS 84",6378137,298.257223563,
>>              LENGTHUNIT["metre",1]]],
>>      PRIMEM["Greenwich",0,
>>          ANGLEUNIT["degree",0.0174532925199433]],
>>      CS[ellipsoidal,2],
>>          AXIS["geodetic longitude (Lon)",east,
>>              ORDER[1],
>>              ANGLEUNIT["degree",0.0174532925199433]],
>>          AXIS["geodetic latitude (Lat)",north,
>>              ORDER[2],
>>              ANGLEUNIT["degree",0.0174532925199433]],
>>      USAGE[
>>          SCOPE["unknown"],
>>          AREA["World"],
>>          BBOX[-90,-180,90,180]],
>>      ID["OGC","CRS84"]]
>>
>> usage node, with a counter-intuitive ordering of the bounding box. Is this
>> a problem in terms of coordinate operation look-up?
>
>> Or are GEOGCRS BBOX
>> minlat, minlon, maxlat, maxlon by definition, irrespecctive of axis order?
>
> Exactly the later. See
> http://docs.opengeospatial.org/is/18-010r7/18-010r7.html#33
>

Thanks again, I'd also been puzzled that EPSG:4326 after switching to 
GIS/visualization order still had such a BBOX.

Might OGC:NAD83 and OGC:NAD27 be added to the PROJ db, as they similarly 
appear to resolve the axis order issue for EPSG:4269 and EPSG:4267? Their 
identifiers actually seem to be OGC:CRS83 and OGC:CRS83 in 
http://www.opengis.net/def/crs/OGC/1.3, but am unsure why.

Roger

>

-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From even.rouault at spatialys.com  Tue Sep  8 04:24:13 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 08 Sep 2020 13:24:13 +0200
Subject: [PROJ] Any EPSG code for visualization order WGS84(s)?
In-Reply-To: <alpine.LFD.2.23.451.2009081254010.1434353@reclus.nhh.no>
References: <alpine.LFD.2.23.451.2009061243290.1404140@reclus.nhh.no>
 <28076535.PR7ZXJsT3A@even-i700>
 <alpine.LFD.2.23.451.2009081254010.1434353@reclus.nhh.no>
Message-ID: <45718757.4jvhpfCf9y@even-i700>

> Might OGC:NAD83 and OGC:NAD27 be added to the PROJ db, as 
they similarly
> appear to resolve the axis order issue for EPSG:4269 and EPSG:4267? 
Their
> identifiers actually seem to be OGC:CRS83 and OGC:CRS83 in
> http://www.opengis.net/def/crs/OGC/1.3, but am unsure why.

Pending in https://github.com/OSGeo/PROJ/pull/2350

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200908/802d20f4/attachment.html>

From jgale at mathworks.com  Mon Sep 14 07:25:40 2020
From: jgale at mathworks.com (Jonathan Gale)
Date: Mon, 14 Sep 2020 14:25:40 +0000
Subject: [PROJ] Parameter name discrepancy
Message-ID: <BN6PR05MB35551CC4BA959B1E6A4DD9ADB2230@BN6PR05MB3555.namprd05.prod.outlook.com>

Hi PROJ list,



I've encountered a parameter discrepancy with a couple of ESRI CRS codes and I'm wondering if I've hit a bug. I'm using PROJ 6.2 and I get the following specifying Bonne via ESRI code:



projinfo ESRI:54024



PROJ.4 string:

+proj=bonne +lat_1=60 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +type=crs



WKT2_2018 string:

PROJCRS["World_Bonne",

    BASEGEOGCRS["WGS 84",

        DATUM["World Geodetic System 1984",

            ELLIPSOID["WGS 84",6378137,298.257223563,

                LENGTHUNIT["metre",1]]],

        PRIMEM["Greenwich",0,

            ANGLEUNIT["Degree",0.0174532925199433]]],

    CONVERSION["World_Bonne",

        METHOD["Bonne",

            ID["EPSG",9827]],

        PARAMETER["Latitude of natural origin",60,

            ANGLEUNIT["Degree",0.0174532925199433],

            ID["EPSG",8801]],

        PARAMETER["Longitude of natural origin",0,

            ANGLEUNIT["Degree",0.0174532925199433],

            ID["EPSG",8802]],

        PARAMETER["False easting",0,

            LENGTHUNIT["metre",1],

            ID["EPSG",8806]],

        PARAMETER["False northing",0,

            LENGTHUNIT["metre",1],

            ID["EPSG",8807]]],

    CS[Cartesian,2],

        AXIS["(E)",east,

            ORDER[1],

            LENGTHUNIT["metre",1]],

        AXIS["(N)",north,

            ORDER[2],

            LENGTHUNIT["metre",1]],

    USAGE[

        SCOPE["unknown"],

        AREA["World"],

        BBOX[-90,-180,90,180]],

    ID["ESRI",54024]]



The WKT2 string refers to a "Latitude of natural origin" parameter, but the corresponding PROJ string uses "lat_1" which, according to the PROJ doc, is a required parameter that means "First standard parallel". My understanding of this projection leads me to believe that the PROJ string is using the correct parameter name and the WKT2 is not. I have seen the same discrepancy with the Loximuthal projected CRS specified by ESRI: 54023. Is this correct? Is this a bug?



Thanks,

Jonathan

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200914/9bf45e27/attachment.html>

From even.rouault at spatialys.com  Mon Sep 14 08:11:20 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 14 Sep 2020 17:11:20 +0200
Subject: [PROJ] Parameter name discrepancy
In-Reply-To: <BN6PR05MB35551CC4BA959B1E6A4DD9ADB2230@BN6PR05MB3555.namprd05.prod.outlook.com>
References: <BN6PR05MB35551CC4BA959B1E6A4DD9ADB2230@BN6PR05MB3555.namprd05.prod.outlook.com>
Message-ID: <1897272.fdH8956s37@even-i700>

Jonathan,

Naming is always a trick subject.

Regarding Bonne,
- PROJ.4 lat_1 name come from Snyder's "Map Projections: a working manual" 
  (https://pubs.usgs.gov/pp/1395/report.pdf), which uses the term "standard parallel" (also a 
few times "central parallel"), and the phi_1 notation. See page 138-140
- The WKT2 parameter name comes from the EPSG dataset, which uses the "Latitude of 
natural origin" terminology.  See also EPSG Guidance Note 7-2
( https://drive.tiny.cloud/1/4m326iu12oa8re9cjiadxonharclteqb4mumfxj71zsttwkx/
62018e48-9da4-43e7-b598-1202cd96ec9f ), page 38, which uses phi0 / "latitude of the 
origin".
  Two different names, but that are mapped to the same maths. I'm not qualified to tell who is 
wrong / right


Regarding Loximuthal, I'm not sure where PROJ implementation comes from, but the maths 
do use lat_1. Regarding the WKT mapping, it is an artifact of GDAL WKT1 using 
"Latitude_of_origin" for the parameter name (no idea if that was appropriate), and thus the 
WKT2 equivalent has been mapped to "Latitude of natural origin" for consistency.

Even

> Hi PROJ list,
> 
> 
> 
> I've encountered a parameter discrepancy with a couple of ESRI CRS codes and
> I'm wondering if I've hit a bug. I'm using PROJ 6.2 and I get the following
> specifying Bonne via ESRI code:
> 
> 
> 
> projinfo ESRI:54024
> 
> 
> 
> PROJ.4 string:
> 
> +proj=bonne +lat_1=60 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs
> +type=crs
> 
> 
> 
> WKT2_2018 string:
> 
> PROJCRS["World_Bonne",
> 
>     BASEGEOGCRS["WGS 84",
> 
>         DATUM["World Geodetic System 1984",
> 
>             ELLIPSOID["WGS 84",6378137,298.257223563,
> 
>                 LENGTHUNIT["metre",1]]],
> 
>         PRIMEM["Greenwich",0,
> 
>             ANGLEUNIT["Degree",0.0174532925199433]]],
> 
>     CONVERSION["World_Bonne",
> 
>         METHOD["Bonne",
> 
>             ID["EPSG",9827]],
> 
>         PARAMETER["Latitude of natural origin",60,
> 
>             ANGLEUNIT["Degree",0.0174532925199433],
> 
>             ID["EPSG",8801]],
> 
>         PARAMETER["Longitude of natural origin",0,
> 
>             ANGLEUNIT["Degree",0.0174532925199433],
> 
>             ID["EPSG",8802]],
> 
>         PARAMETER["False easting",0,
> 
>             LENGTHUNIT["metre",1],
> 
>             ID["EPSG",8806]],
> 
>         PARAMETER["False northing",0,
> 
>             LENGTHUNIT["metre",1],
> 
>             ID["EPSG",8807]]],
> 
>     CS[Cartesian,2],
> 
>         AXIS["(E)",east,
> 
>             ORDER[1],
> 
>             LENGTHUNIT["metre",1]],
> 
>         AXIS["(N)",north,
> 
>             ORDER[2],
> 
>             LENGTHUNIT["metre",1]],
> 
>     USAGE[
> 
>         SCOPE["unknown"],
> 
>         AREA["World"],
> 
>         BBOX[-90,-180,90,180]],
> 
>     ID["ESRI",54024]]
> 
> 
> 
> The WKT2 string refers to a "Latitude of natural origin" parameter, but the
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200914/65adb541/attachment-0001.html>

From dalia.prizginiene at lmi.is  Wed Sep 16 03:27:46 2020
From: dalia.prizginiene at lmi.is (Dalia Prizginiene - LMI)
Date: Wed, 16 Sep 2020 10:27:46 +0000
Subject: [PROJ] ct2 format and grid_transformation.sql
Message-ID: <DB7PR09MB2506C31E1EC025C012BBDF069F210@DB7PR09MB2506.eurprd09.prod.outlook.com>

I want to be clear on these things:

Am I right that ct2 format can not be described in grid_alternatives.sql/ grid_transformation.sql/ grid_transformation_custom.sql, because there is no EPSG code for ct2 format (NTv2 format (EPSG:9615)
and GTX format (EPSG:9665))?

I can only transform ct2 format into GTG and use in proj piplines directly and also in GDAL but not in transformations where EPSG code is involved, correct?

As today all grids should be in GTG format, but  in grid_alternatives.sql/ grid_transformation.sql/ grid_transformation_custom.sql  the names of the grid are with endings .gsb and .gtx, so that mean that where EPSG code is involved GTG will be transformed back into .gsb or .gtx grid formats to perform transformation in such an applicatios as QGIS and so on (where proj is in background and EPSG codes are involved in the transformation), correct?

>From here, I can see that I can convert ct2 format into GTG, but ct2 format grid can not be decribed in  grid_alternatives.sql/ grid_transformation.sql/ grid_transformation_custom.sql and can not be used in transformation involving EPSG codes, correct?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200916/f59aa4e8/attachment.html>

From even.rouault at spatialys.com  Wed Sep 16 04:42:52 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 16 Sep 2020 13:42:52 +0200
Subject: [PROJ] ct2 format and grid_transformation.sql
In-Reply-To: <DB7PR09MB2506C31E1EC025C012BBDF069F210@DB7PR09MB2506.eurprd09.prod.outlook.com>
References: <DB7PR09MB2506C31E1EC025C012BBDF069F210@DB7PR09MB2506.eurprd09.prod.outlook.com>
Message-ID: <8227870.ijRmGDV6zc@even-i700>

Dalia,

> I want to be clear on these things:
> 
> Am I right that ct2 format can not be described in grid_alternatives.sql/
> grid_transformation.sql/ grid_transformation_custom.sql, because there is
> no EPSG code for ct2 format (NTv2 format (EPSG:9615) and GTX format
> (EPSG:9665))?
> 
> I can only transform ct2 format into GTG and use in proj piplines directly
> and also in GDAL but not in transformations where EPSG code is involved,
> correct?
> 
> As today all grids should be in GTG format, but  in grid_alternatives.sql/
> grid_transformation.sql/ grid_transformation_custom.sql  the names of the
> grid are with endings .gsb and .gtx, so that mean that where EPSG code is
> involved GTG will be transformed back into .gsb or .gtx grid formats to
> perform transformation in such an applicatios as QGIS and so on (where proj
> is in background and EPSG codes are involved in the transformation),
> correct?

No, if the grid name in EPSG is .gsb or .gtx, and grid_alternatives map it to a GTiff file in the 
proj_grid_name column, then PROJ will use the GTG file. (for backward compatibility with 
older PROJ grid packages, if the GTG file is not found, but a .gtx or .gsb filename is present in 
the old_proj_grid_name column, it will be used)

> 
> From here, I can see that I can convert ct2 format into GTG, but ct2 format
> grid can not be decribed in  grid_alternatives.sql/
> grid_transformation.sql/ grid_transformation_custom.sql and can not be used
> in transformation involving EPSG codes, correct?

if you wanted to use a .ct2 file in a custom record of "grid_transformation", you could likely 
abuse the use of the EPSG:9615 method. I don't think PROJ would mind.

In PROJ < 7.0, it was possible to register a CTable2 alternative grid name, but this has now 
been removed per the "CONSTRAINT check_grid_alternatives_grid_fromat CHECK 
(proj_grid_format IN ('GTiff', 'GTX', 'NTv2'))," because I didn't see any more use of it. You 
could probably add 'CTable2' to that list, if you really wanted, although abusing 'NTv2' should 
be just fine)


But could you explain exactly what you try to establish ? Map an existing EPSG grid 
transformation record ? Or add a new custom one ? If the later and you want to use a GTG file 
directly, you should abuse EPSG:9615 or EPSG:9665 as there's not yet any GeoTIFF method 
registered in EPSG.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200916/b20eb82c/attachment.html>

From even.rouault at spatialys.com  Wed Sep 16 10:45:45 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 16 Sep 2020 19:45:45 +0200
Subject: [PROJ] ct2 format and grid_transformation.sql
In-Reply-To: <DB7PR09MB25065E14AC061E38C290841E9F210@DB7PR09MB2506.eurprd09.prod.outlook.com>
References: <DB7PR09MB2506C31E1EC025C012BBDF069F210@DB7PR09MB2506.eurprd09.prod.outlook.com>
 <8227870.ijRmGDV6zc@even-i700>
 <DB7PR09MB25065E14AC061E38C290841E9F210@DB7PR09MB2506.eurprd09.prod.outlook.com>
Message-ID: <1636238.vSxYuf2Cp9@even-i700>

On mercredi 16 septembre 2020 15:29:51 CEST Dalia Prizginiene - LMI wrote:
> The new grid ISN93_ISN2016.ct2 is created by us now (better version of
> ISN93_ISN2016.gsb grid). It looks like it is more easier to create ct2
> grids  than gsb grids. But I am wondering is it wise approach.
> 
> So like now I have this ISN93_ISN2016.ct2 grid, I can convert to GTG format,
> and in proj-data will be this new updated ISN93_ISN2016.tiff grid (also in
> grid_alternatives I will introduce GTiff file in the proj_grid_name column)
> , but real concern is about QGIS in datum transformation(from EPSG:3057 to
> EPSG:8086), like now I can see in QGIS the line 
> +proj=pipeline....+grids=ISN93_ISN2016.gsb (but if I introduce new GTiff
> name=ISN93_ISN2016.tiff, will proj line in  QGIS will change to
> +grids=ISN93_ISN2016.tiff  instead of ISN93_ISN2016.gsb?I do not think
> so.). As I know QGIS understands only NTv2 grids, so basically I need to
> have ISN93_ISN2016.gsb file instead of ct2. So for us to go to ct2 format
> is not worth doing that I guess, correct? Because with this ct2 format we
> can somehow bypass in PROJ and GDAL, but not in QGIS. With new package of
> proj >7, QGIS still will use NTv2 format for grids not GTiff. And if we
> want to have  QGIS users, who wants to use grids, we need to provide NTv2
> format for them.

>From a methodology point of view, if you change the content of the ISN93_ISN2016 grid, it 
might be wise to call it ISN93_ISN2016_v2, and register a new transformation at EPSG, that 
will supersede the existing one. This will make tracability a bit better.

Now, if you do that, you may decide either to register a NTv2 grid, or perhaps ask EPSG to 
create a new method for GTG grids. They're aware of the PROJ work on GTG. This shouldn't 
be a problem on their side.

And then you'll add a new record to grid_alternatives to map the EPSG grid name to the 
PROJ one (which may be identical if you register to EPSG the PROJ-data GTG grid)

QGIS doesn't know anything about the format of grids. This is pure black box for it, and it just 
presents to the user the name and link returned by PROJ. With PROJ 7 and PROJ-data, QGIS 
will indirectly use GTG grids through PROJ.

You may use .ct2 as an intermediate step if it is easier for you, but I'd discourage using it for 
publication.

Even

> 
> 
> 
> From: Even Rouault [mailto:even.rouault at spatialys.com]
> Sent: 16. september 2020 11:43
> To: proj at lists.osgeo.org
> Cc: Dalia Prizginiene - LMI <dalia.prizginiene at lmi.is>
> Subject: Re: [PROJ] ct2 format and grid_transformation.sql
> 
> 
> Dalia,
> 
> > I want to be clear on these things:
> > 
> > 
> > 
> > Am I right that ct2 format can not be described in grid_alternatives.sql/
> > 
> > grid_transformation.sql/ grid_transformation_custom.sql, because there is
> > 
> > no EPSG code for ct2 format (NTv2 format (EPSG:9615) and GTX format
> > 
> > (EPSG:9665))?
> > 
> > 
> > 
> > I can only transform ct2 format into GTG and use in proj piplines directly
> > 
> > and also in GDAL but not in transformations where EPSG code is involved,
> > 
> > correct?
> > 
> > 
> > 
> > As today all grids should be in GTG format, but in grid_alternatives.sql/
> > 
> > grid_transformation.sql/ grid_transformation_custom.sql the names of the
> > 
> > grid are with endings .gsb and .gtx, so that mean that where EPSG code is
> > 
> > involved GTG will be transformed back into .gsb or .gtx grid formats to
> > 
> > perform transformation in such an applicatios as QGIS and so on (where
> > proj
> > 
> > is in background and EPSG codes are involved in the transformation),
> > 
> > correct?
> 
> No, if the grid name in EPSG is .gsb or .gtx, and grid_alternatives map it
> to a GTiff file in the proj_grid_name column, then PROJ will use the GTG
> file. (for backward compatibility with older PROJ grid packages, if the GTG
> file is not found, but a .gtx or .gsb filename is present in the
> old_proj_grid_name column, it will be used)
> > From here, I can see that I can convert ct2 format into GTG, but ct2
> > format
> > 
> > grid can not be decribed in grid_alternatives.sql/
> > 
> > grid_transformation.sql/ grid_transformation_custom.sql and can not be
> > used
> > 
> > in transformation involving EPSG codes, correct?
> 
> if you wanted to use a .ct2 file in a custom record of
> "grid_transformation", you could likely abuse the use of the EPSG:9615
> method. I don't think PROJ would mind.
> 
> 
> 
> In PROJ < 7.0, it was possible to register a CTable2 alternative grid name,
> but this has now been removed per the "CONSTRAINT
> check_grid_alternatives_grid_fromat CHECK (proj_grid_format IN ('GTiff',
> 'GTX', 'NTv2'))," because I didn't see any more use of it. You could
> probably add 'CTable2' to that list, if you really wanted, although abusing
> 'NTv2' should be just fine)
> 
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200916/ae0e8cef/attachment-0001.html>

From jmckenna at gatewaygeomatics.com  Thu Sep 17 05:20:53 2020
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Thu, 17 Sep 2020 09:20:53 -0300
Subject: [PROJ] Heads-up: new EPSG database version 10 model available now
Message-ID: <95e05396-8394-3302-3988-6f0eb3066840@gatewaygeomatics.com>

Hi all,

This is a short notice that today the new EPSG version 10 database is 
available, which is based on a new data model (ISO 19111:2019).  You can 
read about the changes at https://epsg.org/data-model-changes.html

Obviously this will require effort/time for PROJ to adapt to the 
changes, so I've created a feature request ticket to track the 
discussions and plans: https://github.com/OSGeo/PROJ/issues/2355

thanks,

-jeff



-- 
Jeff McKenna
MapServer Consulting and Training Services
co-founder of FOSS4G
http://gatewaygeo.com/





From henning at kaarta.com  Tue Sep 22 14:13:40 2020
From: henning at kaarta.com (henning at kaarta.com)
Date: Tue, 22 Sep 2020 17:13:40 -0400
Subject: [PROJ] Different results from cs2cs vs C API code
Message-ID: <089b01d69125$3f2efdb0$bd8cf910$@kaarta.com>

Hi,

I'm trying to write C++ code referencing the proj7 API, to convert a set of
lat/lon/alt points to a user-specified target CRS. Following the example in
the proj documentation, I use proj_create_crs_to_crs() to establish source
and target CRS, then proj_trans() to transform individual points. I hopes of
validating the results, I thought I should test by feeding the same input
coordinates to cs2cs on the command line, with the same CRS definitions
(using epsg:xxxx+yyyy form in both the code and the cs2cs command), but I
get different results, not outrageous but as much as dozens of meters. In
some simpler tests, using only epsg:xxxx, I can get matching results. Is
there something special about the epsg:xxxx+yyyy format that needs to be
treated differently in C++ code vs. the command line usage?

 

For example:

 

echo "-33 151 5" | cs2cs -d 8 EPSG:4326+5773 +to EPSG:7856+5711

313152.77721557              6346936.49571435 5.28067830

 

But with the same input values in the C++ code, the results are

313188.89746084268    6347047.2885914352    4.940935415625713

 

Am I missing something fundamental here?

Thanks!



-- 
This email has been checked for viruses by AVG.
https://www.avg.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200922/c5520942/attachment.html>

From even.rouault at spatialys.com  Wed Sep 23 02:48:50 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 23 Sep 2020 11:48:50 +0200
Subject: [PROJ] Different results from cs2cs vs C API code
In-Reply-To: <089b01d69125$3f2efdb0$bd8cf910$@kaarta.com>
References: <089b01d69125$3f2efdb0$bd8cf910$@kaarta.com>
Message-ID: <23222217.EvDh7PMlyo@even-i700>

On mardi 22 septembre 2020 17:13:40 CEST henning at kaarta.com wrote:
> Hi,
> 
> I'm trying to write C++ code referencing the proj7 API, to convert a set of
> lat/lon/alt points to a user-specified target CRS. Following the example in
> the proj documentation, I use proj_create_crs_to_crs() to establish source
> and target CRS, then proj_trans() to transform individual points. I hopes of
> validating the results, I thought I should test by feeding the same input
> coordinates to cs2cs on the command line, with the same CRS definitions
> (using epsg:xxxx+yyyy form in both the code and the cs2cs command), but I
> get different results, not outrageous but as much as dozens of meters. In
> some simpler tests, using only epsg:xxxx, I can get matching results. Is
> there something special about the epsg:xxxx+yyyy format that needs to be
> treated differently in C++ code vs. the command line usage?
> 
> 
> 
> For example:
> 
> 
> 
> echo "-33 151 5" | cs2cs -d 8 EPSG:4326+5773 +to EPSG:7856+5711
> 
> 313152.77721557              6346936.49571435 5.28067830
> 
> 
> 
> But with the same input values in the C++ code, the results are
> 
> 313188.89746084268    6347047.2885914352    4.940935415625713
> 
> 
> 
> Am I missing something fundamental here?

If you look at the output of
projinfo -s EPSG:4326+5773 -t EPSG:7856+5711
you can see that the first operation returned, which will be the one used here, has a time-
dependent transformation.

When you use cs2cs and do not specify it (as the 4th value in the coordinate), the time is sent 
to HUGE_VAL, which makes it not being used at all (so here as the reference epoch for the 
time-dependent Helmert transformation is 2020.0, it will be as if you specified 2020.0).
I assume in your C++ code you don't initialize the .t component of PROJ_COORD and it is by 
luck set to year 0.

see:

echo "-33 151 5 2020" | cs2cs -d 8 EPSG:4326+5773 +to EPSG:7856+5711
313152.77721557	6346936.49571435 5.28067830 2020

vs

echo "-33 151 5 0" | cs2cs -d 8 EPSG:4326+5773 +to EPSG:7856+5711
313188.89746084	6347047.28859144 4.94093542 0


Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200923/a1807f84/attachment.html>

From Karoline.Skar at kartverket.no  Wed Sep 23 04:01:52 2020
From: Karoline.Skar at kartverket.no (=?iso-8859-1?Q?Karoline_Arnfinnsdatter_Sk=E5r?=)
Date: Wed, 23 Sep 2020 11:01:52 +0000
Subject: [PROJ] Matrix Library in proj?
Message-ID: <OL1P279MB021152069AD19DDBFDBE2186FE380@OL1P279MB0211.NORP279.PROD.OUTLOOK.COM>

Hi,

The Norwegian Mapping Authority is working on getting our old reference frame, NGO1948, implemented In proj.
The transformation we want to implement is the transformation from/to EUREF89 - NGO1948
We already have a solution that works, but we have been advised to discuss the use of other libraries to solve our problem.
Some background information:

When the Norwegian Mapping Authority introduced the new geodetic datum EUREF89, it was necessary to find a proper transformation technique between the deprecated geodetic datum NGO1948 to the EUREF89. NGO1948 was significant deformed, hereby it was computed and realized in different areas of the country. A consequence of this is huge planar gaps in some counties and municipalities. The gaps are upon 2-3 meters on borders. Description and evaluation of the method are further documented in the articles see [OMathisen2002] and [OMathisen2003]. The processing is done in three steps:
1. Selection of point pairs
2. Deterministic step: 2D Helmert transformation
3. Statistic step: Smoothing Least Squared Collocation

In the solution we have now we have used an open source state of the art matrix library (EIGEN3) to compute the Helmert parameters with LSC. This process will demand inverting and other matrix operations on large matrices (40x40).
The size of the matrices are also dynamic.

At this point there is no matrix library in proj that work with large matrices. Does anyone have a suggestion on how we can solve this? Can we install external packages or do we have to write our own matrix library, so that the library is a part of the source code?

Best Regards

Karoline A. Skaar
Norwegian Mapping Authority
Tlf./mob.: 32 11 82 16/907 40 302
E-post: karoline.skar at kartverket.no<mailto:karoline.skar at kartverket.no>

www.kartverket.no<http://www.kartverket.no/>

[logo_sign]


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200923/10de3f8f/attachment-0001.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: image001.jpg
Type: image/jpeg
Size: 1605 bytes
Desc: image001.jpg
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200923/10de3f8f/attachment-0001.jpg>

From even.rouault at spatialys.com  Wed Sep 23 04:57:36 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 23 Sep 2020 13:57:36 +0200
Subject: [PROJ] Matrix Library in proj?
In-Reply-To: <OL1P279MB021152069AD19DDBFDBE2186FE380@OL1P279MB0211.NORP279.PROD.OUTLOOK.COM>
References: <OL1P279MB021152069AD19DDBFDBE2186FE380@OL1P279MB0211.NORP279.PROD.OUTLOOK.COM>
Message-ID: <20811845.oXnrSOC9Id@even-i700>

Karoline,

Have you considered using the processing you describe to derive a grid or a triangulation that 
would approximate the result your original method gives, within some accuracy you'll 
determine ?

Triangulation-based transformations are an ongoing work, that should be available soon in 
PROJ master.

The details are discussed here:
https://github.com/OSGeo/PROJ/blob/master/docs/source/community/rfc/rfc-6.rst

The implementation considered for inclusion is available at:
https://github.com/rouault/PROJ/tree/tinshift

To answer more specificaly your question about matrix operations, the GDAL library has code 
in
https://github.com/OSGeo/gdal/blob/master/gdal/alg/gdallinearsystem.cpp#L58
to solve a linear problem A . X  = B using LU decomposition

Even

> Hi,
> 
> The Norwegian Mapping Authority is working on getting our old reference
> frame, NGO1948, implemented In proj. The transformation we want to
> implement is the transformation from/to EUREF89 - NGO1948 We already have a
> solution that works, but we have been advised to discuss the use of other
> libraries to solve our problem. Some background information:
> 
> When the Norwegian Mapping Authority introduced the new geodetic datum
> EUREF89, it was necessary to find a proper transformation technique between
> the deprecated geodetic datum NGO1948 to the EUREF89. NGO1948 was
> significant deformed, hereby it was computed and realized in different
> areas of the country. A consequence of this is huge planar gaps in some
> counties and municipalities. The gaps are upon 2-3 meters on borders.
> Description and evaluation of the method are further documented in the
> articles see [OMathisen2002] and [OMathisen2003]. The processing is done in
> three steps: 1. Selection of point pairs
> 2. Deterministic step: 2D Helmert transformation
> 3. Statistic step: Smoothing Least Squared Collocation
> 
> In the solution we have now we have used an open source state of the art
> matrix library (EIGEN3) to compute the Helmert parameters with LSC. This
> process will demand inverting and other matrix operations on large matrices
> (40x40). The size of the matrices are also dynamic.
> 
> At this point there is no matrix library in proj that work with large
> matrices. Does anyone have a suggestion on how we can solve this? Can we
> install external packages or do we have to write our own matrix library, so
> that the library is a part of the source code?
> 
> Best Regards
> 
> Karoline A. Skaar
> Norwegian Mapping Authority
> Tlf./mob.: 32 11 82 16/907 40 302
> E-post: karoline.skar at kartverket.no<mailto:karoline.skar at kartverket.no>
> 
> www.kartverket.no<http://www.kartverket.no/>
> 
> [logo_sign]


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200923/9c5a3b58/attachment.html>

From nyall.dawson at gmail.com  Wed Sep 23 16:33:42 2020
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Thu, 24 Sep 2020 09:33:42 +1000
Subject: [PROJ] "Local" projection method?
Message-ID: <CAB28Ashp84YvHY6oyXw5UZUnt9W=SxQzfGQmZUHVuLUj414gBQ@mail.gmail.com>

Hi list,

I've just come across a WKT CRS definition which looks like this:

PROJCS[".....",
  GEOGCS["GCS_WGS_1984",
    DATUM["D_WGS_1984",
      SPHEROID["WGS_1984",6378137.0,298.257223563]
    ],
    PRIMEM["Greenwich",0.0],
    UNIT["Degree",0.0174532925199433]],
  PROJECTION["Local"],
  PARAMETER["False_Easting",#####.##],
  PARAMETER["False_Northing",#####.###],
  PARAMETER["Scale_Factor",1.0],
  PARAMETER["Azimuth",0.0],
  PARAMETER["Longitude_Of_Center",###.####],
  PARAMETER["Latitude_Of_Center",##.####],
  UNIT["Meter",1.0]
]

(actual values replaced by # for confidentiality).

Currently proj converts this to:

PROJCRS["...",
    BASEGEOGCRS["WGS 84",
        DATUM["World Geodetic System 1984",
            ELLIPSOID["WGS 84",6378137,298.257223563,
                LENGTHUNIT["metre",1]],
            ID["EPSG",6326]],
        PRIMEM["Greenwich",0,
            ANGLEUNIT["Degree",0.0174532925199433]]],
    CONVERSION["unnamed",
        METHOD["Local"],
         ...

Which then fails to convert any coordinates, due to the unknown "Local" method.

I've been trying to research exactly what this "Local" projection means.

There's some documentation for it here:
https://pro.arcgis.com/en/pro-app/help/mapping/properties/local.htm

Which states:

"The local projection is a specialized map projection that does not
take into account the curvature of the earth. The coordinates of the
center of the area of interest define the origin of the local
coordinate system. The plane is tangent to the spheroid at that point,
and the differences in z-values are negligible between corresponding
points on the spheroid and the plane. This map projection is the same
as the orthographic projection but supported on ellipsoids and
spheres, while the orthographic projection is supported on spheres
only."

Based on this, would it be appropriate to directly map this projection
method across to the "Orthographic" method? Or am I missing something
important?...

Nyall

From nyall.dawson at gmail.com  Wed Sep 23 16:54:04 2020
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Thu, 24 Sep 2020 09:54:04 +1000
Subject: [PROJ] "Local" projection method?
In-Reply-To: <CAB28Ashp84YvHY6oyXw5UZUnt9W=SxQzfGQmZUHVuLUj414gBQ@mail.gmail.com>
References: <CAB28Ashp84YvHY6oyXw5UZUnt9W=SxQzfGQmZUHVuLUj414gBQ@mail.gmail.com>
Message-ID: <CAB28AshrkJeiFiYM9MFOySgDR96HWd46aqBKDODp3tfgW8pSdg@mail.gmail.com>

On Thu, 24 Sep 2020 at 09:33, Nyall Dawson <nyall.dawson at gmail.com> wrote:
>

> I've been trying to research exactly what this "Local" projection means.
>
> There's some documentation for it here:
> https://pro.arcgis.com/en/pro-app/help/mapping/properties/local.htm
>

There's also this comment:
https://community.esri.com/thread/245500-the-local-projection-and-its-matehamtics#comment-898492

"EPSG is planning to add the Local projection to its registry. I've
been slowly, very slowly writing up the mathematics so that it can be
published in the 7-2 Guidance Note. I'm hoping to finish it up over
the holidays."

But that's the last mention I can find relating to this promised write up...

Nyall

From kreve at sdfe.dk  Wed Sep 23 22:42:22 2020
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 24 Sep 2020 05:42:22 +0000
Subject: [PROJ] "Local" projection method?
In-Reply-To: <CAB28Ashp84YvHY6oyXw5UZUnt9W=SxQzfGQmZUHVuLUj414gBQ@mail.gmail.com>
References: <CAB28Ashp84YvHY6oyXw5UZUnt9W=SxQzfGQmZUHVuLUj414gBQ@mail.gmail.com>
Message-ID: <5F8A0172-599C-4078-827D-B764FB8CEF73@sdfe.dk>

Nyall,

> 
> Based on this, would it be appropriate to directly map this projection
> method across to the "Orthographic" method? Or am I missing something
> important?…

Yes, it would seem so. Be aware though, the current Orthographic projection
implementation in PROJ is only valid in the spherical case. You would have to
extend that to the ellipsoidal case for the mapping described by Esri.

We’ve got an old issue [0] which contains some hints on how to go about that.

/Kristian

[0] https://github.com/OSGeo/PROJ/issues/397

From even.rouault at spatialys.com  Thu Sep 24 02:01:22 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 24 Sep 2020 11:01:22 +0200
Subject: [PROJ] "Local" projection method?
In-Reply-To: <5F8A0172-599C-4078-827D-B764FB8CEF73@sdfe.dk>
References: <CAB28Ashp84YvHY6oyXw5UZUnt9W=SxQzfGQmZUHVuLUj414gBQ@mail.gmail.com>
 <5F8A0172-599C-4078-827D-B764FB8CEF73@sdfe.dk>
Message-ID: <1848511.Drg2FHSoeU@even-i700>

On jeudi 24 septembre 2020 05:42:22 CEST Kristian Evers wrote:
> Nyall,
> 
> 
> > 
> > Based on this, would it be appropriate to directly map this projection
> > method across to the "Orthographic" method? Or am I missing something
> > important?…
> 
> 
> Yes, it would seem so. Be aware though, the current Orthographic projection
> implementation in PROJ is only valid in the spherical case. You would have
> to extend that to the ellipsoidal case for the mapping described by Esri. 
> We’ve got an old issue [0] which contains some hints on how to go about
> that.

"Recent" EPSG guidance note 7.2

https://drive.tiny.cloud/1/4m326iu12oa8re9cjiadxonharclteqb4mumfxj71zsttwkx/
62018e48-9da4-43e7-b598-1202cd96ec9f

(link got from epsg.org)

has the maths for the ellipsoidal formulation of the orthographic projection in paragraph 
3.3.5, page 89

I cannot comment on the full equivalence of the "Local" projection, but hopefully in the 
Scale_Factor=1 + Azimuth=0 case, they would match.

One way to check that the theory local = ortho on the sphere is valid would be to use ArcGIS 
with a sphere as the ellipsoid and compare results with +proj=ortho

Other point:
Looking at
https://pro.arcgis.com/en/pro-app/help/mapping/properties/orthographic.htm ,
there's the Auxiliary Sphere Type parameter that can be used to change how orthographic is 
computed on an ellipsoid, but I'm not sure any of the listed method is equivalent to the 
ellipsoidal formulation from EPSG, as the ellipsoidal formulation from EPSG doesn't seem to 
use authalic latitude.


Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200924/79f34b3e/attachment.html>

From ndzinn at comcast.net  Thu Sep 24 03:39:07 2020
From: ndzinn at comcast.net (Noel Zinn (cc))
Date: Thu, 24 Sep 2020 05:39:07 -0500
Subject: [PROJ] "Local" projection method?
In-Reply-To: <1848511.Drg2FHSoeU@even-i700>
References: <CAB28Ashp84YvHY6oyXw5UZUnt9W=SxQzfGQmZUHVuLUj414gBQ@mail.gmail.com>
 <5F8A0172-599C-4078-827D-B764FB8CEF73@sdfe.dk> <1848511.Drg2FHSoeU@even-i700>
Message-ID: <569E965D88A4412EBD3A72AB79E1F812@NoelDellPC>

Here’s more on the Ellipsoidal Orthographic FYI:

http://www.hydrometronics.com/downloads/Ellipsoidal%20Orthographic%20Projection.pdf

Esri refer to this as their Local Cartesian Projection.

No need for authalic latitude in the ellipsoidal case.

Noel Zinn, Principal, Hydrometronics LLC
+1-832-539-1472 (office), +1-281-221-0051 (cell)
noel.zinn at hydrometronics.com (email)
http://www.hydrometronics.com (website)


From: Even Rouault 
Sent: Thursday, September 24, 2020 4:01 AM
To: proj at lists.osgeo.org 
Subject: Re: [PROJ] "Local" projection method?

On jeudi 24 septembre 2020 05:42:22 CEST Kristian Evers wrote:

> Nyall,

> 

> 

> > 

> > Based on this, would it be appropriate to directly map this projection

> > method across to the "Orthographic" method? Or am I missing something

> > important?…

> 

> 

> Yes, it would seem so. Be aware though, the current Orthographic projection

> implementation in PROJ is only valid in the spherical case. You would have

> to extend that to the ellipsoidal case for the mapping described by Esri. 

> We’ve got an old issue [0] which contains some hints on how to go about

> that.



"Recent" EPSG guidance note 7.2



https://drive.tiny.cloud/1/4m326iu12oa8re9cjiadxonharclteqb4mumfxj71zsttwkx/62018e48-9da4-43e7-b598-1202cd96ec9f



(link got from epsg.org)



has the maths for the ellipsoidal formulation of the orthographic projection in paragraph 3.3.5, page 89



I cannot comment on the full equivalence of the "Local" projection, but hopefully in the Scale_Factor=1 + Azimuth=0 case, they would match.



One way to check that the theory local = ortho on the sphere is valid would be to use ArcGIS with a sphere as the ellipsoid and compare results with +proj=ortho



Other point:

Looking at

https://pro.arcgis.com/en/pro-app/help/mapping/properties/orthographic.htm ,

there's the Auxiliary Sphere Type parameter that can be used to change how orthographic is computed on an ellipsoid, but I'm not sure any of the listed method is equivalent to the ellipsoidal formulation from EPSG, as the ellipsoidal formulation from EPSG doesn't seem to use authalic latitude.





Even



-- 

Spatialys - Geospatial professional services

http://www.spatialys.com



--------------------------------------------------------------------------------
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200924/761b7a70/attachment-0001.html>

From luis.de.sousa at protonmail.ch  Thu Sep 24 10:47:04 2020
From: luis.de.sousa at protonmail.ch (=?utf-8?Q?Lu=C3=AD=C2=ADs_Moreira_de_Sousa?=)
Date: Thu, 24 Sep 2020 17:47:04 +0000
Subject: [PROJ] "Local" projection method?
In-Reply-To: <CAB28AshrkJeiFiYM9MFOySgDR96HWd46aqBKDODp3tfgW8pSdg@mail.gmail.com>
References: <CAB28Ashp84YvHY6oyXw5UZUnt9W=SxQzfGQmZUHVuLUj414gBQ@mail.gmail.com>
 <CAB28AshrkJeiFiYM9MFOySgDR96HWd46aqBKDODp3tfgW8pSdg@mail.gmail.com>
Message-ID: <7Xe_puo_ACCDzTqInbRLOxBkeGpoMAeN7RRbd2EQ_WVAfgDlFeb3mB7QN-DO2PR4Ps-cSwJG6IvGGCetTPQNOgbu6-HbvaQYAjmAkW-v0OA=@protonmail.ch>

Hi Nyall,

while I am not an oracle, I never before seen this projection called that way. It is one of the oldest projections used in cartography, was called different names in history, but "Local" is the first I see. Currently, the extensive CRS database from ESRI does not include a single system composed by a "Local" projection, although it contains many with "Orthographic".

My best guess is ESRI having used the term "Local" referring to a particular parametrisation of the Orthographic. It might be helpful to contact the company about this.

Regards.

--
Luís

‐‐‐‐‐‐‐ Original Message ‐‐‐‐‐‐‐
On Thursday, September 24, 2020 1:54 AM, Nyall Dawson <nyall.dawson at gmail.com> wrote:

> On Thu, 24 Sep 2020 at 09:33, Nyall Dawson nyall.dawson at gmail.com wrote:
>
> >
>
> > I've been trying to research exactly what this "Local" projection means.
> > There's some documentation for it here:
> > https://pro.arcgis.com/en/pro-app/help/mapping/properties/local.htm
>
> There's also this comment:
> https://community.esri.com/thread/245500-the-local-projection-and-its-matehamtics#comment-898492
>
> "EPSG is planning to add the Local projection to its registry. I've
> been slowly, very slowly writing up the mathematics so that it can be
> published in the 7-2 Guidance Note. I'm hoping to finish it up over
> the holidays."
>
> But that's the last mention I can find relating to this promised write up...
>
> Nyall
>
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj



From j1 at jimenezshaw.com  Thu Sep 24 11:04:42 2020
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Thu, 24 Sep 2020 20:04:42 +0200
Subject: [PROJ] "Local" projection method?
In-Reply-To: <1848511.Drg2FHSoeU@even-i700>
References: <CAB28Ashp84YvHY6oyXw5UZUnt9W=SxQzfGQmZUHVuLUj414gBQ@mail.gmail.com>
 <5F8A0172-599C-4078-827D-B764FB8CEF73@sdfe.dk> <1848511.Drg2FHSoeU@even-i700>
Message-ID: <CADRrdKt_Ci6w4WLr6Gv1R0LOEFxqdDvqraq9gWcF0w3+XJyXxA@mail.gmail.com>

Using "Orthographic" instead of "Local" seems to work. At least returns
some values that make sense.
However the parameter "Azimuth" is not used. Is there any reason for that?
I was expecting just a rotation of the input before continuing with the
transformation.

Thanks
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Entre dos pensamientos racionales
hay infinitos pensamientos irracionales.



On Thu, 24 Sep 2020 at 11:01, Even Rouault <even.rouault at spatialys.com>
wrote:

> On jeudi 24 septembre 2020 05:42:22 CEST Kristian Evers wrote:
>
> > Nyall,
>
> >
>
> >
>
> > >
>
> > > Based on this, would it be appropriate to directly map this projection
>
> > > method across to the "Orthographic" method? Or am I missing something
>
> > > important?…
>
> >
>
> >
>
> > Yes, it would seem so. Be aware though, the current Orthographic
> projection
>
> > implementation in PROJ is only valid in the spherical case. You would
> have
>
> > to extend that to the ellipsoidal case for the mapping described by
> Esri.
>
> > We’ve got an old issue [0] which contains some hints on how to go about
>
> > that.
>
>
>
> "Recent" EPSG guidance note 7.2
>
>
>
>
> https://drive.tiny.cloud/1/4m326iu12oa8re9cjiadxonharclteqb4mumfxj71zsttwkx/62018e48-9da4-43e7-b598-1202cd96ec9f
>
>
>
> (link got from epsg.org)
>
>
>
> has the maths for the ellipsoidal formulation of the orthographic
> projection in paragraph 3.3.5, page 89
>
>
>
> I cannot comment on the full equivalence of the "Local" projection, but
> hopefully in the Scale_Factor=1 + Azimuth=0 case, they would match.
>
>
>
> One way to check that the theory local = ortho on the sphere is valid
> would be to use ArcGIS with a sphere as the ellipsoid and compare results
> with +proj=ortho
>
>
>
> Other point:
>
> Looking at
>
> https://pro.arcgis.com/en/pro-app/help/mapping/properties/orthographic.htm
> ,
>
> there's the Auxiliary Sphere Type parameter that can be used to change how
> orthographic is computed on an ellipsoid, but I'm not sure any of the
> listed method is equivalent to the ellipsoidal formulation from EPSG, as
> the ellipsoidal formulation from EPSG doesn't seem to use authalic latitude.
>
>
>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200924/93a9af49/attachment.html>

From maris.nartiss at gmail.com  Fri Sep 25 05:22:40 2020
From: maris.nartiss at gmail.com (=?UTF-8?B?TcSBcmlzIE5hcnRpxaFz?=)
Date: Fri, 25 Sep 2020 15:22:40 +0300
Subject: [PROJ] Pipeline from "Local" projection to EPSG:4326
Message-ID: <CAJHE3DoGi=ZZdCnfReF=MQjAXxmhmYxM8Uejurd5pyxXeLm+FA@mail.gmail.com>

Hello folks,
I got a dataset with custom CRS in "Local" projection and have been
trying unsuccessfully to set up a pipeline to transform coordinates
into 4326.
To get correct results in ArcGIS, I have to select two transformations
– EPSG:15844 followed by EPSG:15843
I was trying various ways how to create pipeline for testing with
cs2cs/cct in 6.3.1 but no luck. As pipelines are a new feature, there
are not so many examples floating around unfortunately – didn't manage
to get syntax right.

Thus:
1) how should such pipeline look like? (looking at shapefile
transformed with ArcGIS, a point from 22000 77000 should land at
69.2642191 41.3335608)
2) how to make it "default" pipeline for the source CRS for all proj
utilizing tools (ogr2ogr, QGIS etc.)?

Here's content of .prj file:
PROJCS["Local_Tashkent",GEOGCS["GCS_Pulkovo_1942",DATUM["D_Pulkovo_1942",SPHEROID["Krasovsky_1940",6378245.0,298.3]],PRIMEM["Greenwich",0.0],UNIT["Degree",0.0174532925199433]],PROJECTION["Local"],PARAMETER["False_Easting",24547.608],PARAMETER["False_Northing",76540.608],PARAMETER["Scale_Factor",1.0],PARAMETER["Azimuth",0.0],PARAMETER["Longitude_Of_Center",69.295403],PARAMETER["Latitude_Of_Center",41.329238],UNIT["Meter",1.0]]

Thanks,
Māris.

From even.rouault at spatialys.com  Fri Sep 25 08:42:34 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 25 Sep 2020 17:42:34 +0200
Subject: [PROJ] Pipeline from "Local" projection to EPSG:4326
In-Reply-To: <CAJHE3DoGi=ZZdCnfReF=MQjAXxmhmYxM8Uejurd5pyxXeLm+FA@mail.gmail.com>
References: <CAJHE3DoGi=ZZdCnfReF=MQjAXxmhmYxM8Uejurd5pyxXeLm+FA@mail.gmail.com>
Message-ID: <16188674.yARrKCgaBP@even-i700>

On vendredi 25 septembre 2020 15:22:40 CEST Māris Nartišs wrote:
> Hello folks,
> I got a dataset with custom CRS in "Local" projection and have been
> trying unsuccessfully to set up a pipeline to transform coordinates
> into 4326.

See discussion thread
https://lists.osgeo.org/pipermail/proj/2020-September/thread.html#9818
in case you missed it

> To get correct results in ArcGIS, I have to select two transformations
> – EPSG:15844 followed by EPSG:15843
> I was trying various ways how to create pipeline for testing with
> cs2cs/cct in 6.3.1 but no luck. As pipelines are a new feature, there
> are not so many examples floating around unfortunately – didn't manage
> to get syntax right.
> 
> Thus:
> 1) how should such pipeline look like? (looking at shapefile
> transformed with ArcGIS, a point from 22000 77000 should land at
> 69.2642191 41.3335608)

> 
> Here's content of .prj file:
> PROJCS["Local_Tashkent",GEOGCS["GCS_Pulkovo_1942",DATUM["D_Pulkovo_1942",SPH
> EROID["Krasovsky_1940",6378245.0,298.3]],PRIMEM["Greenwich",0.0],UNIT["Degre
> e",0.0174532925199433]],PROJECTION["Local"],PARAMETER["False_Easting",24547.
> 608],PARAMETER["False_Northing",76540.608],PARAMETER["Scale_Factor",1.0],PAR
> AMETER["Azimuth",0.0],PARAMETER["Longitude_Of_Center",69.295403],PARAMETER["
> Latitude_Of_Center",41.329238],UNIT["Meter",1.0]]

Changing in your above WKT "Local" to "Orthographic",


projinfo -s 
'PROJCS["Local_Tashkent",GEOGCS["GCS_Pulkovo_1942",DATUM["D_Pulkovo_1942",SPHER
OID["Krasovsky_1940",6378245.0,298.3]],PRIMEM["Greenwich",0.0],UNIT["Degree",
0.0174532925199433]],PROJECTION["Orthographic"],PARAMETER["False_Easting",
24547.608],PARAMETER["False_Northing",76540.608],PARAMETER["Scale_Factor",
1.0],PARAMETER["Azimuth",0.0],PARAMETER["Longitude_Of_Center",
69.295403],PARAMETER["Latitude_Of_Center",41.329238],UNIT["Meter",1.0]]' -t EPSG:4326 
--spatial-test intersects 

gives:


Candidate operations found: 12
-------------------------------------
Operation No. 1:

unknown id, Inverse of unnamed + axis order change (2D) + Pulkovo 1942 to WGS 84 (16), 4.5 
m, Europe - FSU onshore

PROJ string:
+proj=pipeline +step +inv +proj=ortho +lat_0=41.329238 +lon_0=69.295403 +x_0=24547.608 
+y_0=76540.608 +ellps=krass +step +proj=push +v_3 +step +proj=cart +ellps=krass +step 
+proj=helmert +x=25 +y=-141 +z=-78.5 +rx=0 +ry=-0.35 +rz=-0.736 +s=0 
+convention=coordinate_frame +step +inv +proj=cart +ellps=WGS84 +step +proj=pop +v_3 
+step +proj=unitconvert +xy_in=rad +xy_out=deg +step +proj=axisswap +order=2,1

[...]

            REMARK["Derived via PZ-90 at 30 stations throughout USSR (Former Soviet Union, 
FSU) through concatenation of Pulkovo 1942 to PZ-90 (1) (tfm code 15844) and PZ-90 to WGS 
84 (1) (tfm code 15843)."]]],
[...]


Which must be as close as you wish

echo "22000 77000 0" | cct -d 8 +proj=pipeline +step +inv +proj=ortho +lat_0=41.329238 
+lon_0=69.295403 +x_0=24547.608 +y_0=76540.608 +ellps=krass +step +proj=push +v_3 
+step +proj=cart +ellps=krass +step +proj=helmert +x=25 +y=-141 +z=-78.5 +rx=0 +ry=-0.35 
+rz=-0.736 +s=0 +convention=coordinate_frame +step +inv +proj=cart +ellps=WGS84 +step 
+proj=pop +v_3 +step +proj=unitconvert +xy_in=rad +xy_out=deg +step +proj=axisswap 
+order=2,1

  41.33355118    69.26417454    0.00000000           inf

This isn't exactly the coordinates you mention, probably due to the issue of PROJ ortho not 
implementing the ellipsoidal formulation whereas ESRI Local does.

> 2) how to make it "default" pipeline for the source CRS for all proj
> utilizing tools (ogr2ogr, QGIS etc.)?

This is a tricky aspect. The current philosophy is that you either trust PROJ automated way to 
select the right pipeline (PROJ's cs2cs, GDAL utilities with no explicit pipeline, etc.), or you 
choose it yourself (with PROJ's cct utility, GDAL's ogr2ogr/gdalwarp -ct switch, QGIS UI datum 
change preference dialog box)
You could manage to change PROJ's default by tweeking PROJ's db. Either by adding a new 
record to it with a better accuracy than the ones present, or modifying the accuracy of an 
existing transform to be better than the best one presented by PROJ

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200925/769734b9/attachment.html>

From maris.nartiss at gmail.com  Fri Sep 25 10:04:22 2020
From: maris.nartiss at gmail.com (=?UTF-8?B?TcSBcmlzIE5hcnRpxaFz?=)
Date: Fri, 25 Sep 2020 20:04:22 +0300
Subject: [PROJ] Pipeline from "Local" projection to EPSG:4326
In-Reply-To: <16188674.yARrKCgaBP@even-i700>
References: <CAJHE3DoGi=ZZdCnfReF=MQjAXxmhmYxM8Uejurd5pyxXeLm+FA@mail.gmail.com>
 <16188674.yARrKCgaBP@even-i700>
Message-ID: <CAJHE3DrOJ7dOY31Y19vJOpA_WLCY_syMrEzsPpSAbbfRwMS9pA@mail.gmail.com>

Hello Even,

2020-09-25 18:42 GMT+03:00, Even Rouault <even.rouault at spatialys.com>:
> On vendredi 25 septembre 2020 15:22:40 CEST Māris Nartišs wrote:
>
> See discussion thread
> https://lists.osgeo.org/pipermail/proj/2020-September/thread.html#9818
> in case you missed it

Thanks, I already seen that.

> Which must be as close as you wish
>
> echo "22000 77000 0" | cct -d 8 +proj=pipeline +step +inv +proj=ortho
> +lat_0=41.329238
> +lon_0=69.295403 +x_0=24547.608 +y_0=76540.608 +ellps=krass +step +proj=push
> +v_3
> +step +proj=cart +ellps=krass +step +proj=helmert +x=25 +y=-141 +z=-78.5
> +rx=0 +ry=-0.35
> +rz=-0.736 +s=0 +convention=coordinate_frame +step +inv +proj=cart
> +ellps=WGS84 +step
> +proj=pop +v_3 +step +proj=unitconvert +xy_in=rad +xy_out=deg +step
> +proj=axisswap
> +order=2,1

I was so close :-(

> This isn't exactly the coordinates you mention, probably due to the issue of
> PROJ ortho not
> implementing the ellipsoidal formulation whereas ESRI Local does.

Most likely. If I replaced +proj=ortho with +proj=tmerc, it would give
exact coordinates I mentioned.

>
>> 2) how to make it "default" pipeline for the source CRS for all proj
>> utilizing tools (ogr2ogr, QGIS etc.)?
>
> This is a tricky aspect. The current philosophy is that you either trust
> PROJ automated way to
> select the right pipeline (PROJ's cs2cs, GDAL utilities with no explicit
> pipeline, etc.), or you
> choose it yourself (with PROJ's cct utility, GDAL's ogr2ogr/gdalwarp -ct
> switch, QGIS UI datum
> change preference dialog box)
> You could manage to change PROJ's default by tweeking PROJ's db. Either by
> adding a new
> record to it with a better accuracy than the ones present, or modifying the
> accuracy of an
> existing transform to be better than the best one presented by PROJ

Thanks for detailed explanation.
Māris.

From even.rouault at spatialys.com  Fri Sep 25 14:01:59 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 25 Sep 2020 23:01:59 +0200
Subject: [PROJ] "Local" projection method?
In-Reply-To: <1848511.Drg2FHSoeU@even-i700>
References: <CAB28Ashp84YvHY6oyXw5UZUnt9W=SxQzfGQmZUHVuLUj414gBQ@mail.gmail.com>
 <5F8A0172-599C-4078-827D-B764FB8CEF73@sdfe.dk> <1848511.Drg2FHSoeU@even-i700>
Message-ID: <2300443.36qkSNvKGB@even-i700>

On jeudi 24 septembre 2020 11:01:22 CEST Even Rouault wrote:
> On jeudi 24 septembre 2020 05:42:22 CEST Kristian Evers wrote:
> > Nyall,
> > 
> > > Based on this, would it be appropriate to directly map this projection
> > > method across to the "Orthographic" method? Or am I missing something
> > > important?…
> > 
> > Yes, it would seem so. Be aware though, the current Orthographic
> > projection
> > implementation in PROJ is only valid in the spherical case. You would have
> > to extend that to the ellipsoidal case for the mapping described by Esri.
> > We’ve got an old issue [0] which contains some hints on how to go about
> > that.
> 
> "Recent" EPSG guidance note 7.2
> 
> https://drive.tiny.cloud/1/4m326iu12oa8re9cjiadxonharclteqb4mumfxj71zsttwkx/
> 62018e48-9da4-43e7-b598-1202cd96ec9f
> 
> (link got from epsg.org)
> 
> has the maths for the ellipsoidal formulation of the orthographic projection
> in paragraph 3.3.5, page 89

I gave this a try at https://github.com/OSGeo/PROJ/pull/2361
with mapping from ESRI WKT Local to +proj=ortho

> 
> I cannot comment on the full equivalence of the "Local" projection, but
> hopefully in the Scale_Factor=1 + Azimuth=0 case, they would match.
> 
> One way to check that the theory local = ortho on the sphere is valid would
> be to use ArcGIS with a sphere as the ellipsoid and compare results with
> +proj=ortho

I get now with
https://lists.osgeo.org/pipermail/proj/2020-September/009827.html
the expected result of
https://lists.osgeo.org/pipermail/proj/2020-September/009825.html

echo "22000 77000 0" | src/cct -d 8 +proj=pipeline +step +inv +proj=ortho +lat_0=41.329238 
+lon_0=69.295403 +x_0=24547.608 +y_0=76540.608 +ellps=krass +step +proj=push +v_3 
+step +proj=cart +ellps=krass +step +proj=helmert +x=25 +y=-141 +z=-78.5 +rx=0 +ry=-0.35 
+rz=-0.736 +s=0 +convention=coordinate_frame +step +inv +proj=cart +ellps=WGS84 +step 
+proj=pop +v_3 +step +proj=unitconvert +xy_in=rad +xy_out=deg +step +proj=axisswap 
+order=2,1
  41.33356081    69.26421906    0.00000000           inf

Which is indeed the same result as with +proj=tmerc, due to the point being close to the 
projection center.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200925/acc1b306/attachment.html>

From nyall.dawson at gmail.com  Fri Sep 25 17:35:39 2020
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Sat, 26 Sep 2020 10:35:39 +1000
Subject: [PROJ] "Local" projection method?
In-Reply-To: <2300443.36qkSNvKGB@even-i700>
References: <CAB28Ashp84YvHY6oyXw5UZUnt9W=SxQzfGQmZUHVuLUj414gBQ@mail.gmail.com>
 <5F8A0172-599C-4078-827D-B764FB8CEF73@sdfe.dk> <1848511.Drg2FHSoeU@even-i700>
 <2300443.36qkSNvKGB@even-i700>
Message-ID: <CAB28AsjD1rUtAp=dMCHj1aZvkV2hD2d3u7FF14NTm2Zecfffog@mail.gmail.com>

On Sat, 26 Sep 2020 at 07:02, Even Rouault <even.rouault at spatialys.com> wrote:
>
> On jeudi 24 septembre 2020 11:01:22 CEST Even Rouault wrote:
>
> > On jeudi 24 septembre 2020 05:42:22 CEST Kristian Evers wrote:
>
> > > Nyall,
>
> > >
>
> > > > Based on this, would it be appropriate to directly map this projection
>
> > > > method across to the "Orthographic" method? Or am I missing something
>
> > > > important?…
>
> > >
>
> > > Yes, it would seem so. Be aware though, the current Orthographic
>
> > > projection
>
> > > implementation in PROJ is only valid in the spherical case. You would have
>
> > > to extend that to the ellipsoidal case for the mapping described by Esri.
>
> > > We’ve got an old issue [0] which contains some hints on how to go about
>
> > > that.
>
> >
>
> > "Recent" EPSG guidance note 7.2
>
> >
>
> > https://drive.tiny.cloud/1/4m326iu12oa8re9cjiadxonharclteqb4mumfxj71zsttwkx/
>
> > 62018e48-9da4-43e7-b598-1202cd96ec9f
>
> >
>
> > (link got from epsg.org)
>
> >
>
> > has the maths for the ellipsoidal formulation of the orthographic projection
>
> > in paragraph 3.3.5, page 89
>
>
>
> I gave this a try at https://github.com/OSGeo/PROJ/pull/2361
>
> with mapping from ESRI WKT Local to +proj=ortho

Thanks Even -- that's much appreciated!!

Nyall

From even.rouault at spatialys.com  Sat Sep 26 03:31:59 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 26 Sep 2020 12:31:59 +0200
Subject: [PROJ] Ellipsoidal orthographic: condition of projectability ?
Message-ID: <4630635.WFuYFDy6ta@even-i700>

Hi,

In https://github.com/OSGeo/PROJ/pull/2361, I've implemented the ellipsoidal formulation 
of the orthographic projection from the formulas from EPSG guidance note 7-2, but one 
missing piece is the condition of projectability.

In the spherical formulation, there is a test to check that a given (lam, phi) is visible from the 
projection plane or not. 
https://github.com/rouault/PROJ/blob/2e104e092578347de11208e9a3a80a3bf711265d/
src/projections/ortho.cpp#L53
It seems it comes from https://pubs.usgs.gov/pp/1395/report.pdf equation (5-3), page 149

Looking at the formula, one can observe that it is actually the (opposite of the) partial 
derivative of y(lam, phi, phi0) with respect to phi0.
But perhaps this is just a coincidence due to the spherical case.

Now, the question... What about the ellipsoidal case:
- Should the exact same formula (Q->sinph0 * sinphi + Q->cosph0 * cosphi * coslam < - EPS10) 
of the spherical case be used as well ?
- Or should we compute the partial derivative of y(lam, phi, phi0) with respect to phi0 with 
the ellipsoidal formula of y from
https://github.com/rouault/PROJ/blob/2e104e092578347de11208e9a3a80a3bf711265d/
src/projections/ortho.cpp#L136 (will not be pretty...)
- something else ?

Even


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200926/d21e11d0/attachment.html>

From charles at karney.com  Sat Sep 26 05:00:40 2020
From: charles at karney.com (Charles Karney)
Date: Sat, 26 Sep 2020 08:00:40 -0400
Subject: [PROJ] Ellipsoidal orthographic: condition of projectability ?
In-Reply-To: <4630635.WFuYFDy6ta@even-i700>
References: <4630635.WFuYFDy6ta@even-i700>
Message-ID: <a93b920c-a9f9-56c6-0693-9fb76604e5bd@karney.com>

The visibility condition is simple:

Just take the dot product of the normal to the ellipsoid

   [cos(phi)*cos(lambda), cos(phi)*sin(lambda), sin(phi)]

at the center of the projection and at the test point.

   Positive = visible; zero = horizon; negative = hidden.

This is the same as the spherical formula.  But I hope that this
formulation explains why.

   --Charles

On 9/26/20 6:31 AM, Even Rouault wrote:
> Hi,
> 
> In https://github.com/OSGeo/PROJ/pull/2361, I've implemented the 
> ellipsoidal formulation of the orthographic projection from the formulas 
> from EPSG guidance note 7-2, but one missing piece is the condition of 
> projectability.
> 
> In the spherical formulation, there is a test to check that a given 
> (lam, phi) is visible from the projection plane or not.
> 
> https://github.com/rouault/PROJ/blob/2e104e092578347de11208e9a3a80a3bf711265d/src/projections/ortho.cpp#L53
> 
> It seems it comes from https://pubs.usgs.gov/pp/1395/report.pdf equation 
> (5-3), page 149
> 
> Looking at the formula, one can observe that it is actually the 
> (opposite of the) partial derivative of y(lam, phi, phi0) with respect 
> to phi0.
> 
> But perhaps this is just a coincidence due to the spherical case.
> 
> Now, the question... What about the ellipsoidal case:
> 
> - Should the exact same formula (Q->sinph0 * sinphi + Q->cosph0 * cosphi 
> * coslam < - EPS10) of the spherical case be used as well ?
> 
> - Or should we compute the partial derivative of y(lam, phi, phi0) with 
> respect to phi0 with the ellipsoidal formula of y from
> 
> https://github.com/rouault/PROJ/blob/2e104e092578347de11208e9a3a80a3bf711265d/src/projections/ortho.cpp#L136 
> (will not be pretty...)
> 
> - something else ?
> 
> Even
> 

