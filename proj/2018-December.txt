From support at mnspoint.com  Mon Dec  3 05:23:46 2018
From: support at mnspoint.com (support at mnspoint.com)
Date: Mon, 03 Dec 2018 14:23:46 +0100
Subject: [PROJ] [SPAM] [Proj] PROJ mailing list migrated to
	@lists.osgeo.org
In-Reply-To: <1715992.J2X14QHjyo@even-i700>
References: <1715992.J2X14QHjyo@even-i700>
Message-ID: <66ad3c2221e459fa69f1bafbaafff6aa@mnspoint.com>

Hello,

looks like my mail service is adding [SPAM] in front of these new list 
messages!!??

The old list service used to just have [Proj] in front of the message 
header. Might be some kind of an error somewhere ... at least this used 
to be first class mail?!

Janne.

---------------------------------------------

Even Rouault kirjoitti 2018-11-30 10:55:
> Hi,
> 
> As previously announced, the PROJ mailing list is now at
> 
> proj at lists.osgeo.org
> 
> You should already have received an automatic welcome message. Please 
> no
> longer use the old list (has been put in "emergency mode" to 
> effectively
> disable it)
> 
> The message archive has been migrated to
> https://lists.osgeo.org/pipermail/proj/
> 
> Even

-- 
MNS Support
NNS Master Navigator Software
Copyright © Sapper Oy
www.mnspoint.com
support at mnspoint.com

From even.rouault at spatialys.com  Mon Dec  3 12:08:18 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 03 Dec 2018 21:08:18 +0100
Subject: [PROJ] [SPAM] [Proj] PROJ mailing list migrated to
	@lists.osgeo.org
In-Reply-To: <66ad3c2221e459fa69f1bafbaafff6aa@mnspoint.com>
References: <1715992.J2X14QHjyo@even-i700>
 <66ad3c2221e459fa69f1bafbaafff6aa@mnspoint.com>
Message-ID: <28075037.WofFcPN502@even-i700>

On lundi 3 décembre 2018 14:23:46 CET support at mnspoint.com wrote:
> Hello,
> 
> looks like my mail service is adding [SPAM] in front of these new list
> messages!!??
> 
> The old list service used to just have [Proj] in front of the message
> header. Might be some kind of an error somewhere ... at least this used
> to be first class mail?!

Feedback I got though https://trac.osgeo.org/osgeo/ticket/2218#comment:11
""" Please inform the user to 'whitelist' the mailing list address, through
 their email provider"""

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From kreve at sdfe.dk  Mon Dec 17 12:30:20 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Mon, 17 Dec 2018 20:30:20 +0000
Subject: [PROJ] What's the difference between PJ and PJ_OBJ?
Message-ID: <854DF218-9189-440F-8AC7-4BE09480B767@sdfe.dk>

I guess this is mostly for Even but of course anyone is welcome to join the discussion.

I am slowly working my way through the new additions to the C API and the C++ code
that is backing it and once in a while a question pops up. This time regarding the
PJ_OBJ struct. Basically I am struggling to understand how it differs from the PJ struct?
From a user viewpoint that is. I get that it is probably simpler to keep the C++ parts
separated from the C parts as much as possible but is that the only reason why they
are two different datatypes? I’ve noticed that PJ_CONTEXT has got a pointer to an
optional C++ struct (projCppContext), why was this approach not chosen for
PJ/PC_CONTEXT?

/Kristian

From even.rouault at spatialys.com  Mon Dec 17 13:16:33 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 17 Dec 2018 22:16:33 +0100
Subject: [PROJ] What's the difference between PJ and PJ_OBJ?
In-Reply-To: <854DF218-9189-440F-8AC7-4BE09480B767@sdfe.dk>
References: <854DF218-9189-440F-8AC7-4BE09480B767@sdfe.dk>
Message-ID: <3906432.JyjjOBcGR9@even-i700>

> I am slowly working my way through the new additions to the C API and the
> C++ code
> that is backing it and once in a while a question pops up. This
> time regarding the PJ_OBJ struct. Basically I am struggling to understand
> how it differs from the PJ struct? 

PJ is struct PJconsts which is the core C structure for all coordinate 
operations used by the traditional C code

PJ_OBJ is a smallish C++ struct/class that essentially wraps a 
IdentifiedObjectNNPtr C++ object, that is a non-null shared pointer to a 
IdentifiedObject (+ some caching of results of getters)
The IdentifiedObject class is one of the top-most class in the ISO19111 class 
hiearchy from which derived all CRS classes, all CoordinateOperation classes 
and datum-related objects (Ellipsoid, Datum, PrimeMeridian)

> From a user viewpoint that is. I get
> that it is probably simpler to keep the C++ parts separated from the C
> parts as much as possible but is that the only reason why they are two
> different datatypes? 

To be honest, I didn't attempt to reconcile both datatypes, wanting to avoid 
messing too much in the existing code.

Thinking a bit about it, one could consider to move the few members of PJ_OBJ 
into struct PJconsts, but they are C++ objects, so that would mean that struct 
PJconsts would become also a C++ struct, and all C code including it should be 
C++ code. So basically all .c files in PROJ should be renamed to .cpp, hoping 
that they compile fine in C++.

Beyond that, the existing functions that return a PJ* pointer don't 
instanciate a IdentifiedObject, so code in c_api.cpp should be ready to find a 
null object it, whereas currently it is by construction always not-null, and 
act appropriately (mostly error out). But potentially, one could modify 
proj_create(), proj_create_argv() and proj_create_crs_to_crs() to instanciate 
a corresponding C++ object (the one returned by 
PROJStringParser::createFromPROJString() typically)

Conversely, not all PJ_OBJ objects can be converted in a meaningful struct 
PJconsts (for example "technical objects", like datums, ellipsoid, or "exotic" 
CRS like TemporalCRS, ParametricCRS, etc...), so in some cases one would need 
to use some default/dummy content

> I’ve noticed that PJ_CONTEXT has got a pointer to an
> optional C++ struct (projCppContext), 

This is somewhat a hack, but we need to attach the C++ DatabaseContext object 
to the PJ_CONTEXT.

> why was this approach not chosen for
> PJ/PC_CONTEXT?

You meant PJ vs PJ_OBJ I guess.
Indeed, instead of just merging PJ_OBJ into struct PJconsts, one could make 
struct PJconsts have a PJ_OBJ* pointer. That should solve the issue I 
mentionned with existing C code having to be "converted" to C++.

What would remain valid is the non-equality of concepts between PJ and PJ_OBJ.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From kreve at sdfe.dk  Tue Dec 18 05:10:53 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Tue, 18 Dec 2018 13:10:53 +0000
Subject: [PROJ] What's the difference between PJ and PJ_OBJ?
In-Reply-To: <3906432.JyjjOBcGR9@even-i700>
References: <854DF218-9189-440F-8AC7-4BE09480B767@sdfe.dk>
 <3906432.JyjjOBcGR9@even-i700>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAEF91C1A@S000014.PROD.SITAD.DK>

Thanks for the clarification, Even. 

> To be honest, I didn't attempt to reconcile both datatypes, wanting to avoid 
messing too much in the existing code.

I absolutely understand this. Especially while working on a separate branch it would
have been a pain in the ass to try to use the same structure.

> Thinking a bit about it, one could consider to move the few members of PJ_OBJ 
> into struct PJconsts, but they are C++ objects, so that would mean that struct 
> PJconsts would become also a C++ struct, and all C code including it should be 
> C++ code. So basically all .c files in PROJ should be renamed to .cpp, hoping 
> that they compile fine in C++.

Since we require compilation with a C++ compiler now it is too far-fetched an idea
to compile everything as C++. It would be interesting to see if this is possible without
too much extra work.

> Beyond that, the existing functions that return a PJ* pointer don't 
> instanciate a IdentifiedObject, so code in c_api.cpp should be ready to find a 
> null object it, whereas currently it is by construction always not-null, and 
> act appropriately (mostly error out). But potentially, one could modify 
> proj_create(), proj_create_argv() and proj_create_crs_to_crs() to instanciate 
> a corresponding C++ object (the one returned by 
> PROJStringParser::createFromPROJString() typically)
>
> Conversely, not all PJ_OBJ objects can be converted in a meaningful struct 
> PJconsts (for example "technical objects", like datums, ellipsoid, or "exotic" 
> CRS like TemporalCRS, ParametricCRS, etc...), so in some cases one would need 
> to use some default/dummy content

I guess that modification of proj_create-functions wouldn't take too much work
since most is already done in the C++ parts of the code. We still have to keep
pj_init() and friends alive for a little while longer. Will that pose a problem or
can all the work be delegate to PROJStringParser::createFromPROJString() ?

In case of the technical objects, could that be handled by using the recently
proposed "noop" operation? 

> You meant PJ vs PJ_OBJ I guess.
> Indeed, instead of just merging PJ_OBJ into struct PJconsts, one could make 
> struct PJconsts have a PJ_OBJ* pointer. That should solve the issue I 
> mentionned with existing C code having to be "converted" to C++.

This was my initial probably-easy-to-implement way of combining the two
structs. But if a proper merge of the two can be done fairly simple I think
that is worth considering. It is my belief that having just one form of
"transformation object" makes for a better API. I realize that making that
happen requires significant work. I am willing to help with this to the best of
my abilities. I should also have some time to spare in the beginning of the
new year.

/Kristian

-----Oprindelig meddelelse-----
Fra: Even Rouault <even.rouault at spatialys.com> 
Sendt: 17. december 2018 22:17
Til: proj at lists.osgeo.org
Cc: Kristian Evers <kreve at sdfe.dk>
Emne: Re: [PROJ] What's the difference between PJ and PJ_OBJ?

> I am slowly working my way through the new additions to the C API and the
> C++ code
> that is backing it and once in a while a question pops up. This
> time regarding the PJ_OBJ struct. Basically I am struggling to understand
> how it differs from the PJ struct? 

PJ is struct PJconsts which is the core C structure for all coordinate 
operations used by the traditional C code

PJ_OBJ is a smallish C++ struct/class that essentially wraps a 
IdentifiedObjectNNPtr C++ object, that is a non-null shared pointer to a 
IdentifiedObject (+ some caching of results of getters)
The IdentifiedObject class is one of the top-most class in the ISO19111 class 
hiearchy from which derived all CRS classes, all CoordinateOperation classes 
and datum-related objects (Ellipsoid, Datum, PrimeMeridian)

> From a user viewpoint that is. I get
> that it is probably simpler to keep the C++ parts separated from the C
> parts as much as possible but is that the only reason why they are two
> different datatypes? 

To be honest, I didn't attempt to reconcile both datatypes, wanting to avoid 
messing too much in the existing code.

Thinking a bit about it, one could consider to move the few members of PJ_OBJ 
into struct PJconsts, but they are C++ objects, so that would mean that struct 
PJconsts would become also a C++ struct, and all C code including it should be 
C++ code. So basically all .c files in PROJ should be renamed to .cpp, hoping 
that they compile fine in C++.

Beyond that, the existing functions that return a PJ* pointer don't 
instanciate a IdentifiedObject, so code in c_api.cpp should be ready to find a 
null object it, whereas currently it is by construction always not-null, and 
act appropriately (mostly error out). But potentially, one could modify 
proj_create(), proj_create_argv() and proj_create_crs_to_crs() to instanciate 
a corresponding C++ object (the one returned by 
PROJStringParser::createFromPROJString() typically)

Conversely, not all PJ_OBJ objects can be converted in a meaningful struct 
PJconsts (for example "technical objects", like datums, ellipsoid, or "exotic" 
CRS like TemporalCRS, ParametricCRS, etc...), so in some cases one would need 
to use some default/dummy content

> I’ve noticed that PJ_CONTEXT has got a pointer to an
> optional C++ struct (projCppContext), 

This is somewhat a hack, but we need to attach the C++ DatabaseContext object 
to the PJ_CONTEXT.

> why was this approach not chosen for
> PJ/PC_CONTEXT?

You meant PJ vs PJ_OBJ I guess.
Indeed, instead of just merging PJ_OBJ into struct PJconsts, one could make 
struct PJconsts have a PJ_OBJ* pointer. That should solve the issue I 
mentionned with existing C code having to be "converted" to C++.

What would remain valid is the non-equality of concepts between PJ and PJ_OBJ.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From even.rouault at spatialys.com  Tue Dec 18 10:35:24 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 18 Dec 2018 19:35:24 +0100
Subject: [PROJ] What's the difference between PJ and PJ_OBJ?
In-Reply-To: <2E885BB293AF0448A0181138489E9A0EAEF91C1A@S000014.PROD.SITAD.DK>
References: <854DF218-9189-440F-8AC7-4BE09480B767@sdfe.dk>
 <3906432.JyjjOBcGR9@even-i700>
 <2E885BB293AF0448A0181138489E9A0EAEF91C1A@S000014.PROD.SITAD.DK>
Message-ID: <1638903.GIvucRPzUc@even-i700>

> Since we require compilation with a C++ compiler now it is too far-fetched
> an idea to compile everything as C++. It would be interesting to see if
> this is possible without too much extra work.
> 

I'm taking a crack at that right now. Seems doable.
What C++ doesn't like at all is the implict cast from void* to 
something_else*, that need to be explicited in C++ as static_cast<>()

Beyond those errors, a lot warnings which seem to be exclusively instances of
-Wzero-as-null-pointer-constant. clang-tidy should be able to convert those.

> I guess that modification of proj_create-functions wouldn't take too much
> work
 since most is already done in the C++ parts of the code. We still
> have to keep pj_init() and friends alive for a little while longer. Will
> that pose a problem or can all the work be delegate to
> PROJStringParser::createFromPROJString() ? 
> In case of the technical objects, could that be handled by using the
> recently proposed "noop" operation?

I think that an "invalid" operation would be a better fit for those. We don't 
want such objects to be confused with valid coordinate transformation
"noop" is a valid operation when there is nothing to do except passthrough 
coordinates. If the PJ object you got is let's say a prime meridian, it is 
better if proj_trans() returns an error rather than the input values.
(but that's just a detail)

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

From schwehr at gmail.com  Tue Dec 18 12:12:27 2018
From: schwehr at gmail.com (Kurt Schwehr)
Date: Tue, 18 Dec 2018 12:12:27 -0800
Subject: [PROJ] What's the difference between PJ and PJ_OBJ?
In-Reply-To: <1638903.GIvucRPzUc@even-i700>
References: <854DF218-9189-440F-8AC7-4BE09480B767@sdfe.dk>
 <3906432.JyjjOBcGR9@even-i700>
 <2E885BB293AF0448A0181138489E9A0EAEF91C1A@S000014.PROD.SITAD.DK>
 <1638903.GIvucRPzUc@even-i700>
Message-ID: <CACmBxytOfZbg_C3nqnCiE=kfRinY3b8BSOLLyf4TAX4+oqgMhg@mail.gmail.com>

I was going to suggest getting everything to build as C++ in the lib.
Thanks Kristian for beating me to the suggestion and to Even for all the
hard work!!!

On Tue, Dec 18, 2018 at 10:57 AM Even Rouault <even.rouault at spatialys.com>
wrote:

> > Since we require compilation with a C++ compiler now it is too
> far-fetched
> > an idea to compile everything as C++. It would be interesting to see if
> > this is possible without too much extra work.
> >
>
> I'm taking a crack at that right now. Seems doable.
> What C++ doesn't like at all is the implict cast from void* to
> something_else*, that need to be explicited in C++ as static_cast<>()
>
> Beyond those errors, a lot warnings which seem to be exclusively instances
> of
> -Wzero-as-null-pointer-constant. clang-tidy should be able to convert
> those.
>
> > I guess that modification of proj_create-functions wouldn't take too much
> > work
>  since most is already done in the C++ parts of the code. We still
> > have to keep pj_init() and friends alive for a little while longer. Will
> > that pose a problem or can all the work be delegate to
> > PROJStringParser::createFromPROJString() ?
> > In case of the technical objects, could that be handled by using the
> > recently proposed "noop" operation?
>
> I think that an "invalid" operation would be a better fit for those. We
> don't
> want such objects to be confused with valid coordinate transformation
> "noop" is a valid operation when there is nothing to do except passthrough
> coordinates. If the PJ object you got is let's say a prime meridian, it is
> better if proj_trans() returns an error rather than the input values.
> (but that's just a detail)
>
> Even
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>


-- 
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181218/423125cb/attachment.html>

From kreve at sdfe.dk  Wed Dec 19 06:27:47 2018
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 19 Dec 2018 14:27:47 +0000
Subject: [PROJ] What's the difference between PJ and PJ_OBJ?
In-Reply-To: <CACmBxytOfZbg_C3nqnCiE=kfRinY3b8BSOLLyf4TAX4+oqgMhg@mail.gmail.com>
References: <854DF218-9189-440F-8AC7-4BE09480B767@sdfe.dk>
 <3906432.JyjjOBcGR9@even-i700>
 <2E885BB293AF0448A0181138489E9A0EAEF91C1A@S000014.PROD.SITAD.DK>
 <1638903.GIvucRPzUc@even-i700>
 <CACmBxytOfZbg_C3nqnCiE=kfRinY3b8BSOLLyf4TAX4+oqgMhg@mail.gmail.com>
Message-ID: <2E885BB293AF0448A0181138489E9A0EAEF92B21@S000014.PROD.SITAD.DK>

And as ever Even delivers in faster-than-the-speed-of-light mode: https://github.com/OSGeo/proj.4/pull/1203

This is a fairly invasive pull request so I would like to ask interested parties (i.e. PSC members) to take a look at it and voice their opinions on the matters raised in the comments.

/Kristian

Fra: PROJ <proj-bounces at lists.osgeo.org> På vegne af Kurt Schwehr
Sendt: 18. december 2018 21:12
Til: Even Rouault <even.rouault at spatialys.com>
Cc: proj at lists.osgeo.org
Emne: Re: [PROJ] What's the difference between PJ and PJ_OBJ?

I was going to suggest getting everything to build as C++ in the lib.  Thanks Kristian for beating me to the suggestion and to Even for all the hard work!!!

On Tue, Dec 18, 2018 at 10:57 AM Even Rouault <even.rouault at spatialys.com<mailto:even.rouault at spatialys.com>> wrote:
> Since we require compilation with a C++ compiler now it is too far-fetched
> an idea to compile everything as C++. It would be interesting to see if
> this is possible without too much extra work.
>

I'm taking a crack at that right now. Seems doable.
What C++ doesn't like at all is the implict cast from void* to
something_else*, that need to be explicited in C++ as static_cast<>()

Beyond those errors, a lot warnings which seem to be exclusively instances of
-Wzero-as-null-pointer-constant. clang-tidy should be able to convert those.

> I guess that modification of proj_create-functions wouldn't take too much
> work
 since most is already done in the C++ parts of the code. We still
> have to keep pj_init() and friends alive for a little while longer. Will
> that pose a problem or can all the work be delegate to
> PROJStringParser::createFromPROJString() ?
> In case of the technical objects, could that be handled by using the
> recently proposed "noop" operation?

I think that an "invalid" operation would be a better fit for those. We don't
want such objects to be confused with valid coordinate transformation
"noop" is a valid operation when there is nothing to do except passthrough
coordinates. If the PJ object you got is let's say a prime meridian, it is
better if proj_trans() returns an error rather than the input values.
(but that's just a detail)

Even

--
Spatialys - Geospatial professional services
http://www.spatialys.com
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj


--
--
http://schwehr.org
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20181219/6cc82ab1/attachment.html>

From even.rouault at spatialys.com  Fri Dec 28 05:14:58 2018
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 28 Dec 2018 14:14:58 +0100
Subject: [PROJ] SRS barn: 7th status report
Message-ID: <4181433.C00x0EdCgX@even-i700>

Hi

Please find my 7th status report at
https://erouault.blogspot.com/2018/12/srs-barn-raising-7th-report.html

Best regards,

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com

