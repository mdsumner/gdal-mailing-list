From jlaura at usgs.gov  Mon Aug 12 09:44:56 2024
From: jlaura at usgs.gov (Laura, Jason R)
Date: Mon, 12 Aug 2024 16:44:56 +0000
Subject: [PROJ] Pipeline: Cartesian transform to change from ellipsoid to
 sphere
Message-ID: <CO6PR09MB8775D4794D70AC1C7DA5F244B9852@CO6PR09MB8775.namprd09.prod.outlook.com>

List,

I have a set of body-centered body-fixed coordinates that were computed with an ellipsoid of +a=3396190 +b=3376200. I am attempting to reproject these into a spherical datum (+R=3396190) using the pipeline syntax. For example,

        +proj=pipeline +units=m
        +step +proj=cart +a=3396190 +b=3376200
        +step +proj=cart +R=3396190

Which is failing with a unit warning. I suspect I am missing something basic.

I have looked at the geodesic -> Helmert -> geodesic transformation tutorial, but I am clearly misunderstanding something (https://proj.org/en/9.3/tutorials/EUREF2019/exercises/pipelines.html#geodetic-helmert-geodetic)

Looking at these docs, I tried:

        +proj=pipeline
        +step +proj=cart +a=3396190 +b=3376200
        +step +proj=helmert +z=19990 +convention=position_vector
        +step +inv +proj=cart +R=3396190

But I get an invalid latitude error (which I believe means I am misspecifying the input system).

Any suggestions appreciated,
Jay
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240812/25d47c71/attachment.htm>

From even.rouault at spatialys.com  Mon Aug 12 09:57:21 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 12 Aug 2024 18:57:21 +0200
Subject: [PROJ] Pipeline: Cartesian transform to change from ellipsoid
 to sphere
In-Reply-To: <CO6PR09MB8775D4794D70AC1C7DA5F244B9852@CO6PR09MB8775.namprd09.prod.outlook.com>
References: <CO6PR09MB8775D4794D70AC1C7DA5F244B9852@CO6PR09MB8775.namprd09.prod.outlook.com>
Message-ID: <11931ecb-e62f-4a39-92f7-34fb69442f77@spatialys.com>


Le 12/08/2024 ? 18:44, Laura, Jason R via PROJ a ?crit?:
> List,
>
> I have a set of body-centered body-fixed coordinates that were 
> computed with an ellipsoid of +a=3396190 +b=3376200. I am attempting 
> to reproject these into a spherical datum (+R=3396190) using the 
> pipeline syntax. For example,
>
> ? ? ? ? +proj=pipeline +units=m
> ? ? ? ? +step +proj=cart +a=3396190 +b=3376200
> ? ? ? ? +step +proj=cart +R=3396190
>
> Which is failing with a unit warning. I suspect I am missing something 
> basic.
You need to add +inv in the last step to go from ECEF to lon-lat 
coordinate space
>
> I have looked at the geodesic -> Helmert -> geodesic transformation 
> tutorial, but I am clearly misunderstanding something 
> (https://proj.org/en/9.3/tutorials/EUREF2019/exercises/pipelines.html#geodetic-helmert-geodetic)
>
> Looking at these docs, I tried:
>
> ? ? ? ? +proj=pipeline
> ? ? ? ? +step +proj=cart +a=3396190 +b=3376200
> ? ? ? ? +step +proj=helmert +z=19990 +convention=position_vector
> ? ? ? ? +step +inv +proj=cart +R=3396190
>
> But I get an invalid latitude error (which I believe means I am 
> misspecifying the input system).
Works for me. The input coordinate order is longitude, latitude, Z.
>
> Any suggestions appreciated,
> Jay
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240812/e4b7b3cd/attachment.htm>

From j1 at jimenezshaw.com  Fri Aug 23 02:28:20 2024
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Fri, 23 Aug 2024 11:28:20 +0200
Subject: [PROJ] Dealing with epoch and transformations
Message-ID: <CADRrdKtyZMLVSjY7JFEE6uL0xmhXKpw8tBLKhGhnw+HsQ_b=dQ@mail.gmail.com>

Hi

I am a bit confused with the epoch of coordinates. For instance, if I
connect to this NTRIP service
https://support.swiftnav.com/support/solutions/articles/44002386941-configuring-your-receiver
it says explicitly that "Skylark Nx RTK uses ITRF2020 reference frame."
Does it mean that the coordinates that I measure today do have an epoch of
2024.x (today's epoch), or the epoch of those measurements is 2015.0 (the
epoch of ITRF2020
https://epsg.org/datum_1322/International-Terrestrial-Reference-Frame-2020.html
)

If I want to transform from that reference system (ITRF2020) to, let's say,
ETRS89 or NAD83(2011), should I add an epoch? which one? where? what
happens if I do not set any?

I have the impression that I could convert from one epoch to another for
the same CRS, something like this
PROJ_DATA=data ./bin/projinfo -s EPSG:9989 -t EPSG:9989 --s_epoch 2015.0
--t_epoch 2020.0 -o proj
Candidate operations found: 1
-------------------------------------
Operation No. 1:

unknown id, Null geographic offset from ITRF2020 to ITRF2020, 0 m, World.

PROJ string:
+proj=noop

... but it does not. Should it do a non noop transformation?

Note: s_epoch and t_epoch were added in PROJ 9.4

Thanks.


PS. ITRF2020 to CH1903+ is a complete ballpark :(
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240823/1fe018b7/attachment.htm>

From gdt at lexort.com  Fri Aug 23 04:24:32 2024
From: gdt at lexort.com (Greg Troxel)
Date: Fri, 23 Aug 2024 07:24:32 -0400
Subject: [PROJ] Dealing with epoch and transformations
In-Reply-To: <CADRrdKtyZMLVSjY7JFEE6uL0xmhXKpw8tBLKhGhnw+HsQ_b=dQ@mail.gmail.com>
 (Javier Jimenez Shaw via PROJ's message of "Fri, 23 Aug 2024 11:28:20
 +0200")
References: <CADRrdKtyZMLVSjY7JFEE6uL0xmhXKpw8tBLKhGhnw+HsQ_b=dQ@mail.gmail.com>
Message-ID: <rmiikvrbhxr.fsf@s1.lexort.com>

Javier Jimenez Shaw via PROJ <proj at lists.osgeo.org> writes:

> If I connect to this NTRIP service
> https://support.swiftnav.com/support/solutions/articles/44002386941-configuring-your-receiver
> it says explicitly that "Skylark Nx RTK uses ITRF2020 reference
> frame."
> Does it mean that the coordinates that I measure today do have an epoch of
> 2024.x (today's epoch), or the epoch of those measurements is 2015.0 (the
> epoch of ITRF2020
> https://epsg.org/datum_1322/International-Terrestrial-Reference-Frame-2020.html
> )

FWIW, the RTK network I use documents "NAD83 (2011) epoch 2010.0" which
is unsurprising in the US, and a static datum -- avoiding all of this.

I would say their statement doesn't cleanly mean either of those, and it
would be reasonable to ask them to adjust it to say epoch 2015.0, some
other fixed date, or "today", which I think is sometimes written "epoch
of data".

There's a larger question lurking, due to their reference stations
having velocities in ITRF2020.  I believe that is a separate issue from
the motion of ITRF2020 itself.

I would also think that if you have another service that uses a
plate-fixed datum, you would be able to compare and determine if they
are dealing with their station velocities, as few cm * 9 years should be
resolvable.  With an F9P, repeat occupations (days apart), that each are
a 30s average, cluster within a 4 cm diameter.  That's with a hand-held
pole with a level, and some tree cover.

Thinking about how the network operates, they need to do static
solutions to determine coordinates, and those could reasonably be in
either ITRF2020 2015.0 or ITRF2020 day they do the observations.
(Really, they should be and probably are doing static solutions
repeatedly.)  With either, they could transform to 2015.0 or today's
epoch.  Then, they might need to apply station velocities and load the
reference station coordinates.

Or does RTCM contain station coordinates and a date and velocities?
Because my network is a plate-fixed datum with a fixed epoch
(because... the datum is not quite plate fixed!), I have so far not
understood this.

It's interesting to consider what GPS does, which as I understand it is
to compute reference station coordinates once a year and use them over
the year.  But the link from reference station coordiantes to
clocks/orbits to user coordinates has a big enough error budget that
this 1 year step of a few cm -- in varying directions for varying
reference stations -- is almost certainly not detectable.

> If I want to transform from that reference system (ITRF2020) to, let's say,
> ETRS89 or NAD83(2011), should I add an epoch? which one? where? what
> happens if I do not set any?

My somewhat hazy understanding is that ITRF2020 without a specified
epoch means 2015.0.

Does proj have plate motion models, to be able to answer not what a
coordinates a point in space has, but a point fixed to the ground?

> I have the impression that I could convert from one epoch to another for
> the same CRS, something like this
> PROJ_DATA=data ./bin/projinfo -s EPSG:9989 -t EPSG:9989 --s_epoch 2015.0
> --t_epoch 2020.0 -o proj
> Candidate operations found: 1
> -------------------------------------
> Operation No. 1:
>
> unknown id, Null geographic offset from ITRF2020 to ITRF2020, 0 m, World.
>
> PROJ string:
> +proj=noop

I think we need to really understand how ITRF2020 itself, vs moving
reference stations, evolves over time.

From jack.riley at noaa.gov  Fri Aug 23 08:23:06 2024
From: jack.riley at noaa.gov (Jack Riley - NOAA Federal)
Date: Fri, 23 Aug 2024 11:23:06 -0400
Subject: [PROJ] Dealing with epoch and transformations
In-Reply-To: <rmiikvrbhxr.fsf@s1.lexort.com>
References: <CADRrdKtyZMLVSjY7JFEE6uL0xmhXKpw8tBLKhGhnw+HsQ_b=dQ@mail.gmail.com>
 <rmiikvrbhxr.fsf@s1.lexort.com>
Message-ID: <CAOc6+p9Amu4o4wbaUg_CWd3xqqp3c7+9xeSth4sYyFZP7XMb+Q@mail.gmail.com>

>
> Thinking about how the network operates, they need to do static
> solutions to determine coordinates, and those could reasonably be in
> either ITRF2020 2015.0 or ITRF2020 day they do the observations.
> (Really, they should be and probably are doing static solutions
> repeatedly.)  With either, they could transform to 2015.0 or today's
> epoch.  Then, they might need to apply station velocities and load the
> reference station coordinates.
>

I just posted a question with Swift Navigation Support to ask this.
I'll update this thread when/if I hear back from them.


> It's interesting to consider what GPS does, which as I understand it is
> to compute reference station coordinates once a year and use them over
> the year.  But the link from reference station coordiantes to
> clocks/orbits to user coordinates has a big enough error budget that
> this 1 year step of a few cm -- in varying directions for varying
> reference stations -- is almost certainly not detectable.
>

GPS WGS84 reference frames that are tagged with a datum realization
of GPS week may be associated with an ITRF or IGS realization and its
attendant reference epoch and ECEF frame accuracy.
NOAA/NOS/NGS uses the following associations in their VDatum software:

WGS84(G730): ITRF91
WGS84(G873): ITRF96
WGS84(G1150): ITRF2000
WGS84(G1674): ITRF2008
WGS84(G1762): IGS08
WGS84(G2139): IGS14


> > If I want to transform from that reference system (ITRF2020) to, let's
> say,
> > ETRS89 or NAD83(2011), should I add an epoch? which one? where? what
> > happens if I do not set any?
>
> My somewhat hazy understanding is that ITRF2020 without a specified
> epoch means 2015.0.
>
> Does proj have plate motion models, to be able to answer not what a
> coordinates a point in space has, but a point fixed to the ground?
>

There are subdirs for the frames which are dynamic in PROJ/data and the
plate motion model parameters are indexed at the bottom; e.g.:
https://github.com/OSGeo/PROJ/blob/master/data/ITRF2014

ITRF2020 is in EPSG and PROJ, but I don't see its definition in PROJ/data.
I'm not sure of the source for official plate motion model parameters.
Here is one reference to a model for ITRF2020:
https://agupubs.onlinelibrary.wiley.com/doi/pdf/10.1029/2023GL106373

I found Even's response here re: PROJ transformations between coordinate
epochs to be useful:
https://www.mail-archive.com/proj at lists.osgeo.org/msg00390.html
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240823/ddde32ea/attachment.htm>

From even.rouault at spatialys.com  Fri Aug 23 13:17:26 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 23 Aug 2024 22:17:26 +0200
Subject: [PROJ] Dealing with epoch and transformations
In-Reply-To: <CADRrdKtyZMLVSjY7JFEE6uL0xmhXKpw8tBLKhGhnw+HsQ_b=dQ@mail.gmail.com>
References: <CADRrdKtyZMLVSjY7JFEE6uL0xmhXKpw8tBLKhGhnw+HsQ_b=dQ@mail.gmail.com>
Message-ID: <2096f9e0-8e82-404e-8b32-0ef7c1f9c0ad@spatialys.com>

Javier,

Regarding intra-ITRF transformations, the EPSG database lacks the ITRF 
plate motion models. We do have them (up to ITRF2014) in the 
data/ITRFxxxx files (cf the link to a previous thread of mine that Jack 
Riley has quoted). I see we don't have yet the ITRF2020 ones. They are 
at https://itrf.ign.fr/docs/solutions/itrf2020/ITRF2020-PMM.dat

For a fully automated solution what would be mostly missing in PROJ is 
support for non-rectangular area of interest, as the rectangular model 
could be very inadequate for parts of the world

Even

Le 23/08/2024 ? 11:28, Javier Jimenez Shaw via PROJ a ?crit?:
> Hi
>
> I am a bit confused with the epoch of coordinates. For instance, if I 
> connect to this NTRIP service
> https://support.swiftnav.com/support/solutions/articles/44002386941-configuring-your-receiver
> it says explicitly that "Skylark Nx RTK uses ITRF2020 reference frame."
> Does it mean that the coordinates that I measure today do have an 
> epoch of 2024.x (today's epoch), or the epoch of those measurements is 
> 2015.0 (the epoch of ITRF2020 
> https://epsg.org/datum_1322/International-Terrestrial-Reference-Frame-2020.html)
>
> If I want to transform from that reference system (ITRF2020) to, let's 
> say, ETRS89 or NAD83(2011), should I add an epoch? which one? where? 
> what happens if I do not set any?
>
> I have the impression that I could convert from one epoch to another 
> for the same CRS, something like this
> PROJ_DATA=data ./bin/projinfo -s EPSG:9989 -t EPSG:9989 --s_epoch 
> 2015.0 --t_epoch 2020.0 -o proj
> Candidate operations found: 1
> -------------------------------------
> Operation No. 1:
>
> unknown id, Null geographic offset from ITRF2020 to ITRF2020, 0 m, World.
>
> PROJ string:
> +proj=noop
>
> ... but it does not. Should it do a non noop transformation?
>
> Note: s_epoch and t_epoch were added in PROJ 9.4
>
> Thanks.
>
>
> PS. ITRF2020 to CH1903+ is a complete ballpark :(
> .___ ._ ..._ .. . ._.? .___ .. __ . _. . __.. ... .... ._ .__
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240823/5f966127/attachment.htm>

From jerome at ecere.com  Sat Aug 24 07:36:38 2024
From: jerome at ecere.com (=?UTF-8?B?SsOpcsO0bWUgU3QtTG91aXM=?=)
Date: Sat, 24 Aug 2024 10:36:38 -0400
Subject: [PROJ] ISEA projection: proposed parameters deprecation and input
 latitude interpretation
Message-ID: <d9db4eb6-c1fb-4690-99a2-b9d43ef7bb0e@ecere.com>

Dear PROJ community,

I recently had the chance to integrate an implementation of the inverse 
transformation for the Icosahedral Snyder Equal-Area (ISEA) projection 
<https://proj.org/en/9.4/operations/projections/isea.html> (PR #4211 
<https://github.com/OSGeo/PROJ/pull/4211> which was recently merged).

Doing so resulted in some initial re-factoring to share code between the 
forward and inverse projection.

*Deprecating grid parameters*

During this process, I realized that several parameters for the 
projection (+proj=isea) really have nothing to do with the projection 
itself, but are parameters for constructing discrete global grids on top 
of an ISEA projection.

In fact, the code applying these parameters 
<https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L931> 
happens as a later step after the default planar projection (with the 
exception of the trivial isea_tri_plane() 
<https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L656>).

Therefore, I suggest this code really does not belong in the PROJ 
library, but outside, in the implementation of a discrete global grid 
system, such as in libraries like DGGRID 
<https://github.com/sahrk/DGGRID> and geogrid 
<https://github.com/mocnik-science/geogrid/>, and these parameters 
should be deprecated.

In addition:

- there is no documentation at all for the parameters and they are very 
poorly understood,
- there are no existing tests for these parameters,
- the new inverse transformation does not support these parameters.

The three parameters proposed for deprecation are:

*+mode* which can be set to /plane/ (the default), /*di*/, */dd/*, or 
/*hex*/
 ?????? The default mode is /plane/ which would become the only thing 
supported.

/hex/ referred to returning coordinates related to a hexagonal grid, but 
it is really not clear.
/di/ and /dd/ seemed to refer to a rhombus grid, in a way very similar 
to the approach we use for an ISEA9R DGGRS 
<https://docs.ogc.org/DRAFTS/21-038.html#isea9r-dggrs> (or ISEA4R for a 
quad-tree).
 ??? ??? The ISEA planar projection can be very easily transformed to a 
space where icosahedron triangles merge into 10 axis-aligned rhombuses 
by applying a 60 degrees rotation and 30 degrees horizontal shearing, 
which can be done with +proj=affine.
 ??? ??? This seems to be what isea_ptdd() 
<https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L669> 
is doing for /dd/.
/di/ seems to be referring to an extra step done in isea_ptdi() 
<https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L849>. 
I have no idea what this is doing.

*+aperture* which is the aperture (refinement ratio) of the discrete 
global grid for those di, dd and hex modes

*+resolution* which I am not sure how it affects the di, dd, and hex 
modes, but is only used with those modes proposed for deprecation

Systems using these parameters could still extract the code for these 
extra steps in its current state 
<https://github.com/OSGeo/PROJ/blob/2ce6c7a9b1ca44b8a7cfb1acca7ff10c8c616774/src/projections/isea.cpp>, 
and invoke as an extra step after the planar projection (after undoing 
the trivial 180 deg rotation and translation that isea_tri_plane() 
<https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L656> 
is doing).

If you make use of these parameters and object to their deprecation, 
please reply with feedback.
I plan to submit a pull request for a staged deprecation, which first 
mentions in the documentation that these parameters will be deprecated 
in a future version.

On the flip side, I hope to eventually contribute support for the 
remaining *+azi*= parameter not yet supported by the inverse projection 
(which allows support for orientations such as the R. Buckminster 
Fuller's Dymaxion Orientation).
Possibly also eventually allowing to specify an arbitrary latitude and 
longitude for the first icosahedron vertex, as opposed to the two 
available options of +orient=pole and +orient=isea with fixed values.

*
Proposing to interpret input latitude as authalic latitude*

As discussed in the PR 
<https://github.com/OSGeo/PROJ/pull/4211#issuecomment-2275206640>, the 
ISEA projection is only defined on a sphere.

Although I clarified this in the documentation 
<https://osgeo-proj--4211.org.readthedocs.build/en/4211/operations/projections/isea.html>, 
the most common use case is having geodetic WGS84 latitude and longitude 
coordinates which you want to project to the ISEA planar projection.

This includes the use case of integrating data into a discrete global 
grid system using a DGGRS based on the ISEA projection, such as ISEA3H 
or ISEA9R.

Before applying the spherical projection with a sphere whose surface 
area is the same as the GRS80 or WGS84 ellipsoid (authalic sphere), the 
geodetic latitude should be converted to an authalic latitude 
<https://en.wikipedia.org/wiki/Latitude#Authalic_latitude>.

This is already done by PROJ in other projections, including the Lamber 
Azimuthal Equal-Area projection of which ISEA is modified form, if I 
understand correctly (see 
https://github.com/OSGeo/PROJ/blob/master/src/projections/laea.cpp#L38 
and https://github.com/OSGeo/PROJ/pull/4211#issuecomment-2284383509 ).

I propose that the geodetic latitude be automatically converted to an 
authalic latitude when using the projection with a non-spherical 
ellipsoid (which is the default, and therefore currently quite prone to 
misuse).

Please reply if you see any issue with this change, for which I also 
plan to submit a pull request.

Thank you very much!

Kind regards,

-Jerome
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240824/ac3eadfc/attachment.htm>

From jack.riley at noaa.gov  Mon Aug 26 13:41:18 2024
From: jack.riley at noaa.gov (Jack Riley - NOAA Federal)
Date: Mon, 26 Aug 2024 16:41:18 -0400
Subject: [PROJ] Dealing with epoch and transformations
In-Reply-To: <CADRrdKtyZMLVSjY7JFEE6uL0xmhXKpw8tBLKhGhnw+HsQ_b=dQ@mail.gmail.com>
References: <CADRrdKtyZMLVSjY7JFEE6uL0xmhXKpw8tBLKhGhnw+HsQ_b=dQ@mail.gmail.com>
Message-ID: <CAOc6+p_ha8L3BmVTB_czM=8zO9YbC+gZkizy-VcanG4rQ10ZMw@mail.gmail.com>

Javier,

I received a response from Swift Navigation Support:

"Currently, Skylark Nx uses ITRF2020 epoch of the base station survey.
Those were done quite recently so it's near the current epoch (within a
year). We're planning to align all services to report the current epoch in
the future Skylark releases."

Jack

On Fri, Aug 23, 2024 at 5:36?AM Javier Jimenez Shaw via PROJ <
proj at lists.osgeo.org> wrote:

> I am a bit confused with the epoch of coordinates. For instance, if I
> connect to this NTRIP service
>
> https://support.swiftnav.com/support/solutions/articles/44002386941-configuring-your-receiver
> it says explicitly that "Skylark Nx RTK uses ITRF2020 reference frame."
> Does it mean that the coordinates that I measure today do have an epoch of
> 2024.x (today's epoch), or the epoch of those measurements is 2015.0 (the
> epoch of ITRF2020
> https://epsg.org/datum_1322/International-Terrestrial-Reference-Frame-2020.html
> )
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240826/ba31d851/attachment.htm>

From even.rouault at spatialys.com  Mon Aug 26 15:53:06 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 27 Aug 2024 00:53:06 +0200
Subject: [PROJ] Dealing with epoch and transformations
In-Reply-To: <2096f9e0-8e82-404e-8b32-0ef7c1f9c0ad@spatialys.com>
References: <CADRrdKtyZMLVSjY7JFEE6uL0xmhXKpw8tBLKhGhnw+HsQ_b=dQ@mail.gmail.com>
 <2096f9e0-8e82-404e-8b32-0ef7c1f9c0ad@spatialys.com>
Message-ID: <06c0e8dd-cad6-4fa0-81d3-1b7894f923b6@spatialys.com>


Le 23/08/2024 ? 22:17, Even Rouault via PROJ a ?crit?:
>
> Javier,
>
> Regarding intra-ITRF transformations, the EPSG database lacks the ITRF 
> plate motion models. We do have them (up to ITRF2014) in the 
> data/ITRFxxxx files (cf the link to a previous thread of mine that 
> Jack Riley has quoted). I see we don't have yet the ITRF2020 ones. 
> They are at https://itrf.ign.fr/docs/solutions/itrf2020/ITRF2020-PMM.dat
>
I've created the ITRF2020 file in 
https://github.com/OSGeo/PROJ/pull/4235. I've double checked him, but 
triple checking could be useful for the plate motion part, as it is easy 
to get an extra or missing decimal, or getting a sign wrong when porting 
from the PDF to the file...
>
> For a fully automated solution what would be mostly missing in PROJ is 
> support for non-rectangular area of interest, as the rectangular model 
> could be very inadequate for parts of the world
>
> Even
>
> Le 23/08/2024 ? 11:28, Javier Jimenez Shaw via PROJ a ?crit?:
>> Hi
>>
>> I am a bit confused with the epoch of coordinates. For instance, if I 
>> connect to this NTRIP service
>> https://support.swiftnav.com/support/solutions/articles/44002386941-configuring-your-receiver
>> it says explicitly that "Skylark Nx RTK uses ITRF2020 reference frame."
>> Does it mean that the coordinates that I measure today do have an 
>> epoch of 2024.x (today's epoch), or the epoch of those measurements 
>> is 2015.0 (the epoch of ITRF2020 
>> https://epsg.org/datum_1322/International-Terrestrial-Reference-Frame-2020.html)
>>
>> If I want to transform from that reference system (ITRF2020) to, 
>> let's say, ETRS89 or NAD83(2011), should I add an epoch? which one? 
>> where? what happens if I do not set any?
>>
>> I have the impression that I could convert from one epoch to another 
>> for the same CRS, something like this
>> PROJ_DATA=data ./bin/projinfo -s EPSG:9989 -t EPSG:9989 --s_epoch 
>> 2015.0 --t_epoch 2020.0 -o proj
>> Candidate operations found: 1
>> -------------------------------------
>> Operation No. 1:
>>
>> unknown id, Null geographic offset from ITRF2020 to ITRF2020, 0 m, World.
>>
>> PROJ string:
>> +proj=noop
>>
>> ... but it does not. Should it do a non noop transformation?
>>
>> Note: s_epoch and t_epoch were added in PROJ 9.4
>>
>> Thanks.
>>
>>
>> PS. ITRF2020 to CH1903+ is a complete ballpark :(
>> .___ ._ ..._ .. . ._.? .___ .. __ . _. . __.. ... .... ._ .__
>>
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
> -- 
> http://www.spatialys.com
> My software is free, but my time generally not.
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240827/b0a17835/attachment.htm>

From kristianevers at gmail.com  Mon Aug 26 23:05:38 2024
From: kristianevers at gmail.com (Kristian Evers)
Date: Tue, 27 Aug 2024 08:05:38 +0200
Subject: [PROJ] Postponing 9.5.0 release to September 15th
Message-ID: <913891A9-1419-4030-8AD5-89492483299C@gmail.com>

All,

My schedule this week is tighter than anticipated and I won?t have time to start the release procedure this week. Instead of doing a rushed job I?m moving the release date a couple of weeks to September 15th. Sorry for the inconvenience.

/Kristian

From luis.de.sousa at protonmail.ch  Tue Aug 27 02:20:16 2024
From: luis.de.sousa at protonmail.ch (=?utf-8?Q?Lu=C3=AD=C2=ADs_Moreira_de_Sousa?=)
Date: Tue, 27 Aug 2024 09:20:16 +0000
Subject: [PROJ] ISEA projection: proposed parameters deprecation and
 input latitude interpretation
In-Reply-To: <d9db4eb6-c1fb-4690-99a2-b9d43ef7bb0e@ecere.com>
References: <d9db4eb6-c1fb-4690-99a2-b9d43ef7bb0e@ecere.com>
Message-ID: <MZfP2VtGCKEtOijfZE4tgDofp-TZ2icS7aeeaDBN9ejPGfBNedwpLEW8yxa5dFxz64VudF8QXJ4tKsAOyc1_XwZB8yGkZBgOFh66X2IoM1c=@protonmail.ch>

Hi J?r?me,

this is all very logical, dropping those DGGS paramaters and adding azi= instead.

I wonder whether the angular coordinates interpretation shouldn't also be left to the user to decide. Eventually with the authalic transformation as default behaviour.

Regards.

--
Lu?s Moreira de Sousa
Mastodon: https://mastodon.social/@luis_de_sousa
URL: https://ldesousa.codeberg.page

Sent with [Proton Mail](https://proton.me/) secure email.

On Saturday, 24 August 2024 at 15:36, J?r?me St-Louis via PROJ <proj at lists.osgeo.org> wrote:

> Dear PROJ community,
>
> I recently had the chance to integrate an implementation of the inverse transformation for the [Icosahedral Snyder Equal-Area (ISEA) projection](https://proj.org/en/9.4/operations/projections/isea.html) ([PR #4211](https://github.com/OSGeo/PROJ/pull/4211) which was recently merged).
>
> Doing so resulted in some initial re-factoring to share code between the forward and inverse projection.
>
> Deprecating grid parameters
>
> During this process, I realized that several parameters for the projection (+proj=isea) really have nothing to do with the projection itself, but are parameters for constructing discrete global grids on top of an ISEA projection.
>
> In fact, [the code applying these parameters](https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L931) happens as a later step after the default planar projection (with the exception of the trivial [isea_tri_plane()](https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L656)).
>
> Therefore, I suggest this code really does not belong in the PROJ library, but outside, in the implementation of a discrete global grid system, such as in libraries like [DGGRID](https://github.com/sahrk/DGGRID) and [geogrid](https://github.com/mocnik-science/geogrid/), and these parameters should be deprecated.
>
> In addition:
>
> - there is no documentation at all for the parameters and they are very poorly understood,
> - there are no existing tests for these parameters,
> - the new inverse transformation does not support these parameters.
>
> The three parameters proposed for deprecation are:
>
> +mode which can be set to plane (the default), di, dd, or hex
> The default mode is plane which would become the only thing supported.
>
> hex referred to returning coordinates related to a hexagonal grid, but it is really not clear.
> di and dd seemed to refer to a rhombus grid, in a way very similar to the approach we use for an [ISEA9R DGGRS](https://docs.ogc.org/DRAFTS/21-038.html#isea9r-dggrs) (or ISEA4R for a quad-tree).
> The ISEA planar projection can be very easily transformed to a space where icosahedron triangles merge into 10 axis-aligned rhombuses by applying a 60 degrees rotation and 30 degrees horizontal shearing, which can be done with +proj=affine.
> This seems to be what [isea_ptdd()](https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L669) is doing for dd.
> di seems to be referring to an extra step done in [isea_ptdi()](https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L849). I have no idea what this is doing.
>
> +aperture which is the aperture (refinement ratio) of the discrete global grid for those di, dd and hex modes
>
> +resolution which I am not sure how it affects the di, dd, and hex modes, but is only used with those modes proposed for deprecation
>
> Systems using these parameters could still extract the code for these extra steps in its [current state](https://github.com/OSGeo/PROJ/blob/2ce6c7a9b1ca44b8a7cfb1acca7ff10c8c616774/src/projections/isea.cpp), and invoke as an extra step after the planar projection (after undoing the trivial 180 deg rotation and translation that [isea_tri_plane()](https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L656) is doing).
>
> If you make use of these parameters and object to their deprecation, please reply with feedback.
> I plan to submit a pull request for a staged deprecation, which first mentions in the documentation that these parameters will be deprecated in a future version.
>
> On the flip side, I hope to eventually contribute support for the remaining +azi= parameter not yet supported by the inverse projection (which allows support for orientations such as the R. Buckminster Fuller's Dymaxion Orientation).
> Possibly also eventually allowing to specify an arbitrary latitude and longitude for the first icosahedron vertex, as opposed to the two available options of +orient=pole and +orient=isea with fixed values.
>
> Proposing to interpret input latitude as authalic latitude
>
> As [discussed in the PR](https://github.com/OSGeo/PROJ/pull/4211#issuecomment-2275206640), the ISEA projection is only defined on a sphere.
>
> Although I clarified this in the [documentation](https://osgeo-proj--4211.org.readthedocs.build/en/4211/operations/projections/isea.html), the most common use case is having geodetic WGS84 latitude and longitude coordinates which you want to project to the ISEA planar projection.
>
> This includes the use case of integrating data into a discrete global grid system using a DGGRS based on the ISEA projection, such as ISEA3H or ISEA9R.
>
> Before applying the spherical projection with a sphere whose surface area is the same as the GRS80 or WGS84 ellipsoid (authalic sphere), the geodetic latitude should be converted to an [authalic latitude](https://en.wikipedia.org/wiki/Latitude#Authalic_latitude).
>
> This is already done by PROJ in other projections, including the Lamber Azimuthal Equal-Area projection of which ISEA is modified form, if I understand correctly (see https://github.com/OSGeo/PROJ/blob/master/src/projections/laea.cpp#L38 and https://github.com/OSGeo/PROJ/pull/4211#issuecomment-2284383509 ).
>
> I propose that the geodetic latitude be automatically converted to an authalic latitude when using the projection with a non-spherical ellipsoid (which is the default, and therefore currently quite prone to misuse).
>
> Please reply if you see any issue with this change, for which I also plan to submit a pull request.
>
> Thank you very much!
>
> Kind regards,
>
> -Jerome
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240827/8378eee6/attachment-0001.htm>

From jerome at ecere.com  Tue Aug 27 02:47:49 2024
From: jerome at ecere.com (=?UTF-8?B?SsOpcsO0bWUgU3QtTG91aXM=?=)
Date: Tue, 27 Aug 2024 05:47:49 -0400
Subject: [PROJ] ISEA projection: proposed parameters deprecation and
 input latitude interpretation
In-Reply-To: <MZfP2VtGCKEtOijfZE4tgDofp-TZ2icS7aeeaDBN9ejPGfBNedwpLEW8yxa5dFxz64VudF8QXJ4tKsAOyc1_XwZB8yGkZBgOFh66X2IoM1c=@protonmail.ch>
References: <d9db4eb6-c1fb-4690-99a2-b9d43ef7bb0e@ecere.com>
 <MZfP2VtGCKEtOijfZE4tgDofp-TZ2icS7aeeaDBN9ejPGfBNedwpLEW8yxa5dFxz64VudF8QXJ4tKsAOyc1_XwZB8yGkZBgOFh66X2IoM1c=@protonmail.ch>
Message-ID: <d68af8b2-7238-495e-acfb-bbec1f7c5c89@ecere.com>

Hi Lu?s,

Thanks for the input.

> adding azi= instead.
To be clear, the +azi= parameter is already there for the forward 
projection, just not in the new inverse yet.

> I wonder whether the angular coordinates interpretation shouldn't also 
> be left to the user to decide. Eventually with the authalic 
> transformation as default behaviour.
Do you mean by introducing an additional parameter? I don't think this 
should be necessary, and I think it would go against how ellipsoids are 
generally handled for all projections in PROJ.

If using a perfectly spherical ellipsoid, all types of latitudes are the 
same.

The bold title I used for that section of my last e-mail was confusing, 
sorry.

What I meant is that if an oblate spheroid ellipsoid is used (which is 
the default if you don't specify any ellipsoid parameter e.g., simply 
saying +proj=isea), then the latitude should be interpreted as geodetic 
latitude, but it should be transformed to an authalic latitude prior to 
applying the ISEA projection which is only defined on a sphere, just 
like it is already being done for Lambert Azimuthal Equal-Area. This is 
the only correct thing to do I believe.

Some systems do, arguably incorrectly, take the geodetic latitude, and 
directly apply the ISEA spherical projection pretending that latitude is 
already the authatlic latitude on the sphere.
This could still be done with PROJ simply by specifying 
+R=6371007.18091875, and still giving the same geodetic latitude as input.

Other systems (still arguably incorrectly, like ours currently) convert 
the geodetic latitude to geocentric latitude before applying the ISEA 
projection.
This could still be achieved by specifying +proj=pipeline +step 
+proj=geoc +step +proj=isea +R=6371007.18091875

Therefore I think even these incorrect interpretations could still be 
explicitly specified by the user, using the non-projection-specific PROJ 
mechanisms, without the introduction of a projection-specific parameter.

But the default when using a non-spherical ellipsoid would be the 
correct way of first transforming geoetic latitude to authalic latitude.

I hope that makes sense.

Kind regards,

-Jerome

On 8/27/24 5:20 AM, Lu? s Moreira de Sousa wrote:
> Hi J?r?me,
>
> this is all very logical, dropping those DGGS paramaters and adding 
> azi= instead.
>
> I wonder whether the angular coordinates interpretation shouldn't also 
> be left to the user to decide. Eventually with the authalic 
> transformation as default behaviour.
>
> Regards.
>
> -- 
> Lu?s Moreira de Sousa
> Mastodon: https://mastodon.social/@luis_de_sousa
> URL: https://ldesousa.codeberg.page
>
> Sent with Proton Mail <https://proton.me/> secure email.
>
> On Saturday, 24 August 2024 at 15:36, J?r?me St-Louis via PROJ 
> <proj at lists.osgeo.org> wrote:
>>
>> Dear PROJ community,
>>
>> I recently had the chance to integrate an implementation of the 
>> inverse transformation for the Icosahedral Snyder Equal-Area (ISEA) 
>> projection <https://proj.org/en/9.4/operations/projections/isea.html> 
>> (PR #4211 <https://github.com/OSGeo/PROJ/pull/4211> which was 
>> recently merged).
>>
>> Doing so resulted in some initial re-factoring to share code between 
>> the forward and inverse projection.
>>
>> *Deprecating grid parameters*
>>
>> During this process, I realized that several parameters for the 
>> projection (+proj=isea) really have nothing to do with the projection 
>> itself, but are parameters for constructing discrete global grids on 
>> top of an ISEA projection.
>>
>> In fact, the code applying these parameters 
>> <https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L931> 
>> happens as a later step after the default planar projection (with the 
>> exception of the trivial isea_tri_plane() 
>> <https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L656>).
>>
>> Therefore, I suggest this code really does not belong in the PROJ 
>> library, but outside, in the implementation of a discrete global grid 
>> system, such as in libraries like DGGRID 
>> <https://github.com/sahrk/DGGRID> and geogrid 
>> <https://github.com/mocnik-science/geogrid/>, and these parameters 
>> should be deprecated.
>>
>> In addition:
>>
>> - there is no documentation at all for the parameters and they are 
>> very poorly understood,
>> - there are no existing tests for these parameters,
>> - the new inverse transformation does not support these parameters.
>>
>> The three parameters proposed for deprecation are:
>>
>> *+mode* which can be set to /plane/ (the default), /*di*/, */dd/*, or 
>> /*hex*/
>> The default mode is /plane/ which would become the only thing supported.
>>
>> /hex/ referred to returning coordinates related to a hexagonal grid, 
>> but it is really not clear.
>> /di/ and /dd/ seemed to refer to a rhombus grid, in a way very 
>> similar to the approach we use for an ISEA9R DGGRS 
>> <https://docs.ogc.org/DRAFTS/21-038.html#isea9r-dggrs> (or ISEA4R for 
>> a quad-tree).
>> The ISEA planar projection can be very easily transformed to a space 
>> where icosahedron triangles merge into 10 axis-aligned rhombuses by 
>> applying a 60 degrees rotation and 30 degrees horizontal shearing, 
>> which can be done with +proj=affine.
>> This seems to be what isea_ptdd() 
>> <https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L669> 
>> is doing for /dd/.
>> /di/ seems to be referring to an extra step done in isea_ptdi() 
>> <https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L849>. 
>> I have no idea what this is doing.
>>
>> *+aperture* which is the aperture (refinement ratio) of the discrete 
>> global grid for those di, dd and hex modes
>>
>> *+resolution* which I am not sure how it affects the di, dd, and hex 
>> modes, but is only used with those modes proposed for deprecation
>>
>> Systems using these parameters could still extract the code for these 
>> extra steps in its current state 
>> <https://github.com/OSGeo/PROJ/blob/2ce6c7a9b1ca44b8a7cfb1acca7ff10c8c616774/src/projections/isea.cpp>, 
>> and invoke as an extra step after the planar projection (after 
>> undoing the trivial 180 deg rotation and translation that 
>> isea_tri_plane() 
>> <https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L656> 
>> is doing).
>>
>> If you make use of these parameters and object to their deprecation, 
>> please reply with feedback.
>> I plan to submit a pull request for a staged deprecation, which first 
>> mentions in the documentation that these parameters will be 
>> deprecated in a future version.
>>
>> On the flip side, I hope to eventually contribute support for the 
>> remaining *+azi*= parameter not yet supported by the inverse 
>> projection (which allows support for orientations such as the R. 
>> Buckminster Fuller's Dymaxion Orientation).
>> Possibly also eventually allowing to specify an arbitrary latitude 
>> and longitude for the first icosahedron vertex, as opposed to the two 
>> available options of +orient=pole and +orient=isea with fixed values.
>>
>> *
>> Proposing to interpret input latitude as authalic latitude*
>>
>> As discussed in the PR 
>> <https://github.com/OSGeo/PROJ/pull/4211#issuecomment-2275206640>, 
>> the ISEA projection is only defined on a sphere.
>>
>> Although I clarified this in the documentation 
>> <https://osgeo-proj--4211.org.readthedocs.build/en/4211/operations/projections/isea.html>, 
>> the most common use case is having geodetic WGS84 latitude and 
>> longitude coordinates which you want to project to the ISEA planar 
>> projection.
>>
>> This includes the use case of integrating data into a discrete global 
>> grid system using a DGGRS based on the ISEA projection, such as 
>> ISEA3H or ISEA9R.
>>
>> Before applying the spherical projection with a sphere whose surface 
>> area is the same as the GRS80 or WGS84 ellipsoid (authalic sphere), 
>> the geodetic latitude should be converted to an authalic latitude 
>> <https://en.wikipedia.org/wiki/Latitude#Authalic_latitude>.
>>
>> This is already done by PROJ in other projections, including the 
>> Lamber Azimuthal Equal-Area projection of which ISEA is modified 
>> form, if I understand correctly (see 
>> https://github.com/OSGeo/PROJ/blob/master/src/projections/laea.cpp#L38 
>> and https://github.com/OSGeo/PROJ/pull/4211#issuecomment-2284383509 ).
>>
>> I propose that the geodetic latitude be automatically converted to an 
>> authalic latitude when using the projection with a non-spherical 
>> ellipsoid (which is the default, and therefore currently quite prone 
>> to misuse).
>>
>> Please reply if you see any issue with this change, for which I also 
>> plan to submit a pull request.
>>
>> Thank you very much!
>>
>> Kind regards,
>>
>> -Jerome
>>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240827/db9ba1a2/attachment.htm>

From luis.de.sousa at protonmail.ch  Tue Aug 27 03:28:06 2024
From: luis.de.sousa at protonmail.ch (=?utf-8?Q?Lu=C3=AD=C2=ADs_Moreira_de_Sousa?=)
Date: Tue, 27 Aug 2024 10:28:06 +0000
Subject: [PROJ] ISEA projection: proposed parameters deprecation and
 input latitude interpretation
In-Reply-To: <d68af8b2-7238-495e-acfb-bbec1f7c5c89@ecere.com>
References: <d9db4eb6-c1fb-4690-99a2-b9d43ef7bb0e@ecere.com>
 <MZfP2VtGCKEtOijfZE4tgDofp-TZ2icS7aeeaDBN9ejPGfBNedwpLEW8yxa5dFxz64VudF8QXJ4tKsAOyc1_XwZB8yGkZBgOFh66X2IoM1c=@protonmail.ch>
 <d68af8b2-7238-495e-acfb-bbec1f7c5c89@ecere.com>
Message-ID: <s3jvphOlRxsw7IMGaImGSSqgyGCj-qkpUYRFoqU_GHMdpWVI5GZFwlUfxPVM7Q4Y-lhQmUx1UjrcdAyKwRyuvshauWXkPXs-i3adt2VT6ng=@protonmail.ch>

Hi again J?r?me, your reasoning is solid. I see now that extra parameter is not really necessary.

Regards.

--
Lu?s Moreira de Sousa
Mastodon: https://mastodon.social/@luis_de_sousa
URL: https://ldesousa.codeberg.page

Sent with [Proton Mail](https://proton.me/) secure email.

On Tuesday, 27 August 2024 at 10:47, J?r?me St-Louis <jerome at ecere.com> wrote:

> Hi Lu?s,
>
> Thanks for the input.
>
>> adding azi= instead.
>
> To be clear, the +azi= parameter is already there for the forward projection, just not in the new inverse yet.
>
>> I wonder whether the angular coordinates interpretation shouldn't also be left to the user to decide. Eventually with the authalic transformation as default behaviour.
>
> Do you mean by introducing an additional parameter? I don't think this should be necessary, and I think it would go against how ellipsoids are generally handled for all projections in PROJ.
>
> If using a perfectly spherical ellipsoid, all types of latitudes are the same.
>
> The bold title I used for that section of my last e-mail was confusing, sorry.
>
> What I meant is that if an oblate spheroid ellipsoid is used (which is the default if you don't specify any ellipsoid parameter e.g., simply saying +proj=isea), then the latitude should be interpreted as geodetic latitude, but it should be transformed to an authalic latitude prior to applying the ISEA projection which is only defined on a sphere, just like it is already being done for Lambert Azimuthal Equal-Area. This is the only correct thing to do I believe.
>
> Some systems do, arguably incorrectly, take the geodetic latitude, and directly apply the ISEA spherical projection pretending that latitude is already the authatlic latitude on the sphere.
> This could still be done with PROJ simply by specifying +R=6371007.18091875, and still giving the same geodetic latitude as input.
>
> Other systems (still arguably incorrectly, like ours currently) convert the geodetic latitude to geocentric latitude before applying the ISEA projection.
> This could still be achieved by specifying +proj=pipeline +step +proj=geoc +step +proj=isea +R=6371007.18091875
>
> Therefore I think even these incorrect interpretations could still be explicitly specified by the user, using the non-projection-specific PROJ mechanisms, without the introduction of a projection-specific parameter.
>
> But the default when using a non-spherical ellipsoid would be the correct way of first transforming geoetic latitude to authalic latitude.
>
> I hope that makes sense.
>
> Kind regards,
>
> -Jerome
> On 8/27/24 5:20 AM, Lu? s Moreira de Sousa wrote:
>
>> Hi J?r?me,
>>
>> this is all very logical, dropping those DGGS paramaters and adding azi= instead.
>>
>> I wonder whether the angular coordinates interpretation shouldn't also be left to the user to decide. Eventually with the authalic transformation as default behaviour.
>>
>> Regards.
>>
>> --
>> Lu?s Moreira de Sousa
>> Mastodon: https://mastodon.social/@luis_de_sousa
>> URL: https://ldesousa.codeberg.page
>>
>> Sent with [Proton Mail](https://proton.me/) secure email.
>>
>> On Saturday, 24 August 2024 at 15:36, J?r?me St-Louis via PROJ [<proj at lists.osgeo.org>](mailto:proj at lists.osgeo.org) wrote:
>>
>>> Dear PROJ community,
>>>
>>> I recently had the chance to integrate an implementation of the inverse transformation for the [Icosahedral Snyder Equal-Area (ISEA) projection](https://proj.org/en/9.4/operations/projections/isea.html) ([PR #4211](https://github.com/OSGeo/PROJ/pull/4211) which was recently merged).
>>>
>>> Doing so resulted in some initial re-factoring to share code between the forward and inverse projection.
>>>
>>> Deprecating grid parameters
>>>
>>> During this process, I realized that several parameters for the projection (+proj=isea) really have nothing to do with the projection itself, but are parameters for constructing discrete global grids on top of an ISEA projection.
>>>
>>> In fact, [the code applying these parameters](https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L931) happens as a later step after the default planar projection (with the exception of the trivial [isea_tri_plane()](https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L656)).
>>>
>>> Therefore, I suggest this code really does not belong in the PROJ library, but outside, in the implementation of a discrete global grid system, such as in libraries like [DGGRID](https://github.com/sahrk/DGGRID) and [geogrid](https://github.com/mocnik-science/geogrid/), and these parameters should be deprecated.
>>>
>>> In addition:
>>>
>>> - there is no documentation at all for the parameters and they are very poorly understood,
>>> - there are no existing tests for these parameters,
>>> - the new inverse transformation does not support these parameters.
>>>
>>> The three parameters proposed for deprecation are:
>>>
>>> +mode which can be set to plane (the default), di, dd, or hex
>>> The default mode is plane which would become the only thing supported.
>>>
>>> hex referred to returning coordinates related to a hexagonal grid, but it is really not clear.
>>> di and dd seemed to refer to a rhombus grid, in a way very similar to the approach we use for an [ISEA9R DGGRS](https://docs.ogc.org/DRAFTS/21-038.html#isea9r-dggrs) (or ISEA4R for a quad-tree).
>>> The ISEA planar projection can be very easily transformed to a space where icosahedron triangles merge into 10 axis-aligned rhombuses by applying a 60 degrees rotation and 30 degrees horizontal shearing, which can be done with +proj=affine.
>>> This seems to be what [isea_ptdd()](https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L669) is doing for dd.
>>> di seems to be referring to an extra step done in [isea_ptdi()](https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L849). I have no idea what this is doing.
>>>
>>> +aperture which is the aperture (refinement ratio) of the discrete global grid for those di, dd and hex modes
>>>
>>> +resolution which I am not sure how it affects the di, dd, and hex modes, but is only used with those modes proposed for deprecation
>>>
>>> Systems using these parameters could still extract the code for these extra steps in its [current state](https://github.com/OSGeo/PROJ/blob/2ce6c7a9b1ca44b8a7cfb1acca7ff10c8c616774/src/projections/isea.cpp), and invoke as an extra step after the planar projection (after undoing the trivial 180 deg rotation and translation that [isea_tri_plane()](https://github.com/OSGeo/PROJ/blob/master/src/projections/isea.cpp#L656) is doing).
>>>
>>> If you make use of these parameters and object to their deprecation, please reply with feedback.
>>> I plan to submit a pull request for a staged deprecation, which first mentions in the documentation that these parameters will be deprecated in a future version.
>>>
>>> On the flip side, I hope to eventually contribute support for the remaining +azi= parameter not yet supported by the inverse projection (which allows support for orientations such as the R. Buckminster Fuller's Dymaxion Orientation).
>>> Possibly also eventually allowing to specify an arbitrary latitude and longitude for the first icosahedron vertex, as opposed to the two available options of +orient=pole and +orient=isea with fixed values.
>>>
>>> Proposing to interpret input latitude as authalic latitude
>>>
>>> As [discussed in the PR](https://github.com/OSGeo/PROJ/pull/4211#issuecomment-2275206640), the ISEA projection is only defined on a sphere.
>>>
>>> Although I clarified this in the [documentation](https://osgeo-proj--4211.org.readthedocs.build/en/4211/operations/projections/isea.html), the most common use case is having geodetic WGS84 latitude and longitude coordinates which you want to project to the ISEA planar projection.
>>>
>>> This includes the use case of integrating data into a discrete global grid system using a DGGRS based on the ISEA projection, such as ISEA3H or ISEA9R.
>>>
>>> Before applying the spherical projection with a sphere whose surface area is the same as the GRS80 or WGS84 ellipsoid (authalic sphere), the geodetic latitude should be converted to an [authalic latitude](https://en.wikipedia.org/wiki/Latitude#Authalic_latitude).
>>>
>>> This is already done by PROJ in other projections, including the Lamber Azimuthal Equal-Area projection of which ISEA is modified form, if I understand correctly (see https://github.com/OSGeo/PROJ/blob/master/src/projections/laea.cpp#L38 and https://github.com/OSGeo/PROJ/pull/4211#issuecomment-2284383509 ).
>>>
>>> I propose that the geodetic latitude be automatically converted to an authalic latitude when using the projection with a non-spherical ellipsoid (which is the default, and therefore currently quite prone to misuse).
>>>
>>> Please reply if you see any issue with this change, for which I also plan to submit a pull request.
>>>
>>> Thank you very much!
>>>
>>> Kind regards,
>>>
>>> -Jerome
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240827/39967e5c/attachment-0001.htm>

From j1 at jimenezshaw.com  Tue Aug 27 10:29:53 2024
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Tue, 27 Aug 2024 19:29:53 +0200
Subject: [PROJ] Transformations in ITRF2020
Message-ID: <CADRrdKuP1wWPOT4a_TUduBNM_0Hfgp0qfhEp1aadpECng8hyCg@mail.gmail.com>

Hi

I am now facing transformations with ITRF2020 with time(yes, because
Skylark, but I guess more NTRIPs are going to do (or already doing) the
same)

The point is when the destination CRS does not have a direct transformation
from ITRF2020 (or almost).

For instance, EPSG:4150, CH1903+ (the geographic of LV95, in Switzerland)
is only connected to ETRS89. See that CH1903+ is in the European tectonic
plate, as ETRS89

A direct transformation is completely ballpark

echo 42 6 0 2024.6 | ./cs2cs EPSG:9989 EPSG:4150 -d 9 --3d
42.000000000 6.000000000 0.000000000 2024.6

However, from ITRF2020 to ETRS89 there is some change due to the time (the
European plate moving at 2.5 cm/a since 2015):
echo 42 6 0 2024.6 | ./cs2cs EPSG:9989 EPSG:4937 -d 9 --3d
41.999994981 5.999991317 -0.001861237 2024.6

and from ETRS89 to CH1903+ due to the datum offset:
echo 42 6 0 2024.6 | ./cs2cs EPSG:4937 EPSG:4150 -d 9 --3d
42.000742733 6.000670188 -60.682799297 2024.6

Looking at the pipelines, the steps would be ITRF2020 -> ETRF2020 -> ETRS89
-> CH1903+
(btw, only since PROJ 9.4.1, when ETRF2020 was added)

I understand that the only way to get the proper transformation is chaining
these two manually. Via ETRS89 ... because I know it. Right?

Well, the future does not look so promising to me: in EPSG I only see
transformations from ITRF2020 to ETRF family, NAD83(2011) family and
NAD83(CSRS)v8. That is Europe, USA and Canada. That's all, folks.

Thanks,
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
Javier Jimenez Shaw
Mercator str 42.
Null-Island
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240827/4996adfd/attachment.htm>

From even.rouault at spatialys.com  Tue Aug 27 10:55:02 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 27 Aug 2024 19:55:02 +0200
Subject: [PROJ] Transformations in ITRF2020
In-Reply-To: <CADRrdKuP1wWPOT4a_TUduBNM_0Hfgp0qfhEp1aadpECng8hyCg@mail.gmail.com>
References: <CADRrdKuP1wWPOT4a_TUduBNM_0Hfgp0qfhEp1aadpECng8hyCg@mail.gmail.com>
Message-ID: <62d0636a-98c1-400e-b11d-e13e311e7913@spatialys.com>

Javier,

I believe that registering a concatenated operation for ITRF2020 -> 
ETRS89 = ITF2020->ETRF2020+ETRF2020->ETRS89 in the database should be 
enough for PROJ to infer the ITRF2020 -> CH1903+ pipeline

Even

Le 27/08/2024 ? 19:29, Javier Jimenez Shaw via PROJ a ?crit?:
> Hi
>
> I am now facing transformations with ITRF2020 with time(yes, because 
> Skylark, but I guess more NTRIPs are going to do (or already doing) 
> the same)
>
> The point is when the destination CRS does not have a direct 
> transformation from ITRF2020 (or almost).
>
> For instance, EPSG:4150, CH1903+ (the geographic of LV95, in 
> Switzerland) is only connected to ETRS89. See that CH1903+ is in the 
> European tectonic plate, as ETRS89
>
> A direct transformation is completely ballpark
>
> echo 42 6 0 2024.6 | ./cs2cs EPSG:9989 EPSG:4150 -d 9 --3d
> 42.000000000 6.000000000 0.000000000 2024.6
>
> However, from ITRF2020 to ETRS89 there is some change due to the time 
> (the European plate moving at 2.5 cm/a since 2015):
> echo 42 6 0 2024.6 | ./cs2cs EPSG:9989 EPSG:4937 -d 9 --3d
> 41.999994981 5.999991317 -0.001861237 2024.6
>
> and from ETRS89 to CH1903+ due to the datum offset:
> echo 42 6 0 2024.6 | ./cs2cs EPSG:4937 EPSG:4150 -d 9 --3d
> 42.000742733 6.000670188 -60.682799297 2024.6
>
> Looking at the pipelines, the steps would be ITRF2020 -> ETRF2020 -> 
> ETRS89 -> CH1903+
> (btw, only since PROJ 9.4.1, when ETRF2020 was added)
>
> I understand that the only way to get the proper transformation is 
> chaining these two manually. Via ETRS89 ... because I know it. Right?
>
> Well, the future does not look so promising to me: in EPSG I only see 
> transformations from ITRF2020 to ETRF family, NAD83(2011) family and 
> NAD83(CSRS)v8. That is Europe, USA and Canada. That's all, folks.
>
> Thanks,
> .___ ._ ..._ .. . ._.? .___ .. __ . _. . __..? ... .... ._ .__
> Javier Jimenez Shaw
> Mercator str 42.
> Null-Island
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240827/75634f07/attachment.htm>

From nyall.dawson at gmail.com  Tue Aug 27 16:06:00 2024
From: nyall.dawson at gmail.com (Nyall Dawson)
Date: Wed, 28 Aug 2024 09:06:00 +1000
Subject: [PROJ] Ellipsoidal distances, with different heights
Message-ID: <CAB28Asgz5N5oVP1ghpp4KngO2BdqVVovg12jMbx-D_jbxVCBVg@mail.gmail.com>

Hi list,

Let's say I have two points on an ellipsoid, with each point having a
different height above the ellipsoid. I want to calculate a kind of
"geodesic" between these points, where there's an assumption that the
gradient of the height-above-ellipsoid for the "geodesic" is constant.

Is this mathematically solvable? Or, more to the point, is it possible
to calculate this using any of the methods exposed via geodesic.h?

Nyall

From even.rouault at spatialys.com  Tue Aug 27 16:36:10 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 28 Aug 2024 01:36:10 +0200
Subject: [PROJ] Ellipsoidal distances, with different heights
In-Reply-To: <CAB28Asgz5N5oVP1ghpp4KngO2BdqVVovg12jMbx-D_jbxVCBVg@mail.gmail.com>
References: <CAB28Asgz5N5oVP1ghpp4KngO2BdqVVovg12jMbx-D_jbxVCBVg@mail.gmail.com>
Message-ID: <9597a384-172c-47a4-9882-b52feaf2196b@spatialys.com>

Nyall,

I'm not sure there's a real definition to what you want to accomplish.

I guess I would :

- use the geod_position() of geodesic.h to compute a sufficient number 
of intermediate positions

- linearly interpolate the ellipsoidal height

- convert the resulting (lon, lat, h) to geocentric (X, Y, Z) using 
+proj=cart

- use 3D Cartesian distance to compute each intermediate segment

- sum them up

A cheaper alternative might be to compute the geodesic distance between 
the start and end points both on the ellipsoid (a + h_start, b + 
h_start) and on the one (a + h_end, b + h_end), and compute some sort of 
mean (arithmetic, geometry, ... ?) on those 2 distances.

Even


Le 28/08/2024 ? 01:06, Nyall Dawson via PROJ a ?crit?:
> Hi list,
>
> Let's say I have two points on an ellipsoid, with each point having a
> different height above the ellipsoid. I want to calculate a kind of
> "geodesic" between these points, where there's an assumption that the
> gradient of the height-above-ellipsoid for the "geodesic" is constant.
>
> Is this mathematically solvable? Or, more to the point, is it possible
> to calculate this using any of the methods exposed via geodesic.h?
>
> Nyall
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From even.rouault at spatialys.com  Wed Aug 28 03:04:05 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 28 Aug 2024 12:04:05 +0200
Subject: [PROJ] Ellipsoidal distances, with different heights
In-Reply-To: <9597a384-172c-47a4-9882-b52feaf2196b@spatialys.com>
References: <CAB28Asgz5N5oVP1ghpp4KngO2BdqVVovg12jMbx-D_jbxVCBVg@mail.gmail.com>
 <9597a384-172c-47a4-9882-b52feaf2196b@spatialys.com>
Message-ID: <2e28ed01-c9be-4d44-8257-74c5e2add0a7@spatialys.com>

Or even simpler, compute geodesic distance on ellipsoid (a + h_mean, b + 
h_mean) where h_mean is the mean of h_start and h_end.? If h_start and 
h_end are small compared to a, I would expect whatever mean formula used 
to lead to similar results. At least this method is guaranteed to give 
the correct result when h_start = h_end = 0 ...

Le 28/08/2024 ? 01:36, Even Rouault via PROJ a ?crit?:
> Nyall,
>
> I'm not sure there's a real definition to what you want to accomplish.
>
> I guess I would :
>
> - use the geod_position() of geodesic.h to compute a sufficient number 
> of intermediate positions
>
> - linearly interpolate the ellipsoidal height
>
> - convert the resulting (lon, lat, h) to geocentric (X, Y, Z) using 
> +proj=cart
>
> - use 3D Cartesian distance to compute each intermediate segment
>
> - sum them up
>
> A cheaper alternative might be to compute the geodesic distance 
> between the start and end points both on the ellipsoid (a + h_start, b 
> + h_start) and on the one (a + h_end, b + h_end), and compute some 
> sort of mean (arithmetic, geometry, ... ?) on those 2 distances.
>
> Even
>
>
> Le 28/08/2024 ? 01:06, Nyall Dawson via PROJ a ?crit?:
>> Hi list,
>>
>> Let's say I have two points on an ellipsoid, with each point having a
>> different height above the ellipsoid. I want to calculate a kind of
>> "geodesic" between these points, where there's an assumption that the
>> gradient of the height-above-ellipsoid for the "geodesic" is constant.
>>
>> Is this mathematically solvable? Or, more to the point, is it possible
>> to calculate this using any of the methods exposed via geodesic.h?
>>
>> Nyall
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
>
-- 
http://www.spatialys.com
My software is free, but my time generally not.


From gdt at lexort.com  Wed Aug 28 04:00:51 2024
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 28 Aug 2024 07:00:51 -0400
Subject: [PROJ] Ellipsoidal distances, with different heights
In-Reply-To: <2e28ed01-c9be-4d44-8257-74c5e2add0a7@spatialys.com> (Even
 Rouault via PROJ's message of "Wed, 28 Aug 2024 12:04:05 +0200")
References: <CAB28Asgz5N5oVP1ghpp4KngO2BdqVVovg12jMbx-D_jbxVCBVg@mail.gmail.com>
 <9597a384-172c-47a4-9882-b52feaf2196b@spatialys.com>
 <2e28ed01-c9be-4d44-8257-74c5e2add0a7@spatialys.com>
Message-ID: <rmi4j74q5cs.fsf@s1.lexort.com>

Even Rouault via PROJ <proj at lists.osgeo.org> writes:

> Or even simpler, compute geodesic distance on ellipsoid (a + h_mean, b
> + h_mean) where h_mean is the mean of h_start and h_end.? If h_start
> and h_end are small compared to a, I would expect whatever mean
> formula used to lead to similar results. At least this method is
> guaranteed to give the correct result when h_start = h_end = 0 ...

Or go full Pythagoras

  (geodesic_distance)^2 + (h_start-h_end)^2)^1/2

so you don't need the horiz >> vertical assumption.  Bonus points for
someone who can do the integrals and see if that's right or not, and if
not, if they can find a closed-form solution.

Stepping back, I would ask what semantics you want and why they make
sense.

In 3D, the shortest distance between 2 points is a line in 3d, which
when converted back to llh, has h dropping in between.  A geodesic is
the shortest distance constrained to the ellipsoid.  That's longer than
the shortest 3d line.  But it makes sense if you are navigation at h=0
(or H=0, more likely!, or H "small", constrained to topography).

You're asking for a shortest distance that's sort of constrained to the
ellipsoid but not entirely.  Intuitively I can see the point of your
smooth change goal.

From charles.karney at gmail.com  Wed Aug 28 04:18:12 2024
From: charles.karney at gmail.com (Charles Karney)
Date: Wed, 28 Aug 2024 07:18:12 -0400
Subject: [PROJ] Ellipsoidal distances, with different heights
In-Reply-To: <2e28ed01-c9be-4d44-8257-74c5e2add0a7@spatialys.com>
References: <CAB28Asgz5N5oVP1ghpp4KngO2BdqVVovg12jMbx-D_jbxVCBVg@mail.gmail.com>
 <9597a384-172c-47a4-9882-b52feaf2196b@spatialys.com>
 <2e28ed01-c9be-4d44-8257-74c5e2add0a7@spatialys.com>
Message-ID: <CAH36mb8cenXCbp2J5hMBFEeKtu_K=GEmdKvxZhsYX6c56znCZQ@mail.gmail.com>

Even's suggestion (compute the geodesics on a height adjusted
ellipsoid) is probably as good as you're going to get for now.  There
has been some work on the restricted version of this problem, computing
geodesics on a surface of constant height above the ellipsoid.  See

  Richard J. Mathar
  Geodetic Line at Constant Altitude above the Ellipsoid
  https://arxiv.org/abs/0711.0642

I toyed with the idea of implementing a bullet-proof solution of thie
problem, but I have other irons in the fire at present.

On Wed, Aug 28, 2024 at 6:04?AM Even Rouault via PROJ
<proj at lists.osgeo.org> wrote:
>
> Or even simpler, compute geodesic distance on ellipsoid (a + h_mean, b +
> h_mean) where h_mean is the mean of h_start and h_end.  If h_start and
> h_end are small compared to a, I would expect whatever mean formula used
> to lead to similar results. At least this method is guaranteed to give
> the correct result when h_start = h_end = 0 ...
>
> Le 28/08/2024 ? 01:36, Even Rouault via PROJ a ?crit :
> > Nyall,
> >
> > I'm not sure there's a real definition to what you want to accomplish.
> >
> > I guess I would :
> >
> > - use the geod_position() of geodesic.h to compute a sufficient number
> > of intermediate positions
> >
> > - linearly interpolate the ellipsoidal height
> >
> > - convert the resulting (lon, lat, h) to geocentric (X, Y, Z) using
> > +proj=cart
> >
> > - use 3D Cartesian distance to compute each intermediate segment
> >
> > - sum them up
> >
> > A cheaper alternative might be to compute the geodesic distance
> > between the start and end points both on the ellipsoid (a + h_start, b
> > + h_start) and on the one (a + h_end, b + h_end), and compute some
> > sort of mean (arithmetic, geometry, ... ?) on those 2 distances.
> >
> > Even
> >
> >
> > Le 28/08/2024 ? 01:06, Nyall Dawson via PROJ a ?crit :
> >> Hi list,
> >>
> >> Let's say I have two points on an ellipsoid, with each point having a
> >> different height above the ellipsoid. I want to calculate a kind of
> >> "geodesic" between these points, where there's an assumption that the
> >> gradient of the height-above-ellipsoid for the "geodesic" is constant.
> >>
> >> Is this mathematically solvable? Or, more to the point, is it possible
> >> to calculate this using any of the methods exposed via geodesic.h?
> >>
> >> Nyall

From mircea at neacsu.net  Wed Aug 28 11:52:49 2024
From: mircea at neacsu.net (Mircea Neacsu)
Date: Wed, 28 Aug 2024 14:52:49 -0400
Subject: [PROJ] Ellipsoidal distances, with different heights
In-Reply-To: <CAB28Asgz5N5oVP1ghpp4KngO2BdqVVovg12jMbx-D_jbxVCBVg@mail.gmail.com>
References: <CAB28Asgz5N5oVP1ghpp4KngO2BdqVVovg12jMbx-D_jbxVCBVg@mail.gmail.com>
Message-ID: <1919a5557cb.126e7cb1589703.9071728649905856251@neacsu.net>

You can also see the lecture notes on geodetic positions computations at https://gge.ext.unb.ca/Pubs/LN39.pdf



-- 



Mircea Neacsu 




---- On Tue, 27 Aug 2024 19:06:00 -0400 Nyall Dawson via PROJ <proj at lists.osgeo.org> wrote ---



Hi list, 
 
Let's say I have two points on an ellipsoid, with each point having a 
different height above the ellipsoid. I want to calculate a kind of 
"geodesic" between these points, where there's an assumption that the 
gradient of the height-above-ellipsoid for the "geodesic" is constant. 
 
Is this mathematically solvable? Or, more to the point, is it possible 
to calculate this using any of the methods exposed via geodesic.h? 
 
Nyall 
_______________________________________________ 
PROJ mailing list 
mailto:PROJ at lists.osgeo.org 
https://lists.osgeo.org/mailman/listinfo/proj
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240828/f3be68bd/attachment.htm>

From knudsen.thomas at gmail.com  Thu Aug 29 01:32:16 2024
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Thu, 29 Aug 2024 10:32:16 +0200
Subject: [PROJ] Ellipsoidal distances, with different heights
In-Reply-To: <rmi4j74q5cs.fsf@s1.lexort.com>
References: <CAB28Asgz5N5oVP1ghpp4KngO2BdqVVovg12jMbx-D_jbxVCBVg@mail.gmail.com>
 <9597a384-172c-47a4-9882-b52feaf2196b@spatialys.com>
 <2e28ed01-c9be-4d44-8257-74c5e2add0a7@spatialys.com>
 <rmi4j74q5cs.fsf@s1.lexort.com>
Message-ID: <CAH0YoEMV0caqauVWfwD5_RSKE_y_1HRYNBGg_bk_Fb9kxSOdSQ@mail.gmail.com>

Greg Troxel said:

> Or go full Pythagoras
> (geodesic_distance)^2 + (h_start-h_end)^2)^1/2

That's the approach taken in the proj_lpz_dist function in the PROJ 4D API:

https://github.com/OSGeo/PROJ/blob/298f7f6f967bb62fa8abf6a243dce46ae05cd474/src/4D_api.cpp#L148-L153

