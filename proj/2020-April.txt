From dominik.vogt at gmx.de  Wed Apr  8 03:38:30 2020
From: dominik.vogt at gmx.de (Dominik Vogt)
Date: Wed, 8 Apr 2020 11:38:30 +0100
Subject: [PROJ] Calculating DTK25 from WGS84
Message-ID: <20200408103830.foqc4fqwyi575cfi@gmx.de>

Hi folks,

I have little knowledge of map projections and really need some
help with a coordinate transformation.

The source data is a long list of latitude/longitude pairs in
WGS84 (epsg:4326).  The goal is to calculate the corresponding
DTK25 map sheet.

DTK25 is a four digit number XXYY where

  XX = [(56 - lat) * 10]
  YY = [(lon - 5.66666666) * 6]

*But* DTK25 is based on the bessel ellipsoid.

What I cannot figure out is how to transform the latitude and
longitude from the wgs84 ellipsoid form to the bessel ellipsoid
form.  I've tried something like this:

  echo 49.12345 8.55555 |
  cs2cs +proj=latlon +ellps=WGS84 +to +proj=latlon +ellps=bessel -f "%.12f"

But it actually does nothing; output coordinates are unchanged.
Maybe I just don't understand how cs2cs works.

Ciao

Dominik ^_^  ^_^

--

Dominik Vogt

From even.rouault at spatialys.com  Wed Apr  8 03:58:39 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 08 Apr 2020 12:58:39 +0200
Subject: [PROJ] Calculating DTK25 from WGS84
In-Reply-To: <20200408103830.foqc4fqwyi575cfi@gmx.de>
References: <20200408103830.foqc4fqwyi575cfi@gmx.de>
Message-ID: <2791526.p5QVK5hUI9@even-i700>

Dominik,

first, I'm not familiar at all with DTK25 but
seeing
http://www.adv-online.de/AdV-Produkte/Standards-und-Produktblaetter/Produktblaetter/binarywriterservlet?imgUid=3ab60d30-b338-9eff-de33-50376a112976&uBasVariant=11111111-1111-1111-1111-111111111111
it seems that DTK25 products on Bessel ellipsoid use the Potsdam datum

The corresponding geographic CRS is likely EPSG:4746 "PD/83"

Assuming you have the BETA2007 grid installed,

echo 49.12345 8.55555 | cs2cs -f "%.8f" EPSG:4326  EPSG:4746

49.12450370	8.55651912 0.00000000

However given the formula you give to compute DTK25 sheet numbers, the influence
of the datum shift is completely neglectable, unless you would be
just at the boundary between 2 sheets (but I assume they have some overlap ?)

(56 - 49.12450370) * 10 = 68.75496300000002
(56 - 49.1245) * 10 = 68.75500000000002
(8.55555 -  5.66666666) * 6 = 17.333300040000005
(8.55651912 -  5.66666666) * 6 = 17.339114760000008

> echo 49.12345 8.55555 |>  cs2cs +proj=latlon +ellps=WGS84 +to +proj=latlon +ellps=bessel -f "%.12f"> But it actually does nothing; output coordinates are unchanged.

Yes, to get changes in coordinates, there must be a datum qualifier on each side.
The Bessel ellipsoid itself doesn't define a datum, so you need either to
add a +towgs84 or +nadgrids qualifier, when using this PROJ.4 deprecated syntax
Note also that when using it, you must specify coordinates in long, lat order, whereas
when using EPSG geographic CRS codes, this must be in lat, long order.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200408/76b96edd/attachment.html>

From dominik.vogt at gmx.de  Wed Apr  8 04:45:09 2020
From: dominik.vogt at gmx.de (Dominik Vogt)
Date: Wed, 8 Apr 2020 12:45:09 +0100
Subject: [PROJ] Calculating DTK25 from WGS84
In-Reply-To: <2791526.p5QVK5hUI9@even-i700>
References: <20200408103830.foqc4fqwyi575cfi@gmx.de>
 <2791526.p5QVK5hUI9@even-i700>
Message-ID: <20200408114509.by6fttxfak2fhd4x@gmx.de>

On Wed, Apr 08, 2020 at 12:58:39PM +0200, Even Rouault wrote:
> first, I'm not familiar at all with DTK25 but
> seeing
> http://www.adv-online.de/AdV-Produkte/Standards-und-Produktblaetter/Produktblaetter/binarywriterservlet?imgUid=3ab60d30-b338-9eff-de33-50376a112976&uBasVariant=11111111-1111-1111-1111-111111111111
> it seems that DTK25 products on Bessel ellipsoid use the Potsdam datum

Exactly.

> The corresponding geographic CRS is likely EPSG:4746 "PD/83"
>
> Assuming you have the BETA2007 grid installed,
>
> echo 49.12345 8.55555 | cs2cs -f "%.8f" EPSG:4326  EPSG:4746
>
> 49.12450370	8.55651912 0.00000000

Yes, great, that's what I was looking for.  After upgrading proj
to the latest version this works fine.

> However given the formula you give to compute DTK25 sheet numbers, the influence
> of the datum shift is completely neglectable, unless you would be
> just at the boundary between 2 sheets (but I assume they have some overlap ?)

That's the point of the coordinate transformation.  We do mapping
of plant species, and all findings are reported using quarters of
the DTK25 maps, e.g. "TK 6918/4".  When out in the field, we
usually have a printed map and make sure to stay inside the
official boundaries.  So, the +- 100 m difference actually does
matter.

Thanks a lot!

Ciao

Dominik ^_^  ^_^

--

Dominik Vogt

From finn at arildsen.com  Wed Apr  8 08:35:00 2020
From: finn at arildsen.com (Finn Arildsen)
Date: Wed, 8 Apr 2020 17:35:00 +0200
Subject: [PROJ] Linking proj as a static lib to a Windows application
Message-ID: <001e01d60dbb$444f4720$ccedd560$@arildsen.com>

Hi,

 

I'm working on integrating PROJ into my Windows application, and I have a
problem with uninitialzed static variables in the PROJ lib.

 

So far I have been able to build the PROJ lib using the supplied CMAKE
scripts.  I have successfully linked the lib to my application, and I have
been able to call library functions.  proj_context_create connects to the
sqlite database correctly etc.   

 

However, the static objects in the PROJ library are never initialized -
constructors are never called, so eventually the library crashes in a call
to  UnitOfMeasure::conversionToSI, because UnitOfMeasure::DEGREE is not
initialized.

 

I have successfully run the library test suite, and I can see that when
running the test programs in the debugger, the library static constructors
get correctly called from the run-time library's _initterm function (through
a list of function pointers, which I assume the linker sets up).   

 

When running my own application, the _initterm function is also correctly
called, but it never calls the PROJ static constructors.   

 

I use Visual Studio 2019, and I have carefully checked and compared compiler
and linker options between the test suite and my application and have not
found anything that can explain this.

 

I wonder if any of the people who have contributed the test suite may have
any ideas as to why this happens?

 

Thanks in advance for any help.

 

Finn Arildsen

Denmark

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200408/9cdd6ebe/attachment.html>

From even.rouault at spatialys.com  Wed Apr  8 09:07:27 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 08 Apr 2020 18:07:27 +0200
Subject: [PROJ] Linking proj as a static lib to a Windows application
In-Reply-To: <001e01d60dbb$444f4720$ccedd560$@arildsen.com>
References: <001e01d60dbb$444f4720$ccedd560$@arildsen.com>
Message-ID: <2353312.q3QFU3Bt2n@even-i700>

Finn,

> I'm working on integrating PROJ into my Windows application, and I have a
> problem with uninitialzed static variables in the PROJ lib.


Maybe the hints at
https://stackoverflow.com/questions/39336778/how-to-force-include-static-objects-from-a-static-library-in-c-msvc-11
can help ?

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200408/f253f16f/attachment-0001.html>

From finn at arildsen.com  Thu Apr  9 04:59:02 2020
From: finn at arildsen.com (Finn Arildsen)
Date: Thu, 9 Apr 2020 13:59:02 +0200
Subject: [PROJ] Linking proj as a static lib to a Windows application
In-Reply-To: <2353312.q3QFU3Bt2n@even-i700>
References: <001e01d60dbb$444f4720$ccedd560$@arildsen.com>
 <2353312.q3QFU3Bt2n@even-i700>
Message-ID: <001101d60e66$46084b10$d218e130$@arildsen.com>

Hi Even,

 

Thanks for the reference. üòä  I did consider these hints, where the idea is to force the linker to include the static objects from the library.  However, I don‚Äôt have a clue as to which symbol to tell the linker to use.  All of my guesses, based on dumpbin output from the .lib file, led to ‚Äúunresolved external symbol‚Äù errors from the linker.  ‚òπ

 

Finn

 

From: Even Rouault <even.rouault at spatialys.com> 
Sent: 8. april 2020 18:07
To: proj at lists.osgeo.org
Cc: Finn Arildsen <finn at arildsen.com>
Subject: Re: [PROJ] Linking proj as a static lib to a Windows application

 

Finn,

 

> I'm working on integrating PROJ into my Windows application, and I have a

> problem with uninitialzed static variables in the PROJ lib.

 

 

Maybe the hints at

https://stackoverflow.com/questions/39336778/how-to-force-include-static-objects-from-a-static-library-in-c-msvc-11

can help ?

 

Even

 

-- 

Spatialys - Geospatial professional services

http://www.spatialys.com

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200409/52605706/attachment.html>

From Roger.Bivand at nhh.no  Fri Apr 10 03:58:14 2020
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Fri, 10 Apr 2020 12:58:14 +0200
Subject: [PROJ] proj_create reports errors itself
Message-ID: <alpine.LFD.2.21.2004101250420.2680858@reclus.nhh.no>

Hi,

A small example:

$ echo "0 0" | cs2cs +proj=longlat +proj=sch
proj_create: Error -37: failed to find projection to be rotated
Rel. 7.0.0, March 1st, 2020
<cs2cs>:
cannot instantiate target coordinate system
program abnormally terminated

>From the cs2cs code, I can see the error message "cannot ... " being 
generated, but proj_create seems to write to stderr itself:

$ echo "0 0" | cs2cs +proj=longlat +proj=sch 2> xy
$ cat xy
proj_create: Error -37: failed to find projection to be rotated
Rel. 7.0.0, March 1st, 2020
<cs2cs>:
cannot instantiate target coordinate system
program abnormally terminated

How can proj_create() (and maybe other functions) be instructed not to do 
this? Testing the returned value for equality to 0 works, as cs2cs also 
shows, but proj_create() writes on stderr anyway, which should be 
avoidable.

In the R rgdal package, I still have not moved to one context for the 
whole PROJ session - is this connected? From the cs2cs example, I don't 
think so, but ask for hints.

Best wishes,

Roger

-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From even.rouault at spatialys.com  Fri Apr 10 04:14:36 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 10 Apr 2020 13:14:36 +0200
Subject: [PROJ] proj_create reports errors itself
In-Reply-To: <alpine.LFD.2.21.2004101250420.2680858@reclus.nhh.no>
References: <alpine.LFD.2.21.2004101250420.2680858@reclus.nhh.no>
Message-ID: <1987819.ZV7EumUX4F@even-i700>

Roger,

You can install a silent logger like this:

static void silent_logger(void *, int, const char *) {}

proj_log_func(ctxt, NULL, silent_logger);
where ctxt can be potentially the default/NULL context

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200410/776bb100/attachment.html>

From Roger.Bivand at nhh.no  Fri Apr 10 04:24:52 2020
From: Roger.Bivand at nhh.no (Roger Bivand)
Date: Fri, 10 Apr 2020 13:24:52 +0200
Subject: [PROJ] proj_create reports errors itself
In-Reply-To: <1987819.ZV7EumUX4F@even-i700>
References: <alpine.LFD.2.21.2004101250420.2680858@reclus.nhh.no>
 <1987819.ZV7EumUX4F@even-i700>
Message-ID: <alpine.LFD.2.21.2004101321020.2680858@reclus.nhh.no>

On Fri, 10 Apr 2020, Even Rouault wrote:

> Roger,
>
> You can install a silent logger like this:
>
> static void silent_logger(void *, int, const char *) {}
>
> proj_log_func(ctxt, NULL, silent_logger);
> where ctxt can be potentially the default/NULL context


Thanks, this is helpful. It looks as though I should inject it into my 
contexts when I open them, and take responsibility for error handling by 
copying the error string to a string, destroying the context (and other 
open objects), and use R's long jump error() passing the string back to R.

Best wishes,

Roger

>
> Even
>
>

-- 
Roger Bivand
Department of Economics, Norwegian School of Economics,
Helleveien 30, N-5045 Bergen, Norway.
voice: +47 55 95 93 55; e-mail: Roger.Bivand at nhh.no
https://orcid.org/0000-0003-2392-6140
https://scholar.google.no/citations?user=AWeghB0AAAAJ&hl=en

From jbanting at sparkgeo.com  Fri Apr 10 15:08:10 2020
From: jbanting at sparkgeo.com (James Banting)
Date: Fri, 10 Apr 2020 15:08:10 -0700
Subject: [PROJ] Canada Lambert Conformal Conic Projection
Message-ID: <E9923E17-7FE1-46EF-B77A-E297831515F7@sparkgeo.com>

Hi All,

I'm creating a STAC catalog for Canada's SPOT4/5 orthoimagery <https://open.canada.ca/data/en/dataset/d799c202-603d-4e5c-b1eb-d058803f80f9> and I‚Äôd like to build a proj json file and include it in the STAC items. 
The proj json schema files seem to indicate that I need an `id` object with `authority` and `code` to be compliant. Since the projection (Canada Lambert Conformal Conic [CSRS]), doesn‚Äôt have an EPSG code, I used this:
    "id": {
      "authority": "CANLAMB-CSRS",
      "code": 1
    }

Is this acceptable in proj world? It‚Äôs been a while since I‚Äôve had to touch projection files.

As a reference, this is the documentation for the CANLAMB projection <http://ftp.geogratis.gc.ca/pub/nrcan_rncan/image/spot/geobase_orthoimages/doc/GeoBase_spot_en_Orthoimage_Specifications.pdf> (pg 9 of the document, 15 of the pdf) and I‚Äôve attached my take at the proj json file.

Thanks,
--
James Banting
Sparkgeo


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200410/c13e455a/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: canlamb_proj.json
Type: application/json
Size: 2546 bytes
Desc: not available
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200410/c13e455a/attachment.json>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200410/c13e455a/attachment-0001.html>

From even.rouault at spatialys.com  Fri Apr 10 16:07:08 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 11 Apr 2020 01:07:08 +0200
Subject: [PROJ] Canada Lambert Conformal Conic Projection
In-Reply-To: <E9923E17-7FE1-46EF-B77A-E297831515F7@sparkgeo.com>
References: <E9923E17-7FE1-46EF-B77A-E297831515F7@sparkgeo.com>
Message-ID: <4106063.94stVBKe6c@even-i700>

James,

Several points:

- this is actually EPSG:3979, "NAD83(CSRS) / Canada Atlas Lambert"
  The only difference is the switch between the latitude of 1st and 2nd
  std parallel, but this is numerically equivalent for LCC_2SP.
  The following remarks are then a bit auxiliary now :-)

- there's an extra space at the end of the top name

- authority = CANLAMB-CSRS would be odd to me. An authority must be something
  identifiable, like some form of organization, that can issue several
  records. CANLAMB-CSRS would be more an id for this CRS for some authority
  XXXX. But I do see in the PDF you mention that they use this...

Even


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200411/d1f16753/attachment.html>

From jmckenna at gatewaygeomatics.com  Sat Apr 11 03:53:54 2020
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Sat, 11 Apr 2020 07:53:54 -0300
Subject: [PROJ] Canada Lambert Conformal Conic Projection
In-Reply-To: <E9923E17-7FE1-46EF-B77A-E297831515F7@sparkgeo.com>
References: <E9923E17-7FE1-46EF-B77A-E297831515F7@sparkgeo.com>
Message-ID: <443f61c5-a2b9-d94a-2249-e3301d453e8e@gatewaygeomatics.com>

Hi James,

Some background on the 'Canada Lambert Conformal Conic' projection 
(because this is the one place that we can discuss this kind of 
background) :

You will remember the many years we all leveraged 'custom' EPSG codes to 
handle this projection, as there was no official EPSG code as you said. 
EPSG:42304 was advertized by NRCan as the projection for all web 
services for the Canada Atlas, but since that EPSG code didn't exist it 
would cause much grief for clients, as you wrote here.  This was for 
several years.  Finally in 2008 I submitted this projection to the EPSG 
Registry, and it was approved in 2009 as EPSG 3978 and 3979.  Fast 
forward to today and all of the Canada Atlas OGC services advertize 
EPSG:3978 as its default projection for WMS services.

Some GeoGratis/NRCan data documentation though is older (your link is 
from 2010) and does not mention these EPSG changes.

I have since submitted several Canadian-related projections to the 
registry, and all have propagated to FOSS4G tools now.

Here is the approved change request stored in the EPSG Registry:

   Code: EPSG::2009.012
   Reporter: Jeff McKenna; Gateway Geomatics
   Request: Add Canada Atlas LCC
   Actions Taken: Added proj 3977 and projCRS 3978-79.
   Report Date: 2009-02-19
   Closed Date: 2009-06-02

Happy easter weekend,

-jeff



-- 
Jeff McKenna
MapServer Consulting and Training Services
https://gatewaygeomatics.com/



On 2020-04-10 7:08 p.m., James Banting wrote:
> Hi All,
> 
> I'm creating a STAC catalog for Canada's SPOT4/5 orthoimagery 
> <https://open.canada.ca/data/en/dataset/d799c202-603d-4e5c-b1eb-d058803f80f9>¬†and 
> I‚Äôd like to build a proj json file and include it in the STAC items.
> The proj json schema files seem to indicate that I need an `id` object 
> with `authority` and `code` to be compliant. Since the projection 
> (Canada Lambert Conformal Conic [CSRS]), doesn‚Äôt have an EPSG code, I 
> used this:
> "id": {
> "authority": "CANLAMB-CSRS",
> "code": 1
> }
> 
> *Is this acceptable in proj world? It‚Äôs been a while since I‚Äôve had to 
> touch projection files.*
> 
> As a reference, this is the documentation for the CANLAMB projection 
> <http://ftp.geogratis.gc.ca/pub/nrcan_rncan/image/spot/geobase_orthoimages/doc/GeoBase_spot_en_Orthoimage_Specifications.pdf>¬†(pg 
> 9 of the document, 15 of the pdf) and I‚Äôve attached my take at the proj 
> json file.
> 
> Thanks,
> --
> James Banting
> Sparkgeo
> 
> 
> 
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
> 


From jbanting at sparkgeo.com  Fri Apr 10 22:24:07 2020
From: jbanting at sparkgeo.com (James Banting)
Date: Fri, 10 Apr 2020 22:24:07 -0700
Subject: [PROJ] Canada Lambert Conformal Conic Projection
In-Reply-To: <4106063.94stVBKe6c@even-i700>
References: <E9923E17-7FE1-46EF-B77A-E297831515F7@sparkgeo.com>
 <4106063.94stVBKe6c@even-i700>
Message-ID: <F4B28F6B-A31C-4640-B2FE-E2DB46653DD5@sparkgeo.com>

Thanks Even.

They‚Äôre aren‚Äôt a ton of ortho imagery described by STAC so this will be a nice addition. I appreciate the tips as well. 
I always learn something when posting in the mailing list. It‚Äôs great.

Re: the authority. I guess then it would be something like: 
authority = Government of Canada, Natural Resources Canada, Centre for Topographic Information
code = CANLAMB

--
James



On Apr 10, 2020, at 4:07 PM, Even Rouault <even.rouault at spatialys.com> wrote:

James,
 
Several points:
 
- this is actually EPSG:3979, "NAD83(CSRS) / Canada Atlas Lambert"
  The only difference is the switch between the latitude of 1st and 2nd
  std parallel, but this is numerically equivalent for LCC_2SP.
  The following remarks are then a bit auxiliary now :-)
 
- there's an extra space at the end of the top name
 
- authority = CANLAMB-CSRS would be odd to me. An authority must be something
  identifiable, like some form of organization, that can issue several
  records. CANLAMB-CSRS would be more an id for this CRS for some authority
  XXXX. But I do see in the PDF you mention that they use this...
 
Even
 
 
-- 
Spatialys - Geospatial professional services
http://www.spatialys.com <http://www.spatialys.com/>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200410/8b879c56/attachment-0001.html>

From knudsen.thomas at gmail.com  Sat Apr 11 14:04:40 2020
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Sat, 11 Apr 2020 23:04:40 +0200
Subject: [PROJ] Canada Lambert Conformal Conic Projection
In-Reply-To: <F4B28F6B-A31C-4640-B2FE-E2DB46653DD5@sparkgeo.com>
References: <E9923E17-7FE1-46EF-B77A-E297831515F7@sparkgeo.com>
 <4106063.94stVBKe6c@even-i700>
 <F4B28F6B-A31C-4640-B2FE-E2DB46653DD5@sparkgeo.com>
Message-ID: <CAH0YoEO96yeV0+H6-TJLbHmb2FUNqhr88gF72a_ukc7MOG9uMA@mail.gmail.com>

So NRCAN:CANLAMB, perhaps?

Den l√∏r. 11. apr. 2020 kl. 17.07 skrev James Banting <jbanting at sparkgeo.com
>:

> Thanks Even.
>
> They‚Äôre aren‚Äôt a ton of ortho imagery described by STAC so this will be a
> nice addition. I appreciate the tips as well.
> I always learn something when posting in the mailing list. It‚Äôs great.
>
> Re: the authority. I guess then it would be something like:
> authority = Government of Canada, Natural Resources Canada, Centre for
> Topographic Information
> code = CANLAMB
>
> --
> James
>
>
>
> On Apr 10, 2020, at 4:07 PM, Even Rouault <even.rouault at spatialys.com>
> wrote:
>
> James,
>
>
> Several points:
>
>
> - this is actually EPSG:3979, "NAD83(CSRS) / Canada Atlas Lambert"
> The only difference is the switch between the latitude of 1st and 2nd
> std parallel, but this is numerically equivalent for LCC_2SP.
> The following remarks are then a bit auxiliary now :-)
>
>
> - there's an extra space at the end of the top name
>
>
> - authority = CANLAMB-CSRS would be odd to me. An authority must be
> something
> identifiable, like some form of organization, that can issue several
> records. CANLAMB-CSRS would be more an id for this CRS for some authority
> XXXX. But I do see in the PDF you mention that they use this...
>
>
> Even
>
>
>
>
> --
> Spatialys - Geospatial professional services
> http://www.spatialys.com
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200411/9fddc7c1/attachment.html>

From even.rouault at spatialys.com  Sat Apr 11 14:45:48 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 11 Apr 2020 23:45:48 +0200
Subject: [PROJ] Canada Lambert Conformal Conic Projection
In-Reply-To: <CAH0YoEO96yeV0+H6-TJLbHmb2FUNqhr88gF72a_ukc7MOG9uMA@mail.gmail.com>
References: <E9923E17-7FE1-46EF-B77A-E297831515F7@sparkgeo.com>
 <F4B28F6B-A31C-4640-B2FE-E2DB46653DD5@sparkgeo.com>
 <CAH0YoEO96yeV0+H6-TJLbHmb2FUNqhr88gF72a_ukc7MOG9uMA@mail.gmail.com>
Message-ID: <21751806.dqnLNGMhB7@even-i700>

On samedi 11 avril 2020 23:04:40 CEST Thomas Knudsen 
wrote:
> So NRCAN:CANLAMB, perhaps?

To be clear, this is unnecessary. EPSG:3979 should be used

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200411/4656739a/attachment.html>

From dhoese at gmail.com  Sun Apr 12 11:30:07 2020
From: dhoese at gmail.com (David Hoese)
Date: Sun, 12 Apr 2020 13:30:07 -0500
Subject: [PROJ] Understanding dropped parameters for stere and latlong
Message-ID: <14e788cf-f238-45e6-ad52-cf3b32a8d70a@gmail.com>

I recently started converting a Python project from using PROJ 
parameters (strings and dicts) to WKT by using pyproj's CRS object's 
"to_wkt" method. I ran in to a couple surprises with some of my 
project's unit tests and asked the pyproj folks about it here:

https://github.com/pyproj4/pyproj/issues/592

It seems like most of the confusion is from a misunderstanding of the 
`stere` and `latlong` projections in PROJ and how they translate to WKT. 
I was hoping someone could help me understand some of these cases. First:


crs = CRS("+proj=stere +a=6378144.0 +b=6356759.0 +lat_0=50.00 
+lat_ts=35.00 +lon_0=8.00")

crs.to_wkt()
# Outputs: 
'PROJCRS["unknown",BASEGEOGCRS["unknown",DATUM["unknown",ELLIPSOID["unknown",6378144,298.253168108487,LENGTHUNIT["metre",1,ID["EPSG",9001]]]],PRIMEM["Greenwich",0,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8901]]],CONVERSION["unknown",METHOD["Stereographic"],PARAMETER["Latitude 
of natural 
origin",50,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8801]],PARAMETER["Longitude 
of natural 
origin",8,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8802]],PARAMETER["Scale 
factor at natural 
origin",1,SCALEUNIT["unity",1],ID["EPSG",8805]],PARAMETER["False 
easting",0,LENGTHUNIT["metre",1],ID["EPSG",8806]],PARAMETER["False 
northing",0,LENGTHUNIT["metre",1],ID["EPSG",8807]]],CS[Cartesian,2],AXIS["(E)",east,ORDER[1],LENGTHUNIT["metre",1,ID["EPSG",9001]]],AXIS["(N)",north,ORDER[2],LENGTHUNIT["metre",1,ID["EPSG",9001]]]]'

I noticed that the `lat_ts` parameter gets dropped for any case where 
`lat_0` isn't -90 or 90. Is this expected? Like I said, this case was in 
a unit test in our project for a long time so I assume it must have been 
valid at some point. This behavior with lat_ts isn't mentioned in the 
projection description here 
(https://proj.org/operations/projections/stere.html). So I'm wondering 
if this is a new-ish more strict specification of it. Where could I go 
to find out more?

Second case:

Is it no longer valid (or maybe it never was) to specify a "lon_0" for a 
lat/lon projection:

crs = CRS("+proj=latlong +lon_0=45")

crs.to_wkt()
# Outputs:
'GEOGCRS["unknown",DATUM["World Geodetic System 1984",ELLIPSOID["WGS 
84",6378137,298.257223563,LENGTHUNIT["metre",1]],ID["EPSG",6326]],PRIMEM["Greenwich",0,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8901]],CS[ellipsoidal,2],AXIS["longitude",east,ORDER[1],ANGLEUNIT["degree",0.0174532925199433,ID["EPSG",9122]]],AXIS["latitude",north,ORDER[2],ANGLEUNIT["degree",0.0174532925199433,ID["EPSG",9122]]]]'

Any help is much appreciated. Thanks.

Dave

From even.rouault at spatialys.com  Sun Apr 12 12:50:04 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 12 Apr 2020 21:50:04 +0200
Subject: [PROJ] Understanding dropped parameters for stere and latlong
In-Reply-To: <14e788cf-f238-45e6-ad52-cf3b32a8d70a@gmail.com>
References: <14e788cf-f238-45e6-ad52-cf3b32a8d70a@gmail.com>
Message-ID: <1857734.WHYiAqXbhr@even-i700>

David,

> I noticed that the `lat_ts` parameter gets dropped for any case where
> `lat_0` isn't -90 or 90. Is this expected?

Yes. Given what is supported in the mathematical part of PROJ, either you have Polar 
Stereographic (lat_0=+/-90, and lat_ts),  or Oblique Stereographic (lat_0 != +/-90, and k_0)
Previous PROJ versions might have returned the string you provided, but that didn't mean all 
the parameters you specified were taken into account.

> Is it no longer valid (or maybe it never was) to specify a "lon_0" for a
> lat/lon projection:
> 
> crs = CRS("+proj=latlong +lon_0=45")
> 
> crs.to_wkt()
> # Outputs:
> 'GEOGCRS["unknown",DATUM["World Geodetic System 1984",ELLIPSOID["WGS
> 84",6378137,298.257223563,LENGTHUNIT["metre",1]],ID["EPSG",6326]],PRIMEM["Gr
> eenwich",0,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8901]],CS[ellips
> oidal,2],AXIS["longitude",east,ORDER[1],ANGLEUNIT["degree",0.017453292519943
> 3,ID["EPSG",9122]]],AXIS["latitude",north,ORDER[2],ANGLEUNIT["degree",0.0174
> 532925199433,ID["EPSG",9122]]]]'

There's no way in standard WKT to express a longitude of origin != 0 for a GeographicCRS. If 
you export to WKT1_GDAL, a EXTENSION[] node captures this however. Or if you re-export 
back to PROJ string the CRS object built from "+proj=latlong +lon_0=45", you'll get back the 
original string.

Even


-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200412/2566a717/attachment.html>

From dhoese at gmail.com  Sun Apr 12 14:53:23 2020
From: dhoese at gmail.com (David Hoese)
Date: Sun, 12 Apr 2020 16:53:23 -0500
Subject: [PROJ] Understanding dropped parameters for stere and latlong
In-Reply-To: <1857734.WHYiAqXbhr@even-i700>
References: <14e788cf-f238-45e6-ad52-cf3b32a8d70a@gmail.com>
 <1857734.WHYiAqXbhr@even-i700>
Message-ID: <d3da8820-5cbe-73f1-9a4b-fe11213b3fad@gmail.com>

Thanks Even,

 >There's no way in standard WKT to express a longitude of origin != 0 
for a GeographicCRS. If you export to WKT1_GDAL, a EXTENSION[] node 
captures this however. Or if you re-export back to PROJ string the CRS 
object built from "+proj=latlong +lon_0=45", you'll get back the 
original string.

So if I use WKT2 as my standard in-memory/serialized version of a CRS, 
is there any standard way to handle a geotiff that goes over the 
anti-meridian (-180/180)? In the past I've played around with `+over` or 
changing with `+lon_0=X`, but those won't work here it seems.

Thanks.

Dave

On 4/12/20 2:50 PM, Even Rouault wrote:
> David,
> 
>  > I noticed that the `lat_ts` parameter gets dropped for any case where
> 
>  > `lat_0` isn't -90 or 90. Is this expected?
> 
> Yes. Given what is supported in the mathematical part of PROJ, either 
> you have Polar Stereographic (lat_0=+/-90, and lat_ts), or Oblique 
> Stereographic (lat_0 != +/-90, and k_0)
> 
> Previous PROJ versions might have returned the string you provided, but 
> that didn't mean all the parameters you specified were taken into account.
> 
>  > Is it no longer valid (or maybe it never was) to specify a "lon_0" for a
> 
>  > lat/lon projection:
> 
>  >
> 
>  > crs = CRS("+proj=latlong +lon_0=45")
> 
>  >
> 
>  > crs.to_wkt()
> 
>  > # Outputs:
> 
>  > 'GEOGCRS["unknown",DATUM["World Geodetic System 1984",ELLIPSOID["WGS
> 
>  > 
> 84",6378137,298.257223563,LENGTHUNIT["metre",1]],ID["EPSG",6326]],PRIMEM["Gr
> 
>  > 
> eenwich",0,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8901]],CS[ellips
> 
>  > 
> oidal,2],AXIS["longitude",east,ORDER[1],ANGLEUNIT["degree",0.017453292519943
> 
>  > 
> 3,ID["EPSG",9122]]],AXIS["latitude",north,ORDER[2],ANGLEUNIT["degree",0.0174
> 
>  > 532925199433,ID["EPSG",9122]]]]'
> 
> There's no way in standard WKT to express a longitude of origin != 0 for 
> a GeographicCRS. If you export to WKT1_GDAL, a EXTENSION[] node captures 
> this however. Or if you re-export back to PROJ string the CRS object 
> built from "+proj=latlong +lon_0=45", you'll get back the original string.
> 
> Even
> 
> -- 
> 
> Spatialys - Geospatial professional services
> 
> http://www.spatialys.com
> 

From martin.desruisseaux at geomatys.com  Sun Apr 12 15:10:14 2020
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Mon, 13 Apr 2020 00:10:14 +0200
Subject: [PROJ] Understanding dropped parameters for stere and latlong
In-Reply-To: <d3da8820-5cbe-73f1-9a4b-fe11213b3fad@gmail.com>
References: <14e788cf-f238-45e6-ad52-cf3b32a8d70a@gmail.com>
 <1857734.WHYiAqXbhr@even-i700>
 <d3da8820-5cbe-73f1-9a4b-fe11213b3fad@gmail.com>
Message-ID: <3f7ec918-547a-4089-78ca-c3ad4eae2906@geomatys.com>

Why not using PRIMEM, for example like below?

    GEODCRS["WGS 84 (anti-meridian)",
       DATUM["World Geodetic System 1984",
         ELLIPSOID["WGS 84", 6378137, 298.257223563, LENGTHUNIT["metre",1.0]]],
       PRIMEM["Anti-meridian", 180, ANGLEUNIT["degree",0.01745329252]],
      ¬†CS[ellipsoidal,2],
         AXIS["latitude",north,ORDER[1]],
         AXIS["longitude",east,ORDER[2]],
         ANGLEUNIT["degree",0.01745329252]]

It should create a CRS with longitude in -180 to 180¬∞ range, but where 
0¬∞ is at 180¬∞ from Greenwich (I not sure if this is what you wanted).

Martin


Le 12/04/2020 √† 23:53, David Hoese a √©crit¬†:

> >There's no way in standard WKT to express a longitude of origin != 0 
> for a GeographicCRS. If you export to WKT1_GDAL, a EXTENSION[] node 
> captures this however. Or if you re-export back to PROJ string the CRS 
> object built from "+proj=latlong +lon_0=45", you'll get back the 
> original string.
>
> So if I use WKT2 as my standard in-memory/serialized version of a CRS, 
> is there any standard way to handle a geotiff that goes over the 
> anti-meridian (-180/180)? In the past I've played around with `+over` 
> or changing with `+lon_0=X`, but those won't work here it seems.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200413/883a8fdc/attachment.html>

From even.rouault at spatialys.com  Sun Apr 12 15:26:56 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 13 Apr 2020 00:26:56 +0200
Subject: [PROJ] Understanding dropped parameters for stere and latlong
In-Reply-To: <3f7ec918-547a-4089-78ca-c3ad4eae2906@geomatys.com>
References: <14e788cf-f238-45e6-ad52-cf3b32a8d70a@gmail.com>
 <d3da8820-5cbe-73f1-9a4b-fe11213b3fad@gmail.com>
 <3f7ec918-547a-4089-78ca-c3ad4eae2906@geomatys.com>
Message-ID: <1975917.WKWKWxIn1M@even-i700>

On lundi 13 avril 2020 00:10:14 CEST Martin Desruisseaux wrote:
> Why not using PRIMEM, for example like below?
> 
>     GEODCRS["WGS 84 (anti-meridian)",
>        DATUM["World Geodetic System 1984",
>          ELLIPSOID["WGS 84", 6378137, 298.257223563,
> LENGTHUNIT["metre",1.0]]], PRIMEM["Anti-meridian", 180,
> ANGLEUNIT["degree",0.01745329252]], CS[ellipsoidal,2],
>          AXIS["latitude",north,ORDER[1]],
>          AXIS["longitude",east,ORDER[2]],
>          ANGLEUNIT["degree",0.01745329252]]
> 
> It should create a CRS with longitude in -180 to 180¬∞ range, but where
> 0¬∞ is at 180¬∞ from Greenwich (I not sure if this is what you wanted).

That's a good point. If you use "+proj=longlat +pm=45", this will actually set the PRIMEM[]. 
"+proj=longlat +pm=" and "+proj=longlat +lon_0=" seem to behave quite simimarly from a 
quick test. The +over trick however is a PROJ specific thing. If you need to serialize this, 
there's no alternative than storing the PROJ string itself.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200413/f995ee85/attachment.html>

From dhoese at gmail.com  Mon Apr 13 07:39:08 2020
From: dhoese at gmail.com (David Hoese)
Date: Mon, 13 Apr 2020 09:39:08 -0500
Subject: [PROJ] Understanding dropped parameters for stere and latlong
In-Reply-To: <1975917.WKWKWxIn1M@even-i700>
References: <14e788cf-f238-45e6-ad52-cf3b32a8d70a@gmail.com>
 <d3da8820-5cbe-73f1-9a4b-fe11213b3fad@gmail.com>
 <3f7ec918-547a-4089-78ca-c3ad4eae2906@geomatys.com>
 <1975917.WKWKWxIn1M@even-i700>
Message-ID: <a5b64e68-9ff9-44ae-1823-40124b54b89f@gmail.com>

Thanks Even and Martin,

I've never tried changing the prime meridian. I'll give that a shot.

The end goal for the user I'm talking to is to make a geotiff with 
satellite data that spans the anti-meridian but is still one contiguous 
image (no split at -180/180). I'm not sure how they are using the image 
so not sure of their limitations. I'm thinking that an old hack we have 
in our image generation software to always return lon/lat degrees for 
geographic coordinate transformations (lon/lat <-> lon/lat) instead of 
the radians that were being used is causing the issue they are seeing.

I *think* I can take it from here. Thanks for the information.

Dave

On 4/12/20 5:26 PM, Even Rouault wrote:
> On lundi 13 avril 2020 00:10:14 CEST Martin Desruisseaux wrote:
> 
>  > Why not using PRIMEM, for example like below?
> 
>  >
> 
>  > GEODCRS["WGS 84 (anti-meridian)",
> 
>  > DATUM["World Geodetic System 1984",
> 
>  > ELLIPSOID["WGS 84", 6378137, 298.257223563,
> 
>  > LENGTHUNIT["metre",1.0]]], PRIMEM["Anti-meridian", 180,
> 
>  > ANGLEUNIT["degree",0.01745329252]], CS[ellipsoidal,2],
> 
>  > AXIS["latitude",north,ORDER[1]],
> 
>  > AXIS["longitude",east,ORDER[2]],
> 
>  > ANGLEUNIT["degree",0.01745329252]]
> 
>  >
> 
>  > It should create a CRS with longitude in -180 to 180¬∞ range, but where
> 
>  > 0¬∞ is at 180¬∞ from Greenwich (I not sure if this is what you wanted).
> 
> That's a good point. If you use "+proj=longlat +pm=45", this will 
> actually set the PRIMEM[]. "+proj=longlat +pm=" and "+proj=longlat 
> +lon_0=" seem to behave quite simimarly from a quick test. The +over 
> trick however is a PROJ specific thing. If you need to serialize this, 
> there's no alternative than storing the PROJ string itself.
> 
> -- 
> 
> Spatialys - Geospatial professional services
> 
> http://www.spatialys.com
> 
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
> 

From martin.desruisseaux at geomatys.com  Tue Apr 14 03:53:38 2020
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Tue, 14 Apr 2020 12:53:38 +0200
Subject: [PROJ] Put PROJ-JNI bindings under PROJ wing?
Message-ID: <e5db79f7-131e-f7df-a61d-619a3d2b58a9@geomatys.com>

Hello all

A version 1.0 of Java Native Interface (JNI) binding for PROJ has been 
completed a few months ago [1]. Those bindings map PROJ C++ API to 
GeoAPI 3.0.1 (it was less practical to map the C API because of large 
conceptual model differences). The code is under the same license (MIT) 
than PROJ. Is there an interest for moving those binding under the wings 
of the PROJ project, not necessarily in the main Git repository but 
possibly as another product maintained by the project, similarly to 
PROJ-data? I would volunteer for maintaining those JNI bindings. I 
didn't maintained the previous bindings because the fact that it didn't 
implemented GeoAPI made it less usable for me, to the point that I was 
maintaining another binding of Proj.4 [2]. But with the new bindings 
under PROJ wing I would delete the other binding, so my focus would be 
on the PROJ one only.

What peoples think?

 ¬†¬†¬† Martin

[1] https://github.com/Kortforsyningen/PROJ-JNI/
[2] https://github.com/opengeospatial/geoapi/tree/fd10ad11d1cb0e8ad27f89942ed54db0f406cb5e/geoapi-proj4

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200414/49065b34/attachment.html>

From evgen_sobolev at mail.ru  Thu Apr 16 04:21:46 2020
From: evgen_sobolev at mail.ru (=?UTF-8?B?0JXQstCz0LXQvdC40Lkg0KHQvtCx0L7Qu9C10LI=?=)
Date: Thu, 16 Apr 2020 14:21:46 +0300
Subject: [PROJ] =?utf-8?q?Why_do_I_have_a_exception=3A_NoSuchAuthorityCode?=
 =?utf-8?q?Exception=3F?=
Message-ID: <1587036106.291500207@f177.i.mail.ru>


Hi.
¬†
I use function¬†proj_create_crs_to_crs for create PJ* for transform:
¬† ¬†¬†C = proj_context_create();
¬† ¬† char** paths = new char*[1];
¬† ¬† QString pathapp = QApplication::applicationDirPath()+ "/proj4_data" ;¬†
¬† ¬† paths[0] = _strdup(pathapp.toUtf8().constData());
¬† ¬† proj_context_set_search_paths(C, 1, paths);
¬†¬† ¬†P = proj_create_crs_to_crs(C, "EPSG:4326", "EPSG:4923", NULL);
¬†
I have exception:¬†¬†osgeo::proj::io::NoSuchAuthorityCodeException. But transform coordinate work correctly.
I found the exception generate this code:
¬†
crs::ProjectedCRSNNPtr
AuthorityFactory::createProjectedCRS(const std::string &code) const {
¬† ¬† const auto cacheKey(d->authority() + code);
¬† ¬† auto crs = d->context()->d->getCRSFromCache(cacheKey);
¬† ¬† if (crs) {
¬† ¬† ¬† ¬† auto projCRS = std::dynamic_pointer_cast<crs::ProjectedCRS>(crs);
¬† ¬† ¬† ¬† if (projCRS) {
¬† ¬† ¬† ¬† ¬† ¬† return NN_NO_CHECK(projCRS);
¬† ¬† ¬† ¬† }
¬† ¬† ¬† ¬† throw NoSuchAuthorityCodeException("projectedCRS not found",
¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬† ¬†d->authority(), code);
¬† ¬† }
¬†
Why I have the exception?
¬†
--
Sobolev Evgeny
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200416/fb82c21c/attachment.html>

From daniele.romagnoli at geo-solutions.it  Thu Apr 16 05:44:57 2020
From: daniele.romagnoli at geo-solutions.it (Daniele Romagnoli)
Date: Thu, 16 Apr 2020 14:44:57 +0200
Subject: [PROJ] Vertical CRS transformations and vertical grid shift
Message-ID: <CAJaHrDxm52+VJWMen6B=j8-1QahSe5P+BgKzo6=KbS+x7RO0VQ@mail.gmail.com>

Hi list,
I have started playing a bit with some Vertical CRS transformations and I'm
trying to figure out how they works so sorry in advance if I ask something
obvious.

I have installed PROJ 7.0.0 on an Ubuntu 19.10 using conda and I have
configured the PROJ_LIB to point to the 2 directories:

proj-data-1.0-1/share/proj
as well as
proj-7.0.0/share/proj

so that it should find all the needed definitions.
Moreover I have also copied there a couple of .csv and grid***.tif to
extend the EPSG list.

Then, I started some sample calls to figure out how it works:
projinfo -s "EPSG:5778" -t "EPSG:9274"

It reports "Candidate operations found: 2"
But for the second one I see this message:

Operation No. 2:
EPSG:9275, GHA height to EVRF2000 Austria height (1), 0.05 m, Austria
PROJ string:
Error when exporting to PROJ string: Unimplemented

WKT2:2019 string:
COORDINATEOPERATION[".... long WKT here...."]

What that PROJ Error means? Will it not be able to do the transform?

Then, I tried combining 2DCRS + VerticalCRS:

projinfo -s "EPSG:31255+5778" -t "EPSG:3035+9274"

And I get again 2 candidate operations and long PROJ and WKT Strings.
Now, when I try cs2cs to transform a coordinate I'm getting this:

cs2cs "EPSG:31255+5778" "EPSG:3035+9274"
88000 273000 600
Results into:
*            *        inf

Not really sure what it means. :-(
If I try a different vertical CRS

cs2cs "EPSG:31255+5778" "EPSG:3035+5621"
88000 273000 600
Results into:
2553923.81 4852657.42 600.00

So, at least the 2D coordinates get properly transformed but the elevation
seems unchanged, therefore I'm not sure how it works.

Setting PROJ_DEBUG=2 I see this message running the above cs2cs command:





*pj_open_lib(at_bev_AT_GIS_GRID.tif): call
fopen(/opt/conda/pkgs/proj-data-1.0-1/share/proj/at_bev_AT_GIS_GRID.tif) -
succeededpj_open_lib(GV_HoehenGrid_V1.csv): call
fopen(/opt/conda/pkgs/proj-data-1.0-1/share/proj/GV_HoehenGrid_V1.csv) -
succeededpj_open_lib(GV_Hoehengrid_plus_Geoid_V3.csv): call
fopen(/opt/conda/pkgs/proj-data-1.0-1/share/proj/GV_Hoehengrid_plus_Geoid_V3.csv)
- succeededUnrecognized vertical grid formatvgridshift: could not find
required grid(s).Pipeline: Bad step definition: inv (failed to load datum
shift file)*

That being said, I git cloned the PROJ repo and I have a couple of
questions:
- how the vertical shift get actually computed when grid shift files are
available?
I mean, I suppose that when finding a grid_transformation entry in the EPSG
DB and looking for the vertical_offset_file associated to a file, it will
somehow load that file and use it for a kind of interpolation/pixel query
but I didn't figure out where this happens in the code (checking a bit the
vgridshift.cpp as well as coordinateoperation.cpp).

- Does it support at the same time csv / tiffs / gtx? (If so, I didn't
manage to find where it eventually loads them)

Thanks for your feedbacks in advance and sorry if any of my question
doesn't make sense.

Best Regards,
Daniele


-- 
Regards,
Daniele Romagnoli
==
GeoServer Professional Services from the experts! Visit http://goo.gl/it488V
for more information.
==

Ing. Daniele Romagnoli
Senior Software Engineer

GeoSolutions S.A.S.
Via di Montramito 3/A
55054  Massarosa (LU)
Italy
phone: +39 0584 962313
fax:      +39 0584 1660272

http://www.geo-solutions.it
http://twitter.com/geosolutions_it

-------------------------------------------------------

Con riferimento alla normativa sul trattamento dei dati personali (Reg. UE
2016/679 - Regolamento generale sulla protezione dei dati ‚ÄúGDPR‚Äù), si
precisa che ogni circostanza inerente alla presente email (il suo
contenuto, gli eventuali allegati, etc.) √® un dato la cui conoscenza √®
riservata al/i solo/i destinatario/i indicati dallo scrivente. Se il
messaggio Le √® giunto per errore, √® tenuta/o a cancellarlo, ogni altra
operazione √® illecita. Le sarei comunque grato se potesse darmene notizia.

This email is intended only for the person or entity to which it is
addressed and may contain information that is privileged, confidential or
otherwise protected from disclosure. We remind that - as provided by
European Regulation 2016/679 ‚ÄúGDPR‚Äù - copying, dissemination or use of this
e-mail or the information herein by anyone other than the intended
recipient is prohibited. If you have received this email by mistake, please
notify us immediately by telephone or e-mail.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200416/29548db8/attachment.html>

From even.rouault at spatialys.com  Thu Apr 16 07:13:03 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 16 Apr 2020 16:13:03 +0200
Subject: [PROJ] Vertical CRS transformations and vertical grid shift
In-Reply-To: <CAJaHrDxm52+VJWMen6B=j8-1QahSe5P+BgKzo6=KbS+x7RO0VQ@mail.gmail.com>
References: <CAJaHrDxm52+VJWMen6B=j8-1QahSe5P+BgKzo6=KbS+x7RO0VQ@mail.gmail.com>
Message-ID: <25208203.0I40T9hO91@even-i700>

Daniele,

> so sorry in advance if I ask something obvious.

There's nothing is obvious in this area :-)

> Operation No. 2:
> EPSG:9275, GHA height to EVRF2000 Austria height (1), 0.05 m, Austria
> PROJ string:
> Error when exporting to PROJ string: Unimplemented
> 
> WKT2:2019 string:
> COORDINATEOPERATION[".... long WKT here...."]
> 
> What that PROJ Error means? Will it not be able to do the transform?

Yes, you need PROJ master (future 7.1.0) for that, as the mapping for Austrian vertical 
methods to PROJ, and the transformation of original files to GeoTIFF, has been done just 
recently.

> 
> Then, I tried combining 2DCRS + VerticalCRS:
> 
> projinfo -s "EPSG:31255+5778" -t "EPSG:3035+9274"
> 
> And I get again 2 candidate operations and long PROJ and WKT Strings.
> Now, when I try cs2cs to transform a coordinate I'm getting this:
> 
> cs2cs "EPSG:31255+5778" "EPSG:3035+9274"
> 88000 273000 600
> Results into:
> *            *        inf

Yes, failure to transform due to the above issue.

With PROJ master, I now get a result, but no change in vertical value. The reason is that the 
point is outside of the grid (it is 45d52'39.123"N	16d50'57.28"E, but the minimum 
latitude of the Austrian grids is ~ 46d20'), and thus a ballpark vertical (=null) transformation 
is applied

> 
> Not really sure what it means. :-(
> If I try a different vertical CRS
> 
> cs2cs "EPSG:31255+5778" "EPSG:3035+5621"
> 88000 273000 600
> Results into:
> 2553923.81 4852657.42 600.00
> 
> So, at least the 2D coordinates get properly transformed but the elevation
> seems unchanged, therefore I'm not sure how it works.

Same as above

> *pj_open_lib(at_bev_AT_GIS_GRID.tif): call
> fopen(/opt/conda/pkgs/proj-data-1.0-1/share/proj/at_bev_AT_GIS_GRID.tif) -
> succeededpj_open_lib(GV_HoehenGrid_V1.csv): call
> fopen(/opt/conda/pkgs/proj-data-1.0-1/share/proj/GV_HoehenGrid_V1.csv) -
> succeededpj_open_lib(GV_Hoehengrid_plus_Geoid_V3.csv): call
> fopen(/opt/conda/pkgs/proj-data-1.0-1/share/proj/GV_Hoehengrid_plus_Geoid_V3
> .csv) - succeededUnrecognized vertical grid formatvgridshift: could not find
> required grid(s).Pipeline: Bad step definition: inv (failed to load datum
> shift file)*

Yes, in PROJ 7.0, there's no mapping between the .csv files referenced by PROJ master and 
the converted GeoTIFF file.

> That being said, I git cloned the PROJ repo and I have a couple of
> questions:
> - how the vertical shift get actually computed when grid shift files are
> available?
> I mean, I suppose that when finding a grid_transformation entry in the EPSG
> DB and looking for the vertical_offset_file associated to a file, it will
> somehow load that file and use it for a kind of interpolation/pixel query
> but I didn't figure out where this happens in the code (checking a bit the
> vgridshift.cpp as well as coordinateoperation.cpp).

Addition/subtraction of the grid value, using bilinear interpolation. You spotted the right 
entry points. grids.cpp as well is relevant.

> - Does it support at the same time csv / tiffs / gtx? (If so, I didn't
> manage to find where it eventually loads them)

CSV files aren't directly supported. TIFF and GTX are supported, provided that there's a 
mapping between the original name found in EPSG and a PROJ supported file:
https://github.com/OSGeo/PROJ/blob/master/data/sql/grid_alternatives.sql

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200416/6e450f98/attachment-0001.html>

From daniele.romagnoli at geo-solutions.it  Thu Apr 16 07:57:54 2020
From: daniele.romagnoli at geo-solutions.it (Daniele Romagnoli)
Date: Thu, 16 Apr 2020 16:57:54 +0200
Subject: [PROJ] Vertical CRS transformations and vertical grid shift
In-Reply-To: <25208203.0I40T9hO91@even-i700>
References: <CAJaHrDxm52+VJWMen6B=j8-1QahSe5P+BgKzo6=KbS+x7RO0VQ@mail.gmail.com>
 <25208203.0I40T9hO91@even-i700>
Message-ID: <CAJaHrDyNf8-B9VU=9-OSJgJuWhU6PmB1U7qd9JJDT3vPD3qeBw@mail.gmail.com>

Hi Even,
thanks for your feedback, very appreciated.


On Thu, Apr 16, 2020 at 4:13 PM Even Rouault <even.rouault at spatialys.com>
wrote:

> Daniele,
>
>
>
> > so sorry in advance if I ask something obvious.
>
>
>
> There's nothing is obvious in this area :-)
>
>
>
> > Operation No. 2:
>
> > EPSG:9275, GHA height to EVRF2000 Austria height (1), 0.05 m, Austria
>
> > PROJ string:
>
> > Error when exporting to PROJ string: Unimplemented
>
> >
>
> > WKT2:2019 string:
>
> > COORDINATEOPERATION[".... long WKT here...."]
>
> >
>
> > What that PROJ Error means? Will it not be able to do the transform?
>
>
>
> Yes, you need PROJ master (future 7.1.0) for that, as the mapping for
> Austrian vertical methods to PROJ, and the transformation of original files
> to GeoTIFF, has been done just recently.
>
>
>
> >
>
> > Then, I tried combining 2DCRS + VerticalCRS:
>
> >
>
> > projinfo -s "EPSG:31255+5778" -t "EPSG:3035+9274"
>
> >
>
> > And I get again 2 candidate operations and long PROJ and WKT Strings.
>
> > Now, when I try cs2cs to transform a coordinate I'm getting this:
>
> >
>
> > cs2cs "EPSG:31255+5778" "EPSG:3035+9274"
>
> > 88000 273000 600
>
> > Results into:
>
> > * * inf
>
>
>
> Yes, failure to transform due to the above issue.
>
>
>
> With PROJ master, I now get a result, but no change in vertical value. The
> reason is that the point is outside of the grid (it is 45d52'39.123"N
> 16d50'57.28"E, but the minimum latitude of the Austrian grids is ~ 46d20'),
> and thus a ballpark vertical (=null) transformation is applied
>

Well, when providing that coordinate, I got them from a sample Dataset in
EPSG:31255 so they should be valid.

Weird thing:
cs2cs "EPSG:31255" "EPSG:4326"
88000 273000
>>>>
45d52'39.123"N 16d50'57.28"E 0.000 (as you said)

However:
gdaltransform -s_srs EPSG:31255 -t_srs EPSG:4326
88000 273000
>>>>
14.5025684938377 47.5898013589131 46.4711159374565

And same thing if I draw a point in QGIS: SRID=31255;POINT(88000 273000)
and I switch the map projection to 4326, that rendered point on the map has
the same coordinates reported by gdaltransform.

What do you think about it?

Regards,
Daniele




>
> >
>
> > Not really sure what it means. :-(
>
> > If I try a different vertical CRS
>
> >
>
> > cs2cs "EPSG:31255+5778" "EPSG:3035+5621"
>
> > 88000 273000 600
>
> > Results into:
>
> > 2553923.81 4852657.42 600.00
>
> >
>
> > So, at least the 2D coordinates get properly transformed but the
> elevation
>
> > seems unchanged, therefore I'm not sure how it works.
>
>
>
> Same as above
>
>
>
> > *pj_open_lib(at_bev_AT_GIS_GRID.tif): call
>
> > fopen(/opt/conda/pkgs/proj-data-1.0-1/share/proj/at_bev_AT_GIS_GRID.tif)
> -
>
> > succeededpj_open_lib(GV_HoehenGrid_V1.csv): call
>
> > fopen(/opt/conda/pkgs/proj-data-1.0-1/share/proj/GV_HoehenGrid_V1.csv) -
>
> > succeededpj_open_lib(GV_Hoehengrid_plus_Geoid_V3.csv): call
>
> >
> fopen(/opt/conda/pkgs/proj-data-1.0-1/share/proj/GV_Hoehengrid_plus_Geoid_V3
>
> > .csv) - succeededUnrecognized vertical grid formatvgridshift: could not
> find
>
> > required grid(s).Pipeline: Bad step definition: inv (failed to load datum
>
> > shift file)*
>
>
>
> Yes, in PROJ 7.0, there's no mapping between the .csv files referenced by
> PROJ master and the converted GeoTIFF file.
>
>
>
> > That being said, I git cloned the PROJ repo and I have a couple of
>
> > questions:
>
> > - how the vertical shift get actually computed when grid shift files are
>
> > available?
>
> > I mean, I suppose that when finding a grid_transformation entry in the
> EPSG
>
> > DB and looking for the vertical_offset_file associated to a file, it will
>
> > somehow load that file and use it for a kind of interpolation/pixel query
>
> > but I didn't figure out where this happens in the code (checking a bit
> the
>
> > vgridshift.cpp as well as coordinateoperation.cpp).
>
>
>
> Addition/subtraction of the grid value, using bilinear interpolation. You
> spotted the right entry points. grids.cpp as well is relevant.
>
>
>
> > - Does it support at the same time csv / tiffs / gtx? (If so, I didn't
>
> > manage to find where it eventually loads them)
>
>
>
> CSV files aren't directly supported. TIFF and GTX are supported, provided
> that there's a mapping between the original name found in EPSG and a PROJ
> supported file:
>
> https://github.com/OSGeo/PROJ/blob/master/data/sql/grid_alternatives.sql
>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>


-- 
Regards,
Daniele Romagnoli
==
GeoServer Professional Services from the experts! Visit http://goo.gl/it488V
for more information.
==

Ing. Daniele Romagnoli
Senior Software Engineer

GeoSolutions S.A.S.
Via di Montramito 3/A
55054  Massarosa (LU)
Italy
phone: +39 0584 962313
fax:      +39 0584 1660272

http://www.geo-solutions.it
http://twitter.com/geosolutions_it

-------------------------------------------------------

Con riferimento alla normativa sul trattamento dei dati personali (Reg. UE
2016/679 - Regolamento generale sulla protezione dei dati ‚ÄúGDPR‚Äù), si
precisa che ogni circostanza inerente alla presente email (il suo
contenuto, gli eventuali allegati, etc.) √® un dato la cui conoscenza √®
riservata al/i solo/i destinatario/i indicati dallo scrivente. Se il
messaggio Le √® giunto per errore, √® tenuta/o a cancellarlo, ogni altra
operazione √® illecita. Le sarei comunque grato se potesse darmene notizia.

This email is intended only for the person or entity to which it is
addressed and may contain information that is privileged, confidential or
otherwise protected from disclosure. We remind that - as provided by
European Regulation 2016/679 ‚ÄúGDPR‚Äù - copying, dissemination or use of this
e-mail or the information herein by anyone other than the intended
recipient is prohibited. If you have received this email by mistake, please
notify us immediately by telephone or e-mail.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200416/19ff0d6c/attachment.html>

From even.rouault at spatialys.com  Thu Apr 16 08:15:41 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 16 Apr 2020 17:15:41 +0200
Subject: [PROJ] Vertical CRS transformations and vertical grid shift
In-Reply-To: <CAJaHrDyNf8-B9VU=9-OSJgJuWhU6PmB1U7qd9JJDT3vPD3qeBw@mail.gmail.com>
References: <CAJaHrDxm52+VJWMen6B=j8-1QahSe5P+BgKzo6=KbS+x7RO0VQ@mail.gmail.com>
 <25208203.0I40T9hO91@even-i700>
 <CAJaHrDyNf8-B9VU=9-OSJgJuWhU6PmB1U7qd9JJDT3vPD3qeBw@mail.gmail.com>
Message-ID: <3216688.EAGFelCFs6@even-i700>

> Well, when providing that coordinate, I got them from a sample Dataset in
> EPSG:31255 so they should be valid.
> 
> Weird thing:
> cs2cs "EPSG:31255" "EPSG:4326"
> 88000 273000
> 
> 45d52'39.123"N 16d50'57.28"E 0.000 (as you said)
> 
> However:
> gdaltransform -s_srs EPSG:31255 -t_srs EPSG:4326
> 88000 273000
> 
> 14.5025684938377 47.5898013589131 46.4711159374565
> 
> And same thing if I draw a point in QGIS: SRID=31255;POINT(88000 273000)
> and I switch the map projection to 4326, that rendered point on the map has
> the same coordinates reported by gdaltransform.
> 
> What do you think about it?

Ah, the reason is axis order. EPSG:31255 uses Northing,Easting, and cs2cs honours it. 
Whereas gdaltransform uses the "traditional GIS axis order", ie easting, northing.

So with PROJ master:

$ echo 273000 88000 600 | PROJ_NETWORK=ON src/cs2cs "EPSG:31255+5778" "EPSG:
3035+9274"
2729881.62	4659643.84 599.75

With EPSG:5621 "EVRF2007 height" instead of EPSG:5778 "EVRF2000 height", I don't get 
any change in Z, because there's no registered transformation between EPSG:5778 "GHA 
height" and it.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200416/d7e13ee0/attachment-0001.html>

From even.rouault at spatialys.com  Thu Apr 16 08:18:24 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 16 Apr 2020 17:18:24 +0200
Subject: [PROJ] Vector/SIMD acceleration
Message-ID: <9034322.C4ThZASbUb@even-i700>

Hi,

I've lately worked (again (*)) on a proof of concept of the Transverse Mercator forward 
transformation to use Intel SIMD instructions to transform several coordinate pairs 
simultaneously, potentially for use by the proj_trans_array() / proj_trans_generic() functions. 
Transverse Mercator is a very good candidate for that as it is quite expensive, and has few 
branches.

The impact on the projection code is minimal, and the conversion of the original code was 
mostly straightforward, by using C++ templates and operator overloading: you mostly 
replace occurences of "double" by a templated type, and depending on how it is instanciated, 
it can expand to a single, 2, 4, 8, etc. doubles, either in a single or several SIMD registers. 
Optimizers do a good job at generating good assembly from that.

SIMD instrinsincs are available for basic arithmetic operations and comparisons, but not for 
trigonometric (sin, cos, etc.) and other transcendent (exp, log, ...) functions that are often 
needed to implement projections, and are usually the computation bottlenecks.

The SLEEF Vectorized Math Library (https://sleef.org/), using Boost License
(~ MIT), provides such operations, and with very good accuracy (accuracy of 1 ULP for double 
precision). It is portable accross OS and supports different architectures.

On my standalone prototype (outside of PROJ infrastructure, with just the forward TMerc 
code extracted), I get a 3.8x speedup with the AVX2 + FMA instruction sets, compared to a 
build with AVX2 + FMA enabled with the original non-vector implementation, and using 
SLEEF. This is when transforming 8 coordinate pairs at the same time. This 3.8x speed-up is 
close to the optimal 4 factor (AVX/AVX2 256bit vectors can store 4 doubles). Without SLEEF, 
the speedup is 1.35x
I guess that with AVX-512 available, gains in the [4x, 8x[ range could be expected, but I 
haven't tested.

With pure SSE2 that comes automatically with x86_64, I can get a 1.55x speed-up with SLEEF 
(optimal would be x2 due to the 128 bit SSE vectors). Without SLEEF, the speedup is 1.35x as 
well.

I would expect similar gains on the reverse path of etmerc which has equivalent complexity. 
Snyder's tmerc, geographic <--> cartesian conversions, etc. would likely be other good 
candidates.

SLEEF could be made an optional dependency of PROJ. When it is not available, the 
execution of trigonometric & transcendent functions is of course serialized, hence the 
reduced efficiency.

I would expect the actual gains, once the needed changes to be able to integrate that in 
PROJ itself are done, to be less than what I got on the prototype, due to other overheads in 
code between the user call and the actual projection code. But there's probably 
improvements that could be done to reduce current overheads.

Is there an interest in seeing that integrated in PROJ ? I guess this is mostly of interest for 
people transforming at least billions of points. A few millions is probably not enough to 
really appreciate the difference: I can already get 4 million points/sec transformed by 
proj_trans() with tmerc.

The question of funding such work would also remained to be solved.

Even

(*) I had a feeling of deja-vu when writing this email, and actually I realized I wrote a similar 
one almost 5 years ago
( http://lists.maptools.org/pipermail/proj/2015-June/007169.html ). C++ at that time seemed 
to be a hurdle for a number of people, but luckily we have gone through it now.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200416/047f9f1b/attachment.html>

From even.rouault at spatialys.com  Thu Apr 16 08:23:37 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 16 Apr 2020 17:23:37 +0200
Subject: [PROJ] Vertical CRS transformations and vertical grid shift
In-Reply-To: <3216688.EAGFelCFs6@even-i700>
References: <CAJaHrDxm52+VJWMen6B=j8-1QahSe5P+BgKzo6=KbS+x7RO0VQ@mail.gmail.com>
 <CAJaHrDyNf8-B9VU=9-OSJgJuWhU6PmB1U7qd9JJDT3vPD3qeBw@mail.gmail.com>
 <3216688.EAGFelCFs6@even-i700>
Message-ID: <7992119.t3cujCbgO6@even-i700>

> With EPSG:5621 "EVRF2007 height" instead of EPSG:
5778 "EVRF2000 height"

Correction: EPSG:5621 "EVRF2007 height" instead of 
EPSG:9274 "EVRF2000 Austria height"

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200416/0accfebc/attachment.html>

From daniele.romagnoli at geo-solutions.it  Thu Apr 16 09:17:02 2020
From: daniele.romagnoli at geo-solutions.it (Daniele Romagnoli)
Date: Thu, 16 Apr 2020 18:17:02 +0200
Subject: [PROJ] Vertical CRS transformations and vertical grid shift
In-Reply-To: <3216688.EAGFelCFs6@even-i700>
References: <CAJaHrDxm52+VJWMen6B=j8-1QahSe5P+BgKzo6=KbS+x7RO0VQ@mail.gmail.com>
 <25208203.0I40T9hO91@even-i700>
 <CAJaHrDyNf8-B9VU=9-OSJgJuWhU6PmB1U7qd9JJDT3vPD3qeBw@mail.gmail.com>
 <3216688.EAGFelCFs6@even-i700>
Message-ID: <CAJaHrDzTLxe8r8ucL7BvzPJ+6tGTPv5h2Fw+JpyLa_0ZJk=v_Q@mail.gmail.com>

On Thu, Apr 16, 2020 at 5:15 PM Even Rouault <even.rouault at spatialys.com>
wrote:

> > Well, when providing that coordinate, I got them from a sample Dataset in
>
> > EPSG:31255 so they should be valid.
>
> >
>
> > Weird thing:
>
> > cs2cs "EPSG:31255" "EPSG:4326"
>
> > 88000 273000
>
> >
>
> > 45d52'39.123"N 16d50'57.28"E 0.000 (as you said)
>
> >
>
> > However:
>
> > gdaltransform -s_srs EPSG:31255 -t_srs EPSG:4326
>
> > 88000 273000
>
> >
>
> > 14.5025684938377 47.5898013589131 46.4711159374565
>
> >
>
> > And same thing if I draw a point in QGIS: SRID=31255;POINT(88000 273000)
>
> > and I switch the map projection to 4326, that rendered point on the map
> has
>
> > the same coordinates reported by gdaltransform.
>
> >
>
> > What do you think about it?
>
>
>
> Ah, the reason is axis order. EPSG:31255 uses Northing,Easting, and cs2cs
> honours it. Whereas gdaltransform uses the "traditional GIS axis order", ie
> easting, northing.
>
>
>
> So with PROJ master:
>
>
>
> $ echo 273000 88000 600 | PROJ_NETWORK=ON src/cs2cs "EPSG:31255+5778"
> "EPSG:3035+9274"
>
> 2729881.62 4659643.84 599.75
>

Ah. That makes sense. Thanks.
Final question (sorry about that):
Are you aware of any involvement of this kind of reprojection in gdal_warp
processing?
I mean, I just did a test by building PROJ master and GDAL 3.1 against that
PROJ version and tried a

gdalwarp -s_srs "EPSG:31255+5778" -t_srs "EPSG:3035+9274" dem.tif
warpeddem.tif

Is it expected to reproject the DEM values? :-)
Asking that since I'm trying to figure out a way to see that vertical
transformation used in some practical use-case with DEM raster but I didn't
get the pixel values modified so I probably went too far and that's not how
it should be used.

Thanks again for your feedbacks so far.
Regards,
Daniele


>
>
> With EPSG:5621 "EVRF2007 height" instead of EPSG:5778 "EVRF2000 height", I
> don't get any change in Z, because there's no registered transformation
> between EPSG:5778 "GHA height" and it.
>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>


-- 
Regards,
Daniele Romagnoli
==
GeoServer Professional Services from the experts! Visit http://goo.gl/it488V
for more information.
==

Ing. Daniele Romagnoli
Senior Software Engineer

GeoSolutions S.A.S.
Via di Montramito 3/A
55054  Massarosa (LU)
Italy
phone: +39 0584 962313
fax:      +39 0584 1660272

http://www.geo-solutions.it
http://twitter.com/geosolutions_it

-------------------------------------------------------

Con riferimento alla normativa sul trattamento dei dati personali (Reg. UE
2016/679 - Regolamento generale sulla protezione dei dati ‚ÄúGDPR‚Äù), si
precisa che ogni circostanza inerente alla presente email (il suo
contenuto, gli eventuali allegati, etc.) √® un dato la cui conoscenza √®
riservata al/i solo/i destinatario/i indicati dallo scrivente. Se il
messaggio Le √® giunto per errore, √® tenuta/o a cancellarlo, ogni altra
operazione √® illecita. Le sarei comunque grato se potesse darmene notizia.

This email is intended only for the person or entity to which it is
addressed and may contain information that is privileged, confidential or
otherwise protected from disclosure. We remind that - as provided by
European Regulation 2016/679 ‚ÄúGDPR‚Äù - copying, dissemination or use of this
e-mail or the information herein by anyone other than the intended
recipient is prohibited. If you have received this email by mistake, please
notify us immediately by telephone or e-mail.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200416/0a568f64/attachment-0001.html>

From even.rouault at spatialys.com  Thu Apr 16 09:26:20 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 16 Apr 2020 18:26:20 +0200
Subject: [PROJ] Vertical CRS transformations and vertical grid shift
In-Reply-To: <CAJaHrDzTLxe8r8ucL7BvzPJ+6tGTPv5h2Fw+JpyLa_0ZJk=v_Q@mail.gmail.com>
References: <CAJaHrDxm52+VJWMen6B=j8-1QahSe5P+BgKzo6=KbS+x7RO0VQ@mail.gmail.com>
 <3216688.EAGFelCFs6@even-i700>
 <CAJaHrDzTLxe8r8ucL7BvzPJ+6tGTPv5h2Fw+JpyLa_0ZJk=v_Q@mail.gmail.com>
Message-ID: <19855170.J98af6FBR6@even-i700>

> Final question (sorry about that):
> Are you aware of any involvement of this kind of reprojection in gdal_warp
> processing?
> I mean, I just did a test by building PROJ master and GDAL 3.1 against that
> PROJ version and tried a
> 
> gdalwarp -s_srs "EPSG:31255+5778" -t_srs "EPSG:3035+9274" dem.tif
> warpeddem.tif
> 
> Is it expected to reproject the DEM values? :-)

No. Well, this is a bit more complicated than this simple "no". There is actually a special case 
in GDAL mentionned in
https://gdal.org/programs/gdalwarp.html#cmdoption-gdalwarp-t-srs :
"Starting with GDAL 2.2, if the SRS has an explicit vertical datum that points to a PROJ.4 
geoidgrids, and the input dataset is a single band dataset, a vertical correction will be applied 
to the values of the dataset."

But this was in a pre PROJ 6 era, and geoidgrids are no longer used when expanding EPSG 
codes (for good reasons). So you would need to provide an explicit PROJ.4 string to make 
that work. And this would only work between a geographic 3D CRS and a compoundCRS, not 
between two compound CRS like this use case.

So in that use case, you'd have for example to reproject the height shift grid itself to the 
same bounds and resolution of the target raster, and use gdal_calc for example to apply the 
shift.

I had a discussion a few months ago with someone interested in this GDAL 2.2 behaviour to 
work with PROJ 6, but that didn't go further.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200416/4686dffb/attachment.html>

From even.rouault at spatialys.com  Thu Apr 16 13:07:45 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 16 Apr 2020 22:07:45 +0200
Subject: [PROJ] Put PROJ-JNI bindings under PROJ wing?
In-Reply-To: <e5db79f7-131e-f7df-a61d-619a3d2b58a9@geomatys.com>
References: <e5db79f7-131e-f7df-a61d-619a3d2b58a9@geomatys.com>
Message-ID: <2396402.heKjAuPmze@even-i700>

Martin,

at the very least, those new gen bindings should be mentionned in the documentation in 
https://proj.org/development/bindings.html . Please submit a PR.

My personal view, not speaking on behalf of the PSC:

Regarding putting them more formally under PROJ umbrella, I'm less convinced. We would 
need more than one person in the team with deep interest in them, and I'm not sure that's 
currently the case. Other bindings exist by themselves, with their own way of managing 
themselves, with very good cooperation with PROJ core when needed, and some really shine 
with this setup. I'm not sure why having PROJ-JNI under PROJ umbrella or not would change 
your interest in it.

If you're looking for some kind of official affiliation, I guess you could apply to register PROJ-
JNI as a OSGeo community project. The requirements for that are pretty low (much less than 
a OSGeo graduated project). Regarding hosting of the git repo itself, having it under 
github.com/OSGeo could have some disadvantages as we share some CI ressources like 
Travis-CI and AppVeyor at the organization level, and they are already quite heavily stressed 
by existing projects (especially for AppVeyor where we only have 1 concurrent build for the 
whole organization and delays of several hours can happen).

The existence of the separate PROJ-data git repo is mostly because of its large size.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200416/756b9d9b/attachment.html>

From howard at hobu.co  Thu Apr 16 13:32:34 2020
From: howard at hobu.co (Howard Butler)
Date: Thu, 16 Apr 2020 15:32:34 -0500
Subject: [PROJ] Put PROJ-JNI bindings under PROJ wing?
In-Reply-To: <2396402.heKjAuPmze@even-i700>
References: <e5db79f7-131e-f7df-a61d-619a3d2b58a9@geomatys.com>
 <2396402.heKjAuPmze@even-i700>
Message-ID: <F96387FB-43DF-4552-B936-BF30581BC73F@hobu.co>

Martin,

I am also not enthusiastic about putting bindings inside the PROJ tree. 

* They rot without developer attention. It's not fair to burden the main project with the burden of ongoing maintenance of them. You can volunteer for now, but your attention might wane, and then the project must either jettison them (which we've done once before with Java bindings) or carry the load itself.
* They can't be forked easily and picked up by another interested developer. They're stuck interacting with the main project.
* They end up being pinned to the release cadence of the main project. PROJ's release cadence is slow. A bindings set might want to innovate and release quickly, or release at a schedule that corresponds to features of the bindings language itself, not PROJ.

Howard


> On Apr 16, 2020, at 3:07 PM, Even Rouault <even.rouault at spatialys.com> wrote:
> 
> Martin,
>  
> at the very least, those new gen bindings should be mentionned in the documentation in https://proj.org/development/bindings.html <https://proj.org/development/bindings.html> . Please submit a PR.
>  
> My personal view, not speaking on behalf of the PSC:
>  
> Regarding putting them more formally under PROJ umbrella, I'm less convinced. We would need more than one person in the team with deep interest in them, and I'm not sure that's currently the case. Other bindings exist by themselves, with their own way of managing themselves, with very good cooperation with PROJ core when needed, and some really shine with this setup. I'm not sure why having PROJ-JNI under PROJ umbrella or not would change your interest in it.
>  
> If you're looking for some kind of official affiliation, I guess you could apply to register PROJ-JNI as a OSGeo community project. The requirements for that are pretty low (much less than a OSGeo graduated project). Regarding hosting of the git repo itself, having it under github.com/OSGeo <http://github.com/OSGeo> could have some disadvantages as we share some CI ressources like Travis-CI and AppVeyor at the organization level, and they are already quite heavily stressed by existing projects (especially for AppVeyor where we only have 1 concurrent build for the whole organization and delays of several hours can happen).
>  
> The existence of the separate PROJ-data git repo is mostly because of its large size.
>  
> Even
>  
> -- 
> Spatialys - Geospatial professional services
> http://www.spatialys.com <http://www.spatialys.com/>_______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org <mailto:PROJ at lists.osgeo.org>
> https://lists.osgeo.org/mailman/listinfo/proj <https://lists.osgeo.org/mailman/listinfo/proj>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200416/106a62ba/attachment.html>

From kreve at sdfe.dk  Thu Apr 16 13:39:32 2020
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 16 Apr 2020 20:39:32 +0000
Subject: [PROJ] Put PROJ-JNI bindings under PROJ wing?
In-Reply-To: <F96387FB-43DF-4552-B936-BF30581BC73F@hobu.co>
References: <e5db79f7-131e-f7df-a61d-619a3d2b58a9@geomatys.com>
 <2396402.heKjAuPmze@even-i700> <F96387FB-43DF-4552-B936-BF30581BC73F@hobu.co>
Message-ID: <8D8BD109-FAB9-4109-882F-BC77748AADE9@sdfe.dk>

Howard,

Just to clarify, Martin isn‚Äôt suggesting to put the bindings in the main PROJ repo. The suggestion is to keep them in a separate repo but with stronger ties to the PROJ project with the intention of making them more visible for users. So, forking wouldn‚Äôt be an issue and release cadence‚Ä¶ well, that depends how much we change the C++ API from release to release I guess.

I agree with you both that having just one maintainer is too fragile.

/Kristian

On 16 Apr 2020, at 22:32, Howard Butler <howard at hobu.co<mailto:howard at hobu.co>> wrote:

Martin,

I am also not enthusiastic about putting bindings inside the PROJ tree.

* They rot without developer attention. It's not fair to burden the main project with the burden of ongoing maintenance of them. You can volunteer for now, but your attention might wane, and then the project must either jettison them (which we've done once before with Java bindings) or carry the load itself.
* They can't be forked easily and picked up by another interested developer. They're stuck interacting with the main project.
* They end up being pinned to the release cadence of the main project. PROJ's release cadence is slow. A bindings set might want to innovate and release quickly, or release at a schedule that corresponds to features of the bindings language itself, not PROJ.

Howard


On Apr 16, 2020, at 3:07 PM, Even Rouault <even.rouault at spatialys.com<mailto:even.rouault at spatialys.com>> wrote:

Martin,



at the very least, those new gen bindings should be mentionned in the documentation in https://proj.org/development/bindings.html . Please submit a PR.



My personal view, not speaking on behalf of the PSC:



Regarding putting them more formally under PROJ umbrella, I'm less convinced. We would need more than one person in the team with deep interest in them, and I'm not sure that's currently the case. Other bindings exist by themselves, with their own way of managing themselves, with very good cooperation with PROJ core when needed, and some really shine with this setup. I'm not sure why having PROJ-JNI under PROJ umbrella or not would change your interest in it.



If you're looking for some kind of official affiliation, I guess you could apply to register PROJ-JNI as a OSGeo community project. The requirements for that are pretty low (much less than a OSGeo graduated project). Regarding hosting of the git repo itself, having it under github.com/OSGeo<http://github.com/OSGeo> could have some disadvantages as we share some CI ressources like Travis-CI and AppVeyor at the organization level, and they are already quite heavily stressed by existing projects (especially for AppVeyor where we only have 1 concurrent build for the whole organization and delays of several hours can happen).



The existence of the separate PROJ-data git repo is mostly because of its large size.



Even



--
Spatialys - Geospatial professional services
http://www.spatialys.com<http://www.spatialys.com/>
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj

_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200416/67741d78/attachment-0001.html>

From martin.desruisseaux at geomatys.com  Thu Apr 16 13:53:23 2020
From: martin.desruisseaux at geomatys.com (Martin Desruisseaux)
Date: Thu, 16 Apr 2020 22:53:23 +0200
Subject: [PROJ] Put PROJ-JNI bindings under PROJ wing?
In-Reply-To: <8D8BD109-FAB9-4109-882F-BC77748AADE9@sdfe.dk>
References: <e5db79f7-131e-f7df-a61d-619a3d2b58a9@geomatys.com>
 <2396402.heKjAuPmze@even-i700> <F96387FB-43DF-4552-B936-BF30581BC73F@hobu.co>
 <8D8BD109-FAB9-4109-882F-BC77748AADE9@sdfe.dk>
Message-ID: <bede53fe-ca21-cd93-b117-b46fa3de681c@geomatys.com>

Thanks all for your reply.

Le 16/04/2020 √† 22:39, Kristian Evers a √©crit¬†:

> Just to clarify, Martin isn‚Äôt suggesting to put the bindings in the 
> main PROJ repo. The suggestion is to keep them in a separate repo but 
> with stronger ties to the PROJ project with the intention of making 
> them more visible for users. So, forking wouldn‚Äôt be an issue and 
> release cadence‚Ä¶ well, that depends how much we change the C++ API 
> from release to release I guess.
>
> I agree with you both that having just one maintainer is too fragile.
>
Indeed. The main intent is to increase the project visibility in the 
hope to resolve the "single maintainer" issue. A second intent is to get 
a final programmatic namespace for the project (it currently uses 
"org.kortforsyningen.proj"). The "org.osgeo.proj" namespace would be 
ideal, but can be used only for projects under OSGeo control. I'm 
neutral about "top level" versus "community" versus other arrangement.

The maintenance needs on this project should be low. I expect work 
needed only in the following situations:

  * Evolution of PROJ C++ API.
  * Evolution of GeoAPI interfaces (very rare).
  * Evolution of Java platform (rarely an issue).
  * Build issues.
  * Needs for one of the few areas not covered by current binding (e.g.
    "BOUNDCRS").

Regards,

Martin


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200416/1268b28c/attachment.html>

From even.rouault at spatialys.com  Thu Apr 16 14:16:12 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 16 Apr 2020 23:16:12 +0200
Subject: [PROJ] Put PROJ-JNI bindings under PROJ wing?
In-Reply-To: <bede53fe-ca21-cd93-b117-b46fa3de681c@geomatys.com>
References: <e5db79f7-131e-f7df-a61d-619a3d2b58a9@geomatys.com>
 <8D8BD109-FAB9-4109-882F-BC77748AADE9@sdfe.dk>
 <bede53fe-ca21-cd93-b117-b46fa3de681c@geomatys.com>
Message-ID: <6005941.rjjq5I6CIq@even-i700>

On jeudi 16 avril 2020 22:53:23 CEST Martin Desruisseaux wrote:
> Thanks all for your reply.
> 
> Le 16/04/2020 √† 22:39, Kristian Evers a √©crit :
> > Just to clarify, Martin isn‚Äôt suggesting to put the bindings in the
> > main PROJ repo. The suggestion is to keep them in a separate repo but
> > with stronger ties to the PROJ project with the intention of making
> > them more visible for users. So, forking wouldn‚Äôt be an issue and
> > release cadence‚Ä¶ well, that depends how much we change the C++ API
> > from release to release I guess.
> > 
> > I agree with you both that having just one maintainer is too fragile.
> 
> Indeed. The main intent is to increase the project visibility in the
> hope to resolve the "single maintainer" issue. A second intent is to get
> a final programmatic namespace for the project (it currently uses
> "org.kortforsyningen.proj"). The "org.osgeo.proj" namespace would be
> ideal, but can be used only for projects under OSGeo control. I'm
> neutral about "top level" versus "community" versus other arrangement.

You wouldn't be able to be a graduated project at this stage, as it requires more maturity, 
and particularly a diverse developer community. To build such, the community program is the 
best fit. The criteria for entering it are being geospatial (this is the case), being open source 
(this is the case) and being open to receiving contributions (same).

Once that done using the osgeo.org.proj namespace would be fair IMHO. But that could be a 
question that you raise during the application for the community project. Not sure if https://
www.osgeo.org/legal-information/ really covers the use of the osgeo namespace. Wouldn't 
hurt asking the board.

Hum, actually digging around, I see there's another Java project around PROJ:
https://github.com/locationtech/proj4j
This one seems to use org.locationtech.proj4j

I guess this must be a continuation of the older
https://trac.osgeo.org/proj4j/ that seems abandonned now and used apparently the 
osgeo.org.proj4j namespace

But they are both Java ports, not Java bindings.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200416/117fd4f2/attachment.html>

From roger.oberholtzer at gmail.com  Thu Apr 16 23:09:42 2020
From: roger.oberholtzer at gmail.com (Roger Oberholtzer)
Date: Fri, 17 Apr 2020 08:09:42 +0200
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <9034322.C4ThZASbUb@even-i700>
References: <9034322.C4ThZASbUb@even-i700>
Message-ID: <CANkOqwMPEnGi4+dWbqekZm+n-AmB0K_DeX5OJQ9S=kyzBpxe6Q@mail.gmail.com>

I use proj in a real time context that is always looking for ways to
speed up anything. I would find this quite interesting.

I have also been curious what the speed difference is between the old
proj4 implementation and the newer implementation. In something like
Sweref99, as an example. Testing this in on my far too long to do
list.

On Thu, Apr 16, 2020 at 5:18 PM Even Rouault <even.rouault at spatialys.com> wrote:
>
> Hi,
>
>
>
> I've lately worked (again (*)) on a proof of concept of the Transverse Mercator forward transformation to use Intel SIMD instructions to transform several coordinate pairs simultaneously, potentially for use by the proj_trans_array() / proj_trans_generic() functions. Transverse Mercator is a very good candidate for that as it is quite expensive, and has few branches.
>
>
>
> The impact on the projection code is minimal, and the conversion of the original code was mostly straightforward, by using C++ templates and operator overloading: you mostly replace occurences of "double" by a templated type, and depending on how it is instanciated, it can expand to a single, 2, 4, 8, etc. doubles, either in a single or several SIMD registers. Optimizers do a good job at generating good assembly from that.
>
>
>
> SIMD instrinsincs are available for basic arithmetic operations and comparisons, but not for trigonometric (sin, cos, etc.) and other transcendent (exp, log, ...) functions that are often needed to implement projections, and are usually the computation bottlenecks.
>
>
>
> The SLEEF Vectorized Math Library (https://sleef.org/), using Boost License
>
> (~ MIT), provides such operations, and with very good accuracy (accuracy of 1 ULP for double precision). It is portable accross OS and supports different architectures.
>
>
>
> On my standalone prototype (outside of PROJ infrastructure, with just the forward TMerc code extracted), I get a 3.8x speedup with the AVX2 + FMA instruction sets, compared to a build with AVX2 + FMA enabled with the original non-vector implementation, and using SLEEF. This is when transforming 8 coordinate pairs at the same time. This 3.8x speed-up is close to the optimal 4 factor (AVX/AVX2 256bit vectors can store 4 doubles). Without SLEEF, the speedup is 1.35x
>
> I guess that with AVX-512 available, gains in the [4x, 8x[ range could be expected, but I haven't tested.
>
>
>
> With pure SSE2 that comes automatically with x86_64, I can get a 1.55x speed-up with SLEEF (optimal would be x2 due to the 128 bit SSE vectors). Without SLEEF, the speedup is 1.35x as well.
>
>
>
> I would expect similar gains on the reverse path of etmerc which has equivalent complexity. Snyder's tmerc, geographic <--> cartesian conversions, etc. would likely be other good candidates.
>
>
>
> SLEEF could be made an optional dependency of PROJ. When it is not available, the execution of trigonometric & transcendent functions is of course serialized, hence the reduced efficiency.
>
>
>
> I would expect the actual gains, once the needed changes to be able to integrate that in PROJ itself are done, to be less than what I got on the prototype, due to other overheads in code between the user call and the actual projection code. But there's probably improvements that could be done to reduce current overheads.
>
>
>
> Is there an interest in seeing that integrated in PROJ ? I guess this is mostly of interest for people transforming at least billions of points. A few millions is probably not enough to really appreciate the difference: I can already get 4 million points/sec transformed by proj_trans() with tmerc.
>
>
>
> The question of funding such work would also remained to be solved.
>
>
>
> Even
>
>
>
> (*) I had a feeling of deja-vu when writing this email, and actually I realized I wrote a similar one almost 5 years ago
>
> ( http://lists.maptools.org/pipermail/proj/2015-June/007169.html ). C++ at that time seemed to be a hurdle for a number of people, but luckily we have gone through it now.
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj



-- 
Roger Oberholtzer

From knudsen.thomas at gmail.com  Fri Apr 17 00:09:56 2020
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Fri, 17 Apr 2020 09:09:56 +0200
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <9034322.C4ThZASbUb@even-i700>
References: <9034322.C4ThZASbUb@even-i700>
Message-ID: <CAH0YoEMvMTeV-FfKJwrXp26KheNafsK=51Nbjf-kwwVk8_imeQ@mail.gmail.com>

Bonjour Even!

I'm "kind-of" interested in this. Not so much because I need
transformation capacity at the billions/sec level, but because
I, in my spare time, am working on an improved PROJ internal
data flow.

That is - actually, I work on a proof-of-concept for an improved,
next generation WKT, ironing out some of the geodetically
unfortunate elements of WKT2019.

But incidentally this involves implementing support for the
OGC/ISO19100 "Coordinate Set" (i.e. "sets of coordinate tuples")
concept, since ISO metadata is attached at the set, rather than
tuple, level. And implementing support for coordinate sets is
a very good excuse for (conceptually speaking) implementing
proj_trans() in terms of proj_transform_generic(), rather than,
as today, the other way round.

This makes it possible to introduce SIMD parallelism in a very
smooth way by providing parallel versions of the computationally
most costly operations first, and make the "parallel" API handle
the difference between parallel-native operations and old style
serial ones until some day everything is natively parallel.

It also introduces a much simpler "4D-all-the-way" internal
plumbing of the PROJ data flow and all in all cleans up a
lot of the extreme mess that lurks under the pretty surface of proj_trans().
And the current 4D API can be reimplemented easily as a thin wrapper
over the new parallel API (which currently goes under the name PEGS:
"Platform for Experiments with Geodetic Software").

PEGS is beginning to shape up, but I probably need another few
weeks to get it a bit more ready for other eyes, and to provide some
initial, rudimentary documentation. I will announce it here on
the list, when I make the repo public.

But until then I'll be very interested in discussing the form and
contents of a parallel coordinate data structure (CoordinateSet
class), so we can keep things compatible.

My first thought was to make the CoordinateSet class simply a
container for the material currently given as args to
proj_transform_generic() - i.e. something compatible with more
or less any possible data structure a user program may implement.
But this may be too general to fit with the parallel templates
you mention?

/thomas

Den tor. 16. apr. 2020 kl. 17.18 skrev Even Rouault <
even.rouault at spatialys.com>:

> Hi,
>
>
>
> I've lately worked (again (*)) on a proof of concept of the Transverse
> Mercator forward transformation to use Intel SIMD instructions to transform
> several coordinate pairs simultaneously, potentially for use by the
> proj_trans_array() / proj_trans_generic() functions. Transverse Mercator is
> a very good candidate for that as it is quite expensive, and has few
> branches.
>
>
>
> The impact on the projection code is minimal, and the conversion of the
> original code was mostly straightforward, by using C++ templates and
> operator overloading: you mostly replace occurences of "double" by a
> templated type, and depending on how it is instanciated, it can expand to a
> single, 2, 4, 8, etc. doubles, either in a single or several SIMD
> registers. Optimizers do a good job at generating good assembly from that.
>
>
>
> SIMD instrinsincs are available for basic arithmetic operations and
> comparisons, but not for trigonometric (sin, cos, etc.) and other
> transcendent (exp, log, ...) functions that are often needed to implement
> projections, and are usually the computation bottlenecks.
>
>
>
> The SLEEF Vectorized Math Library (https://sleef.org/), using Boost
> License
>
> (~ MIT), provides such operations, and with very good accuracy (accuracy
> of 1 ULP for double precision). It is portable accross OS and supports
> different architectures.
>
>
>
> On my standalone prototype (outside of PROJ infrastructure, with just the
> forward TMerc code extracted), I get a 3.8x speedup with the AVX2 + FMA
> instruction sets, compared to a build with AVX2 + FMA enabled with the
> original non-vector implementation, and using SLEEF. This is when
> transforming 8 coordinate pairs at the same time. This 3.8x speed-up is
> close to the optimal 4 factor (AVX/AVX2 256bit vectors can store 4
> doubles). Without SLEEF, the speedup is 1.35x
>
> I guess that with AVX-512 available, gains in the [4x, 8x[ range could be
> expected, but I haven't tested.
>
>
>
> With pure SSE2 that comes automatically with x86_64, I can get a 1.55x
> speed-up with SLEEF (optimal would be x2 due to the 128 bit SSE vectors).
> Without SLEEF, the speedup is 1.35x as well.
>
>
>
> I would expect similar gains on the reverse path of etmerc which has
> equivalent complexity. Snyder's tmerc, geographic <--> cartesian
> conversions, etc. would likely be other good candidates.
>
>
>
> SLEEF could be made an optional dependency of PROJ. When it is not
> available, the execution of trigonometric & transcendent functions is of
> course serialized, hence the reduced efficiency.
>
>
>
> I would expect the actual gains, once the needed changes to be able to
> integrate that in PROJ itself are done, to be less than what I got on the
> prototype, due to other overheads in code between the user call and the
> actual projection code. But there's probably improvements that could be
> done to reduce current overheads.
>
>
>
> Is there an interest in seeing that integrated in PROJ ? I guess this is
> mostly of interest for people transforming at least billions of points. A
> few millions is probably not enough to really appreciate the difference: I
> can already get 4 million points/sec transformed by proj_trans() with tmerc.
>
>
>
> The question of funding such work would also remained to be solved.
>
>
>
> Even
>
>
>
> (*) I had a feeling of deja-vu when writing this email, and actually I
> realized I wrote a similar one almost 5 years ago
>
> ( http://lists.maptools.org/pipermail/proj/2015-June/007169.html ). C++
> at that time seemed to be a hurdle for a number of people, but luckily we
> have gone through it now.
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/f7022a72/attachment-0001.html>

From daniele.romagnoli at geo-solutions.it  Fri Apr 17 02:44:52 2020
From: daniele.romagnoli at geo-solutions.it (Daniele Romagnoli)
Date: Fri, 17 Apr 2020 11:44:52 +0200
Subject: [PROJ] Vertical CRS transformations and vertical grid shift
In-Reply-To: <25208203.0I40T9hO91@even-i700>
References: <CAJaHrDxm52+VJWMen6B=j8-1QahSe5P+BgKzo6=KbS+x7RO0VQ@mail.gmail.com>
 <25208203.0I40T9hO91@even-i700>
Message-ID: <CAJaHrDy67MxFUD_aWio6gpE3unDgueJPJj+Gbcog-2PmW=26fQ@mail.gmail.com>

Hi Even,
back to the topic I have an additional question. Please see below, inline.

On Thu, Apr 16, 2020 at 4:13 PM Even Rouault <even.rouault at spatialys.com>
wrote:

> Daniele,
>
>
>
> > so sorry in advance if I ask something obvious.
>
>
>
> There's nothing is obvious in this area :-)
>
>
>
> > Operation No. 2:
>
> > EPSG:9275, GHA height to EVRF2000 Austria height (1), 0.05 m, Austria
>
> > PROJ string:
>
> > Error when exporting to PROJ string: Unimplemented
>
> >
>
> > WKT2:2019 string:
>
> > COORDINATEOPERATION[".... long WKT here...."]
>
> >
>
> > What that PROJ Error means? Will it not be able to do the transform?
>
>
>
> Yes, you need PROJ master (future 7.1.0) for that, as the mapping for
> Austrian vertical methods to PROJ, and the transformation of original files
> to GeoTIFF, has been done just recently.
>
>
>
> >
>
> > Then, I tried combining 2DCRS + VerticalCRS:
>
> >
>
> > projinfo -s "EPSG:31255+5778" -t "EPSG:3035+9274"
>
> >
>
> > And I get again 2 candidate operations and long PROJ and WKT Strings.
>
> > Now, when I try cs2cs to transform a coordinate I'm getting this:
>
> >
>
> > cs2cs "EPSG:31255+5778" "EPSG:3035+9274"
>
> > 88000 273000 600
>
> > Results into:
>
> > * * inf
>
>
>
> Yes, failure to transform due to the above issue.
>
>
>
> With PROJ master, I now get a result, but no change in vertical value. The
> reason is that the point is outside of the grid (it is 45d52'39.123"N
> 16d50'57.28"E, but the minimum latitude of the Austrian grids is ~ 46d20'),
> and thus a ballpark vertical (=null) transformation is applied
>
>
>
> >
>
> > Not really sure what it means. :-(
>
> > If I try a different vertical CRS
>
> >
>
> > cs2cs "EPSG:31255+5778" "EPSG:3035+5621"
>
> > 88000 273000 600
>
> > Results into:
>
> > 2553923.81 4852657.42 600.00
>
> >
>
> > So, at least the 2D coordinates get properly transformed but the
> elevation
>
> > seems unchanged, therefore I'm not sure how it works.
>
>
>
> Same as above
>
>
>
> > *pj_open_lib(at_bev_AT_GIS_GRID.tif): call
>
> > fopen(/opt/conda/pkgs/proj-data-1.0-1/share/proj/at_bev_AT_GIS_GRID.tif)
> -
>
> > succeededpj_open_lib(GV_HoehenGrid_V1.csv): call
>
> > fopen(/opt/conda/pkgs/proj-data-1.0-1/share/proj/GV_HoehenGrid_V1.csv) -
>
> > succeededpj_open_lib(GV_Hoehengrid_plus_Geoid_V3.csv): call
>
> >
> fopen(/opt/conda/pkgs/proj-data-1.0-1/share/proj/GV_Hoehengrid_plus_Geoid_V3
>
> > .csv) - succeededUnrecognized vertical grid formatvgridshift: could not
> find
>
> > required grid(s).Pipeline: Bad step definition: inv (failed to load datum
>
> > shift file)*
>
>
>
> Yes, in PROJ 7.0, there's no mapping between the .csv files referenced by
> PROJ master and the converted GeoTIFF file.
>
>
>
> > That being said, I git cloned the PROJ repo and I have a couple of
>
> > questions:
>
> > - how the vertical shift get actually computed when grid shift files are
>
> > available?
>
> > I mean, I suppose that when finding a grid_transformation entry in the
> EPSG
>
> > DB and looking for the vertical_offset_file associated to a file, it will
>
> > somehow load that file and use it for a kind of interpolation/pixel query
>
> > but I didn't figure out where this happens in the code (checking a bit
> the
>
> > vgridshift.cpp as well as coordinateoperation.cpp).
>
>

>
>
> Addition/subtraction of the grid value, using bilinear interpolation.
>

I'm not sure to have fully understood how the bilinear interpolation is
being used in this process.
Could you please do an example?

Regards,
Daniele




> You spotted the right entry points. grids.cpp as well is relevant.
>
>
>
> > - Does it support at the same time csv / tiffs / gtx? (If so, I didn't
>
> > manage to find where it eventually loads them)
>
>
>
> CSV files aren't directly supported. TIFF and GTX are supported, provided
> that there's a mapping between the original name found in EPSG and a PROJ
> supported file:
>
> https://github.com/OSGeo/PROJ/blob/master/data/sql/grid_alternatives.sql
>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>


-- 
Regards,
Daniele Romagnoli
==
GeoServer Professional Services from the experts! Visit http://goo.gl/it488V
for more information.
==

Ing. Daniele Romagnoli
Senior Software Engineer

GeoSolutions S.A.S.
Via di Montramito 3/A
55054  Massarosa (LU)
Italy
phone: +39 0584 962313
fax:      +39 0584 1660272

http://www.geo-solutions.it
http://twitter.com/geosolutions_it

-------------------------------------------------------

Con riferimento alla normativa sul trattamento dei dati personali (Reg. UE
2016/679 - Regolamento generale sulla protezione dei dati ‚ÄúGDPR‚Äù), si
precisa che ogni circostanza inerente alla presente email (il suo
contenuto, gli eventuali allegati, etc.) √® un dato la cui conoscenza √®
riservata al/i solo/i destinatario/i indicati dallo scrivente. Se il
messaggio Le √® giunto per errore, √® tenuta/o a cancellarlo, ogni altra
operazione √® illecita. Le sarei comunque grato se potesse darmene notizia.

This email is intended only for the person or entity to which it is
addressed and may contain information that is privileged, confidential or
otherwise protected from disclosure. We remind that - as provided by
European Regulation 2016/679 ‚ÄúGDPR‚Äù - copying, dissemination or use of this
e-mail or the information herein by anyone other than the intended
recipient is prohibited. If you have received this email by mistake, please
notify us immediately by telephone or e-mail.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/b5a1916e/attachment.html>

From even.rouault at spatialys.com  Fri Apr 17 03:27:26 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 17 Apr 2020 12:27:26 +0200
Subject: [PROJ] Vertical CRS transformations and vertical grid shift
In-Reply-To: <CAJaHrDy67MxFUD_aWio6gpE3unDgueJPJj+Gbcog-2PmW=26fQ@mail.gmail.com>
References: <CAJaHrDxm52+VJWMen6B=j8-1QahSe5P+BgKzo6=KbS+x7RO0VQ@mail.gmail.com>
 <25208203.0I40T9hO91@even-i700>
 <CAJaHrDy67MxFUD_aWio6gpE3unDgueJPJj+Gbcog-2PmW=26fQ@mail.gmail.com>
Message-ID: <16891967.L711lpbtHg@even-i700>

> I'm not sure to have fully understood how the bilinear interpolation is
> being used in this process.

Hopefully as (loosely) described in http://www.epsg.org/Portals/0/373-07-2.pdf , "4.10.2 
Vertical Offset by Interpolation of Gridded Data"

Implementation starting at:
https://github.com/OSGeo/PROJ/blob/master/src/grids.cpp#L3178

> Could you please do an example?

Left as an exercice to the reader: peek a point on a grid intersection, look at the value in the 
grid file and verify that PROJ exactly offsets elevation by this value. Now takes a point at the 
middle of 4 grid nodes, compute the mean, and check that PROJ applies this interpolated 
value.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/bbee327b/attachment.html>

From daniele.romagnoli at geo-solutions.it  Fri Apr 17 03:51:45 2020
From: daniele.romagnoli at geo-solutions.it (Daniele Romagnoli)
Date: Fri, 17 Apr 2020 12:51:45 +0200
Subject: [PROJ] Vertical CRS transformations and vertical grid shift
In-Reply-To: <16891967.L711lpbtHg@even-i700>
References: <CAJaHrDxm52+VJWMen6B=j8-1QahSe5P+BgKzo6=KbS+x7RO0VQ@mail.gmail.com>
 <25208203.0I40T9hO91@even-i700>
 <CAJaHrDy67MxFUD_aWio6gpE3unDgueJPJj+Gbcog-2PmW=26fQ@mail.gmail.com>
 <16891967.L711lpbtHg@even-i700>
Message-ID: <CAJaHrDxQxOrdQrdmghBiGjamPBY_=WuVR-KA-ktrA4bKUhC4zg@mail.gmail.com>

Thanks! I'll check that doc.

Regards,
Daniele

On Fri, Apr 17, 2020 at 12:27 PM Even Rouault <even.rouault at spatialys.com>
wrote:

> > I'm not sure to have fully understood how the bilinear interpolation is
>
> > being used in this process.
>
>
>
> Hopefully as (loosely) described in
> http://www.epsg.org/Portals/0/373-07-2.pdf , "4.10.2 Vertical Offset by
> Interpolation of Gridded Data"
>
>
>
> Implementation starting at:
>
> https://github.com/OSGeo/PROJ/blob/master/src/grids.cpp#L3178
>
>
>
> > Could you please do an example?
>
>
>
> Left as an exercice to the reader: peek a point on a grid intersection,
> look at the value in the grid file and verify that PROJ exactly offsets
> elevation by this value. Now takes a point at the middle of 4 grid nodes,
> compute the mean, and check that PROJ applies this interpolated value.
>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>


-- 
Regards,
Daniele Romagnoli
==
GeoServer Professional Services from the experts! Visit http://goo.gl/it488V
for more information.
==

Ing. Daniele Romagnoli
Senior Software Engineer

GeoSolutions S.A.S.
Via di Montramito 3/A
55054  Massarosa (LU)
Italy
phone: +39 0584 962313
fax:      +39 0584 1660272

http://www.geo-solutions.it
http://twitter.com/geosolutions_it

-------------------------------------------------------

Con riferimento alla normativa sul trattamento dei dati personali (Reg. UE
2016/679 - Regolamento generale sulla protezione dei dati ‚ÄúGDPR‚Äù), si
precisa che ogni circostanza inerente alla presente email (il suo
contenuto, gli eventuali allegati, etc.) √® un dato la cui conoscenza √®
riservata al/i solo/i destinatario/i indicati dallo scrivente. Se il
messaggio Le √® giunto per errore, √® tenuta/o a cancellarlo, ogni altra
operazione √® illecita. Le sarei comunque grato se potesse darmene notizia.

This email is intended only for the person or entity to which it is
addressed and may contain information that is privileged, confidential or
otherwise protected from disclosure. We remind that - as provided by
European Regulation 2016/679 ‚ÄúGDPR‚Äù - copying, dissemination or use of this
e-mail or the information herein by anyone other than the intended
recipient is prohibited. If you have received this email by mistake, please
notify us immediately by telephone or e-mail.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/b6625f16/attachment-0001.html>

From even.rouault at spatialys.com  Fri Apr 17 04:01:04 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 17 Apr 2020 13:01:04 +0200
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <CAH0YoEMvMTeV-FfKJwrXp26KheNafsK=51Nbjf-kwwVk8_imeQ@mail.gmail.com>
References: <9034322.C4ThZASbUb@even-i700>
 <CAH0YoEMvMTeV-FfKJwrXp26KheNafsK=51Nbjf-kwwVk8_imeQ@mail.gmail.com>
Message-ID: <1699746.KfkvHM5lrB@even-i700>

Thomas,

> That is - actually, I work on a proof-of-concept for an improved,
> next generation WKT, ironing out some of the geodetically
> unfortunate elements of WKT2019.

Hum. Was hoping we wouldn't need a WKT2021 :-)

> 
> But incidentally this involves implementing support for the
> OGC/ISO19100 "Coordinate Set" (i.e. "sets of coordinate tuples")
> concept, since ISO metadata is attached at the set, rather than
> tuple, level.

For other readers, I suppose you speak about the classes described at:
http://docs.opengeospatial.org/as/18-005r4/18-005r4.html#18

That's indeed something I left aside during PROJ 6 implementation. CoordinateMetadata 
could be interesting to implement, as it has a WKT:2019 representation (not implement 
currently), and could be useful for transformations involving dynamic/time-dependent CRS.

> But until then I'll be very interested in discussing the form and
> contents of a parallel coordinate data structure (CoordinateSet
> class), so we can keep things compatible.

To give you some hints on what I prototyped, the generic vector-capable type is

template<typename T, int N> class VF{};

(VF stands Vector Floating point)

And it has specializations VF<double,1>, VF<double,2>, VF<double,4> etc

VF<double,1> once optimized is equivalent to a plain old double
VF<double,2> on SSE2 expands to a SSE 128bit register (or 2 double on non vector platforms, 
but not necessarily runtime efficient)
VF<double,4> on AVX/AVX2 expands to a AVX 256bit register, or on SSE2 on 2 SSE 128 bit 
registers
VF<double,8> on AVX/AVX2 expands to 2 AVX 256bit registers, or on SSE2 to 4 SSE 128 bit 
registers (and possibly on AVX-512 to a AVX-512 512 bit register)

Then you can define a:
template<typename T, int N> struct PJ_VF_XY
{
	VF<T,N> x;
	VF<T,N> y;
};
etc etc

But I don't think we would want to expose that on PROJ API level, one of the good reason is 
that it is C++ so cannot be used at the C level.

> My first thought was to make the CoordinateSet class simply a
> container for the material currently given as args to
> proj_transform_generic()

I concur with this. I'd also imagine CoordinateSet to be more or less similar to 
proj_trans_generic() arguments, with pointers to X, Y, Z, T double* arrays and user provided 
strides, to be accept all reasonable memory arrangements (typically separate/contiguous X, 
Y, Z, T components, or interleaved XY, XYZ, XYZT patterns)
(I see that CoordinateSet refers to the DirectPosition type, which must be defined in some 
other ISO standard, but I don't think we want & need possibly heavy weight objects there)

If the user chooses a in-memory arrangement of its data that directly matches what PROJ 
would use under the hood (for a vector type, the separate/contiguous arrangement would be 
the best), it can save a bit of time for the loading/unloading between memory and SSE/AVX 
registers, but even if those moves between memory and registers aren't done in the most 
efficient way, they are certainly neglectable regarding the cost of the math operations.

PROJ should be smart enough internally to figure out from the available components of a 
pipeline if it must use a vector operation or not. Typically you would have a fwd2d_2points, 
fwd2d_4points, fwd2d_8points function pointers for a PROJ operation, that would be set or 
not, depending on available hardware capabilities at runtime and benchmarked efficiency of 
using those variants.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/ee3a9b7b/attachment.html>

From knudsen.thomas at gmail.com  Fri Apr 17 04:59:38 2020
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Fri, 17 Apr 2020 13:59:38 +0200
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <1699746.KfkvHM5lrB@even-i700>
References: <9034322.C4ThZASbUb@even-i700>
 <CAH0YoEMvMTeV-FfKJwrXp26KheNafsK=51Nbjf-kwwVk8_imeQ@mail.gmail.com>
 <1699746.KfkvHM5lrB@even-i700>
Message-ID: <CAH0YoEM2iT2m4k+U6fL=bzPEtHJ=OqQ5h8DPGKw7wjDOiVYjtw@mail.gmail.com>

>  Hum. Was hoping we wouldn't need a WKT2021 :-)

Next revision cycle is not until 2024, so nothing before that. But things
take time,
and I need to think, rethink and discuss this extensively, so better be
well prepared
in ample time before time's up.

And as the work provides a way towards better PROJ plumbing, whether or not
it leads
to WKT revisions, I think it's worthwhile.

I understand from your description of VF that it is fine to move-initialize
VF. This
obviously simplifies the interfacing, compared to map directly to the user
provided
data arrays. So essentially one could do (in pseudo-code):

N = 42424242
double serialdata[N]

for (i = 0; i < N+3; i+=4) {
LAST = min (N - 1, i + 3)
NUM = i + 4 - LAST
paralleldata[0..3] = serialdata[i..LAST]
(do cool stuff in 4-way-parallel)

serialdata[i..LAST] = paralleldata[0..NUM]
}

is this correctly understood?



Den fre. 17. apr. 2020 kl. 13.01 skrev Even Rouault <
even.rouault at spatialys.com>:

> Thomas,
>
>
>
> > That is - actually, I work on a proof-of-concept for an improved,
>
> > next generation WKT, ironing out some of the geodetically
>
> > unfortunate elements of WKT2019.
>
>
>
> Hum. Was hoping we wouldn't need a WKT2021 :-)
>
>
>
> >
>
> > But incidentally this involves implementing support for the
>
> > OGC/ISO19100 "Coordinate Set" (i.e. "sets of coordinate tuples")
>
> > concept, since ISO metadata is attached at the set, rather than
>
> > tuple, level.
>
>
>
> For other readers, I suppose you speak about the classes described at:
>
> http://docs.opengeospatial.org/as/18-005r4/18-005r4.html#18
>
>
>
> That's indeed something I left aside during PROJ 6 implementation.
> CoordinateMetadata could be interesting to implement, as it has a WKT:2019
> representation (not implement currently), and could be useful for
> transformations involving dynamic/time-dependent CRS.
>
>
>
> > But until then I'll be very interested in discussing the form and
>
> > contents of a parallel coordinate data structure (CoordinateSet
>
> > class), so we can keep things compatible.
>
>
>
> To give you some hints on what I prototyped, the generic vector-capable
> type is
>
>
>
> template<typename T, int N> class VF{};
>
>
>
> (VF stands Vector Floating point)
>
>
>
> And it has specializations VF<double,1>, VF<double,2>, VF<double,4> etc
>
>
>
> VF<double,1> once optimized is equivalent to a plain old double
>
> VF<double,2> on SSE2 expands to a SSE 128bit register (or 2 double on non
> vector platforms, but not necessarily runtime efficient)
>
> VF<double,4> on AVX/AVX2 expands to a AVX 256bit register, or on SSE2 on 2
> SSE 128 bit registers
>
> VF<double,8> on AVX/AVX2 expands to 2 AVX 256bit registers, or on SSE2 to
> 4 SSE 128 bit registers (and possibly on AVX-512 to a AVX-512 512 bit
> register)
>
>
>
> Then you can define a:
>
> template<typename T, int N> struct PJ_VF_XY
>
> {
>
> VF<T,N> x;
>
> VF<T,N> y;
>
> };
>
> etc etc
>
>
>
> But I don't think we would want to expose that on PROJ API level, one of
> the good reason is that it is C++ so cannot be used at the C level.
>
>
>
> > My first thought was to make the CoordinateSet class simply a
>
> > container for the material currently given as args to
>
> > proj_transform_generic()
>
>
>
> I concur with this. I'd also imagine CoordinateSet to be more or less
> similar to proj_trans_generic() arguments, with pointers to X, Y, Z, T
> double* arrays and user provided strides, to be accept all reasonable
> memory arrangements (typically separate/contiguous X, Y, Z, T components,
> or interleaved XY, XYZ, XYZT patterns)
>
> (I see that CoordinateSet refers to the DirectPosition type, which must be
> defined in some other ISO standard, but I don't think we want & need
> possibly heavy weight objects there)
>
>
>
> If the user chooses a in-memory arrangement of its data that directly
> matches what PROJ would use under the hood (for a vector type, the
> separate/contiguous arrangement would be the best), it can save a bit of
> time for the loading/unloading between memory and SSE/AVX registers, but
> even if those moves between memory and registers aren't done in the most
> efficient way, they are certainly neglectable regarding the cost of the
> math operations.
>
>
>
> PROJ should be smart enough internally to figure out from the available
> components of a pipeline if it must use a vector operation or not.
> Typically you would have a fwd2d_2points, fwd2d_4points, fwd2d_8points
> function pointers for a PROJ operation, that would be set or not, depending
> on available hardware capabilities at runtime and benchmarked efficiency of
> using those variants.
>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/d58fa476/attachment-0001.html>

From Elie-Alban.Lescout at ensg.eu  Fri Apr 17 05:40:19 2020
From: Elie-Alban.Lescout at ensg.eu (Elie-Alban Lescout)
Date: Fri, 17 Apr 2020 12:40:19 +0000
Subject: [PROJ] Student contribution
Message-ID: <PR3P191MB0987AEB12B01C2DDA9D69C24CAD90@PR3P191MB0987.EURP191.PROD.OUTLOOK.COM>

Hi everyone!

I am a Geomatics Engineering student from the french National School for Geographical Sciences (ENSG<http://www.ensg.eu/?lang=en>) where we use PROJ a lot. It is particularly used in Geodesy class but also indirectly in many other fields (since PROJ is used as a building block in many softwares). As such I find that we, students, owe a lot to the community that develops and maintains this software and I would like to thank you all for what you do!
During our second year we have to complete a three-month internship and I thought I could take this opportunity to contribute to the project full-time or at least give a help somehow. Do you think there could be a way to have an institution (university, research lab or company) that could supervise me to enable this ?

Thank you in advance for your answers,
Best Regards,

Elie-Alban Lescout
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/efe9bc73/attachment.html>

From even.rouault at spatialys.com  Fri Apr 17 05:45:28 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 17 Apr 2020 14:45:28 +0200
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <CAH0YoEM2iT2m4k+U6fL=bzPEtHJ=OqQ5h8DPGKw7wjDOiVYjtw@mail.gmail.com>
References: <9034322.C4ThZASbUb@even-i700> <1699746.KfkvHM5lrB@even-i700>
 <CAH0YoEM2iT2m4k+U6fL=bzPEtHJ=OqQ5h8DPGKw7wjDOiVYjtw@mail.gmail.com>
Message-ID: <7826082.GFB1ROavEc@even-i700>

> is this correctly understood?

Yes, I think so. For example, if you have for a given function an 
implementation for 4-double and the default one for 1-double, 
if you process 14 points, PROJ would call 3 times the 4-double 
one and 2 times the 1-double one.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/4e5a3850/attachment.html>

From knudsen.thomas at gmail.com  Fri Apr 17 06:13:12 2020
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Fri, 17 Apr 2020 15:13:12 +0200
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <7826082.GFB1ROavEc@even-i700>
References: <9034322.C4ThZASbUb@even-i700> <1699746.KfkvHM5lrB@even-i700>
 <CAH0YoEM2iT2m4k+U6fL=bzPEtHJ=OqQ5h8DPGKw7wjDOiVYjtw@mail.gmail.com>
 <7826082.GFB1ROavEc@even-i700>
Message-ID: <CAH0YoEP+vAJKzMatuhqfseomFNuyJPtVzKNEyXtYFQ_b2nDXkw@mail.gmail.com>

yes, but in my case, it calls 4 times the 4-double, the last time
recomputing the
5th and 6th-last coordinates once more (since I assume this is faster than
calling
the serial version twice), but ignores the repeated computations, using
only the
two first elements of the paralleldata structure in the last trip through
the loop...

Den fre. 17. apr. 2020 kl. 14.45 skrev Even Rouault <
even.rouault at spatialys.com>:

> > is this correctly understood?
>
>
>
> Yes, I think so. For example, if you have for a given function an
> implementation for 4-double and the default one for 1-double, if you
> process 14 points, PROJ would call 3 times the 4-double one and 2 times the
> 1-double one.
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/e2a1e86e/attachment.html>

From andrew.bell.ia at gmail.com  Fri Apr 17 06:21:39 2020
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Fri, 17 Apr 2020 09:21:39 -0400
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <1699746.KfkvHM5lrB@even-i700>
References: <9034322.C4ThZASbUb@even-i700>
 <CAH0YoEMvMTeV-FfKJwrXp26KheNafsK=51Nbjf-kwwVk8_imeQ@mail.gmail.com>
 <1699746.KfkvHM5lrB@even-i700>
Message-ID: <CACJ51z1TMnRJ4avH1Ufo5HduTBcPw32y4x7eYWgbE96XsiGCzA@mail.gmail.com>

I know almost nothing about this, but I *thought* that compilers were
moving to do SIMD instructions where possible as an optimization.  It may
not be there yet, isn't this something that's getting attention?  Could the
library take advantage of this by arranging the code to allow for this
optimization, rather than adding explicit sleef interface?

On Fri, Apr 17, 2020 at 7:01 AM Even Rouault <even.rouault at spatialys.com>
wrote:

> Thomas,
>
>
>
> > That is - actually, I work on a proof-of-concept for an improved,
>
> > next generation WKT, ironing out some of the geodetically
>
> > unfortunate elements of WKT2019.
>
>
>
> Hum. Was hoping we wouldn't need a WKT2021 :-)
>
>
>
> >
>
> > But incidentally this involves implementing support for the
>
> > OGC/ISO19100 "Coordinate Set" (i.e. "sets of coordinate tuples")
>
> > concept, since ISO metadata is attached at the set, rather than
>
> > tuple, level.
>
>
>
> For other readers, I suppose you speak about the classes described at:
>
> http://docs.opengeospatial.org/as/18-005r4/18-005r4.html#18
>
>
>
> That's indeed something I left aside during PROJ 6 implementation.
> CoordinateMetadata could be interesting to implement, as it has a WKT:2019
> representation (not implement currently), and could be useful for
> transformations involving dynamic/time-dependent CRS.
>
>
>
> > But until then I'll be very interested in discussing the form and
>
> > contents of a parallel coordinate data structure (CoordinateSet
>
> > class), so we can keep things compatible.
>
>
>
> To give you some hints on what I prototyped, the generic vector-capable
> type is
>
>
>
> template<typename T, int N> class VF{};
>
>
>
> (VF stands Vector Floating point)
>
>
>
> And it has specializations VF<double,1>, VF<double,2>, VF<double,4> etc
>
>
>
> VF<double,1> once optimized is equivalent to a plain old double
>
> VF<double,2> on SSE2 expands to a SSE 128bit register (or 2 double on non
> vector platforms, but not necessarily runtime efficient)
>
> VF<double,4> on AVX/AVX2 expands to a AVX 256bit register, or on SSE2 on 2
> SSE 128 bit registers
>
> VF<double,8> on AVX/AVX2 expands to 2 AVX 256bit registers, or on SSE2 to
> 4 SSE 128 bit registers (and possibly on AVX-512 to a AVX-512 512 bit
> register)
>
>
>
> Then you can define a:
>
> template<typename T, int N> struct PJ_VF_XY
>
> {
>
> VF<T,N> x;
>
> VF<T,N> y;
>
> };
>
> etc etc
>
>
>
> But I don't think we would want to expose that on PROJ API level, one of
> the good reason is that it is C++ so cannot be used at the C level.
>
>
>
> > My first thought was to make the CoordinateSet class simply a
>
> > container for the material currently given as args to
>
> > proj_transform_generic()
>
>
>
> I concur with this. I'd also imagine CoordinateSet to be more or less
> similar to proj_trans_generic() arguments, with pointers to X, Y, Z, T
> double* arrays and user provided strides, to be accept all reasonable
> memory arrangements (typically separate/contiguous X, Y, Z, T components,
> or interleaved XY, XYZ, XYZT patterns)
>
> (I see that CoordinateSet refers to the DirectPosition type, which must be
> defined in some other ISO standard, but I don't think we want & need
> possibly heavy weight objects there)
>
>
>
> If the user chooses a in-memory arrangement of its data that directly
> matches what PROJ would use under the hood (for a vector type, the
> separate/contiguous arrangement would be the best), it can save a bit of
> time for the loading/unloading between memory and SSE/AVX registers, but
> even if those moves between memory and registers aren't done in the most
> efficient way, they are certainly neglectable regarding the cost of the
> math operations.
>
>
>
> PROJ should be smart enough internally to figure out from the available
> components of a pipeline if it must use a vector operation or not.
> Typically you would have a fwd2d_2points, fwd2d_4points, fwd2d_8points
> function pointers for a PROJ operation, that would be set or not, depending
> on available hardware capabilities at runtime and benchmarked efficiency of
> using those variants.
>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/39a3f7d3/attachment-0001.html>

From even.rouault at spatialys.com  Fri Apr 17 06:30:34 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 17 Apr 2020 15:30:34 +0200
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <CAH0YoEP+vAJKzMatuhqfseomFNuyJPtVzKNEyXtYFQ_b2nDXkw@mail.gmail.com>
References: <9034322.C4ThZASbUb@even-i700> <7826082.GFB1ROavEc@even-i700>
 <CAH0YoEP+vAJKzMatuhqfseomFNuyJPtVzKNEyXtYFQ_b2nDXkw@mail.gmail.com>
Message-ID: <1811277.OsoyAdFbOE@even-i700>

On vendredi 17 avril 2020 15:13:12 CEST Thomas Knudsen wrote:
> yes, but in my case, it calls 4 times the 4-double, the last time
> recomputing the
> 5th and 6th-last coordinates once more (since I assume this is faster than
> calling
> the serial version twice), but ignores the repeated computations, using
> only the
> two first elements of the paralleldata structure in the last trip through
> the loop...

Hum, sounds a bit complicated. If you have a 4-double version, maybe your strategy can be 
worth for (N % 4) == 2 or 3, but for (N % 4) == 1, the serial version would be faster. From my 
quick benchmarking, the implementation of the (serial) trancendent functions in Linux libm is 
more efficient than the one of sleef. But that's expected since sleef must use branch-less 
implementations whereas libm can use all sort of tricks more efficient for a serial version.
Anyway, that's really a tiny implementation detail.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/2ea21c9f/attachment.html>

From even.rouault at spatialys.com  Fri Apr 17 07:01:42 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 17 Apr 2020 16:01:42 +0200
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <CACJ51z1TMnRJ4avH1Ufo5HduTBcPw32y4x7eYWgbE96XsiGCzA@mail.gmail.com>
References: <9034322.C4ThZASbUb@even-i700> <1699746.KfkvHM5lrB@even-i700>
 <CACJ51z1TMnRJ4avH1Ufo5HduTBcPw32y4x7eYWgbE96XsiGCzA@mail.gmail.com>
Message-ID: <5078429.rHOHrZGp3L@even-i700>

On vendredi 17 avril 2020 09:21:39 CEST Andrew Bell wrote:
> I know almost nothing about this, but I *thought* that compilers were
> moving to do SIMD instructions where possible as an optimization.  It may
> not be there yet, isn't this something that's getting attention?  Could the
> library take advantage of this by arranging the code to allow for this
> optimization, rather than adding explicit sleef interface?

That's a good point, but there's no way that the most clever compiler would or will be able to 
auto-vectorize PROJ code as it is currently written, since there's no explicit loop in the 
projection code, and that's the number 1 requirement for auto-vectorization to be triggered.

If there were such loops, maybe some compilers, which do not exist yet (maybe except the 
Intel compiler which I presume can use their proprietary SVML library [1]), could also auto-
vectorize the trancendent functions.
Actually I found  posts [2] [3] on the clang mailing list from 2016 where they considered sleef, 
but it doesn't seem that was pursued.

So, if you take the following snippet

#include <math.h>

void foo(const double* lon, const double* lat, double* Xout, double* Yout, int N)
{
    for( int i = 0; i < N; i++ )
    {
        Xout[i] = lon[i] * 2;
        Yout[i] = lat[i] * 4;
    }
}

void bar(const double* lon, const double* lat, double* Xout, double* Yout, int N)
{
    for( int i = 0; i < N; i++ )
    {
        Xout[i] = lon[i] * 2;
        Yout[i] = sqrt(lat[i]);
    }
}

void baz(const double* lon, const double* lat, double* Xout, double* Yout, int N)
{
    for( int i = 0; i < N; i++ )
    {
        Xout[i] = sin(lon[i]);
        Yout[i] = cos(lon[i]) * cos(lat[i]);
    }
}

With gcc and clang in -O3 mode (to force autovectorization), foo() is assembled into a 
reasonable auto-vectorized version. But the generated code for bar() and baz() remains 
completely serial (actually, that's quite surprising for bar() since sqrt exists as a SSE 
instruction). And bar() and baz() are actually more typical of PROJ than foo().

There's also the question of branches. Human intervention is probably needed to rewrite 
them in a way compatible.

If at the end of my loop in foo(), I add the following
        if( Yout[i] >= 4 )
        {
            Xout[i] = 4 - Xout[i];
            Yout[i] = 4 - Yout[i];
        }
gcc or clang give up on autovectorization (even when complicating significantly the code 
before it)

Even


[1] https://software.intel.com/en-us/cpp-compiler-developer-guide-and-reference-intrinsics-for-short-vector-math-library-svml-operations
[2] http://lists.llvm.org/pipermail/llvm-dev/2016-July/102254.html
[3] https://reviews.llvm.org/D24951

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/72fadb7b/attachment.html>

From even.rouault at spatialys.com  Fri Apr 17 07:38:25 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 17 Apr 2020 16:38:25 +0200
Subject: [PROJ] Why do I have a exception: NoSuchAuthorityCodeException?
In-Reply-To: <1587036106.291500207@f177.i.mail.ru>
References: <1587036106.291500207@f177.i.mail.ru>
Message-ID: <3907312.h62uPVWeIH@even-i700>

On jeudi 16 avril 2020 14:21:46 CEST –ï–≤–≥–µ–Ω–∏–π –°–æ–±–æ–ª–µ–≤ wrote:
> Hi.
>  
> I use function proj_create_crs_to_crs for create PJ* for transform:
>     C = proj_context_create();
>     char** paths = new char*[1];
>     QString pathapp = QApplication::applicationDirPath()+ "/proj4_data" ; 
>     paths[0] = _strdup(pathapp.toUtf8().constData());
>     proj_context_set_search_paths(C, 1, paths);
>     P = proj_create_crs_to_crs(C, "EPSG:4326", "EPSG:4923", NULL);
>  
> I have exception:  osgeo::proj::io::NoSuchAuthorityCodeException.

You mean that proj_create_crs_to_crs() throws a C++ exception that is propagated down 
though your code ? That shouldn't happen, as at the worse case they are caught by 
proj_create_crs_to_crs() itself. Or there's something really wrong with your build (or some 
situations like 
https://github.com/OSGeo/gdal/issues/2394 where a third-party library messes up with 
libstdc++)

But, internally, indeed proj_create_crs_to_crs(C, "EPSG:4326", "EPSG:4923", NULL) will at 
some point try to instanciate a projectedCRS and throw an exception, but it will be caught 
immediately by other PROJ code, so you shouldn't worry about that.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/cc42107f/attachment-0001.html>

From andrew.bell.ia at gmail.com  Fri Apr 17 07:55:58 2020
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Fri, 17 Apr 2020 10:55:58 -0400
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <5078429.rHOHrZGp3L@even-i700>
References: <9034322.C4ThZASbUb@even-i700> <1699746.KfkvHM5lrB@even-i700>
 <CACJ51z1TMnRJ4avH1Ufo5HduTBcPw32y4x7eYWgbE96XsiGCzA@mail.gmail.com>
 <5078429.rHOHrZGp3L@even-i700>
Message-ID: <CACJ51z2BXdg3n8kx8jf4FYJbmy0j18reTU3W6ni0yFNObUP14A@mail.gmail.com>

I ran across this (
https://sc18.supercomputing.org/proceedings/workshops/workshop_files/ws_llvmf106s2-file1.pdf),
which may be of interest.

On Fri, Apr 17, 2020 at 10:01 AM Even Rouault <even.rouault at spatialys.com>
wrote:

> On vendredi 17 avril 2020 09:21:39 CEST Andrew Bell wrote:
>
> > I know almost nothing about this, but I *thought* that compilers were
>
> > moving to do SIMD instructions where possible as an optimization. It may
>
> > not be there yet, isn't this something that's getting attention? Could
> the
>
> > library take advantage of this by arranging the code to allow for this
>
> > optimization, rather than adding explicit sleef interface?
>
>
>
> That's a good point, but there's no way that the most clever compiler
> would or will be able to auto-vectorize PROJ code as it is currently
> written, since there's no explicit loop in the projection code, and that's
> the number 1 requirement for auto-vectorization to be triggered.
>
>
>
> If there were such loops, maybe some compilers, which do not exist yet
> (maybe except the Intel compiler which I presume can use their proprietary
> SVML library [1]), could also auto-vectorize the trancendent functions.
>
> Actually I found posts [2] [3] on the clang mailing list from 2016 where
> they considered sleef, but it doesn't seem that was pursued.
>
>
>
> So, if you take the following snippet
>
>
>
> #include <math.h>
>
>
>
> void foo(const double* lon, const double* lat, double* Xout, double* Yout,
> int N)
>
> {
>
> for( int i = 0; i < N; i++ )
>
> {
>
> Xout[i] = lon[i] * 2;
>
> Yout[i] = lat[i] * 4;
>
> }
>
> }
>
>
>
> void bar(const double* lon, const double* lat, double* Xout, double* Yout,
> int N)
>
> {
>
> for( int i = 0; i < N; i++ )
>
> {
>
> Xout[i] = lon[i] * 2;
>
> Yout[i] = sqrt(lat[i]);
>
> }
>
> }
>
>
>
> void baz(const double* lon, const double* lat, double* Xout, double* Yout,
> int N)
>
> {
>
> for( int i = 0; i < N; i++ )
>
> {
>
> Xout[i] = sin(lon[i]);
>
> Yout[i] = cos(lon[i]) * cos(lat[i]);
>
> }
>
> }
>
>
>
> With gcc and clang in -O3 mode (to force autovectorization), foo() is
> assembled into a reasonable auto-vectorized version. But the generated code
> for bar() and baz() remains completely serial (actually, that's quite
> surprising for bar() since sqrt exists as a SSE instruction). And bar() and
> baz() are actually more typical of PROJ than foo().
>
>
>
> There's also the question of branches. Human intervention is probably
> needed to rewrite them in a way compatible.
>
>
>
> If at the end of my loop in foo(), I add the following
>
> if( Yout[i] >= 4 )
>
> {
>
> Xout[i] = 4 - Xout[i];
>
> Yout[i] = 4 - Yout[i];
>
> }
>
> gcc or clang give up on autovectorization (even when complicating
> significantly the code before it)
>
>
>
> Even
>
>
>
>
>
> [1]
> https://software.intel.com/en-us/cpp-compiler-developer-guide-and-reference-intrinsics-for-short-vector-math-library-svml-operations
>
> [2] http://lists.llvm.org/pipermail/llvm-dev/2016-July/102254.html
>
> [3] https://reviews.llvm.org/D24951
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/da51be67/attachment.html>

From evgen_sobolev at mail.ru  Fri Apr 17 08:22:55 2020
From: evgen_sobolev at mail.ru (=?UTF-8?B?0JXQstCz0LXQvdC40Lkg0KHQvtCx0L7Qu9C10LI=?=)
Date: Fri, 17 Apr 2020 18:22:55 +0300
Subject: [PROJ]
 =?utf-8?q?Why_do_I_have_a_exception=3A_NoSuchAuthorityCode?=
 =?utf-8?q?Exception=3F?=
In-Reply-To: <3907312.h62uPVWeIH@even-i700>
References: <1587036106.291500207@f177.i.mail.ru>
 <3907312.h62uPVWeIH@even-i700>
Message-ID: <1587136975.562396271@f131.i.mail.ru>


¬† 
>17 april 2020, 17:38 +03:00 –æ—Ç Even Rouault <even.rouault at spatialys.com>:
>¬†
>On jeudi 16 avril 2020 14:21:46 CEST –ï–≤–≥–µ–Ω–∏–π –°–æ–±–æ–ª–µ–≤ wrote:
>> Hi.
>> ¬†
>> I use function¬†proj_create_crs_to_crs for create PJ* for transform:
>> ¬† ¬†¬†C = proj_context_create();
>> ¬† ¬† char** paths = new char*[1];
>> ¬† ¬† QString pathapp = QApplication::applicationDirPath()+ "/proj4_data" ;¬†
>> ¬† ¬† paths[0] = _strdup(pathapp.toUtf8().constData());
>> ¬† ¬† proj_context_set_search_paths(C, 1, paths);
>> ¬†¬† ¬†P = proj_create_crs_to_crs(C, "EPSG:4326", "EPSG:4923", NULL);
>> ¬†
>> I have exception:¬†¬†osgeo::proj::io::NoSuchAuthorityCodeException.
>¬†
>You mean that proj_create_crs_to_crs() throws a C++ exception that is propagated down though your code ? That shouldn't happen, as at the worse case they are caught by proj_create_crs_to_crs() itself. Or there's something really wrong with your build (or some situations like
>https://github.com/OSGeo/gdal/issues/2394 where a third-party library messes up with libstdc++)
>¬†
>But, internally, indeed proj_create_crs_to_crs(C, "EPSG:4326", "EPSG:4923", NULL) will at some point try to instanciate a projectedCRS and throw an exception, but it will be caught immediately by other PROJ code, so you shouldn't worry about that.

Yes, another PROJ code is handling this exception and everything works correctly. But these exceptions slow down the debugging of my code, as I often use the proj_create_crs_to_crs () function.

Is it normal practice to throw exceptions in the correct code?
¬†
Sobolev Evgeny
¬†
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/7b4d506d/attachment.html>

From even.rouault at spatialys.com  Fri Apr 17 09:20:12 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 17 Apr 2020 18:20:12 +0200
Subject: [PROJ] Why do I have a exception: NoSuchAuthorityCodeException?
In-Reply-To: <1587136975.562396271@f131.i.mail.ru>
References: <1587036106.291500207@f177.i.mail.ru>
 <3907312.h62uPVWeIH@even-i700> <1587136975.562396271@f131.i.mail.ru>
Message-ID: <2782441.yJJZIg1KO0@even-i700>

> Is it normal practice to throw exceptions in the correct code?

Take 2 different C++ developers and they will likely a "yes" and a "no" answer. 
"Throw" a third one and you'll get another answer, so I will refrain from giving my 
own opinion :-)

https://github.com/OSGeo/PROJ/pull/2160 should avoid internal exceptions for 
that particular use case, but I'm aware of other locations where exceptions will be 
thrown. Avoiding that could be a bit painful

Normally you should be able to tune your debugger not to stop on exceptions. Well, 
gdb doesn't stop by default on them at least.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/703074a2/attachment-0001.html>

From charles at karney.com  Fri Apr 17 10:29:17 2020
From: charles at karney.com (Charles Karney)
Date: Fri, 17 Apr 2020 13:29:17 -0400
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <9034322.C4ThZASbUb@even-i700>
References: <9034322.C4ThZASbUb@even-i700>
Message-ID: <c8fc77ff-2b92-ce45-68c0-f01d9ad96f0d@karney.com>

I wonder whether it's possible to get the benefits of vectorization
without massive of changes to the code.  Perhaps the basic projection
functions could be templated to allow Eigen arrays of PJ_LP's to be
passed.  Eigen already has overloads for componentwise arithmetic
operations and handles SIMD vectorization automatically.

A major advantage of this approach is that PROJ doesn't need to get into
the weeds with SIMD instructions.  So when a new instruction set comes
along we can (I hope) rely on the maintains of Eigen to do the hard
work.  (I see that there's already some interoperability with Eigen and
CUDA.)

If this approach is followed, I would also recommend that the basic
floating point type, double, be either templated or typedef'ed.  This
would allow PROJ to be compiled to use long double or quad precision
which is often useful for tracking down round-off errors.

   --Charles

On 4/16/20 11:18 AM, Even Rouault wrote:
> Hi,
> 
> I've lately worked (again (*)) on a proof of concept of the Transverse 
> Mercator forward transformation to use Intel SIMD instructions to 
> transform several coordinate pairs simultaneously, potentially for use 
> by the proj_trans_array() / proj_trans_generic() functions. Transverse 
> Mercator is a very good candidate for that as it is quite expensive, and 
> has few branches.
> 
> The impact on the projection code is minimal, and the conversion of the 
> original code was mostly straightforward, by using C++ templates and 
> operator overloading: you mostly replace occurences of "double" by a 
> templated type, and depending on how it is instanciated, it can expand 
> to a single, 2, 4, 8, etc. doubles, either in a single or several SIMD 
> registers. Optimizers do a good job at generating good assembly from that.
> 
> SIMD instrinsincs are available for basic arithmetic operations and 
> comparisons, but not for trigonometric (sin, cos, etc.) and other 
> transcendent (exp, log, ...) functions that are often needed to 
> implement projections, and are usually the computation bottlenecks.
> 
> The SLEEF Vectorized Math Library (https://sleef.org/), using Boost License
> 
> (~ MIT), provides such operations, and with very good accuracy (accuracy 
> of 1 ULP for double precision). It is portable accross OS and supports 
> different architectures.
> 
> On my standalone prototype (outside of PROJ infrastructure, with just 
> the forward TMerc code extracted), I get a 3.8x speedup with the AVX2 + 
> FMA instruction sets, compared to a build with AVX2 + FMA enabled with 
> the original non-vector implementation, and using SLEEF. This is when 
> transforming 8 coordinate pairs at the same time. This 3.8x speed-up is 
> close to the optimal 4 factor (AVX/AVX2 256bit vectors can store 4 
> doubles). Without SLEEF, the speedup is 1.35x
> 
> I guess that with AVX-512 available, gains in the [4x, 8x[ range could 
> be expected, but I haven't tested.
> 
> With pure SSE2 that comes automatically with x86_64, I can get a 1.55x 
> speed-up with SLEEF (optimal would be x2 due to the 128 bit SSE 
> vectors). Without SLEEF, the speedup is 1.35x as well.
> 
> I would expect similar gains on the reverse path of etmerc which has 
> equivalent complexity. Snyder's tmerc, geographic <--> cartesian 
> conversions, etc. would likely be other good candidates.
> 
> SLEEF could be made an optional dependency of PROJ. When it is not 
> available, the execution of trigonometric & transcendent functions is of 
> course serialized, hence the reduced efficiency.
> 
> I would expect the actual gains, once the needed changes to be able to 
> integrate that in PROJ itself are done, to be less than what I got on 
> the prototype, due to other overheads in code between the user call and 
> the actual projection code. But there's probably improvements that could 
> be done to reduce current overheads.
> 
> Is there an interest in seeing that integrated in PROJ ? I guess this is 
> mostly of interest for people transforming at least billions of points. 
> A few millions is probably not enough to really appreciate the 
> difference: I can already get 4 million points/sec transformed by 
> proj_trans() with tmerc.
> 
> The question of funding such work would also remained to be solved.
> 
> Even
> 
> (*) I had a feeling of deja-vu when writing this email, and actually I 
> realized I wrote a similar one almost 5 years ago
> 
> ( http://lists.maptools.org/pipermail/proj/2015-June/007169.html ). C++ 
> at that time seemed to be a hurdle for a number of people, but luckily 
> we have gone through it now.
> 
> -- 
> 
> Spatialys - Geospatial professional services
> 
> http://www.spatialys.com
> 
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
> 

From andrew.bell.ia at gmail.com  Fri Apr 17 10:56:42 2020
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Fri, 17 Apr 2020 13:56:42 -0400
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <c8fc77ff-2b92-ce45-68c0-f01d9ad96f0d@karney.com>
References: <9034322.C4ThZASbUb@even-i700>
 <c8fc77ff-2b92-ce45-68c0-f01d9ad96f0d@karney.com>
Message-ID: <CACJ51z2SbZKRg6qQpW1ZKaiE3oAHh_P8yhqtF6qWw3G3-PhbVw@mail.gmail.com>

On Fri, Apr 17, 2020 at 1:29 PM Charles Karney <charles at karney.com> wrote:

> I wonder whether it's possible to get the benefits of vectorization
> without massive of changes to the code.  Perhaps the basic projection
> functions could be templated to allow Eigen arrays of PJ_LP's to be
> passed.  Eigen already has overloads for componentwise arithmetic
> operations and handles SIMD vectorization automatically.
>

This seems like a nice plan.

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/325fdbf5/attachment.html>

From ddouglas at usgs.gov  Fri Apr 17 11:59:59 2020
From: ddouglas at usgs.gov (Douglas, David C)
Date: Fri, 17 Apr 2020 18:59:59 +0000
Subject: [PROJ] package 'geosphere' -- transforming spherical-based
 geographic coordinates to WGS84
Message-ID: <BY5PR09MB4691FAFEC5D995A9381BC27CBBD80@BY5PR09MB4691.namprd09.prod.outlook.com>

April 17, 2020

Greetings,

I have used the destPointRhumb function in the package geosphere to generate a set of geographic coordinates.
If I understand correctly, the returned coordinates were derived on a sphere with defined radius r=6378137.

My desire is to transform the destPointRhumb coordinates to WGS84.
I expected the transformation would result in slightly different coordinates on the WGS84 ellipsoid.
My transformation attempt, however, did not change the coordinates at all -- which puzzles me.

Can someone show me what I'm doing wrong, or misunderstanding?

Thank you in advance.

David Douglas

###########################################################
require(tidyverse)
require(sf)
require(geosphere)
# request 5 coordinates along a rhumb line, 3000 km apart spanning south of equator to northern Greenland...
d <- (1:5 * 3000000)
gs <- d %>% geosphere::destPointRhumb(p = c(-110,-45), b = 20, r = 6378137) %>% tbl_df()
# apply CRS as sphere...
geospherePoints <- gs %>%  st_as_sf(coords = c("lon", "lat"), crs = "+proj=longlat +ellps=sphere +no_defs")
geospherePoints
# transform coordinates to WGS84 spheroid...
geospherePointsWGS84 <- geospherePoints %>% st_transform("+init=epsg:4326")
geospherePointsWGS84

# Result: the two sets of coordinates are qualitatively identical...  why?
geospherePointsWGS84 == geospherePoints
###########################################################

David C Douglas
USGS Alaska Science Center
250 Egan Drive
Juneau AK 99801
(907) 364-1576 office
ddouglas at usgs.gov

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/d0963882/attachment.html>

From even.rouault at spatialys.com  Fri Apr 17 12:36:06 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 17 Apr 2020 21:36:06 +0200
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <c8fc77ff-2b92-ce45-68c0-f01d9ad96f0d@karney.com>
References: <9034322.C4ThZASbUb@even-i700>
 <c8fc77ff-2b92-ce45-68c0-f01d9ad96f0d@karney.com>
Message-ID: <1596053.f8YZIA0jDO@even-i700>

On vendredi 17 avril 2020 13:29:17 CEST Charles Karney wrote:
> I wonder whether it's possible to get the benefits of vectorization
> without massive of changes to the code. 

That's exactly what I had in mind.

> Perhaps the basic projection
> functions could be templated to allow Eigen arrays of PJ_LP's to be
> passed.  Eigen already has overloads for componentwise arithmetic
> operations and handles SIMD vectorization automatically.

I didn't know Eigen, but from a quick look & try, it seems I've done something similar.
At least for types like Vector2d, Vector4d. But Eigen is quite limited in the operations it 
supports. Just +, -, *, /. No comparisons, sqrt, sin, cos, etc.
Which my prototype supports (through sleef for sin, cos, etc).

Adding support for functions that take Eigen types, like sqrt(Vector4d) should be possible, 
but comparison operators require to be able to modify the class definition.

Another pain point I found with Eigen, is that it refuses to do things like
a * b on vectors because of potential ambiguity of the operator in the context of linear 
algebra (matrix multiplication, cross product, member-to-member multiplication ?). But in a 
PROJ world where we'd port from double to multiple-double, we just want member-to-
member multipication, and with Eigen you have to do it explictly with a.cwiseProduct(b). 
Would require more changes and would clutter the readability of the code.

> A major advantage of this approach is that PROJ doesn't need to get into
> the weeds with SIMD instructions.  So when a new instruction set comes
> along we can (I hope) rely on the maintains of Eigen to do the hard
> work.  (I see that there's already some interoperability with Eigen and
> CUDA.)

Admitedly I've only prototyped SSE and AVX. But supporting other archs would only require 
to add a specialization in the generic template stuff (not a big deal. It is of the order of 10 
intrinsincs per arch), not projection code. And for non-supported archs, the templated 
operations would just expand to a 1-coordinate at a time implementation, like the current 
serial code. But I guess if Intel is covered, we have already > 90% use cases that matter 
(nobody ever paid me to optimize something for non-Intel archs).

One potential downside (in the context of PROJ licencing) of Eigen is its license. It is MPL 2, 
weak copyleft, which would require binary distributions of PROJ to provide a way of 
accessing Eigen source code. Not a huge deal, but this would put additional requirements for 
proprietary shops using PROJ.

> If this approach is followed, I would also recommend that the basic
> floating point type, double, be either templated or typedef'ed. 

Yep, exactly my idea of template<typename T, int N> struct VF

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/1952cf49/attachment.html>

From even.rouault at spatialys.com  Fri Apr 17 12:45:23 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 17 Apr 2020 21:45:23 +0200
Subject: [PROJ] package 'geosphere' -- transforming spherical-based
	geographic coordinates to WGS84
In-Reply-To: <BY5PR09MB4691FAFEC5D995A9381BC27CBBD80@BY5PR09MB4691.namprd09.prod.outlook.com>
References: <BY5PR09MB4691FAFEC5D995A9381BC27CBBD80@BY5PR09MB4691.namprd09.prod.outlook.com>
Message-ID: <22677736.d3dDb1hNT1@even-i700>

Douglas,

> Can someone show me what I'm doing wrong, or misunderstanding?

Your "+proj=longlat +ellps=sphere +no_defs" string doesn't contain any datum "qualifier", so 
PROJ doesn't attempt to do any change of coordinate. This is a behaviour that has existed 
since PROJ 4.6 if I remember well, and that has been kept during PROJ 6 overhaul.
If you add +towgs84=0,0,0, you will see a change in latitude values.

$ echo "2 49" | cs2cs +proj=longlat +ellps=sphere +to +init=epsg:4326
2dE	49dN 0.000

$ echo "2 49" | src/cs2cs +proj=longlat +ellps=sphere  +towgs84=0,0,0 +to +init=epsg:4326
2dE	49d11'25.117"N 0.000


The details of the transformations can also be shown with PROJ >= 6 with:

$ projinfo -s "+proj=longlat +ellps=sphere +type=crs" -t EPSG:4326 -o PROJ
Candidate operations found: 1
-------------------------------------
Operation No. 1:

unknown id, Ballpark geographic offset from unknown to WGS 84, unknown accuracy, World, 
has ballpark transformation

PROJ string:
+proj=axisswap +order=2,1


vs

$ projinfo -s "+proj=longlat +ellps=sphere +towgs84=0,0,0 +type=crs" -t EPSG:4326 -o PROJ
Candidate operations found: 1
-------------------------------------
Operation No. 1:

unknown id, Transformation from unknown to WGS84, unknown accuracy, unknown domain 
of validity

PROJ string:
+proj=pipeline +step +proj=unitconvert +xy_in=deg +xy_out=rad +step +proj=push +v_3 
+step +proj=cart +ellps=sphere +step +inv +proj=cart +ellps=WGS84 +step +proj=pop +v_3 
+step +proj=unitconvert +xy_in=rad +xy_out=deg +step +proj=axisswap +order=2,1



Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/d9f335b9/attachment-0001.html>

From jorisvandenbossche at gmail.com  Fri Apr 17 12:49:18 2020
From: jorisvandenbossche at gmail.com (Joris Van den Bossche)
Date: Fri, 17 Apr 2020 21:49:18 +0200
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <1596053.f8YZIA0jDO@even-i700>
References: <9034322.C4ThZASbUb@even-i700>
 <c8fc77ff-2b92-ce45-68c0-f01d9ad96f0d@karney.com>
 <1596053.f8YZIA0jDO@even-i700>
Message-ID: <CALQtMBb955sEM58zdcUkZk0-dFeXm0OH+cDWx-d1JPmXuGzE1g@mail.gmail.com>

Another potential interesting project regarding SIMD is xsimd:
https://github.com/xtensor-stack/xsimd

On Fri, 17 Apr 2020 at 21:36, Even Rouault <even.rouault at spatialys.com>
wrote:

> On vendredi 17 avril 2020 13:29:17 CEST Charles Karney wrote:
>
> > I wonder whether it's possible to get the benefits of vectorization
>
> > without massive of changes to the code.
>
>
>
> That's exactly what I had in mind.
>
>
>
> > Perhaps the basic projection
>
> > functions could be templated to allow Eigen arrays of PJ_LP's to be
>
> > passed. Eigen already has overloads for componentwise arithmetic
>
> > operations and handles SIMD vectorization automatically.
>
>
>
> I didn't know Eigen, but from a quick look & try, it seems I've done
> something similar.
>
> At least for types like Vector2d, Vector4d. But Eigen is quite limited in
> the operations it supports. Just +, -, *, /. No comparisons, sqrt, sin,
> cos, etc.
>
> Which my prototype supports (through sleef for sin, cos, etc).
>
>
>
> Adding support for functions that take Eigen types, like sqrt(Vector4d)
> should be possible, but comparison operators require to be able to modify
> the class definition.
>
>
>
> Another pain point I found with Eigen, is that it refuses to do things like
>
> a * b on vectors because of potential ambiguity of the operator in the
> context of linear algebra (matrix multiplication, cross product,
> member-to-member multiplication ?). But in a PROJ world where we'd port
> from double to multiple-double, we just want member-to-member
> multipication, and with Eigen you have to do it explictly with
> a.cwiseProduct(b). Would require more changes and would clutter the
> readability of the code.
>
>
>
> > A major advantage of this approach is that PROJ doesn't need to get into
>
> > the weeds with SIMD instructions. So when a new instruction set comes
>
> > along we can (I hope) rely on the maintains of Eigen to do the hard
>
> > work. (I see that there's already some interoperability with Eigen and
>
> > CUDA.)
>
>
>
> Admitedly I've only prototyped SSE and AVX. But supporting other archs
> would only require to add a specialization in the generic template stuff
> (not a big deal. It is of the order of 10 intrinsincs per arch), not
> projection code. And for non-supported archs, the templated operations
> would just expand to a 1-coordinate at a time implementation, like the
> current serial code. But I guess if Intel is covered, we have already > 90%
> use cases that matter (nobody ever paid me to optimize something for
> non-Intel archs).
>
>
>
> One potential downside (in the context of PROJ licencing) of Eigen is its
> license. It is MPL 2, weak copyleft, which would require binary
> distributions of PROJ to provide a way of accessing Eigen source code. Not
> a huge deal, but this would put additional requirements for proprietary
> shops using PROJ.
>
>
>
> > If this approach is followed, I would also recommend that the basic
>
> > floating point type, double, be either templated or typedef'ed.
>
>
>
> Yep, exactly my idea of template<typename T, int N> struct VF
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/1f30f2b8/attachment.html>

From andrew.bell.ia at gmail.com  Fri Apr 17 13:00:40 2020
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Fri, 17 Apr 2020 16:00:40 -0400
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <1596053.f8YZIA0jDO@even-i700>
References: <9034322.C4ThZASbUb@even-i700>
 <c8fc77ff-2b92-ce45-68c0-f01d9ad96f0d@karney.com>
 <1596053.f8YZIA0jDO@even-i700>
Message-ID: <CACJ51z0PHWP-_WENeXW4chqDdDTZa-PFK-5FaRRuv=sjNsR7jg@mail.gmail.com>

On Fri, Apr 17, 2020 at 3:36 PM Even Rouault <even.rouault at spatialys.com>
wrote:

> On vendredi 17 avril 2020 13:29:17 CEST Charles Karney wrote:
>
> > I wonder whether it's possible to get the benefits of vectorization
>
> > without massive of changes to the code.
>
>
>
> That's exactly what I had in mind.
>
>
>
> > Perhaps the basic projection
>
> > functions could be templated to allow Eigen arrays of PJ_LP's to be
>
> > passed. Eigen already has overloads for componentwise arithmetic
>
> > operations and handles SIMD vectorization automatically.
>
>
>
> I didn't know Eigen, but from a quick look & try, it seems I've done
> something similar.
>
> At least for types like Vector2d, Vector4d. But Eigen is quite limited in
> the operations it supports. Just +, -, *, /. No comparisons, sqrt, sin,
> cos, etc.
>
> Which my prototype supports (through sleef for sin, cos, etc).
>

https://eigen.tuxfamily.org/dox/group__CoeffwiseMathFunctions.html

-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/b6bf916e/attachment.html>

From charles at karney.com  Fri Apr 17 13:49:23 2020
From: charles at karney.com (Charles Karney)
Date: Fri, 17 Apr 2020 16:49:23 -0400
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <1596053.f8YZIA0jDO@even-i700>
References: <9034322.C4ThZASbUb@even-i700>
 <c8fc77ff-2b92-ce45-68c0-f01d9ad96f0d@karney.com>
 <1596053.f8YZIA0jDO@even-i700>
Message-ID: <c7775b08-7f2c-dd47-705c-eb6ef008abfc@karney.com>

Eigen is more capable than you imply (and this is the point of the
link Andrew sent).  An Eigen "matrix" is for linear algebra.  But
an Eigen "array" is for element-wise operations on arrays of numbers.
and "scalar * array" and "sin(array)" do the "right things".  I'll
have to check with comparisons.  I assume the ">" operator will
return an array of bools and then you'll have to arrange that different
portions of your array are handled differently (like MATLAB/Octave?
see also the old Cray vector merge intrinsics).

I'm not sure that Eigen will be the right approach.  But I think it's
close.  (And probably my assertion that the code can remain essentially
the same, except for the declarations, is a pipe dream.)

By the way, Eigen is an awesome package.  It implements everything with
header code and so the end result is often very efficient.  The downside
is that because of all the flexibility that Eigen provides with how
arrays are laid out and allocated, you can sometimes end up in template
hell.

On 4/17/20 3:36 PM, Even Rouault wrote:
> On vendredi 17 avril 2020 13:29:17 CEST Charles Karney wrote:
> 
>  > I wonder whether it's possible to get the benefits of vectorization
> 
>  > without massive of changes to the code.
> 
> That's exactly what I had in mind.
> 
>  > Perhaps the basic projection
> 
>  > functions could be templated to allow Eigen arrays of PJ_LP's to be
> 
>  > passed. Eigen already has overloads for componentwise arithmetic
> 
>  > operations and handles SIMD vectorization automatically.
> 
> I didn't know Eigen, but from a quick look & try, it seems I've done 
> something similar.
> 
> At least for types like Vector2d, Vector4d. But Eigen is quite limited 
> in the operations it supports. Just +, -, *, /. No comparisons, sqrt, 
> sin, cos, etc.
> 
> Which my prototype supports (through sleef for sin, cos, etc).
> 
> Adding support for functions that take Eigen types, like sqrt(Vector4d) 
> should be possible, but comparison operators require to be able to 
> modify the class definition.
> 
> Another pain point I found with Eigen, is that it refuses to do things like
> 
> a * b on vectors because of potential ambiguity of the operator in the 
> context of linear algebra (matrix multiplication, cross product, 
> member-to-member multiplication ?). But in a PROJ world where we'd port 
> from double to multiple-double, we just want member-to-member 
> multipication, and with Eigen you have to do it explictly with 
> a.cwiseProduct(b). Would require more changes and would clutter the 
> readability of the code.
> 
>  > A major advantage of this approach is that PROJ doesn't need to get into
> 
>  > the weeds with SIMD instructions. So when a new instruction set comes
> 
>  > along we can (I hope) rely on the maintains of Eigen to do the hard
> 
>  > work. (I see that there's already some interoperability with Eigen and
> 
>  > CUDA.)
> 
> Admitedly I've only prototyped SSE and AVX. But supporting other archs 
> would only require to add a specialization in the generic template stuff 
> (not a big deal. It is of the order of 10 intrinsincs per arch), not 
> projection code. And for non-supported archs, the templated operations 
> would just expand to a 1-coordinate at a time implementation, like the 
> current serial code. But I guess if Intel is covered, we have already > 
> 90% use cases that matter (nobody ever paid me to optimize something for 
> non-Intel archs).
> 
> One potential downside (in the context of PROJ licencing) of Eigen is 
> its license. It is MPL 2, weak copyleft, which would require binary 
> distributions of PROJ to provide a way of accessing Eigen source code. 
> Not a huge deal, but this would put additional requirements for 
> proprietary shops using PROJ.
> 
>  > If this approach is followed, I would also recommend that the basic
> 
>  > floating point type, double, be either templated or typedef'ed.
> 
> Yep, exactly my idea of template<typename T, int N> struct VF
> 
> -- 
> 
> Spatialys - Geospatial professional services
> 
> http://www.spatialys.com
> 

From andrew.bell.ia at gmail.com  Fri Apr 17 13:58:30 2020
From: andrew.bell.ia at gmail.com (Andrew Bell)
Date: Fri, 17 Apr 2020 16:58:30 -0400
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <c7775b08-7f2c-dd47-705c-eb6ef008abfc@karney.com>
References: <9034322.C4ThZASbUb@even-i700>
 <c8fc77ff-2b92-ce45-68c0-f01d9ad96f0d@karney.com>
 <1596053.f8YZIA0jDO@even-i700>
 <c7775b08-7f2c-dd47-705c-eb6ef008abfc@karney.com>
Message-ID: <CACJ51z2fy0T9B1aZwrG=JrRctEpPUMwiL+_m6Sv9WrctkazGgQ@mail.gmail.com>

I'll add that Eigen, or something like that, has the advantages that 1) no
special expertise is needed to maintain the code and 2) as CPUs change, the
optimization comes without a code change on the part of the user -- someone
who's a relative expert in optimizing numeric computations is doing the
work.

On Fri, Apr 17, 2020 at 4:49 PM Charles Karney <charles at karney.com> wrote:

> Eigen is more capable than you imply (and this is the point of the
> link Andrew sent).  An Eigen "matrix" is for linear algebra.  But
> an Eigen "array" is for element-wise operations on arrays of numbers.
> and "scalar * array" and "sin(array)" do the "right things".  I'll
> have to check with comparisons.  I assume the ">" operator will
> return an array of bools and then you'll have to arrange that different
> portions of your array are handled differently (like MATLAB/Octave?
> see also the old Cray vector merge intrinsics).
>
> I'm not sure that Eigen will be the right approach.  But I think it's
> close.  (And probably my assertion that the code can remain essentially
> the same, except for the declarations, is a pipe dream.)
>
> By the way, Eigen is an awesome package.  It implements everything with
> header code and so the end result is often very efficient.  The downside
> is that because of all the flexibility that Eigen provides with how
> arrays are laid out and allocated, you can sometimes end up in template
> hell.
>
> On 4/17/20 3:36 PM, Even Rouault wrote:
> > On vendredi 17 avril 2020 13:29:17 CEST Charles Karney wrote:
> >
> >  > I wonder whether it's possible to get the benefits of vectorization
> >
> >  > without massive of changes to the code.
> >
> > That's exactly what I had in mind.
> >
> >  > Perhaps the basic projection
> >
> >  > functions could be templated to allow Eigen arrays of PJ_LP's to be
> >
> >  > passed. Eigen already has overloads for componentwise arithmetic
> >
> >  > operations and handles SIMD vectorization automatically.
> >
> > I didn't know Eigen, but from a quick look & try, it seems I've done
> > something similar.
> >
> > At least for types like Vector2d, Vector4d. But Eigen is quite limited
> > in the operations it supports. Just +, -, *, /. No comparisons, sqrt,
> > sin, cos, etc.
> >
> > Which my prototype supports (through sleef for sin, cos, etc).
> >
> > Adding support for functions that take Eigen types, like sqrt(Vector4d)
> > should be possible, but comparison operators require to be able to
> > modify the class definition.
> >
> > Another pain point I found with Eigen, is that it refuses to do things
> like
> >
> > a * b on vectors because of potential ambiguity of the operator in the
> > context of linear algebra (matrix multiplication, cross product,
> > member-to-member multiplication ?). But in a PROJ world where we'd port
> > from double to multiple-double, we just want member-to-member
> > multipication, and with Eigen you have to do it explictly with
> > a.cwiseProduct(b). Would require more changes and would clutter the
> > readability of the code.
> >
> >  > A major advantage of this approach is that PROJ doesn't need to get
> into
> >
> >  > the weeds with SIMD instructions. So when a new instruction set comes
> >
> >  > along we can (I hope) rely on the maintains of Eigen to do the hard
> >
> >  > work. (I see that there's already some interoperability with Eigen and
> >
> >  > CUDA.)
> >
> > Admitedly I've only prototyped SSE and AVX. But supporting other archs
> > would only require to add a specialization in the generic template stuff
> > (not a big deal. It is of the order of 10 intrinsincs per arch), not
> > projection code. And for non-supported archs, the templated operations
> > would just expand to a 1-coordinate at a time implementation, like the
> > current serial code. But I guess if Intel is covered, we have already >
> > 90% use cases that matter (nobody ever paid me to optimize something for
> > non-Intel archs).
> >
> > One potential downside (in the context of PROJ licencing) of Eigen is
> > its license. It is MPL 2, weak copyleft, which would require binary
> > distributions of PROJ to provide a way of accessing Eigen source code.
> > Not a huge deal, but this would put additional requirements for
> > proprietary shops using PROJ.
> >
> >  > If this approach is followed, I would also recommend that the basic
> >
> >  > floating point type, double, be either templated or typedef'ed.
> >
> > Yep, exactly my idea of template<typename T, int N> struct VF
> >
> > --
> >
> > Spatialys - Geospatial professional services
> >
> > http://www.spatialys.com
> >
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>


-- 
Andrew Bell
andrew.bell.ia at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/3fb1ea79/attachment-0001.html>

From even.rouault at spatialys.com  Fri Apr 17 14:03:31 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 17 Apr 2020 23:03:31 +0200
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <CACJ51z0PHWP-_WENeXW4chqDdDTZa-PFK-5FaRRuv=sjNsR7jg@mail.gmail.com>
References: <9034322.C4ThZASbUb@even-i700> <1596053.f8YZIA0jDO@even-i700>
 <CACJ51z0PHWP-_WENeXW4chqDdDTZa-PFK-5FaRRuv=sjNsR7jg@mail.gmail.com>
Message-ID: <2398028.5DqUXnAicy@even-i700>

> https://eigen.tuxfamily.org/dox/group__CoeffwiseMathFunctions.html

Oh ok, the Array type, not the Vector type. That's a bit better.

But playing with that, I can see for example that vectorized sin() is only 
implemented for SSE2/AVX using the code from http://gruntthepeon.free.fr/
ssemath/ for single precision, not double that we need for PROJ. So by default 
Eigen with double type fallbacks to serialized evaluation of sin() for each 
member of the array.

We could probably provide an implementation using Sleef, but from what I see 
that would require to modify Eigen headers themselves.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200417/7ba8e086/attachment.html>

From even.rouault at spatialys.com  Fri Apr 17 16:36:40 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 18 Apr 2020 01:36:40 +0200
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <c7775b08-7f2c-dd47-705c-eb6ef008abfc@karney.com>
References: <9034322.C4ThZASbUb@even-i700> <1596053.f8YZIA0jDO@even-i700>
 <c7775b08-7f2c-dd47-705c-eb6ef008abfc@karney.com>
Message-ID: <5294681.GANIrHZG78@even-i700>

> I assume the ">" operator will
> return an array of bools and then you'll have to arrange that different
> portions of your array are handled differently (like MATLAB/Octave?
> see also the old Cray vector merge intrinsics).

In what I prototyped, you'd do something like

    const auto mask = (fabs (Ce) <= 2.623395162778);
    const auto X = Q->Qn * Ce;
    const auto Y = Q->Qn * Cn + Q->Zb;
    return { ternary(mask, X, HUGE_VAL),
             ternary(mask, Y, HUGE_VAL) };

With SSE/AVX "mask" will be just a SIMD register itself with bits set or unset depending on 
the rest of the comparison for each member of the vector, and ternary(mask, then, else) will 
expand to
or(and(mask, then), andnot(mask, else)). (In an ideal world, we would be able to overload the 
? : operator, but that's not possible :-))
In cases where you really need a real branch, you can get an integer and then decide to go to 
a slower code path to deal with a non nominal situation. But in my idea, only a small portion 
of existing PROJ operations would be convered to a vector-enabled code: the ones that are 
particularly costly and have few branches to deal with the nominal input.

> (And probably my assertion that the code can remain essentially
> the same, except for the declarations, is a pipe dream.)

Not at all. My SIMD exact_e_fwd() is exactly the same as current one, with just "double" 
replaced by the vector type, and the final part with the if( fabs (Ce) <= 2.623395162778) 
branch replaced by the above snippet.

> By the way, Eigen is an awesome package.  It implements everything with
> header code and so the end result is often very efficient.  The downside
> is that because of all the flexibility that Eigen provides with how
> arrays are laid out and allocated, you can sometimes end up in template
> hell.

To be honest, I love my own header approach because I know how it works and can customize 
it quite easily, and it was fun to do. But its scope (base types & supported architectures) is 
more reduced than other mentioned alternatives.

At the end of the day, everybody ends up more or less the same API, a templated type 
<base_type, number_of_elements>, so switching between implementations (with similar 
capabilities) could be done relatively easily. In a PROJ context, the availability and accuracy of 
transcendent functions is a key element, and I'm not aware of better alternatives than Sleef 
for that.
The fact that it was considered for clang and also in the paper Andrew quoted for a LLVM-
based  (proprietary) Arm Compiler for HPC makes it IMHO a serious candidate.

I've also just given a quick try at https://github.com/xtensor-stack/xsimd suggested by Joris 
Van den Bossche, which is also another header based approach (the only one that can work...)

One annoying limitation of it is that it refuses to instanciate for example a vector of 4-double 
on SSE2-only because it doesn't map to a single SIMD register, whereas Eigen or my approach 
would use 2 SSE registers for that, which is sometimes still valuable to make use of the fact 
that the CPU can sometimes execute 2 additions in parallel if they use separated registers. I 
could actually measure that on my prototype (even when going to a 8-double "vector" on 
SSE, which maps to 4 SSE registers), so this isn't just theoretical.

I've not seen an explicit statement about the accuracy of transcendent functions in xsimd. 
When randomly trying sin(150), it returned a small difference compared to libc sin() or Sleef, 
but that's probably not in the range of values that PROJ would trigger. When trying between 
[-PI,PI], couldn't see a difference from a quick probing.

One advantage with xsimd is that the transcendent functions are implemented in a header-
only fashion too, whereas currently Sleef requires linking against a lib, but inlining of the 
code of the transcendent functions isn't really needed for performance, as the overhead of 
the call is quite neglectable compared to their cost.

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200418/64d89c88/attachment.html>

From kreve at sdfe.dk  Sat Apr 18 02:51:46 2020
From: kreve at sdfe.dk (Kristian Evers)
Date: Sat, 18 Apr 2020 09:51:46 +0000
Subject: [PROJ] Student contribution
In-Reply-To: <PR3P191MB0987AEB12B01C2DDA9D69C24CAD90@PR3P191MB0987.EURP191.PROD.OUTLOOK.COM>
References: <PR3P191MB0987AEB12B01C2DDA9D69C24CAD90@PR3P191MB0987.EURP191.PROD.OUTLOOK.COM>
Message-ID: <94E0B50C-B27C-4AFD-AF34-52CFD8C21EFD@sdfe.dk>

HI Elie-Alban,

It‚Äôs very cool that you want to contribute to PROJ! I think it is a great way to spend your internship but I am afraid that it may be difficult to find a dedicated supervisor for you. Personally I would have to do such work in my spare time and I can‚Äôt justify doing that without proper compensation. I suspect that would be the same for most other PROJ developers.

Why don‚Äôt you tell us some more about how internships work at your school (what requirements are there, etc). Do you have a particular area of focus that you want to work on? If your school allow it and you are willing to work mostly self-guided you may be able to get by with a bit of input from regular PROJ developers via the mailing list. Generally we like to help new contributors get started but you shouldn‚Äôt expect to get supervision like you would from one of your teachers.

/Kristian

On 17 Apr 2020, at 14:40, Elie-Alban Lescout <Elie-Alban.Lescout at ensg.eu<mailto:Elie-Alban.Lescout at ensg.eu>> wrote:

Hi everyone!

I am a Geomatics Engineering student from the french National School for Geographical Sciences (ENSG<http://www.ensg.eu/?lang=en>) where we use PROJ a lot. It is particularly used in Geodesy class but also indirectly in many other fields (since PROJ is used as a building block in many softwares). As such I find that we, students, owe a lot to the community that develops and maintains this software and I would like to thank you all for what you do!
During our second year we have to complete a three-month internship and I thought I could take this opportunity to contribute to the project full-time or at least give a help somehow. Do you think there could be a way to have an institution (university, research lab or company) that could supervise me to enable this ?

Thank you in advance for your answers,
Best Regards,

Elie-Alban Lescout
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200418/84823c1f/attachment-0001.html>

From johan.mabille at gmail.com  Sun Apr 19 14:47:56 2020
From: johan.mabille at gmail.com (johan mabille)
Date: Sun, 19 Apr 2020 23:47:56 +0200
Subject: [PROJ]  Vector/SIMD acceleration
Message-ID: <CAB2pg2Ssud3PJm-wr=s-PJQzzCORWBPqLB5opyRz1OTUuzFPzQ@mail.gmail.com>

Hi all,

Joris Van Den Bossche drew my attention on this thread as I co-authored
xsimd. I am not here to advertise my own library, but rather to give a bit
of context about xsimd.

When we started xsimd, we were aware of Eigen and its usage of SIMD
instructions. Our concern was that it was deeply buried into Eigen, while
we wanted to have a library dedicated to SIMD acceleration. Besides, at
this time, the intrinsics were wrapped into free function instead of
operators, making it harder to write generic code that would work with and
without intrinsics available. This would require writing the code twice.

Another good candidate was boost.simd. By the way, most of the advanced
mathematical functions come from there. The issue was its dependency on
boost, while we wanted a C++14 lightweight library.

Regarding the limitation of instantiating a vector that doesn't map to a
single SIMD register, this is basically due to the nature of xsimd: it is
supposed to simply wrap SIMD registers and intrinsics. For more advanced
features, like instantiating a vector with more elements than in a single
SIMD register, as it can be done in Eigen for instance, we provide xtensor
<https://github.com/xtensor-stack/xtensor>. Therefore, xsimd is supposed to
be at the register level, while xtensor is at the container level. However,
we see more an more interest in having the possibility to instantiate
vectors that map to more than one register withouth requiring to pull
another complex library with totally unrelated features. So we are
considering implementing this feature as well in xsimd.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200419/332fb7bf/attachment.html>

From even.rouault at spatialys.com  Mon Apr 20 01:41:05 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 20 Apr 2020 10:41:05 +0200
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <CAB2pg2Ssud3PJm-wr=s-PJQzzCORWBPqLB5opyRz1OTUuzFPzQ@mail.gmail.com>
References: <CAB2pg2Ssud3PJm-wr=s-PJQzzCORWBPqLB5opyRz1OTUuzFPzQ@mail.gmail.com>
Message-ID: <10802575.uMVlh8yUh8@even-i700>

Johan,

> Joris Van Den Bossche drew my attention on this thread as I co-authored
> xsimd. I am not here to advertise my own library, but rather to give a bit
> of context about xsimd.

Advertizing open source software is always fine :-) Thanks for all this information.

> By the way, most of the advanced mathematical functions come from there.

Do you know if there have been assessments of the accuracy of those functions, in terms of 
input range, ULP ? 

> However,
> we see more an more interest in having the possibility to instantiate
> vectors that map to more than one register withouth requiring to pull
> another complex library with totally unrelated features. So we are
> considering implementing this feature as well in xsimd.

I think that could be useful indeed. Perhaps through a dedicated type, so
that the user really knows what they do (and potentially have to check impact on register use 
by looking at assembly)

For the use case I've in mind for PROJ, a potential point of caution for, let's say a 
MY_VECTOR_TYPE<double, 4>, would be to make sure it is possible to have the same code 
compiled once with SSE2 (in which case this would be 2 SSE registers) and once with AVX 
(would be a AVX register) within the same library, when one wants to generate generic 
binaries with runtime selection of the implementation. If the type has exactly the same name 
in the -msse and -mavx enabled objects, that could result in One-Definition-Rule violation, 
and, beyond that theoretical concern, in real symbol clashes if some big functions aren't 
inlined. I can imagine that could be solved by allowing some way to override / add something 
to the namespace of the header that would define such type. Or maybe something smarter :-)

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200420/7a367900/attachment.html>

From johan.mabille at gmail.com  Wed Apr 22 00:59:24 2020
From: johan.mabille at gmail.com (johan mabille)
Date: Wed, 22 Apr 2020 09:59:24 +0200
Subject: [PROJ] Vector/SIMD acceleration
In-Reply-To: <10802575.uMVlh8yUh8@even-i700>
References: <CAB2pg2Ssud3PJm-wr=s-PJQzzCORWBPqLB5opyRz1OTUuzFPzQ@mail.gmail.com>
 <10802575.uMVlh8yUh8@even-i700>
Message-ID: <CAB2pg2Q=67N95SDz22jpDdv3-=GrZBPbNwcnWN80=LLKCtYLBQ@mail.gmail.com>

Even,
Thanks for your welcoming!

> Do you know if there have been assessments of the accuracy of those
functions, in terms of input range, ULP ?

I know there were measures of accuracy for large input range for almost all
the functions, unfortunately I cannot retrieve them. Maybe they are
available in this [article](
https://www.researchgate.net/publication/261959890_BoostSIMD_generic_programming_for_portable_SIMDization).
I remember reading them on a website, so probably in the documentation of
boost.SIMD. Unfortunately, the repo has been reset and the documentation is
not available anymore.

The drop-in replacement can be found [here](
https://github.com/agenium-scale/nsimd). Although I could not find the data
you're looking for, I think you can open an issue to ask them.

> For the use case I've in mind for PROJ, a potential point of caution for,
let's say a MY_VECTOR_TYPE<double, 4>, would be to make sure it is possible
to have > the same code compiled once with SSE2 (in which case this would
be 2 SSE registers) and once with AVX (would be a AVX register) within the
same library, when > one wants to generate generic binaries with runtime
selection of the implementation

Runtime selection of the right implementation is also something we had in
mind for a long time. A solution would be to add the target instruction set
as an additional parameter of the batch (the xsimd equivalent of the vector
you mentioned). This way it becomes possible to instantiate batches of the
same size for different instructions sets and have them in a same library.
Selection can then be done at build time (with a facade template class that
dispatches to the right implementation), or at runtime when loading the
library (but I am not sure how to implement this yet).


On Mon, Apr 20, 2020 at 10:41 AM Even Rouault <even.rouault at spatialys.com>
wrote:

> Johan,
>
>
>
> > Joris Van Den Bossche drew my attention on this thread as I co-authored
>
> > xsimd. I am not here to advertise my own library, but rather to give a
> bit
>
> > of context about xsimd.
>
>
>
> Advertizing open source software is always fine :-) Thanks for all this
> information.
>
>
>
> > By the way, most of the advanced mathematical functions come from there.
>
>
>
> Do you know if there have been assessments of the accuracy of those
> functions, in terms of input range, ULP ?
>
>
>
> > However,
>
> > we see more an more interest in having the possibility to instantiate
>
> > vectors that map to more than one register withouth requiring to pull
>
> > another complex library with totally unrelated features. So we are
>
> > considering implementing this feature as well in xsimd.
>
>
>
> I think that could be useful indeed. Perhaps through a dedicated type, so
>
> that the user really knows what they do (and potentially have to check
> impact on register use by looking at assembly)
>
>
>
> For the use case I've in mind for PROJ, a potential point of caution for,
> let's say a MY_VECTOR_TYPE<double, 4>, would be to make sure it is possible
> to have the same code compiled once with SSE2 (in which case this would be
> 2 SSE registers) and once with AVX (would be a AVX register) within the
> same library, when one wants to generate generic binaries with runtime
> selection of the implementation. If the type has exactly the same name in
> the -msse and -mavx enabled objects, that could result in
> One-Definition-Rule violation, and, beyond that theoretical concern, in
> real symbol clashes if some big functions aren't inlined. I can imagine
> that could be solved by allowing some way to override / add something to
> the namespace of the header that would define such type. Or maybe something
> smarter :-)
>
>
>
> Even
>
>
>
> --
>
> Spatialys - Geospatial professional services
>
> http://www.spatialys.com
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200422/57b9e0a4/attachment.html>

From Elie-Alban.Lescout at ensg.eu  Wed Apr 22 02:09:38 2020
From: Elie-Alban.Lescout at ensg.eu (Elie-Alban Lescout)
Date: Wed, 22 Apr 2020 09:09:38 +0000
Subject: [PROJ] Student contribution
In-Reply-To: <94E0B50C-B27C-4AFD-AF34-52CFD8C21EFD@sdfe.dk>
References: <PR3P191MB0987AEB12B01C2DDA9D69C24CAD90@PR3P191MB0987.EURP191.PROD.OUTLOOK.COM>,
 <94E0B50C-B27C-4AFD-AF34-52CFD8C21EFD@sdfe.dk>
Message-ID: <PR3P191MB09873D007177C1B07B5875C3CAD20@PR3P191MB0987.EURP191.PROD.OUTLOOK.COM>

Hi Kristian,

Thank you very much for your answer!
The supervisor isn't meant to supervise me as a teacher would, but rather direct me in order to go in the right direction to achieve the internship's goals and give advices along the way : I am supposed to have a certain level of autonomy.

The main stakes with my school are that the internship has to be hosted by an organisation (company, university, etc...) and that it has to be linked with Geomatics. Moreover, an internship agreement has to be signed between the school, the organisation and the student.
I would be happy to work on aspects of PROJ related to projection questions or CRS transformations (particularly ITRF since some of my teachers are responsible for it). But I suspect you also have specific problematics surrounding PROJ that I'm not aware of and that could suit me as well.

I also got to discuss with Even Rouault about it some days ago and he found it difficult to arrange... Maybe you can find a way!

Best regards,
Elie-Alban



________________________________
De : Kristian Evers <kreve at sdfe.dk>
Envoy√© : samedi 18 avril 2020 11:51
√Ä : Elie-Alban Lescout <Elie-Alban.Lescout at ensg.eu>
Cc : proj at lists.osgeo.org <proj at lists.osgeo.org>
Objet : Re: [PROJ] Student contribution

HI Elie-Alban,

It‚Äôs very cool that you want to contribute to PROJ! I think it is a great way to spend your internship but I am afraid that it may be difficult to find a dedicated supervisor for you. Personally I would have to do such work in my spare time and I can‚Äôt justify doing that without proper compensation. I suspect that would be the same for most other PROJ developers.

Why don‚Äôt you tell us some more about how internships work at your school (what requirements are there, etc). Do you have a particular area of focus that you want to work on? If your school allow it and you are willing to work mostly self-guided you may be able to get by with a bit of input from regular PROJ developers via the mailing list. Generally we like to help new contributors get started but you shouldn‚Äôt expect to get supervision like you would from one of your teachers.

/Kristian

On 17 Apr 2020, at 14:40, Elie-Alban Lescout <Elie-Alban.Lescout at ensg.eu<mailto:Elie-Alban.Lescout at ensg.eu>> wrote:

Hi everyone!

I am a Geomatics Engineering student from the french National School for Geographical Sciences (ENSG<http://www.ensg.eu/?lang=en>) where we use PROJ a lot. It is particularly used in Geodesy class but also indirectly in many other fields (since PROJ is used as a building block in many softwares). As such I find that we, students, owe a lot to the community that develops and maintains this software and I would like to thank you all for what you do!
During our second year we have to complete a three-month internship and I thought I could take this opportunity to contribute to the project full-time or at least give a help somehow. Do you think there could be a way to have an institution (university, research lab or company) that could supervise me to enable this ?

Thank you in advance for your answers,
Best Regards,

Elie-Alban Lescout
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200422/56b4da00/attachment-0001.html>

From kreve at sdfe.dk  Wed Apr 22 02:31:59 2020
From: kreve at sdfe.dk (Kristian Evers)
Date: Wed, 22 Apr 2020 09:31:59 +0000
Subject: [PROJ] Student contribution
In-Reply-To: <PR3P191MB09873D007177C1B07B5875C3CAD20@PR3P191MB0987.EURP191.PROD.OUTLOOK.COM>
References: <PR3P191MB0987AEB12B01C2DDA9D69C24CAD90@PR3P191MB0987.EURP191.PROD.OUTLOOK.COM>
 <94E0B50C-B27C-4AFD-AF34-52CFD8C21EFD@sdfe.dk>
 <PR3P191MB09873D007177C1B07B5875C3CAD20@PR3P191MB0987.EURP191.PROD.OUTLOOK.COM>
Message-ID: <CC03FA94-5E08-4C3B-82B0-469E365661CD@sdfe.dk>

Elli-Alban,


The supervisor isn't meant to supervise me as a teacher would, but rather direct me in order to go in the right direction to achieve the internship's goals and give advices along the way : I am supposed to have a certain level of autonomy.

The main stakes with my school are that the internship has to be hosted by an organisation (company, university, etc...) and that it has to be linked with Geomatics. Moreover, an internship agreement has to be signed between the school, the organisation and the student.

OSGeo is an organization linked with Geomatics so that could probably work somehow.

I would be happy to work on aspects of PROJ related to projection questions or CRS transformations (particularly ITRF since some of my teachers are responsible for it). But I suspect you also have specific problematics surrounding PROJ that I'm not aware of and that could suit me as well.


I think you need to come up with a more clear idea of what you want to work on. There‚Äôs not much work to do on ITRF transformations - the parameters are already defined and registered with the EPSG and the Helmert transformation code is more or less feature complete. On the projection side of things there are probably more options for you. Try taking a look at the issue tracker to get an idea of some of the currently open tickets: https://github.com/OSGeo/PROJ/issues?q=is%3Aopen+is%3Aissue<https://github.com/OSGeo/PROJ/issues?q=is:open+is:issue> You may find something that sparks your interest.

We can probably also come up with a few ideas for more extensive work that would be nice to get done but that is difficult without knowing anything about your skillset. If you are a super experienced C/C++ developer I can think of several advanced topics to dig into but if you have barely written code in C or C++ that is not going to work. An option could also be to improve the documentation. There are plenty to do in that regard. However, it is unclear to me if this is a coding assignment or if it can be anything related to geomatics.

I also got to discuss with Even Rouault about it some days ago and he found it difficult to arrange... Maybe you can find a way!


The biggest issue is finding the time to mentor you. I may also be a bit of a hurdle to sort out the formalities but that can be worked out, I am sure.

When is this internship supposed to be carried out?

/Kristian

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200422/f041c2a0/attachment.html>

From Elie-Alban.Lescout at ensg.eu  Wed Apr 22 06:40:29 2020
From: Elie-Alban.Lescout at ensg.eu (Elie-Alban Lescout)
Date: Wed, 22 Apr 2020 13:40:29 +0000
Subject: [PROJ] Student contribution
In-Reply-To: <PR3P191MB09875A6BAC3E681BE8D7D9F8CAD20@PR3P191MB0987.EURP191.PROD.OUTLOOK.COM>
References: <PR3P191MB0987AEB12B01C2DDA9D69C24CAD90@PR3P191MB0987.EURP191.PROD.OUTLOOK.COM>
 <94E0B50C-B27C-4AFD-AF34-52CFD8C21EFD@sdfe.dk>
 <PR3P191MB09873D007177C1B07B5875C3CAD20@PR3P191MB0987.EURP191.PROD.OUTLOOK.COM>,
 <CC03FA94-5E08-4C3B-82B0-469E365661CD@sdfe.dk>,
 <PR3P191MB09871D08536B8271AAEA19ADCAD20@PR3P191MB0987.EURP191.PROD.OUTLOOK.COM>,
 <PR3P191MB09875A6BAC3E681BE8D7D9F8CAD20@PR3P191MB0987.EURP191.PROD.OUTLOOK.COM>
Message-ID: <PR3P191MB09870F3C88BF8716ED3472DECAD20@PR3P191MB0987.EURP191.PROD.OUTLOOK.COM>


>OSGeo is an organization linked with Geomatics so that could probably work somehow.

Very happy to hear that since I've been orbiting around their website for the past few days :-)


>I think you need to come up with a more clear idea of what you want to work on. There‚Äôs not much work to do on ITRF transformations - the parameters are already defined and registered with the EPSG and the Helmert transformation code is more or less feature complete. On the projection side of things there are probably more options for you. Try taking a look at the issue tracker to get an idea of some of the currently open tickets: https://github.com/OSGeo/PROJ/issues?q=is%3Aopen+is%3Aissue You may find something that sparks your interest.

I've been looking through the issue tracker and the feature request for the Spilhaus projection sounds interesting. I see you've already added the square conformal projections as a first step. I think I could really dig into it!
The deformation model support also caught my attention because it is related to a development project we are currently doing with three other students at ENSG : a load-induced earth deformation online computation service. It automatically fetches the latest version of models from missions such as GRACE and uses them to compute deformations du to oceanic or atmospheric load on a requested positions (through an API or a form). I can provide access to the repository if you want to have a look. For some models we are also confronted to grids (that we have to convert to spherical harmonics for our computation pipeline). They are provided in netCDF or GRIB format.
I understand these deformations are not the sames as the ones mentioned early in the request but the problematic is similar to the one you were facing : managing a succession of grids in time.
How far did you go on this ? Maybe I could give a help somehow.


>We can probably also come up with a few ideas for more extensive work that would be nice to get done but that is difficult without knowing anything about your skillset. If you are a super experienced C/C++ developer I can think of several advanced topics to dig into but if you have barely written code in C or C++ that is not going to work. An option could also be to improve the documentation. There are plenty to do in that regard. However, it is unclear to me if this is a coding assignment or if it can be
 anything related to geomatics.

You'll find my R√©sum√© attached. I gained a lot of Python and Java experience this year and last year but unfortunately I'm not a "super experienced C/C++ developer". I did code a simple game of life in C++ with Qt when I was 18 though (as a personal project) and a matrix computation library (simple operations and more advanced linear algebra ones). Also I'm willing to dive in and learn new programming skills when needed (it is one of the aspects of an internship).
It is not a coding assignment and can be anything related to geomatics. I have nothing against writing some documentation (in the contrary, it is very useful), but I wouldn't want it to be the single task of the internship.


>When is this internship supposed to be carried out?

>From  May, 18th 2020 to August, 28th 2020. The start date is flexible (up to June, 15th) and it has to last a minimum of 12 weeks.


Elie-Alban

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200422/5763db68/attachment.html>

From sgh at sgh.dk  Wed Apr 22 07:04:00 2020
From: sgh at sgh.dk (=?ISO-8859-1?Q?S=F8ren?= Holm)
Date: Wed, 22 Apr 2020 16:04:00 +0200
Subject: [PROJ] System34 height difference
Message-ID: <3043370.aeNJFYEL58@koontz>

Hi

We are using proj for transformation of some Danish coordinatesystems.

Among them are S34 and DKTM.

Usually the height is not affected much during transformations. This is 
however different for S34.


$ cct -t0  +proj=pipeline +step +init=DK:DKTM1                                                                               
10 55 0 0
  263991.7405   1097565.8295        0.0000        0.0000 0


$ cct -t0  +proj=pipeline +step +init=DK:S34J                                                                                
10 55 0 0
  234033.0592     63129.6022      -36.8103        0.0000 0


Why is there ~36m subtracted for S34? 
Why is there around 0.1mm height difference for most UTM and NTM zones?
Is it the intention that the heights should be affected during these 
transformations?

-- 
S√∏ren Holm



From ddouglas at usgs.gov  Wed Apr 22 12:08:40 2020
From: ddouglas at usgs.gov (Douglas, David C)
Date: Wed, 22 Apr 2020 19:08:40 +0000
Subject: [PROJ] [EXTERNAL] Re: package 'geosphere' -- transforming
 spherical-based geographic coordinates to WGS84
In-Reply-To: <22677736.d3dDb1hNT1@even-i700>
References: <BY5PR09MB4691FAFEC5D995A9381BC27CBBD80@BY5PR09MB4691.namprd09.prod.outlook.com>,
 <22677736.d3dDb1hNT1@even-i700>
Message-ID: <SA9PR09MB47023E7489B3E63CB74405AABBD20@SA9PR09MB4702.namprd09.prod.outlook.com>

22 April 2020

Hi Even,

First, a belated thank you for your clear explanation last week, basically informing me that: Since my "+proj=longlat +ellps=sphere +no_defs" string did not contain any datum "qualifier", PROJ didn't attempt to do any change of coordinate.

Your explanation raised a lot of discussion and debate among myself and colleagues regarding 2 map projections that we commonly use in our science.

Both projections have EPSG codes (3408 and 3411):
_____________________________________________________

3408 # NSIDC EASE-Grid North
+proj=laea +lat_0=90 +lon_0=0 +x_0=0 +y_0=0 +a=6371228 +b=6371228 +units=m +no_defs

3411 # NSIDC Sea Ice Polar Stereographic North
+proj=stere +lat_0=90 +lat_ts=70 +lon_0=-45 +k=1 +x_0=0 +y_0=0 +a=6378273 +b=6356889.449 +units=m +no_defs
_____________________________________________________

One projection (3408) is on a sphere, the other (3411) on an ellipsoid, and both EPSG definitions have "+no_defs" --- i.e., neither contains a datum "qualifier".

Question:  While Program R will transform coordinates from either of these 2 EPSG map projections to the other, is it correct to do so in the absence of "datum qualifier"?
Akin to the "+towgs84=0,0,0," parameter, is a different +toXYZ=a,b,c, required to correctly transform between these map projections?

Thank you, and please forgive my naivety.

David


________________________________
From: Even Rouault <even.rouault at spatialys.com>
Sent: Friday, April 17, 2020 11:45
To: proj at lists.osgeo.org <proj at lists.osgeo.org>
Cc: Douglas, David C <ddouglas at usgs.gov>; Fischbach, Anthony S <afischbach at usgs.gov>; r.hijmans at gmail.com <r.hijmans at gmail.com>
Subject: [EXTERNAL] Re: [PROJ] package 'geosphere' -- transforming spherical-based geographic coordinates to WGS84


Douglas,



> Can someone show me what I'm doing wrong, or misunderstanding?



Your "+proj=longlat +ellps=sphere +no_defs" string doesn't contain any datum "qualifier", so PROJ doesn't attempt to do any change of coordinate. This is a behaviour that has existed since PROJ 4.6 if I remember well, and that has been kept during PROJ 6 overhaul.

If you add +towgs84=0,0,0, you will see a change in latitude values.



$ echo "2 49" | cs2cs +proj=longlat +ellps=sphere +to +init=epsg:4326

2dE 49dN 0.000



$ echo "2 49" | src/cs2cs +proj=longlat +ellps=sphere +towgs84=0,0,0 +to +init=epsg:4326

2dE 49d11'25.117"N 0.000





The details of the transformations can also be shown with PROJ >= 6 with:



$ projinfo -s "+proj=longlat +ellps=sphere +type=crs" -t EPSG:4326 -o PROJ

Candidate operations found: 1

-------------------------------------

Operation No. 1:



unknown id, Ballpark geographic offset from unknown to WGS 84, unknown accuracy, World, has ballpark transformation



PROJ string:

+proj=axisswap +order=2,1





vs



$ projinfo -s "+proj=longlat +ellps=sphere +towgs84=0,0,0 +type=crs" -t EPSG:4326 -o PROJ

Candidate operations found: 1

-------------------------------------

Operation No. 1:



unknown id, Transformation from unknown to WGS84, unknown accuracy, unknown domain of validity



PROJ string:

+proj=pipeline +step +proj=unitconvert +xy_in=deg +xy_out=rad +step +proj=push +v_3 +step +proj=cart +ellps=sphere +step +inv +proj=cart +ellps=WGS84 +step +proj=pop +v_3 +step +proj=unitconvert +xy_in=rad +xy_out=deg +step +proj=axisswap +order=2,1







Even



--

Spatialys - Geospatial professional services

http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200422/6d1cac48/attachment.html>

From even.rouault at spatialys.com  Wed Apr 22 12:24:36 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 22 Apr 2020 21:24:36 +0200
Subject: [PROJ] [EXTERNAL] Re: package 'geosphere' -- transforming
	spherical-based geographic coordinates to WGS84
In-Reply-To: <SA9PR09MB47023E7489B3E63CB74405AABBD20@SA9PR09MB4702.namprd09.prod.outlook.com>
References: <BY5PR09MB4691FAFEC5D995A9381BC27CBBD80@BY5PR09MB4691.namprd09.prod.outlook.com>
 <22677736.d3dDb1hNT1@even-i700>
 <SA9PR09MB47023E7489B3E63CB74405AABBD20@SA9PR09MB4702.namprd09.prod.outlook.com>
Message-ID: <2380747.oDARHSTSJO@even-i700>

David,

That could be the matter of days of discussions. I'll try to make it short :-)

- the +proj= syntax you mention for EPSG definitions has been deprecated since PROJ 6, 
since it was a rather imperfect way of capturing datum expressions. With GDAL 3 & PROJ >= 
6, we encourage strongly to use directly EPSG:XXXX syntax instead of deprecated PROJ.4 
strings

- ... but for the code you mention, the datum behind  EPSG:3408 is datum EPSG:6053 "Not 
specified (based on International 1924 Authalic Sphere)" and the one for EPSG:3411 is EPSG:
6054 "Not specified (based on Hughes 1980 ellipsoid)". So even with PROJ 6, there's no hope 
to get any significant datum transformation

- EPSG:3408 has been recently deprecated by EPSG in favor of EPSG:6931, and EPSG:3411 in 
favor of EPSG:3413. Both use the WGS84 datum, and are thus not equivalent to their non-
deprecated code.

- With PROJ.4 syntax, there's no toXYZ qualifier, only towgs84. WGS84 in PROJ.4 era was 
used as the universal pivot when transforming between 2 datums (sometimes it was abused 
a bit to transform directly between a CRS A and B when A or B was sufficiently close to 
GRS80/WGS84 for the approximation to be valid). Starting with PROJ 6, one can do direct 
transformations, but with your rather unspecified datums, I've no idea what would be the 
right way of transforming them...

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200422/47d84cb0/attachment-0001.html>

From ddouglas at usgs.gov  Wed Apr 22 12:40:39 2020
From: ddouglas at usgs.gov (Douglas, David C)
Date: Wed, 22 Apr 2020 19:40:39 +0000
Subject: [PROJ] [EXTERNAL] Re: package 'geosphere' -- transforming
 spherical-based geographic coordinates to WGS84
In-Reply-To: <2380747.oDARHSTSJO@even-i700>
References: <BY5PR09MB4691FAFEC5D995A9381BC27CBBD80@BY5PR09MB4691.namprd09.prod.outlook.com>
 <22677736.d3dDb1hNT1@even-i700>
 <SA9PR09MB47023E7489B3E63CB74405AABBD20@SA9PR09MB4702.namprd09.prod.outlook.com>,
 <2380747.oDARHSTSJO@even-i700>
Message-ID: <SA9PR09MB470231F18974B9BD8F8277A5BBD20@SA9PR09MB4702.namprd09.prod.outlook.com>

Even,

Thank you for your prompt and detailed reply.  You've given us a lot to digest, but 2 things seem to be apparent: 1) use EPSG:XXXX notation to specify proj parameters, and 2) be glad we are not attempting any survey-precision applications with those 2 map projections.  In fact, the data sets we analyze (which are distributed in those projections) are Arctic-wide, coarse pixel-resolution rasters. Notwithstanding a desire to be as spatially accurate as possible, perhaps the imprecision of transforming coordinates between these 2 projections is inconsequential with respect to the broad scales across which we are quantifying spatial information.

Thanks again.
Be well.

David


________________________________
From: Even Rouault <even.rouault at spatialys.com>
Sent: Wednesday, April 22, 2020 11:24
To: Douglas, David C <ddouglas at usgs.gov>
Cc: proj at lists.osgeo.org <proj at lists.osgeo.org>; Fischbach, Anthony S <afischbach at usgs.gov>; r.hijmans at gmail.com <r.hijmans at gmail.com>; Durner, George M <gdurner at usgs.gov>
Subject: Re: [EXTERNAL] Re: [PROJ] package 'geosphere' -- transforming spherical-based geographic coordinates to WGS84


David,



That could be the matter of days of discussions. I'll try to make it short :-)



- the +proj= syntax you mention for EPSG definitions has been deprecated since PROJ 6, since it was a rather imperfect way of capturing datum expressions. With GDAL 3 & PROJ >= 6, we encourage strongly to use directly EPSG:XXXX syntax instead of deprecated PROJ.4 strings



- ... but for the code you mention, the datum behind EPSG:3408 is datum EPSG:6053 "Not specified (based on International 1924 Authalic Sphere)" and the one for EPSG:3411 is EPSG:6054 "Not specified (based on Hughes 1980 ellipsoid)". So even with PROJ 6, there's no hope to get any significant datum transformation



- EPSG:3408 has been recently deprecated by EPSG in favor of EPSG:6931, and EPSG:3411 in favor of EPSG:3413. Both use the WGS84 datum, and are thus not equivalent to their non-deprecated code.



- With PROJ.4 syntax, there's no toXYZ qualifier, only towgs84. WGS84 in PROJ.4 era was used as the universal pivot when transforming between 2 datums (sometimes it was abused a bit to transform directly between a CRS A and B when A or B was sufficiently close to GRS80/WGS84 for the approximation to be valid). Starting with PROJ 6, one can do direct transformations, but with your rather unspecified datums, I've no idea what would be the right way of transforming them...



Even



--

Spatialys - Geospatial professional services

http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200422/22ca1eda/attachment.html>

From even.rouault at spatialys.com  Wed Apr 22 14:26:53 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 22 Apr 2020 23:26:53 +0200
Subject: [PROJ] [EXTERNAL] Re: package 'geosphere' -- transforming
	spherical-based geographic coordinates to WGS84
In-Reply-To: <SN6PR09MB298904222E0C574F52F9C3F5A6D20@SN6PR09MB2989.namprd09.prod.outlook.com>
References: <BY5PR09MB4691FAFEC5D995A9381BC27CBBD80@BY5PR09MB4691.namprd09.prod.outlook.com>
 <SA9PR09MB470231F18974B9BD8F8277A5BBD20@SA9PR09MB4702.namprd09.prod.outlook.com>
 <SN6PR09MB298904222E0C574F52F9C3F5A6D20@SN6PR09MB2989.namprd09.prod.outlook.com>
Message-ID: <2966049.bnW24oQEER@even-i700>

On mercredi 22 avril 2020 21:15:56 CEST Fischbach, Anthony S wrote:
> Even,
> 
> Your indication that EPSG is favored over use of proj raises a burning
> question. Our study area is in the Chukchi Sea, which spans the
> anti-meridian and is far north.  To minimize spatial distortion, we have
> used an equal area projection centered on our study area (+proj=laea
> +lat_0=70 +lon_0=-170 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs
> +ellps=WGS84 +towgs84=0,0,0). Can you advise on the merits of using a
> custom projection specified in +proj terms, given that no EPSG projection
> is published for this region.

The issue with PROJ.4 string is that their expressivity in terms of datum specification was 
limited to:
- using +datum with a few hardcoded datum names which didn't catch up with later additions 
in the EPSG catalog,
- or an ellipsoid + towgs84
- or an elliposid + nadgrids.

Hence the recommendation to use an EPSG code when there is one, since PROJ will be able 
to apply more relevant datum transformations when there's one registered in the database, 
and not necessarily by using the WGS84 pivot as it did before PROJ 6.

If your datum is WGS84 (or for your level of accuracy can be considered equivalent to it), you 
can use a PROJ string just fine. In your above string, as you use +datum=WGS84, then the 
+ellps and +towgs84 are implied and can be safely removed.

Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200422/d0cfade1/attachment.html>

From gdt at lexort.com  Thu Apr 23 13:03:43 2020
From: gdt at lexort.com (Greg Troxel)
Date: Thu, 23 Apr 2020 16:03:43 -0400
Subject: [PROJ] coordinate order confusion
Message-ID: <rmiy2qm9dgg.fsf@s1.lexort.com>

I'm trying to actually use proj to calculate something, as part of being
sure about NAD83/WGS84 for imagery available for openstreetmap in
Massachusetts.  So while I've used proj long ago, mostly I've been
keeping up with packaging lately and am thus kind of like a new user.

I read the cs2cs man page (proj 6.3.1), and see

       -r     This options reverses the order of the expected input from
              longitude-latitude or x-y to latitude-longitude or y-x.

       -s     This options reverses the order of the output from x-y or
              longitude-latitude to y-x or latitude-longitude.

I want to use "lat lon" (with lon being roughly -71 for 71W), so I gave
-r and -s.  However, when I do that, and then use invgeod on the input
and transformed coordinates, I get displacements that seem unreasonably
large.  Without, they are ok.

On the  third time through the man page, I see that the coordinate order
depends on the CRS, and apparently both that I am using are "lat lon"

So I think the -r/-s descriptions need to be changed, because they state
outright that without them the order is "longtitude latitude".  It seems
really it is

       -r     This options reverses the order of the first two expected
              inputs from that specified by the CRS to the opposite
              order.  The third coordinate, typically height, remains
              third.
	
which is quite different, at least as I see it.



Details of what I did:

With -r -s I get an unreasonable displacement, which is a clue that I am
operating not in the US:

  $ cs2cs -d 9 -r -s EPSG:6319 +to EPSG:7665 << EOF
  42.0 -71.0 40.0
  EOF
  42.000080905	-70.999991071 39.664754187

  invgeod +ellps=GRS80 << EOF
  42 -71	42.000080905	-70.999991071
  EOF
  4d42'21.847"	-175d17'38.132"	9.017

Without -r -s, it all makes sense:

  $ cs2cs -d 9 EPSG:6319 +to EPSG:7665 << EOF
  42.0 -71.0 40.0
  EOF
  42.000008648	-71.000000518 38.760790157

  I get a displacement that checks with my a priori expectation of about a meter.

  invgeod +ellps=GRS80 << EOF
  42 -71	42.000008648	-71.000000518
  EOF
  -2d33'29.527"	177d26'30.472"	0.962

From even.rouault at spatialys.com  Thu Apr 23 13:09:43 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 23 Apr 2020 22:09:43 +0200
Subject: [PROJ] coordinate order confusion
In-Reply-To: <rmiy2qm9dgg.fsf@s1.lexort.com>
References: <rmiy2qm9dgg.fsf@s1.lexort.com>
Message-ID: <12407818.2czUItU77H@even-i700>

On jeudi 23 avril 2020 16:03:43 CEST Greg Troxel wrote:
> I'm trying to actually use proj to calculate something, as part of being
> sure about NAD83/WGS84 for imagery available for openstreetmap in
> Massachusetts.  So while I've used proj long ago, mostly I've been
> keeping up with packaging lately and am thus kind of like a new user.
> 
> I read the cs2cs man page (proj 6.3.1), and see
> 
>        -r     This options reverses the order of the expected input from
>               longitude-latitude or x-y to latitude-longitude or y-x.
> 
>        -s     This options reverses the order of the output from x-y or
>               longitude-latitude to y-x or latitude-longitude.
> 
> I want to use "lat lon" (with lon being roughly -71 for 71W), so I gave
> -r and -s.  However, when I do that, and then use invgeod on the input
> and transformed coordinates, I get displacements that seem unreasonably
> large.  Without, they are ok.
> 
> On the  third time through the man page, I see that the coordinate order
> depends on the CRS, and apparently both that I am using are "lat lon"
> 
> So I think the -r/-s descriptions need to be changed, because they state
> outright that without them the order is "longtitude latitude".  It seems
> really it is
> 
>        -r     This options reverses the order of the first two expected
>               inputs from that specified by the CRS to the opposite
>               order.  The third coordinate, typically height, remains
>               third.
> 
> which is quite different, at least as I see it.

Yes the text of man page dates pack to pre-PROJ 6 era where CRS axis order for geographic 
was always (except when +axis= was used) longitude, latitude. Your suggestion sounds good. 
Please submit a pull request with it (to the .rst file)

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200423/256ec286/attachment.html>

From kristianevers at gmail.com  Sun Apr 26 05:37:41 2020
From: kristianevers at gmail.com (Kristian Evers)
Date: Sun, 26 Apr 2020 14:37:41 +0200
Subject: [PROJ] coordinate order confusion
In-Reply-To: <12407818.2czUItU77H@even-i700>
References: <rmiy2qm9dgg.fsf@s1.lexort.com> <12407818.2czUItU77H@even-i700>
Message-ID: <0C40CC24-E085-407F-819F-FE7BF2C31873@gmail.com>

> 
>  
> Yes the text of man page dates pack to pre-PROJ 6 era where CRS axis order for geographic was always (except when +axis= was used) longitude, latitude. Your suggestion sounds good. Please submit a pull request with it (to the .rst file)
> 

I have added a PR with Gregs proposal: https://github.com/OSGeo/PROJ/pull/2196 <https://github.com/OSGeo/PROJ/pull/2196>

/Kristian
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200426/2b8fc4a1/attachment.html>

From gdt at lexort.com  Sun Apr 26 06:02:19 2020
From: gdt at lexort.com (Greg Troxel)
Date: Sun, 26 Apr 2020 09:02:19 -0400
Subject: [PROJ] coordinate order confusion
In-Reply-To: <0C40CC24-E085-407F-819F-FE7BF2C31873@gmail.com> (Kristian
 Evers's message of "Sun, 26 Apr 2020 14:37:41 +0200")
References: <rmiy2qm9dgg.fsf@s1.lexort.com> <12407818.2czUItU77H@even-i700>
 <0C40CC24-E085-407F-819F-FE7BF2C31873@gmail.com>
Message-ID: <rmimu6yxuw4.fsf@s1.lexort.com>

Kristian Evers <kristianevers at gmail.com> writes:

> I have added a PR with Gregs proposal: https://github.com/OSGeo/PROJ/pull/2196 <https://github.com/OSGeo/PROJ/pull/2196>

Thanks, and of course looks good to me - I hadn't gotten to this yet.

From kreve at sdfe.dk  Sun Apr 26 06:11:30 2020
From: kreve at sdfe.dk (Kristian Evers)
Date: Sun, 26 Apr 2020 13:11:30 +0000
Subject: [PROJ] System34 height difference
In-Reply-To: <3043370.aeNJFYEL58@koontz>
References: <3043370.aeNJFYEL58@koontz>
Message-ID: <378660FB-8006-427F-A14A-31C6306175A6@sdfe.dk>

S√∏ren,


On 22 Apr 2020, at 16:04, S√∏ren Holm <sgh at sgh.dk<mailto:sgh at sgh.dk>> wrote:

Hi

We are using proj for transformation of some Danish coordinatesystems.

Among them are S34 and DKTM.

Usually the height is not affected much during transformations. This is
however different for S34.


Yes, System34 is only a 2D coordinate reference system, so the height is generally not meant to be used.


$ cct -t0  +proj=pipeline +step +init=DK:DKTM1
10 55 0 0
 263991.7405   1097565.8295        0.0000        0.0000 0


$ cct -t0  +proj=pipeline +step +init=DK:S34J
10 55 0 0
 234033.0592     63129.6022      -36.8103        0.0000 0


Why is there ~36m subtracted for S34?

The reason is that there is an implicit datum change happening in that transformation, which internally works in three dimensions and then consequently transforms the zero height to another datum. This, however, has no physical meaning and can be regarded as a mathematical curiosity. With PROJ > 6.0.0 this can actually be avoided by using the push<https://proj.org/operations/conversions/push.html> and pop<https://proj.org/operations/conversions/pop.html> operators:

echo 10 55 | ./bin/cct -z0 -t0 +proj=pipeline +step +proj=push +v_3 +step +init=DK:S34J +step +proj=pop +v_3
  234033.0592     63129.6022        0.0000        0.0000

The DK init file was created before that was possible. This probably should be updated, although it comes with the risk that someone now relies on the current behaviour. System34 has been submitted to the EPSG but the application is still pending. Once that find it‚Äôs way to the EPSG registry this problem should disappear entirely in PROJ. The time frame is unfortunately unknown at this time.

Why is there around 0.1mm height difference for most UTM and NTM zones?

I haven‚Äôt been able to replicate that, so hard to comment on. A guess is that there is some numerical inaccuracy involved. I don‚Äôt think there‚Äôs anything to worry about, 0.1 mm is very likely less than both the accuracy of the data and the transformation.

Is it the intention that the heights should be affected during these
transformations?

For System34 it‚Äôs yes and no. Yes, because that is the way the transformation is currently made but no since it the height isn‚Äôt really part of the system. Can‚Äôt comment on the other case.

/Kristian

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200426/5fb36bb8/attachment.html>

From kristianevers at gmail.com  Sun Apr 26 06:12:37 2020
From: kristianevers at gmail.com (Kristian Evers)
Date: Sun, 26 Apr 2020 15:12:37 +0200
Subject: [PROJ] coordinate order confusion
In-Reply-To: <rmimu6yxuw4.fsf@s1.lexort.com>
References: <rmiy2qm9dgg.fsf@s1.lexort.com> <12407818.2czUItU77H@even-i700>
 <0C40CC24-E085-407F-819F-FE7BF2C31873@gmail.com>
 <rmimu6yxuw4.fsf@s1.lexort.com>
Message-ID: <45A8DC30-3D76-49A9-A11B-65FC430E6DB4@gmail.com>

You're welcome. I‚Äôve added you as co-author of the commit. Credit where credit is due, of course!

/Kristian

> On 26 Apr 2020, at 15:02, Greg Troxel <gdt at lexort.com> wrote:
> 
> Kristian Evers <kristianevers at gmail.com> writes:
> 
>> I have added a PR with Gregs proposal: https://github.com/OSGeo/PROJ/pull/2196 <https://github.com/OSGeo/PROJ/pull/2196>
> 
> Thanks, and of course looks good to me - I hadn't gotten to this yet.
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From kristianevers at gmail.com  Mon Apr 27 02:22:45 2020
From: kristianevers at gmail.com (Kristian Evers)
Date: Mon, 27 Apr 2020 11:22:45 +0200
Subject: [PROJ] PROJ 7.0.1RC1 & 6.3.2RC1
Message-ID: <E50977E3-EC8D-41B5-B7DA-2BCD4FCBA0AF@gmail.com>

All,

With scheduled releases of PROJ 7.0.1 and 6.3.2. on May 1st it is time
to put out release candidates. Both candidates includes a number of bug
fixes since the previous release. 7.0.1 includes 39 bug fixes and 16 bugs
has been fixed in 6.3.2. See the release notes below.

Archives are available here: 

http://download.osgeo.org/proj/proj-7.0.1RC1.tar.gz
http://download.osgeo.org/proj/proj-7.0.1RC1.zip
http://download.osgeo.org/proj/proj-6.3.2RC1.tar.gz
http://download.osgeo.org/proj/proj-6.3.2RC1.zip


Please test the release candidates and report back any problems you
may encounter. 

If no issues are found with the two release candidates the final releases
will be announced on Friday May 1st.

/Kristian



7.0.1 Release Notes
-------------------

 Updates
 -------

 o Database: update to EPSG v9.8.9 #2141

 Bug fixes
 ---------

 o Make tests independent of proj-datumgrid (#1995)

 o Add missing projection property tables (#1996)

 o Avoid crash when running against SQLite3 binary built with
   -DSQLITE_OMIT_AUTOINIT (#1999)

 o createOperations(): fix wrong pipeline generation with CRS that has +nadgrids=
   and +pm= (#2002)

 o Fix bad copy&replace pattern on HEALPix and rHEALPix projection names (#2007)

 o createUnitOfMeasure(): use full double resolution for the conversion
   factor (#2014)

 o Update README with info on PROJ-data (#2015)

 o utm/ups: make sure to set errno to PJD_ERR_ELLIPSOID_USE_REQUIRED if
   es==0 (#2045)

 o data/Makefile.am: remove bashism (#2048)

 o ProjectedCRS::identify(): tune it to better work with ESRI WKT
   representation of EPSG:2193 (#2059)

 o Fix build with gcc 4.8.5 (#2066)

 o Autotools/pkg-conf: Define datarootdir (#2069)

 o cs2cs: don't require +to for '{source_crs} {target_crs} filename...'
   syntax (#2081)

 o CMake: fix bug with find_package(PROJ) with macOS (#2082)

 o ESRI WKT import / identification: special case for
   NAD_1983_HARN_StatePlane_Colorado_North_FIPS_0501 with Foot_US unit (#2088)

 o ESRI WKT import / identification: special case for
   NAD_1983_HARN_StatePlane_Colorado_North_FIPS_0501 with Foot_US unit (#2089)

 o EngineeringCRS: when exporting to WKT1_GDAL, output unit and axis (#2092)

 o Use jtsk03-jtsk horizontal grid from CDN (#2098)

 o CMake: prefer to use use PROJ_SOURCE_DIR and PROJ_BINARY_DIR (#2100)

 o Fix wrong grids file name in esri.sql (#2104)

 o Fix identification of projected CRS whose name is close but not strictly
   equal to a ESRI alias (#2106)

 o Fix working of Helmert transform between the horizontal part of
   2 compoundCRS (#2111)

 o Database: fix registration of custom entries of grid_transformation_custom.sql
   for geoid grids (#2114)

 o ESRI_WKT ingestion: make sure to identify to non-deprecated EPSG entry when
   possible (#2119)

 o Make sure that importing a Projected 3D CRS from WKT:2019 keeps the base
   geographic CRS as 3D (#2125)

 o createOperations(): improve results of compoundCRS to compoundCRS case (#2131)

 o hgridshift/vgridshift: defer grid opening when grid has already
   been opened (#2132)

 o Resolve a few shadowed declaration warnings (#2142)

 o ProjectedCRS identification: deal with switched 1st/2nd std parallels for
   LCC_2SP(#2153)

 o Fix Robinson inverse projection (#2154)

 o createOperations(): do not remove ballpark transformation if there are only
   grid based operations, even if they cover the whole area of use (#2156)

 o createFromCoordinateReferenceSystemCodes(): 'optimization' to avoid using
   C++ exceptions (#2161)

 o Ingestion of WKT1_GDAL: correctly map 'Cylindrical_Equal_Area' (#2167)

 o Add limited support for non-conformant WKT1 LAS COMPD_CS[] (#2172)

 o PROJ4 string import: take into correctly non-metre unit when the string
   looks like the one for WGS 84 / Pseudo Mercator (#2177)

 o io.hpp: avoid dependency to proj_json_streaming_writer.hpp (#2184)

 o Fix support of WKT1_GDAL with netCDF rotated pole formulation (#2186)



6.3.2 Release Notes
-------------------

 Bug fixes
 ---------

 o validateParameters(): fix false-positive warning on
   Equidistant Cylindrical (#1947)

 o proj_create_crs_to_crs(): avoid potential reprojection failures when
   reprojecting area of use to source and target CRS (#1993)

 o createOperations(): fix wrong pipeline generation with CRS that has +nadgrids=
   and +pm= (#2003)

 o Fix bad copy&replace pattern on HEALPix and rHEALPix projection names (#2006)

 o createUnitOfMeasure(): use full double resolution for the conversion
   factor (#2013)

 o data/Makefile.am: remove bashism (#2047)

 o ProjectedCRS::identify(): tune it to better work with ESRI WKT representation
   of EPSG:2193 (#2058)

 o EngineeringCRS: when exporting to WKT1_GDAL, output unit and axis (#2091)

 o Add missing entries in grid_alternatives for Portugal grids coming from
   ESRI entries (#2103)

 o Fix working of Helmert transform between the horizontal part of 2
   compoundCRS (#2110)

 o ESRI_WKT ingestion: make sure to identify to non-deprecated EPSG entry when
   possible (#2118)

 o Make sure that importing a Projected 3D CRS from WKT:2019 keeps the base
   geographic CRS as 3D (#2124)

 o createOperations(): improve results of compoundCRS to compoundCRS case (#2130)

 o PROJ4 string import: take into correctly non-metre unit when the string looks
   like the one for WGS 84 / Pseudo Mercator (#2178)

 o Fix support of WKT1_GDAL with netCDF rotated pole formulation (#2187)

 o io.hpp: avoid dependency to proj_json_streaming_writer.hpp (#2188)




From davidgispert at gmail.com  Mon Apr 27 03:38:32 2020
From: davidgispert at gmail.com (David Gispert)
Date: Mon, 27 Apr 2020 12:38:32 +0200
Subject: [PROJ] projection Gall-Bomford (Gall Modified)
Message-ID: <CALZ3vN19eLLHr_X+qNk+xAO4Sf-jhYvGJDSgNGaGvkQQA+tUSQ@mail.gmail.com>

Hi everybody.

I need help to aggregate the Gall-Bombford projection to Qgis.

I don't have the characteristics of this projection.

Only this:

https://map-projections.net/compare.php?p1=gall-bomford&p2=gall-stereographic&w=1&sm=1&d=1

Thank you very much for your help

Salutacions,

David Gispert
davidgispert at gmail.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200427/c543391e/attachment.html>

From vanadovv at hetnet.nl  Mon Apr 27 10:51:34 2020
From: vanadovv at hetnet.nl (Oscar van Vlijmen)
Date: Mon, 27 Apr 2020 19:51:34 +0200 (CEST)
Subject: [PROJ] projection Gall-Bomford (Gall Modified)
In-Reply-To: <CALZ3vN19eLLHr_X+qNk+xAO4Sf-jhYvGJDSgNGaGvkQQA+tUSQ@mail.gmail.com>
References: <CALZ3vN19eLLHr_X+qNk+xAO4Sf-jhYvGJDSgNGaGvkQQA+tUSQ@mail.gmail.com>
Message-ID: <1294348252.3408943.1588009894686@kpc.webmail.kpnmail.nl>

My two cents:

Gall-Bomford projection
===============

Gall's stereographic cylindrical:
y = R(1 + (1/2)sqrt(2)) tan ((1/2)phi).
For the Oxford version, devised by Guy Bomford about 1950 and called a modified Gall, the meridians are fairly straight at lower latitudes and curve slightly to decrease scale exaggeration near the poles, While the Gall cylindrical spacing is x = R.lambda/sqrt(2), Oxford's modification appears to fit approximately the formula
x = (1 - O.04.phi^4) R.lambda/sqrt(2).

Source: A Comparison of Pseudocylindrical Map Projections
John P. Snyder
The American Cartographer, Vol. 4 No. 1, 59-81 (1977), page 75


The formulas used by most map drawing programs for both Guy Bomford's Modified Gall projection and the Denoyer Semi-Elliptical projection were due to John P. Snyder. In his book Flattening the Earth, he mentions that projection in passing, noting that the scale of longitude is "about 1 - 0.4 * phi^4" where phi represents the latitude, compared to that of the equator, so he may merely have been attempting to sketch out roughly what the projection was like, not to seriously propose a method of drawing it. I haven't tried for an exact match myself; as noted above, I added a small term proportional to the square of the latitude to correct the visibly obvious deficiency of implementations of this formula. Scaled to a latitude in radians, my formula becomes 1 - .01857755 * phi^2 - .030077 * phi^4. I calculated it based on matching two of my measurements that seemed most representative, then checking that the overall result had roughly the same appearance as the real map.

Source: Pseudocylindrical and Pseudoconic Projections
Part of "Map Projections", by John J. G. Savard
http://quadibloc.com/maps/mpse04.htm


See also:
proj_cyl_stere.c, Cylindrical Stereographic projection code by Gerald I. Evenden, 2003, 2006, part of the package libproj - library of cartographic projections.


Yours,
Oscar van Vlijmen





> Op 27 april 2020 om 12:38 schreef David Gispert <davidgispert at gmail.com>:
> 
>     Hi everybody.
> 
>     I need help to aggregate the Gall-Bombford projection to Qgis.
> 
>     I don't have the characteristics of this projection.
> 
>     Only this:
> 
>     https://map-projections.net/compare.php?p1=gall-bomford&p2=gall-stereographic&w=1&sm=1&d=1
> 
>     Thank you very much for your help
> 
>     Salutacions,
> 
>     David Gispert
>     davidgispert at gmail.com mailto:davidgispert at gmail.com
>     _______________________________________________
>     PROJ mailing list
>     PROJ at lists.osgeo.org
>     https://lists.osgeo.org/mailman/listinfo/proj
> 


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200427/18739c98/attachment.html>

From sgh at sgh.dk  Mon Apr 27 22:22:32 2020
From: sgh at sgh.dk (=?ISO-8859-1?Q?S=F8ren?= Holm)
Date: Tue, 28 Apr 2020 07:22:32 +0200
Subject: [PROJ] System34 height difference
In-Reply-To: <378660FB-8006-427F-A14A-31C6306175A6@sdfe.dk>
References: <3043370.aeNJFYEL58@koontz>
 <378660FB-8006-427F-A14A-31C6306175A6@sdfe.dk>
Message-ID: <1709635.pCGc8yHicb@koontz>

Thank you for the answers Kristian.


s√∏ndag den 26. april 2020 15.11.30 CEST skrev Kristian Evers:
> 
> Hi
> 
> We are using proj for transformation of some Danish coordinatesystems.
> 
> Among them are S34 and DKTM.
> 
> Usually the height is not affected much during transformations. This is
> however different for S34.
> 
> 
> Yes, System34 is only a 2D coordinate reference system, so the height is
> generally not meant to be used.
 
> 
> $ cct -t0  +proj=pipeline +step +init=DK:DKTM1
> 10 55 0 0
>  263991.7405   1097565.8295        0.0000        0.0000 0
> 
> 
> $ cct -t0  +proj=pipeline +step +init=DK:S34J
> 10 55 0 0
>  234033.0592     63129.6022      -36.8103        0.0000 0
> 
> 
> Why is there ~36m subtracted for S34?
> 
> The reason is that there is an implicit datum change happening in that
> transformation, which internally works in three dimensions and then
> consequently transforms the zero height to another datum. This, however,
> has no physical meaning and can be regarded as a mathematical curiosity.
> With PROJ > 6.0.0 this can actually be avoided by using the
> push<https://proj.org/operations/conversions/push.html> and
> pop<https://proj.org/operations/conversions/pop.html> operators:
 
> echo 10 55 | ./bin/cct -z0 -t0 +proj=pipeline +step +proj=push +v_3 +step
> +init=DK:S34J +step +proj=pop +v_3
 234033.0592     63129.6022       
> 0.0000        0.0000
> 
> The DK init file was created before that was possible. This probably should
> be updated, although it comes with the risk that someone now relies on the
> current behaviour. System34 has been submitted to the EPSG but the
> application is still pending. Once that find it‚Äôs way to the EPSG registry
> this problem should disappear entirely in PROJ. The time frame is
> unfortunately unknown at this time.
 
> Why is there around 0.1mm height difference for most UTM and NTM zones?
> 
> I haven‚Äôt been able to replicate that, so hard to comment on. A guess is
> that there is some numerical inaccuracy involved. I don‚Äôt think there‚Äôs
> anything to worry about, 0.1 mm is very likely less than both the accuracy
> of the data and the transformation.
 
> Is it the intention that the heights should be affected during these
> transformations?
> 
> For System34 it‚Äôs yes and no. Yes, because that is the way the
> transformation is currently made but no since it the height isn‚Äôt really
> part of the system. Can‚Äôt comment on the other case.
 
> /Kristian
> 


-- 
S√∏ren Holm



From davidgispert at gmail.com  Tue Apr 28 13:47:48 2020
From: davidgispert at gmail.com (David Gispert)
Date: Tue, 28 Apr 2020 22:47:48 +0200
Subject: [PROJ] PROJ Digest, Vol 18, Issue 30
In-Reply-To: <mailman.21.1588014002.6184.proj@lists.osgeo.org>
References: <mailman.21.1588014002.6184.proj@lists.osgeo.org>
Message-ID: <CALZ3vN3-cz-WRWkkicwBT49r5jN3iet+HZMcYeS7Zwg4BDPsLw@mail.gmail.com>

Thank you Oscar

El lun., 27 abr. 2020 21:01, <proj-request at lists.osgeo.org> escribi√≥:

> Send PROJ mailing list submissions to
>         proj at lists.osgeo.org
>
> To subscribe or unsubscribe via the World Wide Web, visit
>         https://lists.osgeo.org/mailman/listinfo/proj
> or, via email, send a message with subject or body 'help' to
>         proj-request at lists.osgeo.org
>
> You can reach the person managing the list at
>         proj-owner at lists.osgeo.org
>
> When replying, please edit your Subject line so it is more specific
> than "Re: Contents of PROJ digest..."
>
>
> Today's Topics:
>
>    1. PROJ 7.0.1RC1 & 6.3.2RC1 (Kristian Evers)
>    2. projection Gall-Bomford (Gall Modified) (David Gispert)
>    3. Re: projection Gall-Bomford (Gall Modified) (Oscar van Vlijmen)
>
>
> ----------------------------------------------------------------------
>
> Message: 1
> Date: Mon, 27 Apr 2020 11:22:45 +0200
> From: Kristian Evers <kristianevers at gmail.com>
> To: PROJ <proj at lists.osgeo.org>
> Subject: [PROJ] PROJ 7.0.1RC1 & 6.3.2RC1
> Message-ID: <E50977E3-EC8D-41B5-B7DA-2BCD4FCBA0AF at gmail.com>
> Content-Type: text/plain;       charset=us-ascii
>
> All,
>
> With scheduled releases of PROJ 7.0.1 and 6.3.2. on May 1st it is time
> to put out release candidates. Both candidates includes a number of bug
> fixes since the previous release. 7.0.1 includes 39 bug fixes and 16 bugs
> has been fixed in 6.3.2. See the release notes below.
>
> Archives are available here:
>
> http://download.osgeo.org/proj/proj-7.0.1RC1.tar.gz
> http://download.osgeo.org/proj/proj-7.0.1RC1.zip
> http://download.osgeo.org/proj/proj-6.3.2RC1.tar.gz
> http://download.osgeo.org/proj/proj-6.3.2RC1.zip
>
>
> Please test the release candidates and report back any problems you
> may encounter.
>
> If no issues are found with the two release candidates the final releases
> will be announced on Friday May 1st.
>
> /Kristian
>
>
>
> 7.0.1 Release Notes
> -------------------
>
>  Updates
>  -------
>
>  o Database: update to EPSG v9.8.9 #2141
>
>  Bug fixes
>  ---------
>
>  o Make tests independent of proj-datumgrid (#1995)
>
>  o Add missing projection property tables (#1996)
>
>  o Avoid crash when running against SQLite3 binary built with
>    -DSQLITE_OMIT_AUTOINIT (#1999)
>
>  o createOperations(): fix wrong pipeline generation with CRS that has
> +nadgrids=
>    and +pm= (#2002)
>
>  o Fix bad copy&replace pattern on HEALPix and rHEALPix projection names
> (#2007)
>
>  o createUnitOfMeasure(): use full double resolution for the conversion
>    factor (#2014)
>
>  o Update README with info on PROJ-data (#2015)
>
>  o utm/ups: make sure to set errno to PJD_ERR_ELLIPSOID_USE_REQUIRED if
>    es==0 (#2045)
>
>  o data/Makefile.am: remove bashism (#2048)
>
>  o ProjectedCRS::identify(): tune it to better work with ESRI WKT
>    representation of EPSG:2193 (#2059)
>
>  o Fix build with gcc 4.8.5 (#2066)
>
>  o Autotools/pkg-conf: Define datarootdir (#2069)
>
>  o cs2cs: don't require +to for '{source_crs} {target_crs} filename...'
>    syntax (#2081)
>
>  o CMake: fix bug with find_package(PROJ) with macOS (#2082)
>
>  o ESRI WKT import / identification: special case for
>    NAD_1983_HARN_StatePlane_Colorado_North_FIPS_0501 with Foot_US unit
> (#2088)
>
>  o ESRI WKT import / identification: special case for
>    NAD_1983_HARN_StatePlane_Colorado_North_FIPS_0501 with Foot_US unit
> (#2089)
>
>  o EngineeringCRS: when exporting to WKT1_GDAL, output unit and axis
> (#2092)
>
>  o Use jtsk03-jtsk horizontal grid from CDN (#2098)
>
>  o CMake: prefer to use use PROJ_SOURCE_DIR and PROJ_BINARY_DIR (#2100)
>
>  o Fix wrong grids file name in esri.sql (#2104)
>
>  o Fix identification of projected CRS whose name is close but not strictly
>    equal to a ESRI alias (#2106)
>
>  o Fix working of Helmert transform between the horizontal part of
>    2 compoundCRS (#2111)
>
>  o Database: fix registration of custom entries of
> grid_transformation_custom.sql
>    for geoid grids (#2114)
>
>  o ESRI_WKT ingestion: make sure to identify to non-deprecated EPSG entry
> when
>    possible (#2119)
>
>  o Make sure that importing a Projected 3D CRS from WKT:2019 keeps the base
>    geographic CRS as 3D (#2125)
>
>  o createOperations(): improve results of compoundCRS to compoundCRS case
> (#2131)
>
>  o hgridshift/vgridshift: defer grid opening when grid has already
>    been opened (#2132)
>
>  o Resolve a few shadowed declaration warnings (#2142)
>
>  o ProjectedCRS identification: deal with switched 1st/2nd std parallels
> for
>    LCC_2SP(#2153)
>
>  o Fix Robinson inverse projection (#2154)
>
>  o createOperations(): do not remove ballpark transformation if there are
> only
>    grid based operations, even if they cover the whole area of use (#2156)
>
>  o createFromCoordinateReferenceSystemCodes(): 'optimization' to avoid
> using
>    C++ exceptions (#2161)
>
>  o Ingestion of WKT1_GDAL: correctly map 'Cylindrical_Equal_Area' (#2167)
>
>  o Add limited support for non-conformant WKT1 LAS COMPD_CS[] (#2172)
>
>  o PROJ4 string import: take into correctly non-metre unit when the string
>    looks like the one for WGS 84 / Pseudo Mercator (#2177)
>
>  o io.hpp: avoid dependency to proj_json_streaming_writer.hpp (#2184)
>
>  o Fix support of WKT1_GDAL with netCDF rotated pole formulation (#2186)
>
>
>
> 6.3.2 Release Notes
> -------------------
>
>  Bug fixes
>  ---------
>
>  o validateParameters(): fix false-positive warning on
>    Equidistant Cylindrical (#1947)
>
>  o proj_create_crs_to_crs(): avoid potential reprojection failures when
>    reprojecting area of use to source and target CRS (#1993)
>
>  o createOperations(): fix wrong pipeline generation with CRS that has
> +nadgrids=
>    and +pm= (#2003)
>
>  o Fix bad copy&replace pattern on HEALPix and rHEALPix projection names
> (#2006)
>
>  o createUnitOfMeasure(): use full double resolution for the conversion
>    factor (#2013)
>
>  o data/Makefile.am: remove bashism (#2047)
>
>  o ProjectedCRS::identify(): tune it to better work with ESRI WKT
> representation
>    of EPSG:2193 (#2058)
>
>  o EngineeringCRS: when exporting to WKT1_GDAL, output unit and axis
> (#2091)
>
>  o Add missing entries in grid_alternatives for Portugal grids coming from
>    ESRI entries (#2103)
>
>  o Fix working of Helmert transform between the horizontal part of 2
>    compoundCRS (#2110)
>
>  o ESRI_WKT ingestion: make sure to identify to non-deprecated EPSG entry
> when
>    possible (#2118)
>
>  o Make sure that importing a Projected 3D CRS from WKT:2019 keeps the base
>    geographic CRS as 3D (#2124)
>
>  o createOperations(): improve results of compoundCRS to compoundCRS case
> (#2130)
>
>  o PROJ4 string import: take into correctly non-metre unit when the string
> looks
>    like the one for WGS 84 / Pseudo Mercator (#2178)
>
>  o Fix support of WKT1_GDAL with netCDF rotated pole formulation (#2187)
>
>  o io.hpp: avoid dependency to proj_json_streaming_writer.hpp (#2188)
>
>
>
>
>
> ------------------------------
>
> Message: 2
> Date: Mon, 27 Apr 2020 12:38:32 +0200
> From: David Gispert <davidgispert at gmail.com>
> To: proj at lists.osgeo.org
> Subject: [PROJ] projection Gall-Bomford (Gall Modified)
> Message-ID:
>         <
> CALZ3vN19eLLHr_X+qNk+xAO4Sf-jhYvGJDSgNGaGvkQQA+tUSQ at mail.gmail.com>
> Content-Type: text/plain; charset="utf-8"
>
> Hi everybody.
>
> I need help to aggregate the Gall-Bombford projection to Qgis.
>
> I don't have the characteristics of this projection.
>
> Only this:
>
>
> https://map-projections.net/compare.php?p1=gall-bomford&p2=gall-stereographic&w=1&sm=1&d=1
>
> Thank you very much for your help
>
> Salutacions,
>
> David Gispert
> davidgispert at gmail.com
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: <
> http://lists.osgeo.org/pipermail/proj/attachments/20200427/c543391e/attachment-0001.html
> >
>
> ------------------------------
>
> Message: 3
> Date: Mon, 27 Apr 2020 19:51:34 +0200 (CEST)
> From: Oscar van Vlijmen <vanadovv at hetnet.nl>
> To: proj at lists.osgeo.org
> Subject: Re: [PROJ] projection Gall-Bomford (Gall Modified)
> Message-ID: <1294348252.3408943.1588009894686 at kpc.webmail.kpnmail.nl>
> Content-Type: text/plain; charset="utf-8"
>
> My two cents:
>
> Gall-Bomford projection
> ===============
>
> Gall's stereographic cylindrical:
> y = R(1 + (1/2)sqrt(2)) tan ((1/2)phi).
> For the Oxford version, devised by Guy Bomford about 1950 and called a
> modified Gall, the meridians are fairly straight at lower latitudes and
> curve slightly to decrease scale exaggeration near the poles, While the
> Gall cylindrical spacing is x = R.lambda/sqrt(2), Oxford's modification
> appears to fit approximately the formula
> x = (1 - O.04.phi^4) R.lambda/sqrt(2).
>
> Source: A Comparison of Pseudocylindrical Map Projections
> John P. Snyder
> The American Cartographer, Vol. 4 No. 1, 59-81 (1977), page 75
>
>
> The formulas used by most map drawing programs for both Guy Bomford's
> Modified Gall projection and the Denoyer Semi-Elliptical projection were
> due to John P. Snyder. In his book Flattening the Earth, he mentions that
> projection in passing, noting that the scale of longitude is "about 1 - 0.4
> * phi^4" where phi represents the latitude, compared to that of the
> equator, so he may merely have been attempting to sketch out roughly what
> the projection was like, not to seriously propose a method of drawing it. I
> haven't tried for an exact match myself; as noted above, I added a small
> term proportional to the square of the latitude to correct the visibly
> obvious deficiency of implementations of this formula. Scaled to a latitude
> in radians, my formula becomes 1 - .01857755 * phi^2 - .030077 * phi^4. I
> calculated it based on matching two of my measurements that seemed most
> representative, then checking that the overall result had roughly the same
> appearance as the real map.
>
> Source: Pseudocylindrical and Pseudoconic Projections
> Part of "Map Projections", by John J. G. Savard
> http://quadibloc.com/maps/mpse04.htm
>
>
> See also:
> proj_cyl_stere.c, Cylindrical Stereographic projection code by Gerald I.
> Evenden, 2003, 2006, part of the package libproj - library of cartographic
> projections.
>
>
> Yours,
> Oscar van Vlijmen
>
>
>
>
>
> > Op 27 april 2020 om 12:38 schreef David Gispert <davidgispert at gmail.com
> >:
> >
> >     Hi everybody.
> >
> >     I need help to aggregate the Gall-Bombford projection to Qgis.
> >
> >     I don't have the characteristics of this projection.
> >
> >     Only this:
> >
> >
> https://map-projections.net/compare.php?p1=gall-bomford&p2=gall-stereographic&w=1&sm=1&d=1
> >
> >     Thank you very much for your help
> >
> >     Salutacions,
> >
> >     David Gispert
> >     davidgispert at gmail.com mailto:davidgispert at gmail.com
> >     _______________________________________________
> >     PROJ mailing list
> >     PROJ at lists.osgeo.org
> >     https://lists.osgeo.org/mailman/listinfo/proj
> >
>
>
> -------------- next part --------------
> An HTML attachment was scrubbed...
> URL: <
> http://lists.osgeo.org/pipermail/proj/attachments/20200427/18739c98/attachment-0001.html
> >
>
> ------------------------------
>
> Subject: Digest Footer
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
>
> ------------------------------
>
> End of PROJ Digest, Vol 18, Issue 30
> ************************************
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200428/6680e79a/attachment-0001.html>

From gdt at lexort.com  Wed Apr 29 08:39:31 2020
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 29 Apr 2020 11:39:31 -0400
Subject: [PROJ] PROJ 7.0.1RC1 & 6.3.2RC1
In-Reply-To: <E50977E3-EC8D-41B5-B7DA-2BCD4FCBA0AF@gmail.com> (Kristian
 Evers's message of "Mon, 27 Apr 2020 11:22:45 +0200")
References: <E50977E3-EC8D-41B5-B7DA-2BCD4FCBA0AF@gmail.com>
Message-ID: <rmih7x2nvws.fsf@s1.lexort.com>

  http://download.osgeo.org/proj/proj-6.3.2RC1.tar.gz

I built 6.3.2RC1 on NetBSD 8 amd64, and it looks good.  "make check"
passes.

I got a few warnings, which I think aren't really new, or particularly
concerning:

  checking whether the c++ linker (/tmp/work/geography/proj/work/.cwrapper/bin/ld) supports shared libraries... cc1: warning: command line option '-std=c++11' is valid for C++/ObjC++ but not for C

  checking dynamic linker characteristics... cc1: warning: command line option '-std=c++11' is valid for C++/ObjC++ but not for C

  config.status: WARNING:  'proj.pc.in' seems to ignore the --datarootdir setting

  cc1plus: warning: command line option '-Wmissing-prototypes' is valid for C/ObjC but not for C++

  (Plus something about isnan and float/double coercion that I think is not an issue in proj.)


(I have not tried to move pkgsrc to 7 yet.)

From jmckenna at gatewaygeomatics.com  Wed Apr 29 10:55:11 2020
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Wed, 29 Apr 2020 14:55:11 -0300
Subject: [PROJ] PROJ 7.0.1RC1 & 6.3.2RC1
In-Reply-To: <E50977E3-EC8D-41B5-B7DA-2BCD4FCBA0AF@gmail.com>
References: <E50977E3-EC8D-41B5-B7DA-2BCD4FCBA0AF@gmail.com>
Message-ID: <3d35ee03-ac78-fc2f-01cb-3026fca4038f@gatewaygeomatics.com>

Hi Kristian,

7.0.1RC1 builds fine on Windows.

Environment:
   - VC2017
   - curl 7.70.0
   - libtiff 4.1.0
   - sqlite 3.31.1

-jeff



-- 
Jeff McKenna
MapServer Consulting and Training Services
https://gatewaygeo.com/




On 2020-04-27 6:22 a.m., Kristian Evers wrote:
> All,
> 
> With scheduled releases of PROJ 7.0.1 and 6.3.2. on May 1st it is time
> to put out release candidates. Both candidates includes a number of bug
> fixes since the previous release. 7.0.1 includes 39 bug fixes and 16 bugs
> has been fixed in 6.3.2. See the release notes below.
> 
> Archives are available here:
> 
> http://download.osgeo.org/proj/proj-7.0.1RC1.tar.gz
> http://download.osgeo.org/proj/proj-7.0.1RC1.zip
> http://download.osgeo.org/proj/proj-6.3.2RC1.tar.gz
> http://download.osgeo.org/proj/proj-6.3.2RC1.zip
> 
> 
> Please test the release candidates and report back any problems you
> may encounter.
> 
> If no issues are found with the two release candidates the final releases
> will be announced on Friday May 1st.
> 
> /Kristian
> 
> 
> 
> 7.0.1 Release Notes
> -------------------
> 
>   Updates
>   -------
> 
>   o Database: update to EPSG v9.8.9 #2141
> 
>   Bug fixes
>   ---------
> 
>   o Make tests independent of proj-datumgrid (#1995)
> 
>   o Add missing projection property tables (#1996)
> 
>   o Avoid crash when running against SQLite3 binary built with
>     -DSQLITE_OMIT_AUTOINIT (#1999)
> 
>   o createOperations(): fix wrong pipeline generation with CRS that has +nadgrids=
>     and +pm= (#2002)
> 
>   o Fix bad copy&replace pattern on HEALPix and rHEALPix projection names (#2007)
> 
>   o createUnitOfMeasure(): use full double resolution for the conversion
>     factor (#2014)
> 
>   o Update README with info on PROJ-data (#2015)
> 
>   o utm/ups: make sure to set errno to PJD_ERR_ELLIPSOID_USE_REQUIRED if
>     es==0 (#2045)
> 
>   o data/Makefile.am: remove bashism (#2048)
> 
>   o ProjectedCRS::identify(): tune it to better work with ESRI WKT
>     representation of EPSG:2193 (#2059)
> 
>   o Fix build with gcc 4.8.5 (#2066)
> 
>   o Autotools/pkg-conf: Define datarootdir (#2069)
> 
>   o cs2cs: don't require +to for '{source_crs} {target_crs} filename...'
>     syntax (#2081)
> 
>   o CMake: fix bug with find_package(PROJ) with macOS (#2082)
> 
>   o ESRI WKT import / identification: special case for
>     NAD_1983_HARN_StatePlane_Colorado_North_FIPS_0501 with Foot_US unit (#2088)
> 
>   o ESRI WKT import / identification: special case for
>     NAD_1983_HARN_StatePlane_Colorado_North_FIPS_0501 with Foot_US unit (#2089)
> 
>   o EngineeringCRS: when exporting to WKT1_GDAL, output unit and axis (#2092)
> 
>   o Use jtsk03-jtsk horizontal grid from CDN (#2098)
> 
>   o CMake: prefer to use use PROJ_SOURCE_DIR and PROJ_BINARY_DIR (#2100)
> 
>   o Fix wrong grids file name in esri.sql (#2104)
> 
>   o Fix identification of projected CRS whose name is close but not strictly
>     equal to a ESRI alias (#2106)
> 
>   o Fix working of Helmert transform between the horizontal part of
>     2 compoundCRS (#2111)
> 
>   o Database: fix registration of custom entries of grid_transformation_custom.sql
>     for geoid grids (#2114)
> 
>   o ESRI_WKT ingestion: make sure to identify to non-deprecated EPSG entry when
>     possible (#2119)
> 
>   o Make sure that importing a Projected 3D CRS from WKT:2019 keeps the base
>     geographic CRS as 3D (#2125)
> 
>   o createOperations(): improve results of compoundCRS to compoundCRS case (#2131)
> 
>   o hgridshift/vgridshift: defer grid opening when grid has already
>     been opened (#2132)
> 
>   o Resolve a few shadowed declaration warnings (#2142)
> 
>   o ProjectedCRS identification: deal with switched 1st/2nd std parallels for
>     LCC_2SP(#2153)
> 
>   o Fix Robinson inverse projection (#2154)
> 
>   o createOperations(): do not remove ballpark transformation if there are only
>     grid based operations, even if they cover the whole area of use (#2156)
> 
>   o createFromCoordinateReferenceSystemCodes(): 'optimization' to avoid using
>     C++ exceptions (#2161)
> 
>   o Ingestion of WKT1_GDAL: correctly map 'Cylindrical_Equal_Area' (#2167)
> 
>   o Add limited support for non-conformant WKT1 LAS COMPD_CS[] (#2172)
> 
>   o PROJ4 string import: take into correctly non-metre unit when the string
>     looks like the one for WGS 84 / Pseudo Mercator (#2177)
> 
>   o io.hpp: avoid dependency to proj_json_streaming_writer.hpp (#2184)
> 
>   o Fix support of WKT1_GDAL with netCDF rotated pole formulation (#2186)
> 
> 
> 
> 6.3.2 Release Notes
> -------------------
> 
>   Bug fixes
>   ---------
> 
>   o validateParameters(): fix false-positive warning on
>     Equidistant Cylindrical (#1947)
> 
>   o proj_create_crs_to_crs(): avoid potential reprojection failures when
>     reprojecting area of use to source and target CRS (#1993)
> 
>   o createOperations(): fix wrong pipeline generation with CRS that has +nadgrids=
>     and +pm= (#2003)
> 
>   o Fix bad copy&replace pattern on HEALPix and rHEALPix projection names (#2006)
> 
>   o createUnitOfMeasure(): use full double resolution for the conversion
>     factor (#2013)
> 
>   o data/Makefile.am: remove bashism (#2047)
> 
>   o ProjectedCRS::identify(): tune it to better work with ESRI WKT representation
>     of EPSG:2193 (#2058)
> 
>   o EngineeringCRS: when exporting to WKT1_GDAL, output unit and axis (#2091)
> 
>   o Add missing entries in grid_alternatives for Portugal grids coming from
>     ESRI entries (#2103)
> 
>   o Fix working of Helmert transform between the horizontal part of 2
>     compoundCRS (#2110)
> 
>   o ESRI_WKT ingestion: make sure to identify to non-deprecated EPSG entry when
>     possible (#2118)
> 
>   o Make sure that importing a Projected 3D CRS from WKT:2019 keeps the base
>     geographic CRS as 3D (#2124)
> 
>   o createOperations(): improve results of compoundCRS to compoundCRS case (#2130)
> 
>   o PROJ4 string import: take into correctly non-metre unit when the string looks
>     like the one for WGS 84 / Pseudo Mercator (#2178)
> 
>   o Fix support of WKT1_GDAL with netCDF rotated pole formulation (#2187)
> 
>   o io.hpp: avoid dependency to proj_json_streaming_writer.hpp (#2188)
> 
> 

From kreve at sdfe.dk  Thu Apr 30 02:23:37 2020
From: kreve at sdfe.dk (Kristian Evers)
Date: Thu, 30 Apr 2020 09:23:37 +0000
Subject: [PROJ] PROJ 7.0.1RC1 & 6.3.2RC1
In-Reply-To: <E50977E3-EC8D-41B5-B7DA-2BCD4FCBA0AF@gmail.com>
References: <E50977E3-EC8D-41B5-B7DA-2BCD4FCBA0AF@gmail.com>
Message-ID: <173c487f771040339ce70a474ce2c11f@sdfe.dk>

With the exception of a few minor warnings in 6.3.2RC1 reported by Greg, 
no serious problems have been found in the two release candidates. 

So, I hereby motion that we promote proj-7.0.1RC1 and proj-6.3.2RC1 to their final
versions.

I‚Äôll start with my +1

/Kristian

-----Original Message-----
From: PROJ <proj-bounces at lists.osgeo.org> On Behalf Of Kristian Evers
Sent: 27. april 2020 11:23
To: PROJ <proj at lists.osgeo.org>
Subject: [PROJ] PROJ 7.0.1RC1 & 6.3.2RC1

All,

With scheduled releases of PROJ 7.0.1 and 6.3.2. on May 1st it is time
to put out release candidates. Both candidates includes a number of bug
fixes since the previous release. 7.0.1 includes 39 bug fixes and 16 bugs
has been fixed in 6.3.2. See the release notes below.

Archives are available here: 

http://download.osgeo.org/proj/proj-7.0.1RC1.tar.gz
http://download.osgeo.org/proj/proj-7.0.1RC1.zip
http://download.osgeo.org/proj/proj-6.3.2RC1.tar.gz
http://download.osgeo.org/proj/proj-6.3.2RC1.zip


Please test the release candidates and report back any problems you
may encounter. 

If no issues are found with the two release candidates the final releases
will be announced on Friday May 1st.

/Kristian



7.0.1 Release Notes
-------------------

 Updates
 -------

 o Database: update to EPSG v9.8.9 #2141

 Bug fixes
 ---------

 o Make tests independent of proj-datumgrid (#1995)

 o Add missing projection property tables (#1996)

 o Avoid crash when running against SQLite3 binary built with
   -DSQLITE_OMIT_AUTOINIT (#1999)

 o createOperations(): fix wrong pipeline generation with CRS that has +nadgrids=
   and +pm= (#2002)

 o Fix bad copy&replace pattern on HEALPix and rHEALPix projection names (#2007)

 o createUnitOfMeasure(): use full double resolution for the conversion
   factor (#2014)

 o Update README with info on PROJ-data (#2015)

 o utm/ups: make sure to set errno to PJD_ERR_ELLIPSOID_USE_REQUIRED if
   es==0 (#2045)

 o data/Makefile.am: remove bashism (#2048)

 o ProjectedCRS::identify(): tune it to better work with ESRI WKT
   representation of EPSG:2193 (#2059)

 o Fix build with gcc 4.8.5 (#2066)

 o Autotools/pkg-conf: Define datarootdir (#2069)

 o cs2cs: don't require +to for '{source_crs} {target_crs} filename...'
   syntax (#2081)

 o CMake: fix bug with find_package(PROJ) with macOS (#2082)

 o ESRI WKT import / identification: special case for
   NAD_1983_HARN_StatePlane_Colorado_North_FIPS_0501 with Foot_US unit (#2088)

 o ESRI WKT import / identification: special case for
   NAD_1983_HARN_StatePlane_Colorado_North_FIPS_0501 with Foot_US unit (#2089)

 o EngineeringCRS: when exporting to WKT1_GDAL, output unit and axis (#2092)

 o Use jtsk03-jtsk horizontal grid from CDN (#2098)

 o CMake: prefer to use use PROJ_SOURCE_DIR and PROJ_BINARY_DIR (#2100)

 o Fix wrong grids file name in esri.sql (#2104)

 o Fix identification of projected CRS whose name is close but not strictly
   equal to a ESRI alias (#2106)

 o Fix working of Helmert transform between the horizontal part of
   2 compoundCRS (#2111)

 o Database: fix registration of custom entries of grid_transformation_custom.sql
   for geoid grids (#2114)

 o ESRI_WKT ingestion: make sure to identify to non-deprecated EPSG entry when
   possible (#2119)

 o Make sure that importing a Projected 3D CRS from WKT:2019 keeps the base
   geographic CRS as 3D (#2125)

 o createOperations(): improve results of compoundCRS to compoundCRS case (#2131)

 o hgridshift/vgridshift: defer grid opening when grid has already
   been opened (#2132)

 o Resolve a few shadowed declaration warnings (#2142)

 o ProjectedCRS identification: deal with switched 1st/2nd std parallels for
   LCC_2SP(#2153)

 o Fix Robinson inverse projection (#2154)

 o createOperations(): do not remove ballpark transformation if there are only
   grid based operations, even if they cover the whole area of use (#2156)

 o createFromCoordinateReferenceSystemCodes(): 'optimization' to avoid using
   C++ exceptions (#2161)

 o Ingestion of WKT1_GDAL: correctly map 'Cylindrical_Equal_Area' (#2167)

 o Add limited support for non-conformant WKT1 LAS COMPD_CS[] (#2172)

 o PROJ4 string import: take into correctly non-metre unit when the string
   looks like the one for WGS 84 / Pseudo Mercator (#2177)

 o io.hpp: avoid dependency to proj_json_streaming_writer.hpp (#2184)

 o Fix support of WKT1_GDAL with netCDF rotated pole formulation (#2186)



6.3.2 Release Notes
-------------------

 Bug fixes
 ---------

 o validateParameters(): fix false-positive warning on
   Equidistant Cylindrical (#1947)

 o proj_create_crs_to_crs(): avoid potential reprojection failures when
   reprojecting area of use to source and target CRS (#1993)

 o createOperations(): fix wrong pipeline generation with CRS that has +nadgrids=
   and +pm= (#2003)

 o Fix bad copy&replace pattern on HEALPix and rHEALPix projection names (#2006)

 o createUnitOfMeasure(): use full double resolution for the conversion
   factor (#2013)

 o data/Makefile.am: remove bashism (#2047)

 o ProjectedCRS::identify(): tune it to better work with ESRI WKT representation
   of EPSG:2193 (#2058)

 o EngineeringCRS: when exporting to WKT1_GDAL, output unit and axis (#2091)

 o Add missing entries in grid_alternatives for Portugal grids coming from
   ESRI entries (#2103)

 o Fix working of Helmert transform between the horizontal part of 2
   compoundCRS (#2110)

 o ESRI_WKT ingestion: make sure to identify to non-deprecated EPSG entry when
   possible (#2118)

 o Make sure that importing a Projected 3D CRS from WKT:2019 keeps the base
   geographic CRS as 3D (#2124)

 o createOperations(): improve results of compoundCRS to compoundCRS case (#2130)

 o PROJ4 string import: take into correctly non-metre unit when the string looks
   like the one for WGS 84 / Pseudo Mercator (#2178)

 o Fix support of WKT1_GDAL with netCDF rotated pole formulation (#2187)

 o io.hpp: avoid dependency to proj_json_streaming_writer.hpp (#2188)



_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

From even.rouault at spatialys.com  Thu Apr 30 02:34:01 2020
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 30 Apr 2020 11:34:01 +0200
Subject: [PROJ] PROJ 7.0.1RC1 & 6.3.2RC1
In-Reply-To: <173c487f771040339ce70a474ce2c11f@sdfe.dk>
References: <E50977E3-EC8D-41B5-B7DA-2BCD4FCBA0AF@gmail.com>
 <173c487f771040339ce70a474ce2c11f@sdfe.dk>
Message-ID: <2176460.2yq8ryV3fL@even-i700>

Krisitan,

> So, I hereby motion that we promote proj-7.0.1RC1 and proj-6.3.2RC1 
to their
> final versions.
> 
> I‚Äôll start with my +1

+1 Even

-- 
Spatialys - Geospatial professional services
http://www.spatialys.com
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200430/9daa3b69/attachment.html>

From jmckenna at gatewaygeomatics.com  Thu Apr 30 03:57:01 2020
From: jmckenna at gatewaygeomatics.com (Jeff McKenna)
Date: Thu, 30 Apr 2020 07:57:01 -0300
Subject: [PROJ] PROJ 7.0.1RC1 & 6.3.2RC1
In-Reply-To: <173c487f771040339ce70a474ce2c11f@sdfe.dk>
References: <E50977E3-EC8D-41B5-B7DA-2BCD4FCBA0AF@gmail.com>
 <173c487f771040339ce70a474ce2c11f@sdfe.dk>
Message-ID: <5f56802d-44e1-4ad4-dac0-7a1e746ce9e4@gatewaygeomatics.com>

On 2020-04-30 6:23 a.m., Kristian Evers wrote:
> 
> So, I hereby motion that we promote proj-7.0.1RC1 and proj-6.3.2RC1 to their final
> versions.
> 

+1 jeff


-- 
Jeff McKenna
MapServer Consulting and Training Services
https://gatewaygeo.com/

From howard at hobu.co  Thu Apr 30 06:39:24 2020
From: howard at hobu.co (Howard Butler)
Date: Thu, 30 Apr 2020 08:39:24 -0500
Subject: [PROJ] PROJ 7.0.1RC1 & 6.3.2RC1
In-Reply-To: <2176460.2yq8ryV3fL@even-i700>
References: <E50977E3-EC8D-41B5-B7DA-2BCD4FCBA0AF@gmail.com>
 <173c487f771040339ce70a474ce2c11f@sdfe.dk> <2176460.2yq8ryV3fL@even-i700>
Message-ID: <A14B3D84-5238-4316-9201-52017D285040@hobu.co>



> On Apr 30, 2020, at 4:34 AM, Even Rouault <even.rouault at spatialys.com> wrote:
> 
> Krisitan,
>  
> > So, I hereby motion that we promote proj-7.0.1RC1 and proj-6.3.2RC1 to their
> > final versions.
> > 
> > I‚Äôll start with my +1
>  
> +1 Even
>  

+1 Howard

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200430/75059dfe/attachment.html>

From knudsen.thomas at gmail.com  Thu Apr 30 08:32:17 2020
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Thu, 30 Apr 2020 17:32:17 +0200
Subject: [PROJ] PROJ 7.0.1RC1 & 6.3.2RC1
In-Reply-To: <173c487f771040339ce70a474ce2c11f@sdfe.dk>
References: <E50977E3-EC8D-41B5-B7DA-2BCD4FCBA0AF@gmail.com>
 <173c487f771040339ce70a474ce2c11f@sdfe.dk>
Message-ID: <CAH0YoEMvX2QdOAT4TRAGhAZptzDhqZdWaMpijQn_Jr8z=rBvmA@mail.gmail.com>

+1 Thomas

Den tor. 30. apr. 2020 kl. 11.23 skrev Kristian Evers <kreve at sdfe.dk>:

> With the exception of a few minor warnings in 6.3.2RC1 reported by Greg,
> no serious problems have been found in the two release candidates.
>
> So, I hereby motion that we promote proj-7.0.1RC1 and proj-6.3.2RC1 to
> their final
> versions.
>
> I‚Äôll start with my +1
>
> /Kristian
>
> -----Original Message-----
> From: PROJ <proj-bounces at lists.osgeo.org> On Behalf Of Kristian Evers
> Sent: 27. april 2020 11:23
> To: PROJ <proj at lists.osgeo.org>
> Subject: [PROJ] PROJ 7.0.1RC1 & 6.3.2RC1
>
> All,
>
> With scheduled releases of PROJ 7.0.1 and 6.3.2. on May 1st it is time
> to put out release candidates. Both candidates includes a number of bug
> fixes since the previous release. 7.0.1 includes 39 bug fixes and 16 bugs
> has been fixed in 6.3.2. See the release notes below.
>
> Archives are available here:
>
> http://download.osgeo.org/proj/proj-7.0.1RC1.tar.gz
> http://download.osgeo.org/proj/proj-7.0.1RC1.zip
> http://download.osgeo.org/proj/proj-6.3.2RC1.tar.gz
> http://download.osgeo.org/proj/proj-6.3.2RC1.zip
>
>
> Please test the release candidates and report back any problems you
> may encounter.
>
> If no issues are found with the two release candidates the final releases
> will be announced on Friday May 1st.
>
> /Kristian
>
>
>
> 7.0.1 Release Notes
> -------------------
>
>  Updates
>  -------
>
>  o Database: update to EPSG v9.8.9 #2141
>
>  Bug fixes
>  ---------
>
>  o Make tests independent of proj-datumgrid (#1995)
>
>  o Add missing projection property tables (#1996)
>
>  o Avoid crash when running against SQLite3 binary built with
>    -DSQLITE_OMIT_AUTOINIT (#1999)
>
>  o createOperations(): fix wrong pipeline generation with CRS that has
> +nadgrids=
>    and +pm= (#2002)
>
>  o Fix bad copy&replace pattern on HEALPix and rHEALPix projection names
> (#2007)
>
>  o createUnitOfMeasure(): use full double resolution for the conversion
>    factor (#2014)
>
>  o Update README with info on PROJ-data (#2015)
>
>  o utm/ups: make sure to set errno to PJD_ERR_ELLIPSOID_USE_REQUIRED if
>    es==0 (#2045)
>
>  o data/Makefile.am: remove bashism (#2048)
>
>  o ProjectedCRS::identify(): tune it to better work with ESRI WKT
>    representation of EPSG:2193 (#2059)
>
>  o Fix build with gcc 4.8.5 (#2066)
>
>  o Autotools/pkg-conf: Define datarootdir (#2069)
>
>  o cs2cs: don't require +to for '{source_crs} {target_crs} filename...'
>    syntax (#2081)
>
>  o CMake: fix bug with find_package(PROJ) with macOS (#2082)
>
>  o ESRI WKT import / identification: special case for
>    NAD_1983_HARN_StatePlane_Colorado_North_FIPS_0501 with Foot_US unit
> (#2088)
>
>  o ESRI WKT import / identification: special case for
>    NAD_1983_HARN_StatePlane_Colorado_North_FIPS_0501 with Foot_US unit
> (#2089)
>
>  o EngineeringCRS: when exporting to WKT1_GDAL, output unit and axis
> (#2092)
>
>  o Use jtsk03-jtsk horizontal grid from CDN (#2098)
>
>  o CMake: prefer to use use PROJ_SOURCE_DIR and PROJ_BINARY_DIR (#2100)
>
>  o Fix wrong grids file name in esri.sql (#2104)
>
>  o Fix identification of projected CRS whose name is close but not strictly
>    equal to a ESRI alias (#2106)
>
>  o Fix working of Helmert transform between the horizontal part of
>    2 compoundCRS (#2111)
>
>  o Database: fix registration of custom entries of
> grid_transformation_custom.sql
>    for geoid grids (#2114)
>
>  o ESRI_WKT ingestion: make sure to identify to non-deprecated EPSG entry
> when
>    possible (#2119)
>
>  o Make sure that importing a Projected 3D CRS from WKT:2019 keeps the base
>    geographic CRS as 3D (#2125)
>
>  o createOperations(): improve results of compoundCRS to compoundCRS case
> (#2131)
>
>  o hgridshift/vgridshift: defer grid opening when grid has already
>    been opened (#2132)
>
>  o Resolve a few shadowed declaration warnings (#2142)
>
>  o ProjectedCRS identification: deal with switched 1st/2nd std parallels
> for
>    LCC_2SP(#2153)
>
>  o Fix Robinson inverse projection (#2154)
>
>  o createOperations(): do not remove ballpark transformation if there are
> only
>    grid based operations, even if they cover the whole area of use (#2156)
>
>  o createFromCoordinateReferenceSystemCodes(): 'optimization' to avoid
> using
>    C++ exceptions (#2161)
>
>  o Ingestion of WKT1_GDAL: correctly map 'Cylindrical_Equal_Area' (#2167)
>
>  o Add limited support for non-conformant WKT1 LAS COMPD_CS[] (#2172)
>
>  o PROJ4 string import: take into correctly non-metre unit when the string
>    looks like the one for WGS 84 / Pseudo Mercator (#2177)
>
>  o io.hpp: avoid dependency to proj_json_streaming_writer.hpp (#2184)
>
>  o Fix support of WKT1_GDAL with netCDF rotated pole formulation (#2186)
>
>
>
> 6.3.2 Release Notes
> -------------------
>
>  Bug fixes
>  ---------
>
>  o validateParameters(): fix false-positive warning on
>    Equidistant Cylindrical (#1947)
>
>  o proj_create_crs_to_crs(): avoid potential reprojection failures when
>    reprojecting area of use to source and target CRS (#1993)
>
>  o createOperations(): fix wrong pipeline generation with CRS that has
> +nadgrids=
>    and +pm= (#2003)
>
>  o Fix bad copy&replace pattern on HEALPix and rHEALPix projection names
> (#2006)
>
>  o createUnitOfMeasure(): use full double resolution for the conversion
>    factor (#2013)
>
>  o data/Makefile.am: remove bashism (#2047)
>
>  o ProjectedCRS::identify(): tune it to better work with ESRI WKT
> representation
>    of EPSG:2193 (#2058)
>
>  o EngineeringCRS: when exporting to WKT1_GDAL, output unit and axis
> (#2091)
>
>  o Add missing entries in grid_alternatives for Portugal grids coming from
>    ESRI entries (#2103)
>
>  o Fix working of Helmert transform between the horizontal part of 2
>    compoundCRS (#2110)
>
>  o ESRI_WKT ingestion: make sure to identify to non-deprecated EPSG entry
> when
>    possible (#2118)
>
>  o Make sure that importing a Projected 3D CRS from WKT:2019 keeps the base
>    geographic CRS as 3D (#2124)
>
>  o createOperations(): improve results of compoundCRS to compoundCRS case
> (#2130)
>
>  o PROJ4 string import: take into correctly non-metre unit when the string
> looks
>    like the one for WGS 84 / Pseudo Mercator (#2178)
>
>  o Fix support of WKT1_GDAL with netCDF rotated pole formulation (#2187)
>
>  o io.hpp: avoid dependency to proj_json_streaming_writer.hpp (#2188)
>
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20200430/9076ce4f/attachment-0001.html>

