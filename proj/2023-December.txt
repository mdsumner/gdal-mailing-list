From charles.karney at gmail.com  Fri Dec  1 01:52:20 2023
From: charles.karney at gmail.com (Charles Karney)
Date: Fri, 1 Dec 2023 04:52:20 -0500
Subject: [PROJ] PROJ 9.3.1RC1 & PROJ-data 1.16RC1
In-Reply-To: <BBD6DA5E-101F-4F67-96FF-046FEF177C12@gmail.com>
References: <1335BDC3-CF7E-4F0E-8D03-53D653C2B346@gmail.com>
 <33cd508e-e19c-4dec-ba46-035ce9fb80be@spatialys.com>
 <BBD6DA5E-101F-4F67-96FF-046FEF177C12@gmail.com>
Message-ID: <a4ab7f2e-9649-4b9e-bd9a-6d1598e1dc63@alum.mit.edu>

+1
   --Charles

On 12/1/23 00:53, Kristian Evers via PROJ wrote:
> PSC members,
> 
> No issues have been reported with the two release candidates so I motion that they
> are promoted to final releases.
> 
> I?ll start with my +1.
> 
> /Kristian
> 
>> On 26 Nov 2023, at 20.01, Even Rouault <even.rouault at spatialys.com> wrote:
>>
>> Hi Kristian,
>>
>> The archives looks good to me.
>>
>> Even
>>
>> Le 26/11/2023 ? 17:48, Kristian Evers via PROJ a ?crit :
>>> All,
>>>
>>> It?s time for another round of releases, so in preparation for the final packages I have uploaded
>>>   release candidates for PROJ and PROJ-data. Download the archives here:
>>>
>>> https://download.osgeo.org/proj/proj-9.3.1RC1.tar.gz
>>> https://download.osgeo.org/proj/proj-9.3.1RC1.zip
>>>    https://download.osgeo.org/proj/proj-data-1.16RC1.tar.gz
>>> https://download.osgeo.org/proj/proj-data-1.16RC1.zip
>>>
>>> The PROJ release includes updates to the database contents and bug fixes. See the release notes below.
>>> The PROJ-data release adds the German geoid model GCG2016.
>>>
>>> Please test the release candidates and report any issues you may find with them. Either here
>>> on the mailing list or on GitHub.
>>>
>>> /Kristian
>>>
>>> ???????
>>>
>>> 9.3.1 Release Notes
>>> -------------------
>>>
>>>   Updates
>>>   -------
>>>
>>>   o Update to EPSG 10.098 (#3968)
>>>
>>>   o Update ESRI objects to v3.2.0 (#3944)
>>>
>>>   Bug fixes
>>>   ---------
>>>
>>>   o ITRF2008: fix wrong sign for 'dry' parameter of EURA and EURA_T  (#3870)
>>>
>>>   o Fix build error with MSVC 2019 in /std:c++20 on NN_NO_CHECK() (#3872)
>>>
>>>   o  ESRI WKT import: normalize GCS_unknown to unknown and D_unknown to unknown (#3874)
>>>
>>>   o CoordinateOperationFactory: deal with CompoundToCompound with a horizontal similarity
>>>     transformation and a ballpark vertical (#3881)
>>>
>>>   o Ellipsoid::_isEquivalentTo(): fix so that an ellipsoid of semi-major axis A (and
>>>     non-zero inv flattening) isn't equivalent to a sphere of radius A (#3882)
>>>
>>>   o isEquivalentTo(): make a datum name 'unknown' equivalent to another one (#3883)
>>>
>>>   o cs2cs: fix handling of input coordinates in grad (#3886)
>>>
>>>   o Make setargv.obj available on Universal Windows Platform (#3891)
>>>
>>>   o Allow opening proj.db with a URI (#3892)
>>>
>>>   o createOperations(): fix GeogCRS 3D with TOWGS84 to geocentric CRS (#3915)
>>>
>>>   o Fix test suite so that it can pass with ENABLE_TIFF=OFF (#3916)
>>>
>>>   o GeographicBoundingBox::intersects(): avoid infinite recursion and stack overflow
>>>     on invalid bounding boxes (#3919)
>>>
>>>   o Fix importing '+proj=topocentric ... +type=crs' by using a geocentric CRS as
>>>     the base CRS (#3924)
>>>
>>>   o Allow LOCAL_CS with 3 axes (#3928)
>>>
>>>   o WKT1 parser: in non-strict mode, accept missing UNIT[] in GEOGCS, GEOCCS,
>>>     PROJCS and VERT_CS elements (#3933)
>>>
>>>   o createOperations(): fix issue with a obscure case involving CompoundCRS of
>>>     unknown horizontal datum + boundCRS of vertical (#3934)
>>>
>>>   o createOperations(): fix bad PROJ pipeline when converting between Geog3D
>>>     with non-metre height to CompoundCRS (#3943)
>>>
>>>   o createOperations(): Fix possible null dereference on invalid WKT input (#3946)
>>>
>>>   o proj_factor: fix when input is a compound CRS of a projected CRS (#3950)
>>>
>>>   o pj_get_suggested_operation(): tune it to give correct result for RGAF09 to
>>>     RRAF 1991 / UTM zone 20N + Guadeloupe 1988 height transformation (#3954)
>>>
>>>   o Move static NameSpace::GLOBAL definition in static.cpp to avoid
>>>    'static initialization fiasco' (#3956)
>>>
>>>   o horner: allow arbitrary input type of coordinate (#3961)
>>>
>>> _______________________________________________
>>> PROJ mailing list
>>> PROJ at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/proj
>>
>> -- 
>> http://www.spatialys.com
>> My software is free, but my time generally not.
>>
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
Charles Karney <karney at alum.mit.edu>
702 Prospect Ave
Princeton, NJ 08540-4037

From j1 at jimenezshaw.com  Fri Dec  1 02:07:02 2023
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Fri, 1 Dec 2023 11:07:02 +0100
Subject: [PROJ] PROJ 9.3.1RC1 & PROJ-data 1.16RC1
In-Reply-To: <a4ab7f2e-9649-4b9e-bd9a-6d1598e1dc63@alum.mit.edu>
References: <1335BDC3-CF7E-4F0E-8D03-53D653C2B346@gmail.com>
 <33cd508e-e19c-4dec-ba46-035ce9fb80be@spatialys.com>
 <BBD6DA5E-101F-4F67-96FF-046FEF177C12@gmail.com>
 <a4ab7f2e-9649-4b9e-bd9a-6d1598e1dc63@alum.mit.edu>
Message-ID: <CADRrdKvjcJdHLZTD1BGu0Af57ZNpK9OuDu8jpGXnQ4F+Ej=fiQ@mail.gmail.com>

+1 Javier

On Fri, 1 Dec 2023 at 10:52, Charles Karney via PROJ <proj at lists.osgeo.org>
wrote:

> +1
>    --Charles
>
> On 12/1/23 00:53, Kristian Evers via PROJ wrote:
> > PSC members,
> >
> > No issues have been reported with the two release candidates so I motion
> that they
> > are promoted to final releases.
> >
> > I?ll start with my +1.
> >
> > /Kristian
> >
> >> On 26 Nov 2023, at 20.01, Even Rouault <even.rouault at spatialys.com>
> wrote:
> >>
> >> Hi Kristian,
> >>
> >> The archives looks good to me.
> >>
> >> Even
> >>
> >> Le 26/11/2023 ? 17:48, Kristian Evers via PROJ a ?crit :
> >>> All,
> >>>
> >>> It?s time for another round of releases, so in preparation for the
> final packages I have uploaded
> >>>   release candidates for PROJ and PROJ-data. Download the archives
> here:
> >>>
> >>> https://download.osgeo.org/proj/proj-9.3.1RC1.tar.gz
> >>> https://download.osgeo.org/proj/proj-9.3.1RC1.zip
> >>>    https://download.osgeo.org/proj/proj-data-1.16RC1.tar.gz
> >>> https://download.osgeo.org/proj/proj-data-1.16RC1.zip
> >>>
> >>> The PROJ release includes updates to the database contents and bug
> fixes. See the release notes below.
> >>> The PROJ-data release adds the German geoid model GCG2016.
> >>>
> >>> Please test the release candidates and report any issues you may find
> with them. Either here
> >>> on the mailing list or on GitHub.
> >>>
> >>> /Kristian
> >>>
> >>> ???????
> >>>
> >>> 9.3.1 Release Notes
> >>> -------------------
> >>>
> >>>   Updates
> >>>   -------
> >>>
> >>>   o Update to EPSG 10.098 (#3968)
> >>>
> >>>   o Update ESRI objects to v3.2.0 (#3944)
> >>>
> >>>   Bug fixes
> >>>   ---------
> >>>
> >>>   o ITRF2008: fix wrong sign for 'dry' parameter of EURA and EURA_T
> (#3870)
> >>>
> >>>   o Fix build error with MSVC 2019 in /std:c++20 on NN_NO_CHECK()
> (#3872)
> >>>
> >>>   o  ESRI WKT import: normalize GCS_unknown to unknown and D_unknown
> to unknown (#3874)
> >>>
> >>>   o CoordinateOperationFactory: deal with CompoundToCompound with a
> horizontal similarity
> >>>     transformation and a ballpark vertical (#3881)
> >>>
> >>>   o Ellipsoid::_isEquivalentTo(): fix so that an ellipsoid of
> semi-major axis A (and
> >>>     non-zero inv flattening) isn't equivalent to a sphere of radius A
> (#3882)
> >>>
> >>>   o isEquivalentTo(): make a datum name 'unknown' equivalent to
> another one (#3883)
> >>>
> >>>   o cs2cs: fix handling of input coordinates in grad (#3886)
> >>>
> >>>   o Make setargv.obj available on Universal Windows Platform (#3891)
> >>>
> >>>   o Allow opening proj.db with a URI (#3892)
> >>>
> >>>   o createOperations(): fix GeogCRS 3D with TOWGS84 to geocentric CRS
> (#3915)
> >>>
> >>>   o Fix test suite so that it can pass with ENABLE_TIFF=OFF (#3916)
> >>>
> >>>   o GeographicBoundingBox::intersects(): avoid infinite recursion and
> stack overflow
> >>>     on invalid bounding boxes (#3919)
> >>>
> >>>   o Fix importing '+proj=topocentric ... +type=crs' by using a
> geocentric CRS as
> >>>     the base CRS (#3924)
> >>>
> >>>   o Allow LOCAL_CS with 3 axes (#3928)
> >>>
> >>>   o WKT1 parser: in non-strict mode, accept missing UNIT[] in GEOGCS,
> GEOCCS,
> >>>     PROJCS and VERT_CS elements (#3933)
> >>>
> >>>   o createOperations(): fix issue with a obscure case involving
> CompoundCRS of
> >>>     unknown horizontal datum + boundCRS of vertical (#3934)
> >>>
> >>>   o createOperations(): fix bad PROJ pipeline when converting between
> Geog3D
> >>>     with non-metre height to CompoundCRS (#3943)
> >>>
> >>>   o createOperations(): Fix possible null dereference on invalid WKT
> input (#3946)
> >>>
> >>>   o proj_factor: fix when input is a compound CRS of a projected CRS
> (#3950)
> >>>
> >>>   o pj_get_suggested_operation(): tune it to give correct result for
> RGAF09 to
> >>>     RRAF 1991 / UTM zone 20N + Guadeloupe 1988 height transformation
> (#3954)
> >>>
> >>>   o Move static NameSpace::GLOBAL definition in static.cpp to avoid
> >>>    'static initialization fiasco' (#3956)
> >>>
> >>>   o horner: allow arbitrary input type of coordinate (#3961)
> >>>
> >>> _______________________________________________
> >>> PROJ mailing list
> >>> PROJ at lists.osgeo.org
> >>> https://lists.osgeo.org/mailman/listinfo/proj
> >>
> >> --
> >> http://www.spatialys.com
> >> My software is free, but my time generally not.
> >>
> >
> > _______________________________________________
> > PROJ mailing list
> > PROJ at lists.osgeo.org
> > https://lists.osgeo.org/mailman/listinfo/proj
>
> --
> Charles Karney <karney at alum.mit.edu>
> 702 Prospect Ave
> Princeton, NJ 08540-4037
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231201/3f0c8613/attachment-0001.htm>

From even.rouault at spatialys.com  Fri Dec  1 04:34:44 2023
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 1 Dec 2023 13:34:44 +0100
Subject: [PROJ] PROJ 9.3.1RC1 & PROJ-data 1.16RC1
In-Reply-To: <BBD6DA5E-101F-4F67-96FF-046FEF177C12@gmail.com>
References: <1335BDC3-CF7E-4F0E-8D03-53D653C2B346@gmail.com>
 <33cd508e-e19c-4dec-ba46-035ce9fb80be@spatialys.com>
 <BBD6DA5E-101F-4F67-96FF-046FEF177C12@gmail.com>
Message-ID: <a81644bc-2b0d-42f0-8197-9893f8efcec9@spatialys.com>

Le 01/12/2023 ? 06:53, Kristian Evers via PROJ a ?crit?:
> PSC members,
>
> No issues have been reported with the two release candidates so I motion that they
> are promoted to final releases.

+1 Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231201/6d982b47/attachment.htm>

From alansnow21 at gmail.com  Fri Dec  1 05:46:29 2023
From: alansnow21 at gmail.com (Alan Snow)
Date: Fri, 1 Dec 2023 07:46:29 -0600
Subject: [PROJ] PROJ 9.3.1RC1 & PROJ-data 1.16RC1
In-Reply-To: <BBD6DA5E-101F-4F67-96FF-046FEF177C12@gmail.com>
References: <1335BDC3-CF7E-4F0E-8D03-53D653C2B346@gmail.com>
 <33cd508e-e19c-4dec-ba46-035ce9fb80be@spatialys.com>
 <BBD6DA5E-101F-4F67-96FF-046FEF177C12@gmail.com>
Message-ID: <CAGybdFQmfWwVYwH266+Q61KD4x7x9GxnAGa18TrYmdEvnODTuA@mail.gmail.com>

+1 Alan

On Thu, Nov 30, 2023, 11:53 PM Kristian Evers via PROJ <proj at lists.osgeo.org>
wrote:

> PSC members,
>
> No issues have been reported with the two release candidates so I motion
> that they
> are promoted to final releases.
>
> I?ll start with my +1.
>
> /Kristian
>
> > On 26 Nov 2023, at 20.01, Even Rouault <even.rouault at spatialys.com>
> wrote:
> >
> > Hi Kristian,
> >
> > The archives looks good to me.
> >
> > Even
> >
> > Le 26/11/2023 ? 17:48, Kristian Evers via PROJ a ?crit :
> >> All,
> >>
> >> It?s time for another round of releases, so in preparation for the
> final packages I have uploaded
> >>  release candidates for PROJ and PROJ-data. Download the archives here:
> >>
> >> https://download.osgeo.org/proj/proj-9.3.1RC1.tar.gz
> >> https://download.osgeo.org/proj/proj-9.3.1RC1.zip
> >>   https://download.osgeo.org/proj/proj-data-1.16RC1.tar.gz
> >> https://download.osgeo.org/proj/proj-data-1.16RC1.zip
> >>
> >> The PROJ release includes updates to the database contents and bug
> fixes. See the release notes below.
> >> The PROJ-data release adds the German geoid model GCG2016.
> >>
> >> Please test the release candidates and report any issues you may find
> with them. Either here
> >> on the mailing list or on GitHub.
> >>
> >> /Kristian
> >>
> >> ???????
> >>
> >> 9.3.1 Release Notes
> >> -------------------
> >>
> >>  Updates
> >>  -------
> >>
> >>  o Update to EPSG 10.098 (#3968)
> >>
> >>  o Update ESRI objects to v3.2.0 (#3944)
> >>
> >>  Bug fixes
> >>  ---------
> >>
> >>  o ITRF2008: fix wrong sign for 'dry' parameter of EURA and EURA_T
> (#3870)
> >>
> >>  o Fix build error with MSVC 2019 in /std:c++20 on NN_NO_CHECK() (#3872)
> >>
> >>  o  ESRI WKT import: normalize GCS_unknown to unknown and D_unknown to
> unknown (#3874)
> >>
> >>  o CoordinateOperationFactory: deal with CompoundToCompound with a
> horizontal similarity
> >>    transformation and a ballpark vertical (#3881)
> >>
> >>  o Ellipsoid::_isEquivalentTo(): fix so that an ellipsoid of semi-major
> axis A (and
> >>    non-zero inv flattening) isn't equivalent to a sphere of radius A
> (#3882)
> >>
> >>  o isEquivalentTo(): make a datum name 'unknown' equivalent to another
> one (#3883)
> >>
> >>  o cs2cs: fix handling of input coordinates in grad (#3886)
> >>
> >>  o Make setargv.obj available on Universal Windows Platform (#3891)
> >>
> >>  o Allow opening proj.db with a URI (#3892)
> >>
> >>  o createOperations(): fix GeogCRS 3D with TOWGS84 to geocentric CRS
> (#3915)
> >>
> >>  o Fix test suite so that it can pass with ENABLE_TIFF=OFF (#3916)
> >>
> >>  o GeographicBoundingBox::intersects(): avoid infinite recursion and
> stack overflow
> >>    on invalid bounding boxes (#3919)
> >>
> >>  o Fix importing '+proj=topocentric ... +type=crs' by using a
> geocentric CRS as
> >>    the base CRS (#3924)
> >>
> >>  o Allow LOCAL_CS with 3 axes (#3928)
> >>
> >>  o WKT1 parser: in non-strict mode, accept missing UNIT[] in GEOGCS,
> GEOCCS,
> >>    PROJCS and VERT_CS elements (#3933)
> >>
> >>  o createOperations(): fix issue with a obscure case involving
> CompoundCRS of
> >>    unknown horizontal datum + boundCRS of vertical (#3934)
> >>
> >>  o createOperations(): fix bad PROJ pipeline when converting between
> Geog3D
> >>    with non-metre height to CompoundCRS (#3943)
> >>
> >>  o createOperations(): Fix possible null dereference on invalid WKT
> input (#3946)
> >>
> >>  o proj_factor: fix when input is a compound CRS of a projected CRS
> (#3950)
> >>
> >>  o pj_get_suggested_operation(): tune it to give correct result for
> RGAF09 to
> >>    RRAF 1991 / UTM zone 20N + Guadeloupe 1988 height transformation
> (#3954)
> >>
> >>  o Move static NameSpace::GLOBAL definition in static.cpp to avoid
> >>   'static initialization fiasco' (#3956)
> >>
> >>  o horner: allow arbitrary input type of coordinate (#3961)
> >>
> >> _______________________________________________
> >> PROJ mailing list
> >> PROJ at lists.osgeo.org
> >> https://lists.osgeo.org/mailman/listinfo/proj
> >
> > --
> > http://www.spatialys.com
> > My software is free, but my time generally not.
> >
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231201/d539493c/attachment.htm>

From kristianevers at gmail.com  Fri Dec  1 10:49:10 2023
From: kristianevers at gmail.com (Kristian Evers)
Date: Fri, 1 Dec 2023 19:49:10 +0100
Subject: [PROJ] PROJ 9.3.1RC1 & PROJ-data 1.16RC1
In-Reply-To: <CAGybdFQmfWwVYwH266+Q61KD4x7x9GxnAGa18TrYmdEvnODTuA@mail.gmail.com>
References: <1335BDC3-CF7E-4F0E-8D03-53D653C2B346@gmail.com>
 <33cd508e-e19c-4dec-ba46-035ce9fb80be@spatialys.com>
 <BBD6DA5E-101F-4F67-96FF-046FEF177C12@gmail.com>
 <CAGybdFQmfWwVYwH266+Q61KD4x7x9GxnAGa18TrYmdEvnODTuA@mail.gmail.com>
Message-ID: <C43BC7DE-6F39-4B74-9612-FAFBEE431FB3@gmail.com>

I declare the motion passed with +1?s from

Kristian
Thomas
Charles
Javier
Even
Alan

Expect a release announcement soon.

/Kristian

> On 1 Dec 2023, at 14.46, Alan Snow via PROJ <proj at lists.osgeo.org> wrote:
> 
> +1 Alan
> 
> On Thu, Nov 30, 2023, 11:53 PM Kristian Evers via PROJ <proj at lists.osgeo.org <mailto:proj at lists.osgeo.org>> wrote:
> PSC members,
> 
> No issues have been reported with the two release candidates so I motion that they
> are promoted to final releases. 
> 
> I?ll start with my +1.
> 
> /Kristian
> 
> > On 26 Nov 2023, at 20.01, Even Rouault <even.rouault at spatialys.com <mailto:even.rouault at spatialys.com>> wrote:
> > 
> > Hi Kristian,
> > 
> > The archives looks good to me.
> > 
> > Even
> > 
> > Le 26/11/2023 ? 17:48, Kristian Evers via PROJ a ?crit :
> >> All,
> >> 
> >> It?s time for another round of releases, so in preparation for the final packages I have uploaded
> >>  release candidates for PROJ and PROJ-data. Download the archives here:
> >> 
> >> https://download.osgeo.org/proj/proj-9.3.1RC1.tar.gz <https://download.osgeo.org/proj/proj-9.3.1RC1.tar.gz>
> >> https://download.osgeo.org/proj/proj-9.3.1RC1.zip <https://download.osgeo.org/proj/proj-9.3.1RC1.zip>
> >>   https://download.osgeo.org/proj/proj-data-1.16RC1.tar.gz <https://download.osgeo.org/proj/proj-data-1.16RC1.tar.gz>
> >> https://download.osgeo.org/proj/proj-data-1.16RC1.zip <https://download.osgeo.org/proj/proj-data-1.16RC1.zip>
> >> 
> >> The PROJ release includes updates to the database contents and bug fixes. See the release notes below.
> >> The PROJ-data release adds the German geoid model GCG2016.
> >> 
> >> Please test the release candidates and report any issues you may find with them. Either here
> >> on the mailing list or on GitHub.
> >> 
> >> /Kristian
> >> 
> >> ???????
> >> 
> >> 9.3.1 Release Notes
> >> -------------------
> >> 
> >>  Updates
> >>  -------
> >> 
> >>  o Update to EPSG 10.098 (#3968)
> >> 
> >>  o Update ESRI objects to v3.2.0 (#3944)
> >> 
> >>  Bug fixes
> >>  ---------
> >> 
> >>  o ITRF2008: fix wrong sign for 'dry' parameter of EURA and EURA_T  (#3870)
> >> 
> >>  o Fix build error with MSVC 2019 in /std:c++20 on NN_NO_CHECK() (#3872)
> >> 
> >>  o  ESRI WKT import: normalize GCS_unknown to unknown and D_unknown to unknown (#3874)
> >> 
> >>  o CoordinateOperationFactory: deal with CompoundToCompound with a horizontal similarity
> >>    transformation and a ballpark vertical (#3881)
> >> 
> >>  o Ellipsoid::_isEquivalentTo(): fix so that an ellipsoid of semi-major axis A (and
> >>    non-zero inv flattening) isn't equivalent to a sphere of radius A (#3882)
> >> 
> >>  o isEquivalentTo(): make a datum name 'unknown' equivalent to another one (#3883)
> >> 
> >>  o cs2cs: fix handling of input coordinates in grad (#3886)
> >> 
> >>  o Make setargv.obj available on Universal Windows Platform (#3891)
> >> 
> >>  o Allow opening proj.db with a URI (#3892)
> >> 
> >>  o createOperations(): fix GeogCRS 3D with TOWGS84 to geocentric CRS (#3915)
> >> 
> >>  o Fix test suite so that it can pass with ENABLE_TIFF=OFF (#3916)
> >> 
> >>  o GeographicBoundingBox::intersects(): avoid infinite recursion and stack overflow
> >>    on invalid bounding boxes (#3919)
> >> 
> >>  o Fix importing '+proj=topocentric ... +type=crs' by using a geocentric CRS as
> >>    the base CRS (#3924)
> >> 
> >>  o Allow LOCAL_CS with 3 axes (#3928)
> >> 
> >>  o WKT1 parser: in non-strict mode, accept missing UNIT[] in GEOGCS, GEOCCS,
> >>    PROJCS and VERT_CS elements (#3933)
> >> 
> >>  o createOperations(): fix issue with a obscure case involving CompoundCRS of
> >>    unknown horizontal datum + boundCRS of vertical (#3934)
> >> 
> >>  o createOperations(): fix bad PROJ pipeline when converting between Geog3D
> >>    with non-metre height to CompoundCRS (#3943)
> >> 
> >>  o createOperations(): Fix possible null dereference on invalid WKT input (#3946)
> >> 
> >>  o proj_factor: fix when input is a compound CRS of a projected CRS (#3950)
> >> 
> >>  o pj_get_suggested_operation(): tune it to give correct result for RGAF09 to
> >>    RRAF 1991 / UTM zone 20N + Guadeloupe 1988 height transformation (#3954)
> >> 
> >>  o Move static NameSpace::GLOBAL definition in static.cpp to avoid
> >>   'static initialization fiasco' (#3956)
> >> 
> >>  o horner: allow arbitrary input type of coordinate (#3961)
> >> 
> >> _______________________________________________
> >> PROJ mailing list
> >> PROJ at lists.osgeo.org <mailto:PROJ at lists.osgeo.org>
> >> https://lists.osgeo.org/mailman/listinfo/proj <https://lists.osgeo.org/mailman/listinfo/proj>
> > 
> > -- 
> > http://www.spatialys.com <http://www.spatialys.com/>
> > My software is free, but my time generally not.
> > 
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org <mailto:PROJ at lists.osgeo.org>
> https://lists.osgeo.org/mailman/listinfo/proj <https://lists.osgeo.org/mailman/listinfo/proj>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231201/3a9e5b61/attachment-0001.htm>

From kristianevers at gmail.com  Fri Dec  1 11:47:59 2023
From: kristianevers at gmail.com (Kristian Evers)
Date: Fri, 1 Dec 2023 20:47:59 +0100
Subject: [PROJ] PROJ 9.3.1 & PROJ-data 1.16
Message-ID: <8C6D0D79-88E0-464A-A36E-AAAFCCDDB590@gmail.com>

I'm happy to announce the release of PROJ 9.3.1 and PROJ-data 1.16!

The PROJ release includes updates to the the database contents, as well as
a number of bug fixes. See the release notes below.
  
The PROJ-data release adds the German geoid model GCG2016.

Download the archives here: 

http://download.osgeo.org/proj/proj-9.3.1.tar.gz 
http://download.osgeo.org/proj/proj-9.3.1.zip 

http://download.osgeo.org/proj/proj-data-1.16.tar.gz
http://download.osgeo.org/proj/proj-data-1.16.zip /Kristian 

/Kristian

????????

9.3.1 Release Notes
-------------------

 Updates
 -------

 o Update to EPSG 10.098 (#3968)

 o Update ESRI objects to v3.2.0 (#3944)

 Bug fixes
 ---------

 o ITRF2008: fix wrong sign for 'dry' parameter of EURA and EURA_T  (#3870)

 o Fix build error with MSVC 2019 in /std:c++20 on NN_NO_CHECK() (#3872)

 o  ESRI WKT import: normalize GCS_unknown to unknown and D_unknown to unknown (#3874)

 o CoordinateOperationFactory: deal with CompoundToCompound with a horizontal similarity
   transformation and a ballpark vertical (#3881)

 o Ellipsoid::_isEquivalentTo(): fix so that an ellipsoid of semi-major axis A (and
   non-zero inv flattening) isn't equivalent to a sphere of radius A (#3882)

 o isEquivalentTo(): make a datum name 'unknown' equivalent to another one (#3883)

 o cs2cs: fix handling of input coordinates in grad (#3886)

 o Make setargv.obj available on Universal Windows Platform (#3891)

 o Allow opening proj.db with a URI (#3892)

 o createOperations(): fix GeogCRS 3D with TOWGS84 to geocentric CRS (#3915)

 o Fix test suite so that it can pass with ENABLE_TIFF=OFF (#3916)

 o GeographicBoundingBox::intersects(): avoid infinite recursion and stack overflow
   on invalid bounding boxes (#3919)

 o Fix importing '+proj=topocentric ... +type=crs' by using a geocentric CRS as
   the base CRS (#3924)

 o Allow LOCAL_CS with 3 axes (#3928)

 o WKT1 parser: in non-strict mode, accept missing UNIT[] in GEOGCS, GEOCCS,
   PROJCS and VERT_CS elements (#3933)

 o createOperations(): fix issue with a obscure case involving CompoundCRS of
   unknown horizontal datum + boundCRS of vertical (#3934)

 o createOperations(): fix bad PROJ pipeline when converting between Geog3D
   with non-metre height to CompoundCRS (#3943)

 o createOperations(): Fix possible null dereference on invalid WKT input (#3946)

 o proj_factor: fix when input is a compound CRS of a projected CRS (#3950)

 o pj_get_suggested_operation(): tune it to give correct result for RGAF09 to
   RRAF 1991 / UTM zone 20N + Guadeloupe 1988 height transformation (#3954)

 o Move static NameSpace::GLOBAL definition in static.cpp to avoid
  'static initialization fiasco' (#3956)

 o horner: allow arbitrary input type of coordinate (#3961)


From simon.eves at heavy.ai  Fri Dec  8 15:51:06 2023
From: simon.eves at heavy.ai (Simon Eves)
Date: Fri, 8 Dec 2023 15:51:06 -0800
Subject: [PROJ] Clarification on required contents of PROJ_DATA dir please
Message-ID: <CAJf0KTQjxv9sH6oLL_7r+UZamB4ALot8w9omG9-TgW9x4ZeUEA@mail.gmail.com>

Our system has used PROJ and GDAL for years, and I have been on the GDAL
dev list for a long time, but only just joined this one.

We do not currently redistribute anything from the separate *proj-data*
bundle, only the basic set of files that end up in *.../share* from a PROJ
make/install (*proj.db* and about 15 others, e.g. *nad83*)

This perhaps dates from when the full set of files was included in the main
bundle, but that is before my time, and obviously they have been split out
by you into a separate bundle for quite some time now, presumably because
of their size.

We have never had any issues (that we know of!) with failing to interpret
client data files, so evidently PROJ manages quite happily without the
additional files from the *proj-data* bundle but perhaps we should be
redistributing those as well?

If so, do we just combine the two sets of files into the same *PROJ_DATA*
directory?

Forgive me if there is documentation on this specific topic which I have
missed.

Finally, is the latest *proj-data-1.16* compatible with PROJ 9.3.0 (which
we have frozen on for our latest dependencies update) or must we use the
previous 1.14 from June? ...and what happened to 1.15? :)

Thanks in advance.

-- 
Simon Eves
Senior Rendering Engineer
+1 (415) 902-1996
simon.eves at heavy.ai

<http://www.heavy.ai>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231208/74ba90d3/attachment.htm>

From even.rouault at spatialys.com  Fri Dec  8 16:07:38 2023
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 9 Dec 2023 01:07:38 +0100
Subject: [PROJ] Clarification on required contents of PROJ_DATA dir
 please
In-Reply-To: <CAJf0KTQjxv9sH6oLL_7r+UZamB4ALot8w9omG9-TgW9x4ZeUEA@mail.gmail.com>
References: <CAJf0KTQjxv9sH6oLL_7r+UZamB4ALot8w9omG9-TgW9x4ZeUEA@mail.gmail.com>
Message-ID: <d478cc56-596c-4780-ae3c-e8daac2aba14@spatialys.com>

Simon,


> We do not currently redistribute anything from the separate 
> *proj-data* bundle, only the basic set of files that end up in 
> *.../share* from a PROJ make/install (*proj.db* and about 15 others, 
> e.g. *nad83*)
Well, hopefully you don't need to do accurate datum transformations ;-)
>
> This perhaps dates from when the full set of files?was included in the 
> main bundle,?but that is before my time,?and obviously they have been 
> split out by you into a separate bundle for quite some time now, 
> presumably because of their size.
yes
>
> We have never had any issues (that we know of!) with failing to 
> interpret client data files, so evidently PROJ manages quite happily 
> without the additional files from the *proj-data* bundle but perhaps 
> we should be redistributing those as well?

PROJ will never error out about missing grid files by default, unless 
you set PROJ_ONLY_BEST_DEFAULT=YES ( Cf 
https://proj.org/en/9.3/apps/cs2cs.html#index-0) , or equivalent setting 
through proj.ini or the API (accessible 
from?OGRCoordinateTransformationOptions::SetOnlyBest () in GDAL: 
https://gdal.org/doxygen/structOGRCoordinateTransformationOptions.html#a77fffa9f5f421c21c9104f6ba03885a5 
, or OCTCoordinateTransformationOptionsSetOnlyBest(): 
https://gdal.org/api/ogr_srs_api.html#_CPPv445OCTCoordinateTransformationOptionsSetOnlyBest35OGRCoordinateTransformationOptionsHb) 
.

If a grid is missing, in the default mode (only_best=no)n PROJ will 
fallback to whatever other less precise transformations it has, or do a 
"ballpark" transformation (no-op) in the worse case, which can be off by 
several tens of meters or more.

>
> If so, do we just combine the two sets of files into the same 
> *PROJ_DATA* directory?

Yes, you can have proj.db and the grids in the same directory. Or have 
different directories and mention them in PROJ_DATA using ';' separator 
on Windows, or ':' on Unix-like systems. (same convention as PATH). Cf 
https://proj.org/en/9.3/usage/environmentvars.html#envvar-PROJ_DATA


> Forgive me if there is documentation on this specific topic which I 
> have missed.
>
> Finally, is the latest *proj-data-1.16* compatible with PROJ 9.3.0 
> (which we have frozen on for our latest dependencies update) or must 
> we use the previous 1.14 from June? ...

Yes, that should work. Only new content has been added

> and what happened to 1.15? :)

proj-data 1.15 was released together with 9.3.0, and proj-data 1.14 with 
proj 9.2.1

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231209/17e46216/attachment.htm>

From rhea.moubarak at gmail.com  Tue Dec 12 04:24:36 2023
From: rhea.moubarak at gmail.com (Rhea)
Date: Tue, 12 Dec 2023 13:24:36 +0100
Subject: [PROJ] Is there a difference in the definition of a projection
 between postgis 2 and 3 ?
In-Reply-To: <095AC687-A8C4-4CFA-8E5E-1AA3498937BE@gmail.com>
References: <EC057FE6-F301-43D8-AAE2-83873B029DB8@gmail.com>
 <ffd87d77-797d-6e5e-eaab-dac0eb2f334b@spatialys.com>
 <86AC5426-0048-4D6E-A779-E9F6C2144D12@gmail.com>
 <095AC687-A8C4-4CFA-8E5E-1AA3498937BE@gmail.com>
Message-ID: <7DC3CF4E-C783-497A-8ED5-67CBCBBFF42A@gmail.com>

Hello again,

We finally managed to fix the solution in our installation.

File missing from the package: cdn.proj.org/fr_ign_ntf_r93.tif to be deposited in the PROJ installation directory for Centos/RHEL 8 (we deposited it via Filezilla in /tmp, and then copied it to the PROJ82 directory) 

bash 
#root mv /tmp/frignntf_r93.tif /usr/proj82/share/proj/ 
#root chmod 644 /usr/proj82/share/proj/frignntf_r93.tif 

Sources: proj.org/en/9.3/community/rfc/rfc-4.html blog.cleverelephant.ca/2023/02/proj-network.html cdn.proj.org 
This solution was implemented by INTM for ENEDIS.

Let me know if this is useful.

Regards,
Rhea

> On 18 Oct 2023, at 4:28?PM, Rhea <rhea.moubarak at gmail.com> wrote:
> 
> hello again,
> 
> we are still facing the same problem on our CentOS machines.
> 
> do you have any idea what could be the issue?
> 
> Thank you again for your help.
> 
> Best,
> Rhea
> 
>> On 15 Sep 2023, at 11:43?AM, Rhea <rhea.moubarak at gmail.com> wrote:
>> 
>> Hi,
>> 
>> Sorry for taking the time to get back to you.
>> 
>> We tested and it doesn't work. We still have the offset on the coordinates.
>> 
>> I think the problem is with this file:
>> 
>> https://github.com/OSGeo/proj-datumgrid/blob/master/ntf_r93.gsb
>> 
>> in the project folder, the file that we have is probably not the best one.
>> 
>> To install the file again, is there a projection package?
>> 
>> Before we had a projection package with this file: dnf install *proj*, does this still exist?
>> 
>> Thank you for your help.
>> 
>> Best,
>> Rhea
>> 
>>> On 5 Sep 2023, at 12:51 PM, Even Rouault <even.rouault at spatialys.com> wrote:
>>> 
>>> Hi,
>>> The WKT1 string for your IGNF:LAMB1 contains latitude_of_origin = 49.5. But this is wrong. This is the value in degree, but it should be expressed in grads as the GEOGCS unit is grad (cf https://gdal.org/tutorials/wktproblems.html#units-of-parameters), so 55 grad
>>> The correct WKT definition to use is:
>>> PROJCS["NTF Lambert I",
>>>     GEOGCS["NTF geographiques Paris (gr)",
>>>         DATUM["Nouvelle_Triangulation_Francaise_Paris",
>>>             SPHEROID["Clarke 1880 (IGN)",6378249.2,293.466021293627,
>>>                 AUTHORITY["EPSG","7011"]],
>>>             AUTHORITY["EPSG","6807"]],
>>>         PRIMEM["Paris",2.33722917,
>>>             AUTHORITY["EPSG","8903"]],
>>>         UNIT["grad",0.0157079632679489,
>>>             AUTHORITY["EPSG","9105"]],
>>>         AUTHORITY["IGNF","NTFPGRAD"]],
>>>     PROJECTION["Lambert_Conformal_Conic_1SP"],
>>>     PARAMETER["latitude_of_origin",55],
>>>     PARAMETER["central_meridian",0],
>>>     PARAMETER["scale_factor",0.99987734],
>>>     PARAMETER["false_easting",600000],
>>>     PARAMETER["false_northing",200000],
>>>     UNIT["metre",1,
>>>         AUTHORITY["EPSG","9001"]],
>>>     AXIS["Easting",EAST],
>>>     AXIS["Northing",NORTH],
>>>     AUTHORITY["IGNF","LAMB1"]]
>>> With recent PROJ, I get the correct value when using the proj.4 string or the corrected WKT1 definition (got from "projinfo IGNF:LAMB1 -o WKT1:GDAL")
>>> $ echo 398845.80866241 6822815.8927889 | PROJ_DATA=data PROJ_NETWORK=ON bin/cs2cs EPSG:2154 +to +proj=lcc +nadgrids=ntf_r93.gsb,null +a=6378249.2000 +rf=293.4660210000000 +pm=2.337229167 +lat_0=49.500000000 +lon_0=0.000000000 +k_0=0.99987734 +lat_1=49.500000000 +x_0=600000.000 +y_0=200000.000 +units=m +no_defs
>>> 347762.11    87364.03 0.00
>>> $ echo 398845.80866241 6822815.8927889 | PROJ_DATA=data PROJ_NETWORK=ON bin/cs2cs EPSG:2154 'PROJCS["NTF Lambert I",GEOGCS["NTF geographiques Paris (gr)",DATUM["Nouvelle_Triangulation_Francaise_Paris",SPHEROID["Clarke 1880 (IGN)",6378249.2,293.466021293627,AUTHORITY["EPSG","7011"]],AUTHORITY["EPSG","6807"]],PRIMEM["Paris",2.33722917,AUTHORITY["EPSG","8903"]],UNIT["grad",0.0157079632679489,AUTHORITY["EPSG","9105"]],AUTHORITY["IGNF","NTFPGRAD"]],PROJECTION["Lambert_Conformal_Conic_1SP"],PARAMETER["latitude_of_origin",55],PARAMETER["central_meridian",0],PARAMETER["scale_factor",0.99987734],PARAMETER["false_easting",600000],PARAMETER["false_northing",200000],UNIT["metre",1,AUTHORITY["EPSG","9001"]],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["IGNF","LAMB1"]]'
>>> 347762.11    87364.03 0.00
>>> Even
>>> Le 05/09/2023 ? 12:19, Rhea a ?crit :
>>>> hello, 
>>>> I am using this definition for my projection on both postgis 2 and postgis 3 so i can use it in my st_transform() function:
>>>> 
>>>> INSERT into spatial_ref_sys (srid, auth_name, auth_srid, proj4text, srtext) values ( 932001, 'IGNF' , 320002101 , '+proj=lcc +nadgrids=ntf_r93.gsb,null +a=6378249.2000 +rf=293.4660210000000 +pm=2.337229167 +lat_0=49.500000000 +lon_0=0.000000000 +k_0=0.99987734 +lat_1=49.500000000 +x_0=600000.000 +y_0=200000.000 +units=m +no_defs' , 'PROJCS["Lambert I",GEOGCS["Nouvelle Triangulation Fran?aise Paris grades",DATUM["NTF",SPHEROID["Clarke 1880 IGN",6378249.2000,293.4660210000000,AUTHORITY["IGNF","ELG010"]],TOWGS84[-168.0000,-60.0000,320.0000,0,0,0,0],AUTHORITY["IGNF","REG002"]],PRIMEM["Paris",2.337229167,AUTHORITY["IGNF","LGO02"]],UNIT["grad",0.01570796326794897],AXIS["Longitude",EAST],AXIS["Latitude",NORTH],AUTHORITY["IGNF","NTFP"]],PROJECTION["Lambert_Conformal_Conic_1SP",AUTHORITY["IGNF","PRC0101"]],PARAMETER["semi_major",6378249.2000],PARAMETER["semi_minor",6356515.0000],PARAMETER["latitude_of_origin",49.500000000],PARAMETER["central_meridian",0.000000000],PARAMETER["scale_factor",0.99987734],PARAMETER["false_easting",600000.000],PARAMETER["false_northing",200000.000],UNIT["metre",1],AXIS["Easting",EAST],AXIS["Northing",NORTH],AUTHORITY["IGNF","LAMB1"]]?);
>>>> 
>>>> This projection 932001 corresponds to Lambert Zone 1 corrected with the IGN grid.
>>>> This is the function where im using this projection :
>>>> select st_astext(st_transform(st_setsrid(st_point(398845.80866241, 6822815.8927889), 2154), 932001))
>>>> On our PostgreSQL 10 / PostGIS 2.x machine, i am getting this: 
>>>> POINT(347762.11171084 87364.0318659853)
>>>> 
>>>> While in PostgresQL 13 / PostGIS 3.x, i am getting this (result which is incorrect):
>>>> POINT(347200.5307476731 637506.2948565462)
>>>> Result of the query select postgis_full_version(); on our 2 environments:
>>>> 
>>>> PostgreSQL 10 : POSTGIS="2.4.7 r17330" PGSQL="100" GEOS="3.7.1-CAPI-1.11.1 27a5e771" PROJ="Rel. 4.9.3, 15 August 2016" GDAL="GDAL 2.3.2, released 2018/09/21" LIBXML="2.9.1" LIBJSON="0.11" RASTER
>>>> 
>>>> 
>>>> 
>>>> 
>>>> PostgresSQL 13 : POSTGIS="3.1.8 c5ebc1f" [EXTENSION] PGSQL="130" GEOS="3.10.3-CAPI-1.16.1" PROJ="8.2.1" LIBXML="2.9.7" LIBJSON="0.13.1" LIBPROTOBUF="1.3.0" WAGYU="0.5.0 (Internal)? TOPOLOGY
>>>> I tried using fr_ign_ntf_r93.tif instead of the ntf_r93.gsb but it didnt work, i got the same results.
>>>> I tried verifying that the ntf_r93.gsb or the  fr_ign_ntf_r93.tif are located in usr/share/proj/ directory and they do but yet im getting the same results.
>>>> can anyone help me please?
>>>> Thank you so much !
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> 
>>>> _______________________________________________
>>>> PROJ mailing list
>>>> PROJ at lists.osgeo.org
>>>> https://lists.osgeo.org/mailman/listinfo/proj
>>>> 
>>> -- 
>>> http://www.spatialys.com
>>> My software is free, but my time generally not.
>> 
> 


From Jochem.Lesparre at kadaster.nl  Thu Dec 14 05:13:28 2023
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Thu, 14 Dec 2023 13:13:28 +0000
Subject: [PROJ] Make push and pop FIFO?
Message-ID: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>

Hi list members,

The PROJ operations +proj=push and +proj=pop use "last in, first out" (LIFO) to store and retrieve coordinate values in a stack. It seems that I need "first in, first out" (FIFO) or other new functionality in PROJ.

Problem
The Dutch Caribbean islands use TM-projections based on old datums. We have an exact Helmert transformation per island that transforms the horizontal coordinates to an ITRS realisation at a specific epoch. For some islands we need a geoid (EGM2008 sampled at 45" is the best we have at the moment) for the height transformation from local levelling heights to ITRS. That works fine for a forward transformation with this PROJ pipeline:

cct +proj=pipeline
+step +proj=push +v_3
+step +proj=tmerc +inv +lat_0=12.180658675 +lon_0=-68.251802281 +k_0=1 +x_0=23209.5600 +y_0=21423.9900 +ellps=intl
+step +proj=cart +ellps=intl
+step +proj=helmert +x=-366.1939 +y=-115.0688 +z=-776.7039 +rx=20.963080 +ry=16.462749 +rz=-14.276379 +s=-12.80900 +convention=coordinate_frame +exact
+step +proj=cart +inv +ellps=GRS80
+step +proj=pop +v_3
+step +proj=vgridshift +grids=egm2008_0_45.tif +inv

However, I do not get exactly the same results for the inverse transformation with -I, since I apply the geoid on the ITRS coordinates, but then the physical height is used for the Helmert transformation instead of the correct ellipsoidal height. This gives a small error in the horizontal coordinates in this case, but can easily reach more than 50 metres for other CRSs.

Solution
The most elegant solution seems to me to use FIFO for operations +proj=push and +proj=pop, so I can use this pipeline:

cct +proj=pipeline
+step +proj=push +v_3
+step +proj=tmerc +inv +lat_0=12.180658675 +lon_0=-68.251802281 +k_0=1 +x_0=23209.5600 +y_0=21423.9900 +ellps=intl
+step +proj=cart +ellps=intl
+step +proj=helmert +x=-366.1939 +y=-115.0688 +z=-776.7039 +rx=20.963080 +ry=16.462749 +rz=-14.276379 +s=-12.80900 +convention=coordinate_frame +exact
+step +proj=cart +inv +ellps=GRS80
+step +proj=push +v_3
+step +proj=pop +v_3
+step +proj=vgridshift +grids=egm2008_0_45.tif +inv
+step +proj=pop +v_3 +omit_fwd

Alternative
Another possible solution is a new PROJ operation e.g. +proj=flip to make the values of a coordinate value and the value stored in the stack switch places.

cct -I +proj=pipeline
+step +proj=push +v_3
+step +proj=utm +zone=19 +inv +ellps=intl
+step +proj=cart +ellps=intl
+step +proj=helmert +x=-366.1939 +y=-115.0688 +z=-776.7039 +rx=20.963080 +ry=16.462749 +rz=-14.276379 +s=-12.80900 +convention=coordinate_frame +exact
+step +proj=cart +inv +ellps=GRS80
+step +proj=flip +v_3
+step +proj=vgridshift +grids=egm96_15.tif +inv
+step +proj=pop +v_3 +omit_fwd

Regards, Jochem



Disclaimer:
De inhoud van deze e-mail is vertrouwelijk en uitsluitend bestemd voor de geadresseerde(n).
Gebruik, openbaarmaking, vermenigvuldiging, verspreiding en/of verstrekking van deze informatie aan derden is niet toegestaan.
Op al onze producten en diensten zijn onze algemene leveringsvoorwaarden van toepassing
[https://www.kadaster.nl/algemene-leveringsvoorwaarden].

Disclaimer:
This email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed.
If you are not the intended recipient, you are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited.
Our general terms and conditions of delivery apply to all our products and services
[https://www.kadaster.com/general-terms-and-conditions].
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231214/bbbe18e9/attachment.htm>

From knudsen.thomas at gmail.com  Thu Dec 14 10:14:51 2023
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Thu, 14 Dec 2023 19:14:51 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
Message-ID: <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>

If your input data does not need time stamps, you may be able to work
around this using +omit_fwd/+omit_inv selectors and a set of
axisswap order=1,2,4,3 steps?

Den tors. 14. dec. 2023 kl. 14.13 skrev Lesparre, Jochem via PROJ <
proj at lists.osgeo.org>:

> Hi list members,
>
>
>
> The PROJ operations +proj=push and +proj=pop use "last in, first out"
> (LIFO) to store and retrieve coordinate values in a stack. It seems that I
> need "first in, first out" (FIFO) or other new functionality in PROJ.
>
>
>
> *Problem*
>
> The Dutch Caribbean islands use TM-projections based on old datums. We
> have an exact Helmert transformation per island that transforms the
> horizontal coordinates to an ITRS realisation at a specific epoch. For some
> islands we need a geoid (EGM2008 sampled at 45? is the best we have at the
> moment) for the height transformation from local levelling heights to ITRS.
> That works fine for a forward transformation with this PROJ pipeline:
>
>
>
> cct +proj=pipeline
>
> +step +proj=push +v_3
>
> +step +proj=tmerc +inv +lat_0=12.180658675 +lon_0=-68.251802281 +k_0=1
> +x_0=23209.5600 +y_0=21423.9900 +ellps=intl
>
> +step +proj=cart +ellps=intl
>
> +step +proj=helmert +x=-366.1939 +y=-115.0688 +z=-776.7039 +rx=20.963080
> +ry=16.462749 +rz=-14.276379 +s=-12.80900 +convention=coordinate_frame
> +exact
>
> +step +proj=cart +inv +ellps=GRS80
>
> +step +proj=pop +v_3
>
> +step +proj=vgridshift +grids=egm2008_0_45.tif +inv
>
>
>
> However, I do not get exactly the same results for the inverse
> transformation with -I, since I apply the geoid on the ITRS coordinates,
> but then the physical height is used for the Helmert transformation instead
> of the correct ellipsoidal height. This gives a small error in the
> horizontal coordinates in this case, but can easily reach more than 50
> metres for other CRSs.
>
>
>
> *Solution*
>
> The most elegant solution seems to me to use FIFO for operations
> +proj=push and +proj=pop, so I can use this pipeline:
>
>
>
> cct +proj=pipeline
>
> +step +proj=push +v_3
>
> +step +proj=tmerc +inv +lat_0=12.180658675 +lon_0=-68.251802281 +k_0=1
> +x_0=23209.5600 +y_0=21423.9900 +ellps=intl
>
> +step +proj=cart +ellps=intl
>
> +step +proj=helmert +x=-366.1939 +y=-115.0688 +z=-776.7039 +rx=20.963080
> +ry=16.462749 +rz=-14.276379 +s=-12.80900 +convention=coordinate_frame
> +exact
>
> +step +proj=cart +inv +ellps=GRS80
>
> +step +proj=push +v_3
>
> *+step +proj=pop +v_3 *
>
> +step +proj=vgridshift +grids=egm2008_0_45.tif +inv
>
> *+step +proj=pop +v_3 +omit_fwd *
>
>
>
> *Alternative*
>
> Another possible solution is a new PROJ operation e.g. +proj=flip to make
> the values of a coordinate value and the value stored in the stack switch
> places.
>
>
>
> cct -I +proj=pipeline
>
> +step +proj=push +v_3
>
> +step +proj=utm +zone=19 +inv +ellps=intl
>
> +step +proj=cart +ellps=intl
>
> +step +proj=helmert +x=-366.1939 +y=-115.0688 +z=-776.7039 +rx=20.963080
> +ry=16.462749 +rz=-14.276379 +s=-12.80900 +convention=coordinate_frame
> +exact
>
> +step +proj=cart +inv +ellps=GRS80
>
> *+step +proj=flip +v_3 *
>
> +step +proj=vgridshift +grids=egm96_15.tif +inv
>
> *+step +proj=pop +v_3 +omit_fwd *
>
>
>
> Regards, Jochem
>
>
>
>
> Disclaimer:
> De inhoud van deze e-mail is vertrouwelijk en uitsluitend bestemd voor de
> geadresseerde(n).
> Gebruik, openbaarmaking, vermenigvuldiging, verspreiding en/of
> verstrekking van deze informatie aan derden is niet toegestaan.
> Op al onze producten en diensten zijn onze algemene leveringsvoorwaarden
> van toepassing
> [https://www.kadaster.nl/algemene-leveringsvoorwaarden].
>
> Disclaimer:
> This email and any files transmitted with it are confidential and intended
> solely for the use of the individual or entity to whom they are addressed.
> If you are not the intended recipient, you are notified that disclosing,
> copying, distributing or taking any action in reliance on the contents of
> this information is strictly prohibited.
> Our general terms and conditions of delivery apply to all our products and
> services
> [https://www.kadaster.com/general-terms-and-conditions].
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231214/905e4074/attachment-0001.htm>

From Jochem.Lesparre at kadaster.nl  Thu Dec 14 10:44:48 2023
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Thu, 14 Dec 2023 18:44:48 +0000
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
Message-ID: <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>

Hi Thomas,

Using an axisswap between height and time is indeed one of the possible temporary solutions that I tested. However, we will introduce a time-dependent transformation as soon as the time-series of the GNSS reference station is long enough. So publishing a PROJ pipeline that uses the time for storing a height value now might be confusing for users. I have another temporary solution (applying the same geoid twice) which we could use, but I think that PROJ should have a more elegant solution for this rather common case.

Regards, Jochem


From: Thomas Knudsen <knudsen.thomas at gmail.com>
Sent: donderdag 14 december 2023 19:15
To: Lesparre, Jochem <Jochem.Lesparre at kadaster.nl>
Cc: PROJ at lists.osgeo.org
Subject: Re: [PROJ] Make push and pop FIFO?

If your input data does not need time stamps, you may be able to work around this using +omit_fwd/+omit_inv selectors and a set of axisswap order=1,2,4,3 steps?

Den tors. 14. dec. 2023 kl. 14.13 skrev Lesparre, Jochem via PROJ <proj at lists.osgeo.org<mailto:proj at lists.osgeo.org>>:
Hi list members,

The PROJ operations +proj=push and +proj=pop use "last in, first out" (LIFO) to store and retrieve coordinate values in a stack. It seems that I need "first in, first out" (FIFO) or other new functionality in PROJ.

Problem
The Dutch Caribbean islands use TM-projections based on old datums. We have an exact Helmert transformation per island that transforms the horizontal coordinates to an ITRS realisation at a specific epoch. For some islands we need a geoid (EGM2008 sampled at 45? is the best we have at the moment) for the height transformation from local levelling heights to ITRS. That works fine for a forward transformation with this PROJ pipeline:

cct +proj=pipeline
+step +proj=push +v_3
+step +proj=tmerc +inv +lat_0=12.180658675 +lon_0=-68.251802281 +k_0=1 +x_0=23209.5600 +y_0=21423.9900 +ellps=intl
+step +proj=cart +ellps=intl
+step +proj=helmert +x=-366.1939 +y=-115.0688 +z=-776.7039 +rx=20.963080 +ry=16.462749 +rz=-14.276379 +s=-12.80900 +convention=coordinate_frame +exact
+step +proj=cart +inv +ellps=GRS80
+step +proj=pop +v_3
+step +proj=vgridshift +grids=egm2008_0_45.tif +inv

However, I do not get exactly the same results for the inverse transformation with -I, since I apply the geoid on the ITRS coordinates, but then the physical height is used for the Helmert transformation instead of the correct ellipsoidal height. This gives a small error in the horizontal coordinates in this case, but can easily reach more than 50 metres for other CRSs.

Solution
The most elegant solution seems to me to use FIFO for operations +proj=push and +proj=pop, so I can use this pipeline:

cct +proj=pipeline
+step +proj=push +v_3
+step +proj=tmerc +inv +lat_0=12.180658675 +lon_0=-68.251802281 +k_0=1 +x_0=23209.5600 +y_0=21423.9900 +ellps=intl
+step +proj=cart +ellps=intl
+step +proj=helmert +x=-366.1939 +y=-115.0688 +z=-776.7039 +rx=20.963080 +ry=16.462749 +rz=-14.276379 +s=-12.80900 +convention=coordinate_frame +exact
+step +proj=cart +inv +ellps=GRS80
+step +proj=push +v_3
+step +proj=pop +v_3
+step +proj=vgridshift +grids=egm2008_0_45.tif +inv
+step +proj=pop +v_3 +omit_fwd

Alternative
Another possible solution is a new PROJ operation e.g. +proj=flip to make the values of a coordinate value and the value stored in the stack switch places.

cct -I +proj=pipeline
+step +proj=push +v_3
+step +proj=utm +zone=19 +inv +ellps=intl
+step +proj=cart +ellps=intl
+step +proj=helmert +x=-366.1939 +y=-115.0688 +z=-776.7039 +rx=20.963080 +ry=16.462749 +rz=-14.276379 +s=-12.80900 +convention=coordinate_frame +exact
+step +proj=cart +inv +ellps=GRS80
+step +proj=flip +v_3
+step +proj=vgridshift +grids=egm96_15.tif +inv
+step +proj=pop +v_3 +omit_fwd

Regards, Jochem



Disclaimer:
De inhoud van deze e-mail is vertrouwelijk en uitsluitend bestemd voor de geadresseerde(n).
Gebruik, openbaarmaking, vermenigvuldiging, verspreiding en/of verstrekking van deze informatie aan derden is niet toegestaan.
Op al onze producten en diensten zijn onze algemene leveringsvoorwaarden van toepassing
[https://www.kadaster.nl/algemene-leveringsvoorwaarden].

Disclaimer:
This email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed.
If you are not the intended recipient, you are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited.
Our general terms and conditions of delivery apply to all our products and services
[https://www.kadaster.com/general-terms-and-conditions].
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org<mailto:PROJ at lists.osgeo.org>
https://lists.osgeo.org/mailman/listinfo/proj


Disclaimer:
De inhoud van deze e-mail is vertrouwelijk en uitsluitend bestemd voor de geadresseerde(n).
Gebruik, openbaarmaking, vermenigvuldiging, verspreiding en/of verstrekking van deze informatie aan derden is niet toegestaan.
Op al onze producten en diensten zijn onze algemene leveringsvoorwaarden van toepassing
[https://www.kadaster.nl/algemene-leveringsvoorwaarden].

Disclaimer:
This email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed.
If you are not the intended recipient, you are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited.
Our general terms and conditions of delivery apply to all our products and services
[https://www.kadaster.com/general-terms-and-conditions].
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231214/af8d923b/attachment-0001.htm>

From torill.kjosnes at gmail.com  Fri Dec 15 03:01:19 2023
From: torill.kjosnes at gmail.com (=?UTF-8?Q?Torill_Kj=C3=B8snes_Gabrielsen?=)
Date: Fri, 15 Dec 2023 12:01:19 +0100
Subject: [PROJ] EPSG:1104
Message-ID: <CAE49LKx_3k3JJ5SUF40oG4NTM_Q7eHX447NGBFxWZ3UsoJKNFw@mail.gmail.com>

Hi,



I am writing to inquire about the availability of the EPSG:1104
transformation in PROJ 9.3.1 and 9.2. I have noticed that PROJ supports the
EPSG:1104 coordinate operation method;

*projinfo **urn:ogc:def:coordinateOperation:EPSG::1104*.



However, when I try to use this transformation in the projinfo command for
transformation between coordinates expressed in EPSG:4201 and EPSG:4326,
the EPSG:1104 method is not listed as a candidate;

projinfo -s 'EPSG:4201' -t 'EPSG:4326' -o PROJ --spatial-test intersects
--show-superseded



As far as I know, the EPSG:1104 transformation is a valid 3-parameter
transformation and should be applicable for transforming coordinates
between these two CRSs. Therefore, I was wondering if there is a reason why
this transformation is not listed as a candidate by the projinfo command.



Thanks for your help and support.



Best regards,

Torill Kj?snes Gabrielsen
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231215/eb739fd7/attachment.htm>

From even.rouault at spatialys.com  Fri Dec 15 04:53:15 2023
From: even.rouault at spatialys.com (Even Rouault)
Date: Fri, 15 Dec 2023 13:53:15 +0100
Subject: [PROJ] EPSG:1104
In-Reply-To: <CAE49LKx_3k3JJ5SUF40oG4NTM_Q7eHX447NGBFxWZ3UsoJKNFw@mail.gmail.com>
References: <CAE49LKx_3k3JJ5SUF40oG4NTM_Q7eHX447NGBFxWZ3UsoJKNFw@mail.gmail.com>
Message-ID: <d91db723-1aa7-430e-b86e-1905bdca16f6@spatialys.com>

Torill,

the area of use of EPSG:1104 is

 ??? USAGE[
 ??????? SCOPE["Military survey."],
 ??????? AREA["Mali."],
 ??????? BBOX[10.14,-12.25,25.01,4.26]],

with this very interesting remark:

 ??? REMARK["Derived at 1 station connected to the Adindan (Blue Nile 
1958) network through the 1968-69 12th parallel traverse. Accuracy 25m 
in each axis. Note: the Adindan (Blue Nile 1958) CRS is used in Ethiopia 
and Sudan, not Mali."]]

The area of use of EPSG:4201 is

 ??? USAGE[
 ??????? SCOPE["Geodesy."],
 ??????? AREA["Eritrea; Ethiopia; South Sudan; Sudan."],
 ??????? BBOX[3.4,21.82,22.24,47.99]],

So there is no intersection between both, hence EPSG:1104 is discarded.

Even

Le 15/12/2023 ? 12:01, Torill Kj?snes Gabrielsen via PROJ a ?crit?:
>
> Hi,
>
> I am writing to inquire about the availability of the EPSG:1104 
> transformation in PROJ 9.3.1 and 9.2. I have noticed that PROJ 
> supports the EPSG:1104 coordinate operation method;
>
> /projinfo //urn:ogc:def:coordinateOperation:EPSG::1104/.
>
> However, when I try to use this transformation in the projinfo command 
> for transformation between coordinates expressed in EPSG:4201 and 
> EPSG:4326, the EPSG:1104 method is not listed as a candidate;
>
> projinfo -s 'EPSG:4201' -t 'EPSG:4326' -o PROJ --spatial-test 
> intersects --show-superseded
>
> As far as I know, the EPSG:1104 transformation is a valid 3-parameter 
> transformation and should be applicable for transforming coordinates 
> between these two CRSs. Therefore, I was wondering if there is a 
> reason why this transformation is not listed as a candidate by the 
> projinfo command.
>
> Thanks for your help and support.
>
> Best regards,
>
> Torill Kj?snes Gabrielsen
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231215/0f4eda01/attachment.htm>

From knudsen.thomas at gmail.com  Fri Dec 15 10:02:59 2023
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Fri, 15 Dec 2023 19:02:59 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
 <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>
Message-ID: <CAH0YoENuAyx3voWcfn_s1XmxUetjrQ2iWba4zEX_Sdq4pMrHOw@mail.gmail.com>

Hi Jochem,

So if I'm not entirely mistaken, you'll need something like the Forth "swap"
operator, or the PostScript "exch" operator to allow something like this:

###  The inverse part (read from bottom up, and read pop as push, push as
pop) ###

step omit_fwd proj=push v_3              # restore the geophysical height

# The bread and butter
step omit_fwd proj=tmerc inv lat_0=12.180658675 lon_0=-68.251802281 k_0=1
x_0=23209.5600 y_0=21423.9900 ellps=intl
step omit_fwd proj=cart ellps=intl
step omit_fwd proj=helmert x=-366.1939 y=-115.0688 z=-776.7039 rx=20.963080
ry=16.462749 rz=-14.276379 s=-12.80900 convention=coordinate_frame exact
step omit_fwd proj=cart inv ellps=GRS80

# The great swap show...
step omit_fwd proj=push v_3              # restore the geometrical height
step omit_fwd proj=exch                  # swap the two heights, to get the
geometrical to the top-of-stack
step omit_fwd proj=pop v_3               # save the geophysical height
step omit_fwd proj=vgridshift grids=egm2008_0_45.tif inv
step omit_fwd proj=pop v_3                 # save the geometrical height
# End of inverse part - read from here and upwards

In that case, I think the start of a solution would be to open an issue
over at https://github.com/OSGeo/PROJ/issues, requesting an
exch/swap operator, and summarizing this thread
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231215/d84d5f1f/attachment.htm>

From Jochem.Lesparre at kadaster.nl  Sat Dec 16 01:56:31 2023
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Sat, 16 Dec 2023 09:56:31 +0000
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <CAH0YoENuAyx3voWcfn_s1XmxUetjrQ2iWba4zEX_Sdq4pMrHOw@mail.gmail.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
 <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoENuAyx3voWcfn_s1XmxUetjrQ2iWba4zEX_Sdq4pMrHOw@mail.gmail.com>
Message-ID: <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>

Hi Thomas,

Thanks for your reply. I will open an issue, but I wanted to make sure I wasn?t overlooking an already available solution for my problem. Also, I thought it might be better to find consensus in the email list first. Or would it be better to have a discussion like this in an issue? I am not so familiar with the do?s and don?ts of open-source collaboration.

exch / swap
Your suggestion is a third way to solve my problem. That would work fine.

LIFO / FIFO
Switching from LIFI to FIFO seems an easier solution to me. But I have no experience with stacks in programming languages, so maybe FIFO is too unconventional? Or would the change in behaviour from LIFI to FIFO be problematic for other users? I have never seen a PROJ pipeline using more than one value on the stack.

Alternative
A difference between PROJ and the language Forth is that PROJ has a coordinate value next to the stack. My suggested flip operator does the same as your exch / swap operator. The only difference is that I interpret the current coordinate value as the top value of the stack. The advantage is that my alternative needs just one step:

+step +proj=flip +v_3

to do the same are your 3 steps:

step omit_fwd proj=push v_3              # restore the geometrical height
step omit_fwd proj=exch                  # swap the two heights, to get the geometrical to the top-of-stack
step omit_fwd proj=pop v_3               # save the geophysical height

Name
Even if my alternative behaviour of flip would be implemented, I think your suggested name exch or swap would better explain what it does. Could there be a need for other stack operators too, like dup, over, rot and drop? To avoid confusion with other PROJ operators like axisswap and over, maybe a name like stackswap could be preferable?

Jochem




Disclaimer:
De inhoud van deze e-mail is vertrouwelijk en uitsluitend bestemd voor de geadresseerde(n).
Gebruik, openbaarmaking, vermenigvuldiging, verspreiding en/of verstrekking van deze informatie aan derden is niet toegestaan.
Op al onze producten en diensten zijn onze algemene leveringsvoorwaarden van toepassing
[https://www.kadaster.nl/algemene-leveringsvoorwaarden].

Disclaimer:
This email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed.
If you are not the intended recipient, you are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited.
Our general terms and conditions of delivery apply to all our products and services
[https://www.kadaster.com/general-terms-and-conditions].
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231216/854b08b4/attachment-0001.htm>

From gdt at lexort.com  Sat Dec 16 06:23:56 2023
From: gdt at lexort.com (Greg Troxel)
Date: Sat, 16 Dec 2023 09:23:56 -0500
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 (Jochem via PROJ Lesparre's message of "Sat, 16 Dec 2023 09:56:31
 +0000")
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
 <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoENuAyx3voWcfn_s1XmxUetjrQ2iWba4zEX_Sdq4pMrHOw@mail.gmail.com>
 <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
Message-ID: <rmi4jgijkeb.fsf@s1.lexort.com>

"Lesparre, Jochem via PROJ" <proj at lists.osgeo.org> writes:

> Hi Thomas,
>
> Thanks for your reply. I will open an issue, but I wanted to make sure
> I wasn?t overlooking an already available solution for my
> problem. Also, I thought it might be better to find consensus in the
> email list first. Or would it be better to have a discussion like this
> in an issue? I am not so familiar with the do?s and don?ts of
> open-source collaboration.
>
> exch / swap
> Your suggestion is a third way to solve my problem. That would work fine.
>
> LIFO / FIFO
> Switching from LIFI to FIFO seems an easier solution to me. But I have
> no experience with stacks in programming languages, so maybe FIFO is
> too unconventional? Or would the change in behaviour from LIFI to FIFO
> be problematic for other users? I have never seen a PROJ pipeline
> using more than one value on the stack.
>
> Alternative
> A difference between PROJ and the language Forth is that PROJ has a
> coordinate value next to the stack. My suggested flip operator does
> the same as your exch / swap operator. The only difference is that I
> interpret the current coordinate value as the top value of the
> stack. The advantage is that my alternative needs just one step:
>
> +step +proj=flip +v_3
>
> to do the same are your 3 steps:
>
> step omit_fwd proj=push v_3              # restore the geometrical height
> step omit_fwd proj=exch                  # swap the two heights, to get the geometrical to the top-of-stack
> step omit_fwd proj=pop v_3               # save the geophysical height
>
> Name
> Even if my alternative behaviour of flip would be implemented, I think
> your suggested name exch or swap would better explain what it
> does. Could there be a need for other stack operators too, like dup,
> over, rot and drop? To avoid confusion with other PROJ operators like
> axisswap and over, maybe a name like stackswap could be preferable?

I like exch.   We are really re-inventing the traditional HP RPN, and
that's ok, but it's better to re-implement it as consistently as
possible.

From knudsen.thomas at gmail.com  Sat Dec 16 08:42:48 2023
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Sat, 16 Dec 2023 17:42:48 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <rmi4jgijkeb.fsf@s1.lexort.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
 <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoENuAyx3voWcfn_s1XmxUetjrQ2iWba4zEX_Sdq4pMrHOw@mail.gmail.com>
 <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <rmi4jgijkeb.fsf@s1.lexort.com>
Message-ID: <CAH0YoENC7m=MSf=H4+yaLTrhjRf-M42XFAxN9cergPG4_9Z3fQ@mail.gmail.com>

>
> Greg Troxel said:
> > We are really re-inventing the traditional HP RPN, and
> > that's ok, but it's better to re-implement it as
> > consistently as possible.
>
> Actually Chuck Moore implemented Forth already in 1968,
> four years before HP-35, the first HP RPN calculator,
> was introduced. So in that sense "swap" is historically
> more consistent than the 1984 PostScript "exch".
>
> My trusty old HP-15, now doing attic service, had a "x<>y"
> key for "swap", and I see on the Wikipedia photo [1],
> that that "x<>y" was used all the way back to the 1972 HP-35.
>
> The HP-48G, introduced in 1990, according to the photo [2]
> had a key labelled "swap", so HP RPN appears to be more
> true to Forth, than to PostScript.
>
> So for HP, as well as Forth, consistency, "swap" would be
> preferable.
>
> The bad thing, however, is that PROJ stacks do not work as
> one would immediately expect: Actually, there are 4 separate
> stacks, one for each coordinate, so doing a "push v_1 v_2"
> followed by a "pop v_2 v_1" does not do any swapping (sse the
> example in footnote [4], and try to play with different orders
> of v_1 and v_2).
>
> Hence, you need to do a preparatory axisswap step to actually
> put the first coordinate onto the second coordinate stack (from
> where it can be pop'd back into the first coordinate of the
> operand). I tend to forget this...
>
> Rust Geodesy [4] makes do with one stack, but for semi-consistency
> with PROJ, always pushes and pops in fixed order, i.e. pop v_2 v_1
> gives the same result as pop v_1 v_2
>
> In order to follow the principle of least astonishment (POLA) [5],
> I would have preferred a single stack, and push/pop in consistent
> order. But since the state of things are as they are, keeping POLA
> will probably require us to keep things as is.
>
>
> [1] https://en.wikipedia.org/wiki/HP-35#/media/File:HP-35_Red_Dot.jpg
> [2] https://upload.wikimedia.org/wikipedia/commons/9/95/HP48G.jpg
> [3] echo 1 2 3 4 | cct proj=pipeline step proj=push v_1 v_2 step proj=pop
> v_2 step proj=pop v_1  --
> [4] https://github.com/busstoptaktik/geodesy
> [5] https://en.wikipedia.org/wiki/Principle_of_least_astonishment
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231216/39b40fbd/attachment.htm>

From even.rouault at spatialys.com  Sat Dec 16 11:29:50 2023
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 16 Dec 2023 20:29:50 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <CAH0YoENC7m=MSf=H4+yaLTrhjRf-M42XFAxN9cergPG4_9Z3fQ@mail.gmail.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
 <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoENuAyx3voWcfn_s1XmxUetjrQ2iWba4zEX_Sdq4pMrHOw@mail.gmail.com>
 <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <rmi4jgijkeb.fsf@s1.lexort.com>
 <CAH0YoENC7m=MSf=H4+yaLTrhjRf-M42XFAxN9cergPG4_9Z3fQ@mail.gmail.com>
Message-ID: <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>

I find that push, pop, exch are not super intuitive. For the sake of 
brainstorming, here are my thoughts... I'm not totally convinced they 
are good as they are kind of exceptions to the way pipelines operate in 
the reverse direction (which isn't totally obvious either)

So basically we would have 2 new operations:

* +proj=save +only_fwd|+only_inv +into=some_name? : save the current 
coordinate as "some_name", but only do that in the specified direction. 
That is, it is a no-op in the other direction. +omit_fwd/+omit_inv are 
obviously not allowed on such an operation

* +proj=restore +only_fwd|+only_inv +from=some_name [+v_1] [+v_2] [+v_3] 
[+v_4]: restore "some_name" as the current coordinate, only in the 
specified direction. One must explicitly specify at least one +v_X. 
no-op in the other direction. +omit_fwd/+omit_inv are not allowed on 
such an operation

You can interleave save and restore in any order, provided that you 
restore an already saved name...


So Jochem's pipeline would become (if I've understood well):

cct +proj=pipeline

+step +proj=save +only_fwd +into=orthometric_height

+step +proj=restore +only_inv +v_3 +from=orthometric_height

+step +proj=tmerc +inv +lat_0=12.180658675 +lon_0=-68.251802281 +k_0=1 
+x_0=23209.5600 +y_0=21423.9900 +ellps=intl

+step +proj=cart +ellps=intl

+step +proj=helmert +x=-366.1939 +y=-115.0688 +z=-776.7039 +rx=20.963080 
+ry=16.462749 +rz=-14.276379 +s=-12.80900 +convention=coordinate_frame 
+exact

+step +proj=cart +inv +ellps=GRS80

+step +proj=restore +only_fwd +v_3 +from=orthometric_height

+step +proj=restore +only_inv +v_3 +from=ellipsoidal_height

+step +proj=save +only_inv +into=orthometric_height

+step +proj=vgridshift +grids=egm2008_0_45.tif +inv

+step +proj=save +only_inv +into=ellipsoidal_height


In the forward direction, it would be interpreted as (omitting all 
+only=inv steps):


cct +proj=pipeline

+step +proj=save +only_fwd +into=orthometric_height

+step +proj=tmerc +inv +lat_0=12.180658675 +lon_0=-68.251802281 +k_0=1 
+x_0=23209.5600 +y_0=21423.9900 +ellps=intl

+step +proj=cart +ellps=intl

+step +proj=helmert +x=-366.1939 +y=-115.0688 +z=-776.7039 +rx=20.963080 
+ry=16.462749 +rz=-14.276379 +s=-12.80900 +convention=coordinate_frame 
+exact

+step +proj=cart +inv +ellps=GRS80

+step +proj=restore +only_fwd +v_3+from=orthometric_height

+step +proj=vgridshift +grids=egm2008_0_45.tif +inv


And for the reverse direction, it would be interpreted as the following 
(that is when taking with a forward direction perspective), by reversing 
the order of steps, reversing the direction of each step (except the 
ones tagged with +only_fwd/+only_inv), omitting all +only_fwd steps, and 
renaming the +only_inv ones as +only_fwd :

cct +proj=pipeline

+step +proj=save +only_fwd +into=ellipsoidal_height

+step +proj=vgridshift +grids=egm2008_0_45.tif

+step +proj=save +only_fwd +into=orthometric_height

+step +proj=restore +only_fwd +v_3 +from=ellipsoidal_height

+step +proj=cart +ellps=GRS80

+step +inv +proj=helmert +x=-366.1939 +y=-115.0688 +z=-776.7039 
+rx=20.963080 +ry=16.462749 +rz=-14.276379 +s=-12.80900 
+convention=coordinate_frame +exact

+step +inv +proj=cart +ellps=intl

+step +proj=tmerc +lat_0=12.180658675 +lon_0=-68.251802281 +k_0=1 
+x_0=23209.5600 +y_0=21423.9900 +ellps=intl

+step +proj=restore +only_fwd +v_3+from=orthometric_height

I guess we could potentially use the +omit_fwd/+omit_inv logic, with its 
logic of inverting the semantics when reading in the reverse directions, 
but my brain is hurting hard when I'm tring to comprehend that (1).



Hence this proposal of +only_fwd/+only_inv. Which is probably what we 
should have come up with originally instead of +omit_fwd/+omit_inv

I guess we could generalize +only_fwd/+only_inv to all operations, with 
the semantic detailed above, that is they are interpreted as written in 
the direction where they should be applied, without a reversal of their 
direction.


Actually... At the expense of being super verbose, but hopefully super 
straightforward, why not having "+proj=if +dir=fwd"? , "+proj=elseif 
dir=inv" and "+proj=endif", eliminating all convoluted uses of 
+omit_fwd/inv (and/or +only_fwd/inv), and the mental process of 
inferring the inverse pipeline by reversing the order of the steps and 
their direction:

cct +proj=pipeline

+step +proj=if +dir=fwd

+step +proj=save +into=orthometric_height

+step +proj=tmerc +inv +lat_0=12.180658675 +lon_0=-68.251802281 +k_0=1 
+x_0=23209.5600 +y_0=21423.9900 +ellps=intl

+step +proj=cart +ellps=intl

+step +proj=helmert +x=-366.1939 +y=-115.0688 +z=-776.7039 +rx=20.963080 
+ry=16.462749 +rz=-14.276379 +s=-12.80900 +convention=coordinate_frame 
+exact

+step +proj=cart +inv +ellps=GRS80

+step +proj=restore +v_3+from=orthometric_height

+step +proj=vgridshift +grids=egm2008_0_45.tif +inv

+step +proj=elseif +dir=inv

+step +proj=save +into=ellipsoidal_height

+step +proj=vgridshift +grids=egm2008_0_45.tif

+step +proj=save? +into=orthometric_height

+step +proj=restore +v_3 +from=ellipsoidal_height

+step +proj=cart +ellps=GRS80

+step +proj=helmert +inv +x=-366.1939 +y=-115.0688 +z=-776.7039 
+rx=20.963080 +ry=16.462749 +rz=-14.276379 +s=-12.80900 
+convention=coordinate_frame +exact

+step +proj=cart +inv +ellps=intl

+step +proj=tmerc +lat_0=12.180658675 +lon_0=-68.251802281 +k_0=1 
+x_0=23209.5600 +y_0=21423.9900 +ellps=intl

+step +proj=restore +v_3+from=orthometric_height

+step +proj=endif


if / elseif would be strictly restricted to this exact construct, but 
could potentially be later extended to doing other things. I'm quite 
happy with that last proposal actually

And syntaxic sugar, I guess we coud tweak the PROJ string parser, to 
just understand +proj=XXX? as +step +proj=XXXX (would require +inv to be 
placed after +proj). And actually rename +proj as +op (from a quick 
check, it doesn't seem it is a valid parameter of an operation)

So here's my final proposal for today:

cct +op=pipeline
+op=if +dir=fwd
 ???? +op=save +into=orthometric_height
 ???? +op=tmerc +inv +lat_0=12.180658675 +lon_0=-68.251802281 +k_0=1 
+x_0=23209.5600 +y_0=21423.9900 +ellps=intl
 ???? +op=cart +ellps=intl
 ???? +op=helmert +x=-366.1939 +y=-115.0688 +z=-776.7039 +rx=20.963080 
+ry=16.462749 +rz=-14.276379 +s=-12.80900 +convention=coordinate_frame 
+exact
 ???? +op=cart +inv +ellps=GRS80
 ???? +op=restore?+v_3 +from=orthometric_height
 ???? +op=vgridshift +grids=egm2008_0_45.tif +inv
+op=elseif +dir=inv
 ???? +op=save +into=ellipsoidal_height
 ???? +op=vgridshift +grids=egm2008_0_45.tif
 ???? +op=save? +into=orthometric_height
 ???? +op=restore +v_3 +from=ellipsoidal_height
 ???? +op=cart +ellps=GRS80
 ???? +op=helmert +inv +x=-366.1939 +y=-115.0688 +z=-776.7039 
+rx=20.963080 +ry=16.462749 +rz=-14.276379 +s=-12.80900 
+convention=coordinate_frame +exact
 ???? +op=cart? +inv +ellps=intl
 ???? +op=tmerc +lat_0=12.180658675 +lon_0=-68.251802281 +k_0=1 
+x_0=23209.5600 +y_0=21423.9900 +ellps=intl
 ???? +op=restore?+v_3 +from=orthometric_height
+op=endif

Even


(1) It would look as:

cct +proj=pipeline

+step +proj=save +name=orthometric_height +omit_inv

+step +proj=save +name=orthometric_height +v_3 +omit_fwd

+step +proj=tmerc +inv +lat_0=12.180658675 +lon_0=-68.251802281 +k_0=1 
+x_0=23209.5600 +y_0=21423.9900 +ellps=intl

+step +proj=cart +ellps=intl

+step +proj=helmert +x=-366.1939 +y=-115.0688 +z=-776.7039 +rx=20.963080 
+ry=16.462749 +rz=-14.276379 +s=-12.80900 +convention=coordinate_frame 
+exact

+step +proj=cart +inv +ellps=GRS80

+step +proj=restore +name=orthometric_height +v_3 +omit_inv

+step +proj=save? +name=ellipsoidal_height +v_3 +omit_fwd

+step +proj=restore +name=orthometric_height? +omit_fwd

+step +proj=vgridshift +grids=egm2008_0_45.tif +inv

+step +proj=restore? +name=ellipsoidal_height +omit_fwd



Le 16/12/2023 ? 17:42, Thomas Knudsen via PROJ a ?crit?:
>
>     Greg Troxel said:
>     > We are really re-inventing the traditional HP RPN, and
>     > that's ok, but it's better to re-implement it as
>     > consistently as possible.
>
>     Actually Chuck Moore implemented Forth already in 1968,
>     four years before HP-35, the first HP RPN calculator,
>     was introduced. So in that sense "swap" is historically
>     more consistent than the 1984 PostScript "exch".
>
>     My trusty old HP-15, now doing attic service, had a "x<>y"
>     key for "swap", and I see on the Wikipedia photo [1],
>     that that "x<>y" was used all the way back to the 1972 HP-35.
>
>     The HP-48G, introduced in 1990, according to the photo [2]
>     had a key labelled "swap", so HP RPN appears to be more
>     true to Forth, than to PostScript.
>
>     So for HP, as well as Forth, consistency, "swap" would be
>     preferable.
>
>     The bad thing, however, is that PROJ stacks do not work as
>     one would immediately expect: Actually, there are 4 separate
>     stacks, one for each coordinate, so doing a "push v_1 v_2"
>     followed by a "pop v_2 v_1" does not do any swapping (sse the
>     example in footnote [4], and try to play with different orders
>     of v_1 and v_2).
>
>     Hence, you need to do a preparatory axisswap step to actually
>     put the first coordinate onto the second coordinate stack (from
>     where it can be pop'd back into the first coordinate of the
>     operand). I tend to forget this...
>
>     Rust Geodesy [4] makes do with one stack, but for semi-consistency
>     with PROJ, always pushes and pops in fixed order, i.e. pop v_2 v_1
>     gives the same result as pop v_1 v_2
>
>     In order to follow the principle of least astonishment (POLA) [5],
>     I would have preferred a single stack, and push/pop in consistent
>     order. But since the state of things are as they are, keeping POLA
>     will probably require us to keep things as is.
>
>
>     [1] https://en.wikipedia.org/wiki/HP-35#/media/File:HP-35_Red_Dot.jpg
>     [2] https://upload.wikimedia.org/wikipedia/commons/9/95/HP48G.jpg
>     [3] echo 1 2 3 4 | cct proj=pipeline step proj=push v_1 v_2 step
>     proj=pop v_2 step proj=pop v_1 ?--
>     [4] https://github.com/busstoptaktik/geodesy
>     [5] https://en.wikipedia.org/wiki/Principle_of_least_astonishment
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231216/f8ede227/attachment-0001.htm>

From knudsen.thomas at gmail.com  Sun Dec 17 05:25:37 2023
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Sun, 17 Dec 2023 14:25:37 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
 <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoENuAyx3voWcfn_s1XmxUetjrQ2iWba4zEX_Sdq4pMrHOw@mail.gmail.com>
 <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <rmi4jgijkeb.fsf@s1.lexort.com>
 <CAH0YoENC7m=MSf=H4+yaLTrhjRf-M42XFAxN9cergPG4_9Z3fQ@mail.gmail.com>
 <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
Message-ID: <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>

Contrary to you, Even, I find the push/pop duality clear,
non-confusing, and totally in line with the overall
design of PROJ operators. I would, however, for even more
consistency, have preferred a single stack design

Why do I find it so clear? Four reasons:

1. The opposite of "proj=utm" is "proj=utm inv"
2. When a pipeline is executed in reverse,
   "proj=utm" maps to "proj=utm inv", and v.v.
3. The opposite of push is pop
4. When a pipeline is executed in reverse,
   "proj=push" maps to "proj=push inv", i.e. "proj=pop",
   and v.v.

This is clear, systematical and symmetrical - nothing
strange going on here.

If we had a "proj=swap" operator, it would map to itself
when executed in reverse. That may be slightly strange,
but not any more strange than any other mathematical
involutions (e.g. negation, reciprocation, and the identity
operator)

Using named registers, on the other hand, introduces a
non-systematic element, and requires one to invent
arbitrary names for each register.

While these names may be "meaningful" for the pipeline
implementer, they may very well be meaningless for
anyone else.

Also, these registers (=variables) will probably need
to be stored in a dictionary (std::map or somesuch),
and imply an extra lookup for each individual operand.

In Rust Geodesy [1,2,3], I wouldn't care, since the operators
operate on full arrays of operands, i.e. "coordinate sets",
in ISO/OGC lingo, so the lookup is amortized over a large
number of operands, but in PROJ, we actively execute each
step in the pipeline for each individual operand.

Anyway - the lookup may, in practice, be
negligible, compared to all the other things we do
behind the curtains, when executing a pipeline.

But I believe we could clarify and streamline the push/pop
pair by taking inspiration from "proj=axisswap order=...."
in a new implementation or variation, using only one stack,
such that:

proj=pipeline step proj=push order=1,2,3,4 step proj=pop order=4,3,2,1

would implement the no-op, while

proj=pipeline step proj=push order=1,2 step proj=pop order=1,2

would be equivalent to

proj=axisswap order=2,1

As the "order=..." option is disjoint to the set of flags,
"v_1, v_2, v_3, v_4", the new "single-stack syntax" is
easy to discern from the old "four stack syntax".
Also, it would be trivial to implement the enqueue/dequeue
functionality Jochem needs.

As an aside, in Rust Geodesy (RG), I have been
experimenting with a less verbose syntax, which does away
with the "step" and the "proj=" qualifiers.

"step" goes, because it really just signifies the
equivalence of a Unix style pipe connection, which is
expressed more compact and clearly with the vertical bar
"|" syntax also used in Windows and Unix shell commands.

"proj=" goes because it really is a rather misleading term:
It made sense, back when PROJ was purely a projection library,
but for now, where it may introduce any kind of operation,
not just a proj=ection.

Hence, the previous pipeline:

proj=pipeline step proj=push order=1,2 step proj=pop order=1,2

maps to

    push order=1,2 | pop order=1,2

which is significantly more clear and significantly less
verbose, in my humble opinion. And it can be trivially
transformed back to classic PROJ syntax by prefixing by
"proj=pipeline step proj=" and substituting "|" with
"step proj=".

Also, it can live alongside the classic PROJ syntax, since
if neither "proj=" nor "init=" is found in the operator
descriptor, then it must be "RG syntax".

I personally find this syntax handy. In a longer time
perspective, I would like to add support for it in
PROJ (just as I have added support for classic PROJ
syntax in RG). So whatever happens to PROJ syntax, I
would be sad to see it diverge too far and lose the
trivial transformation to/from RG syntax: I truly
believe that RG syntax is both easier to teach newbies,
and easier to write for greybeards, so I think it has
some potential, also outside of RG.

[1] Rust Geodesy: https://github.com/busstoptaktik/geodesy
[2] Overall architecture and philosophy,
https://github.com/busstoptaktik/geodesy/blob/main/ruminations/000-rumination.md
[3] Geodesy from a PROJ perspective,
https://github.com/busstoptaktik/geodesy/blob/main/ruminations/008-rumination.md

From even.rouault at spatialys.com  Mon Dec 18 13:42:49 2023
From: even.rouault at spatialys.com (Even Rouault)
Date: Mon, 18 Dec 2023 22:42:49 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
 <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoENuAyx3voWcfn_s1XmxUetjrQ2iWba4zEX_Sdq4pMrHOw@mail.gmail.com>
 <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <rmi4jgijkeb.fsf@s1.lexort.com>
 <CAH0YoENC7m=MSf=H4+yaLTrhjRf-M42XFAxN9cergPG4_9Z3fQ@mail.gmail.com>
 <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
 <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>
Message-ID: <3f3d124b-ccf8-4ea3-9df5-2f5f231d2c47@spatialys.com>

push & pop are still OK for my mental representation. Exch becomes more 
hard to comprehend. Even if end-of-sixties & seventies' style of 
computer science did work fine and was very compact, we can probably 
afford to spend a few more bytes nowadays and be explicit with naming, 
and offer separate branches for forward & reverse paths in cases like 
Jochem's where things get complicated.? The lookup by name for 
save/restore should only be needed in the instanciation phase of the 
pipeline, and ultimately the save/restore PJ* instance would just hold 
an integer index into an array of PROJ_COORD stored in the pipeline. 
During its execution (proj_trans()), it should thus be very fast.

Agreed that your '|' pipeline syntax is even better.

Le 17/12/2023 ? 14:25, Thomas Knudsen a ?crit?:
> Contrary to you, Even, I find the push/pop duality clear,
> non-confusing, and totally in line with the overall
> design of PROJ operators. I would, however, for even more
> consistency, have preferred a single stack design
>
> Why do I find it so clear? Four reasons:
>
> 1. The opposite of "proj=utm" is "proj=utm inv"
> 2. When a pipeline is executed in reverse,
>     "proj=utm" maps to "proj=utm inv", and v.v.
> 3. The opposite of push is pop
> 4. When a pipeline is executed in reverse,
>     "proj=push" maps to "proj=push inv", i.e. "proj=pop",
>     and v.v.
>
> This is clear, systematical and symmetrical - nothing
> strange going on here.
>
> If we had a "proj=swap" operator, it would map to itself
> when executed in reverse. That may be slightly strange,
> but not any more strange than any other mathematical
> involutions (e.g. negation, reciprocation, and the identity
> operator)
>
> Using named registers, on the other hand, introduces a
> non-systematic element, and requires one to invent
> arbitrary names for each register.
>
> While these names may be "meaningful" for the pipeline
> implementer, they may very well be meaningless for
> anyone else.
>
> Also, these registers (=variables) will probably need
> to be stored in a dictionary (std::map or somesuch),
> and imply an extra lookup for each individual operand.
>
> In Rust Geodesy [1,2,3], I wouldn't care, since the operators
> operate on full arrays of operands, i.e. "coordinate sets",
> in ISO/OGC lingo, so the lookup is amortized over a large
> number of operands, but in PROJ, we actively execute each
> step in the pipeline for each individual operand.
>
> Anyway - the lookup may, in practice, be
> negligible, compared to all the other things we do
> behind the curtains, when executing a pipeline.
>
> But I believe we could clarify and streamline the push/pop
> pair by taking inspiration from "proj=axisswap order=...."
> in a new implementation or variation, using only one stack,
> such that:
>
> proj=pipeline step proj=push order=1,2,3,4 step proj=pop order=4,3,2,1
>
> would implement the no-op, while
>
> proj=pipeline step proj=push order=1,2 step proj=pop order=1,2
>
> would be equivalent to
>
> proj=axisswap order=2,1
>
> As the "order=..." option is disjoint to the set of flags,
> "v_1, v_2, v_3, v_4", the new "single-stack syntax" is
> easy to discern from the old "four stack syntax".
> Also, it would be trivial to implement the enqueue/dequeue
> functionality Jochem needs.
>
> As an aside, in Rust Geodesy (RG), I have been
> experimenting with a less verbose syntax, which does away
> with the "step" and the "proj=" qualifiers.
>
> "step" goes, because it really just signifies the
> equivalence of a Unix style pipe connection, which is
> expressed more compact and clearly with the vertical bar
> "|" syntax also used in Windows and Unix shell commands.
>
> "proj=" goes because it really is a rather misleading term:
> It made sense, back when PROJ was purely a projection library,
> but for now, where it may introduce any kind of operation,
> not just a proj=ection.
>
> Hence, the previous pipeline:
>
> proj=pipeline step proj=push order=1,2 step proj=pop order=1,2
>
> maps to
>
>      push order=1,2 | pop order=1,2
>
> which is significantly more clear and significantly less
> verbose, in my humble opinion. And it can be trivially
> transformed back to classic PROJ syntax by prefixing by
> "proj=pipeline step proj=" and substituting "|" with
> "step proj=".
>
> Also, it can live alongside the classic PROJ syntax, since
> if neither "proj=" nor "init=" is found in the operator
> descriptor, then it must be "RG syntax".
>
> I personally find this syntax handy. In a longer time
> perspective, I would like to add support for it in
> PROJ (just as I have added support for classic PROJ
> syntax in RG). So whatever happens to PROJ syntax, I
> would be sad to see it diverge too far and lose the
> trivial transformation to/from RG syntax: I truly
> believe that RG syntax is both easier to teach newbies,
> and easier to write for greybeards, so I think it has
> some potential, also outside of RG.
>
> [1] Rust Geodesy: https://github.com/busstoptaktik/geodesy
> [2] Overall architecture and philosophy,
> https://github.com/busstoptaktik/geodesy/blob/main/ruminations/000-rumination.md
> [3] Geodesy from a PROJ perspective,
> https://github.com/busstoptaktik/geodesy/blob/main/ruminations/008-rumination.md

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From Jochem.Lesparre at kadaster.nl  Tue Dec 19 00:33:02 2023
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Tue, 19 Dec 2023 08:33:02 +0000
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <3f3d124b-ccf8-4ea3-9df5-2f5f231d2c47@spatialys.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
 <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoENuAyx3voWcfn_s1XmxUetjrQ2iWba4zEX_Sdq4pMrHOw@mail.gmail.com>
 <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <rmi4jgijkeb.fsf@s1.lexort.com>
 <CAH0YoENC7m=MSf=H4+yaLTrhjRf-M42XFAxN9cergPG4_9Z3fQ@mail.gmail.com>
 <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
 <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>
 <3f3d124b-ccf8-4ea3-9df5-2f5f231d2c47@spatialys.com>
Message-ID: <AM0P192MB048208CD9EDC078D26830606EF97A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>

Adding a variable name could made be optional? In that case +push +v_3 and +pop +v_3 would still work the old way, but one could also use +push +v_3 +name=ellipsoidalheight and +pop +v_3 +name=ellipsoidalheight.

Jochem



Disclaimer:
De inhoud van deze e-mail is vertrouwelijk en uitsluitend bestemd voor de geadresseerde(n).
Gebruik, openbaarmaking, vermenigvuldiging, verspreiding en/of verstrekking van deze informatie aan derden is niet toegestaan.
Op al onze producten en diensten zijn onze algemene leveringsvoorwaarden van toepassing
[https://www.kadaster.nl/algemene-leveringsvoorwaarden].

Disclaimer:
This email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed.
If you are not the intended recipient, you are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited.
Our general terms and conditions of delivery apply to all our products and services
[https://www.kadaster.com/general-terms-and-conditions].

From j1 at jimenezshaw.com  Thu Dec 21 01:27:55 2023
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Thu, 21 Dec 2023 10:27:55 +0100
Subject: [PROJ] Problems with CGVD28 height
Message-ID: <CADRrdKvk9c0xd4MgVobeyaGdru_-Kkqt=apBB=g+vZKJphxtLA@mail.gmail.com>

Hi

I'm trying to convert from WGS84 (or NAD83, I do not mind)  to "MTM zone 1
+ CGVD28 height" in Canada.
I know that the area of use of "MTM zone 1" and "CGVD28 height" do not
intersect. But they told me "Canadian agencies still require this
datum [CGVD28]
throughout all of Canada." Actually the geoid model grid file
[ca_nrc_HT2_1997.tif:
Canada, Natural Resources Canada, NAD83(CSRS)v2 (EPSG:8235) to CGVD28
height (EPSG:5713)] covers much more than the CRS area of use.

projinfo says something that makes sense to me:

PROJ_NETWORK=ON projinfo -s EPSG:4979 -t EPSG:32181+5713 -o proj
--spatial-test intersects

Candidate operations found: 303
-------------------------------------
Operation No. 1:

unknown id, Inverse of NAD83 to WGS 84 (6) + NAD83 to NAD83(CSRS)v2 (1) +
NAD83(CSRS)v2 to CGVD28 height (1) + Inverse of NAD83 to NAD83(CSRS)v2 (1)
+ MTM zone 1, 4.55 m, unknown domain of validity

PROJ string:
+proj=pipeline
  +step +proj=axisswap +order=2,1
  +step +proj=unitconvert +xy_in=deg +xy_out=rad
  +step +inv +proj=vgridshift +grids=ca_nrc_HT2_1997.tif +multiplier=1
  +step +inv +proj=hgridshift +grids=ca_nrc_NA83SCRS.tif
  +step +proj=tmerc +lat_0=0 +lon_0=-53 +k=0.9999 +x_0=304800 +y_0=0
+ellps=GRS80

But cs2cs is not doing any vertical transformation:

echo 47.741422 -53.613219 0 | PROJ_NETWORK=ON cs2cs EPSG:4979
EPSG:32181+5713 --3d
258814.79 5289330.04 0.00

Running with PROJ_DEBUG=3 it ends with
Using coordinate operation Inverse of Transformation from CGVD28 height to
WGS 84 (ballpark vertical transformation, without ellipsoid height to
vertical height correction) + Inverse of Ballpark geographic offset from
NAD83 to WGS 84 + MTM zone 1
that makes sense with the no-change in elevation.


Why is that happening?

I do not care so much about the version of NAD83. I tried with some and I
get the same result.
The same with the source CRS. I use WGS84, but can be any flavour of NAD83.

Thanks.
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231221/30a12cb0/attachment.htm>

From j1 at jimenezshaw.com  Thu Dec 21 01:48:30 2023
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Thu, 21 Dec 2023 10:48:30 +0100
Subject: [PROJ] Problems with CGVD28 height
In-Reply-To: <CADRrdKvk9c0xd4MgVobeyaGdru_-Kkqt=apBB=g+vZKJphxtLA@mail.gmail.com>
References: <CADRrdKvk9c0xd4MgVobeyaGdru_-Kkqt=apBB=g+vZKJphxtLA@mail.gmail.com>
Message-ID: <CADRrdKs2-1zY5TpxagUiy_7DsK++ExqNZBbHT2XZUJXtV8et7A@mail.gmail.com>

Using the option "--bbox", if I have done correctly, I get this

PROJ_NETWORK=ON projinfo -s EPSG:4979 -t EPSG:32181+5713 -o proj
--spatial-test intersects --bbox '-53.6,47.7,-53.5,47.8'
Candidate operations found: 2
-------------------------------------
Operation No. 1:

unknown id, Inverse of Transformation from CGVD28 height to WGS 84
(ballpark vertical transformation, without ellipsoid height to vertical
height correction) + Inverse of NAD83 to WGS 84 (1) + MTM zone 1, unknown
accuracy, North America - onshore and offshore: Canada - Alberta; British
Columbia; Manitoba; New Brunswick; Newfoundland and Labrador; Northwest
Territories; Nova Scotia; Nunavut; Ontario; Prince Edward Island; Quebec;
Saskatchewan; Yukon. United States (USA) - Alabama; Alaska (mainland);
Arizona; Arkansas; California; Colorado; Connecticut; Delaware; Florida;
Georgia; Idaho; Illinois; Indiana; Iowa; Kansas; Kentucky; Louisiana;
Maine; Maryland; Massachusetts; Michigan; Minnesota; Mississippi; Missouri;
Montana; Nebraska; Nevada; New Hampshire; New Jersey; New Mexico; New York;
North Carolina; North Dakota; Ohio; Oklahoma; Oregon; Pennsylvania; Rhode
Island; South Carolina; South Dakota; Tennessee; Texas; Utah; Vermont;
Virginia; Washington; West Virginia; Wisconsin; Wyoming., has ballpark
transformation

PROJ string:
+proj=pipeline
  +step +proj=axisswap +order=2,1
  +step +proj=unitconvert +xy_in=deg +xy_out=rad
  +step +proj=tmerc +lat_0=0 +lon_0=-53 +k=0.9999 +x_0=304800 +y_0=0
+ellps=GRS80

I could imagine that the reason is that the bbox does not intersect with
the area of use of CGVD28 heigh (despite of the geoid model file covers
that point). Is there a way to workaround it?

Thanks

On Thu, 21 Dec 2023 at 10:27, Javier Jimenez Shaw <j1 at jimenezshaw.com>
wrote:

> Hi
>
> I'm trying to convert from WGS84 (or NAD83, I do not mind)  to "MTM zone 1
> + CGVD28 height" in Canada.
> I know that the area of use of "MTM zone 1" and "CGVD28 height" do not
> intersect. But they told me "Canadian agencies still require this datum [CGVD28]
> throughout all of Canada." Actually the geoid model grid file [ca_nrc_HT2_1997.tif:
> Canada, Natural Resources Canada, NAD83(CSRS)v2 (EPSG:8235) to CGVD28
> height (EPSG:5713)] covers much more than the CRS area of use.
>
> projinfo says something that makes sense to me:
>
> PROJ_NETWORK=ON projinfo -s EPSG:4979 -t EPSG:32181+5713 -o proj
> --spatial-test intersects
>
> Candidate operations found: 303
> -------------------------------------
> Operation No. 1:
>
> unknown id, Inverse of NAD83 to WGS 84 (6) + NAD83 to NAD83(CSRS)v2 (1) +
> NAD83(CSRS)v2 to CGVD28 height (1) + Inverse of NAD83 to NAD83(CSRS)v2 (1)
> + MTM zone 1, 4.55 m, unknown domain of validity
>
> PROJ string:
> +proj=pipeline
>   +step +proj=axisswap +order=2,1
>   +step +proj=unitconvert +xy_in=deg +xy_out=rad
>   +step +inv +proj=vgridshift +grids=ca_nrc_HT2_1997.tif +multiplier=1
>   +step +inv +proj=hgridshift +grids=ca_nrc_NA83SCRS.tif
>   +step +proj=tmerc +lat_0=0 +lon_0=-53 +k=0.9999 +x_0=304800 +y_0=0
> +ellps=GRS80
>
> But cs2cs is not doing any vertical transformation:
>
> echo 47.741422 -53.613219 0 | PROJ_NETWORK=ON cs2cs EPSG:4979
> EPSG:32181+5713 --3d
> 258814.79 5289330.04 0.00
>
> Running with PROJ_DEBUG=3 it ends with
> Using coordinate operation Inverse of Transformation from CGVD28 height to
> WGS 84 (ballpark vertical transformation, without ellipsoid height to
> vertical height correction) + Inverse of Ballpark geographic offset from
> NAD83 to WGS 84 + MTM zone 1
> that makes sense with the no-change in elevation.
>
>
> Why is that happening?
>
> I do not care so much about the version of NAD83. I tried with some and I
> get the same result.
> The same with the source CRS. I use WGS84, but can be any flavour of NAD83.
>
> Thanks.
> .___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231221/0197dbd9/attachment.htm>

From erixen_cruz at earthbrain.com  Thu Dec 21 05:03:53 2023
From: erixen_cruz at earthbrain.com (Erixen Cruz)
Date: Thu, 21 Dec 2023 13:03:53 +0000
Subject: [PROJ] Problems with CGVD28 height
In-Reply-To: <CADRrdKs2-1zY5TpxagUiy_7DsK++ExqNZBbHT2XZUJXtV8et7A@mail.gmail.com>
References: <CADRrdKvk9c0xd4MgVobeyaGdru_-Kkqt=apBB=g+vZKJphxtLA@mail.gmail.com>
 <CADRrdKs2-1zY5TpxagUiy_7DsK++ExqNZBbHT2XZUJXtV8et7A@mail.gmail.com>
Message-ID: <TYWP286MB2634CA974B1BCC79CC52132EE595A@TYWP286MB2634.JPNP286.PROD.OUTLOOK.COM>

You can edit your proj.db to have a more appropriate extent for the CRS so that it applies to points outside of it right now. I use sqlitebrowser to poke around proj.db. I would create a new extent with the enlarged rectangle, and then change CVGD28 to use that extent. You may have to make a copy of the vertical_crs, usage, and datum rows of the CRS as well. So like a whole new set of rows with EPSG:5713_ENLARGED.

Then just make sure your PROJ_DATA points to your modified proj.db and you can use EPSG:5713_ENLARGED instead. In the mean time, maybe let the appropriate government agency know that they have too small an extent published in EPSG so that it can be revised in next release.

Sincerely, Erixen
________________________________
From: PROJ <proj-bounces at lists.osgeo.org> on behalf of Javier Jimenez Shaw via PROJ <proj at lists.osgeo.org>
Sent: Thursday, December 21, 2023 4:48:30 AM
To: proj <PROJ at lists.osgeo.org>
Subject: Re: [PROJ] Problems with CGVD28 height

Using the option "--bbox", if I have done correctly, I get this

PROJ_NETWORK=ON projinfo -s EPSG:4979 -t EPSG:32181+5713 -o proj --spatial-test intersects --bbox '-53.6,47.7,-53.5,47.8'
Candidate operations found: 2
-------------------------------------
Operation No. 1:

unknown id, Inverse of Transformation from CGVD28 height to WGS 84 (ballpark vertical transformation, without ellipsoid height to vertical height correction) + Inverse of NAD83 to WGS 84 (1) + MTM zone 1, unknown accuracy, North America - onshore and offshore: Canada - Alberta; British Columbia; Manitoba; New Brunswick; Newfoundland and Labrador; Northwest Territories; Nova Scotia; Nunavut; Ontario; Prince Edward Island; Quebec; Saskatchewan; Yukon. United States (USA) - Alabama; Alaska (mainland); Arizona; Arkansas; California; Colorado; Connecticut; Delaware; Florida; Georgia; Idaho; Illinois; Indiana; Iowa; Kansas; Kentucky; Louisiana; Maine; Maryland; Massachusetts; Michigan; Minnesota; Mississippi; Missouri; Montana; Nebraska; Nevada; New Hampshire; New Jersey; New Mexico; New York; North Carolina; North Dakota; Ohio; Oklahoma; Oregon; Pennsylvania; Rhode Island; South Carolina; South Dakota; Tennessee; Texas; Utah; Vermont; Virginia; Washington; West Virginia; Wisconsin; Wyoming., has ballpark transformation

PROJ string:
+proj=pipeline
  +step +proj=axisswap +order=2,1
  +step +proj=unitconvert +xy_in=deg +xy_out=rad
  +step +proj=tmerc +lat_0=0 +lon_0=-53 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80

I could imagine that the reason is that the bbox does not intersect with the area of use of CGVD28 heigh (despite of the geoid model file covers that point). Is there a way to workaround it?

Thanks

On Thu, 21 Dec 2023 at 10:27, Javier Jimenez Shaw <j1 at jimenezshaw.com<mailto:j1 at jimenezshaw.com>> wrote:
Hi

I'm trying to convert from WGS84 (or NAD83, I do not mind)  to "MTM zone 1 + CGVD28 height" in Canada.
I know that the area of use of "MTM zone 1" and "CGVD28 height" do not intersect. But they told me "Canadian agencies still require this datum [CGVD28] throughout all of Canada." Actually the geoid model grid file [ca_nrc_HT2_1997.tif: Canada, Natural Resources Canada, NAD83(CSRS)v2 (EPSG:8235) to CGVD28 height (EPSG:5713)] covers much more than the CRS area of use.

projinfo says something that makes sense to me:

PROJ_NETWORK=ON projinfo -s EPSG:4979 -t EPSG:32181+5713 -o proj --spatial-test intersects

Candidate operations found: 303
-------------------------------------
Operation No. 1:

unknown id, Inverse of NAD83 to WGS 84 (6) + NAD83 to NAD83(CSRS)v2 (1) + NAD83(CSRS)v2 to CGVD28 height (1) + Inverse of NAD83 to NAD83(CSRS)v2 (1) + MTM zone 1, 4.55 m, unknown domain of validity

PROJ string:
+proj=pipeline
  +step +proj=axisswap +order=2,1
  +step +proj=unitconvert +xy_in=deg +xy_out=rad
  +step +inv +proj=vgridshift +grids=ca_nrc_HT2_1997.tif +multiplier=1
  +step +inv +proj=hgridshift +grids=ca_nrc_NA83SCRS.tif
  +step +proj=tmerc +lat_0=0 +lon_0=-53 +k=0.9999 +x_0=304800 +y_0=0 +ellps=GRS80

But cs2cs is not doing any vertical transformation:

echo 47.741422 -53.613219 0 | PROJ_NETWORK=ON cs2cs EPSG:4979 EPSG:32181+5713 --3d
258814.79 5289330.04 0.00

Running with PROJ_DEBUG=3 it ends with
Using coordinate operation Inverse of Transformation from CGVD28 height to WGS 84 (ballpark vertical transformation, without ellipsoid height to vertical height correction) + Inverse of Ballpark geographic offset from NAD83 to WGS 84 + MTM zone 1
that makes sense with the no-change in elevation.


Why is that happening?

I do not care so much about the version of NAD83. I tried with some and I get the same result.
The same with the source CRS. I use WGS84, but can be any flavour of NAD83.

Thanks.
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231221/9c77add9/attachment-0001.htm>

From gdt at lexort.com  Wed Dec 27 10:36:05 2023
From: gdt at lexort.com (Greg Troxel)
Date: Wed, 27 Dec 2023 13:36:05 -0500
Subject: [PROJ] Problems with CGVD28 height
In-Reply-To: <CADRrdKvk9c0xd4MgVobeyaGdru_-Kkqt=apBB=g+vZKJphxtLA@mail.gmail.com>
 (Javier Jimenez Shaw via PROJ's message of "Thu, 21 Dec 2023 10:27:55
 +0100")
References: <CADRrdKvk9c0xd4MgVobeyaGdru_-Kkqt=apBB=g+vZKJphxtLA@mail.gmail.com>
Message-ID: <rmi34vn8pd6.fsf@s1.lexort.com>


You said that you get the same results starting from NAD83.  I would
suggest debugging the transform NAD83 and not trying to use WGS84 until
the first step works right.  proj is known to mistransform WGS84 to
NAD83 due to ensemble fuzz.  My understanding is that NAD83(CSRS)v2,
being from 1998, will be pretty closely aligned with newer US NAD83
realizations and later Canadian ones, and thus not have the accuracy
issues of the 1986 version of NAD83, which is what causes 90%+ of the
issues.  So this is all likely a red herring, but still avoiding asking
proj to do it will avoid trouble; you don't need that trouble and height
trouble both at the same time.

NRCAN seems to publish transforms from ITRF to modern NAD83(CSRS).
So I'd assume your "WGS84" coordinates are ITRF, use the NRCAN
transforms, and then assume that those coordinates in some highish
version are equivalent to v2, as a first guess.

Looking at EPSG:32181, MTM zone 1, the bbox shown is enormous, but the
description says: Area of use: Canada - Newfoundland - onshore east of
54?30'W.

Looking at EPSG:5713, CGVD28, it seems that Newfoundland is not part
of it, and it starts at -59.73.   I have to wonder if that is intended
or a bug.  It is derived from leveling, and if they didn't have leveling
to Newfoundland, it just wouldn't be part of the datum.   It seems the
grid files are probably some modern estimation of what the heights would
have been had they been defined.

If you get datasheets for passive control in eastern Newfoundland, do
they publish CGVD28 heights?

I went to

  https://webapp.csrs-scrs.nrcan-rncan.gc.ca/geod/tools-outils/gpsh.php?locale=en

and entered rough coords for St. John's

  latitude 47.5825
  longitude 52.8580 (west)
  h 0

for CGVD28 HT2_2010v70 and NAD83(CSRS) [they don't specify versions
which is an accuracy clue], then I get -10.121 for H.  On the other hand
if I put in Montreal coordinates

  latitude 45.5095
  longitude 73.5768
  h 0 

I get H 30.78.

So they are returning results in their web tool.


Given all of that, the comments from Erixen Cruz make a lot of sense to
me.  If they've published a grid file covering newfoundland, and it has
sensible values, then it may make sense to use it.  The flip side is
that the area of validity of a datum is not a bbox in lat/lon.  The
shape can be much more complicated.  So it's not necessarily possible to
publish a grid file that only covers the valid area, unless it has
codepoints for invalid.  I bet the senior height expert at NRCAN knows
how they are trying to thread this needle.

I would write to NRCAN and ask them.  I have very little experience with
them, but whenever I have asked what I thought was a a hard question to
NGS, only a small number of times, I have gotten a really good answer
from someone whose name I recognize from reports.

From even.rouault at spatialys.com  Wed Dec 27 11:20:05 2023
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 27 Dec 2023 20:20:05 +0100
Subject: [PROJ] Problems with CGVD28 height
In-Reply-To: <rmi34vn8pd6.fsf@s1.lexort.com>
References: <CADRrdKvk9c0xd4MgVobeyaGdru_-Kkqt=apBB=g+vZKJphxtLA@mail.gmail.com>
 <rmi34vn8pd6.fsf@s1.lexort.com>
Message-ID: <662b6786-890c-4aed-9d93-3104ee9e1565@spatialys.com>

I've already contacted NRCan about that. They're investigating.

Even

Le 27/12/2023 ? 19:36, Greg Troxel via PROJ a ?crit?:
> You said that you get the same results starting from NAD83.  I would
> suggest debugging the transform NAD83 and not trying to use WGS84 until
> the first step works right.  proj is known to mistransform WGS84 to
> NAD83 due to ensemble fuzz.  My understanding is that NAD83(CSRS)v2,
> being from 1998, will be pretty closely aligned with newer US NAD83
> realizations and later Canadian ones, and thus not have the accuracy
> issues of the 1986 version of NAD83, which is what causes 90%+ of the
> issues.  So this is all likely a red herring, but still avoiding asking
> proj to do it will avoid trouble; you don't need that trouble and height
> trouble both at the same time.
>
> NRCAN seems to publish transforms from ITRF to modern NAD83(CSRS).
> So I'd assume your "WGS84" coordinates are ITRF, use the NRCAN
> transforms, and then assume that those coordinates in some highish
> version are equivalent to v2, as a first guess.
>
> Looking at EPSG:32181, MTM zone 1, the bbox shown is enormous, but the
> description says: Area of use: Canada - Newfoundland - onshore east of
> 54?30'W.
>
> Looking at EPSG:5713, CGVD28, it seems that Newfoundland is not part
> of it, and it starts at -59.73.   I have to wonder if that is intended
> or a bug.  It is derived from leveling, and if they didn't have leveling
> to Newfoundland, it just wouldn't be part of the datum.   It seems the
> grid files are probably some modern estimation of what the heights would
> have been had they been defined.
>
> If you get datasheets for passive control in eastern Newfoundland, do
> they publish CGVD28 heights?
>
> I went to
>
>    https://webapp.csrs-scrs.nrcan-rncan.gc.ca/geod/tools-outils/gpsh.php?locale=en
>
> and entered rough coords for St. John's
>
>    latitude 47.5825
>    longitude 52.8580 (west)
>    h 0
>
> for CGVD28 HT2_2010v70 and NAD83(CSRS) [they don't specify versions
> which is an accuracy clue], then I get -10.121 for H.  On the other hand
> if I put in Montreal coordinates
>
>    latitude 45.5095
>    longitude 73.5768
>    h 0
>
> I get H 30.78.
>
> So they are returning results in their web tool.
>
>
> Given all of that, the comments from Erixen Cruz make a lot of sense to
> me.  If they've published a grid file covering newfoundland, and it has
> sensible values, then it may make sense to use it.  The flip side is
> that the area of validity of a datum is not a bbox in lat/lon.  The
> shape can be much more complicated.  So it's not necessarily possible to
> publish a grid file that only covers the valid area, unless it has
> codepoints for invalid.  I bet the senior height expert at NRCAN knows
> how they are trying to thread this needle.
>
> I would write to NRCAN and ask them.  I have very little experience with
> them, but whenever I have asked what I thought was a a hard question to
> NGS, only a small number of times, I have gotten a really good answer
> from someone whose name I recognize from reports.
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From j1 at jimenezshaw.com  Sat Dec 30 10:54:22 2023
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Sat, 30 Dec 2023 19:54:22 +0100
Subject: [PROJ] World area of use
Message-ID: <CADRrdKvaA+q8pn4nrPP1i+kQ5hq=f5e8asUsHSUoh58oKhqjEg@mail.gmail.com>

Hi

Playing with crs-explorer, I found that there are a few (and only a few)
CRSs with an endless "area of use" description:
https://crs-explorer.proj.org/?latlng=-45.435465,-15.468750&ignoreWorld=false&allowDeprecated=false&authorities=EPSG&activeTypes=GEOGRAPHIC_2D_CRS,GEOGRAPHIC_3D_CRS,GEOCENTRIC_CRS

In EPSG called "World (by country)"
https://epsg.org/extent_2830/World-by-country.html

like
EPSG:4326 <https://epsg.org/crs_4326/WGS-84.html> WGS 84
EPSG:9754 <https://epsg.org/crs_9754/WGS-84-G2139-.html> WGS 84 (G2139)
EPSG:9988 <https://epsg.org/crs_9988/ITRF2020.html> ITRF2020
EPSG:10176 <https://epsg.org/crs_10176/IGS20.html> IGS20

but not some other implementations like
EPSG:4978 <https://epsg.org/crs_4978/WGS-84.html> WGS 84
EPSG:9753 <https://epsg.org/crs_9753/WGS-84-G2139-.html> WGS 84 (G2139)
EPSG:9055 <https://epsg.org/crs_9055/WGS-84-G1150-.html> WGS 84 (G1150)

(yes, same CRS. The difference is Geographic 2D vs 3D vs geocentric)

Do you know why this difference?
Is it something to communicate to EPSG?
I personally think that that endless list of countries is not needed when
there is a "World" at front.

Cheers and happy new year.
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231230/4f8a1757/attachment.htm>

From even.rouault at spatialys.com  Sat Dec 30 11:17:31 2023
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 30 Dec 2023 20:17:31 +0100
Subject: [PROJ] World area of use
In-Reply-To: <CADRrdKvaA+q8pn4nrPP1i+kQ5hq=f5e8asUsHSUoh58oKhqjEg@mail.gmail.com>
References: <CADRrdKvaA+q8pn4nrPP1i+kQ5hq=f5e8asUsHSUoh58oKhqjEg@mail.gmail.com>
Message-ID: <1d3d14ed-1469-450c-89a7-2840c9a124fe@spatialys.com>

Hi Javier,

I don't know the reason for the difference, but if there's one, it would 
be interesting to know, and if there's none, converging to World 
(without country list, extent 1262) would indeed seem better. Looking at 
the few instances that use World by country (extent 2830), there is no 
apparent logic. It isn't even related to the type (geographic 2D vs 3D 
vs geocentric).

Grep'ping in the change items of the registry (grep epsg_change 
PostgreSQL_Data_Script.sql | grep 1262 | grep 2830), shows a global 
trend of moving from 2830 to 1262 (with a interesting back & forth for 
CRS 8227, IGS14 geocentric, which was changed from 1262 to 2830, and 
then later back to 1262)

Even

Le 30/12/2023 ? 19:54, Javier Jimenez Shaw via PROJ a ?crit?:
> Hi
>
> Playing with crs-explorer, I found that there are a few (and only a 
> few) CRSs with an endless "area of use" description:
> https://crs-explorer.proj.org/?latlng=-45.435465,-15.468750&ignoreWorld=false&allowDeprecated=false&authorities=EPSG&activeTypes=GEOGRAPHIC_2D_CRS,GEOGRAPHIC_3D_CRS,GEOCENTRIC_CRS 
> <https://crs-explorer.proj.org/?latlng=-45.435465,-15.468750&ignoreWorld=false&allowDeprecated=false&authorities=EPSG&activeTypes=GEOGRAPHIC_2D_CRS,GEOGRAPHIC_3D_CRS,GEOCENTRIC_CRS>
>
> In EPSG called "World (by country)" 
> https://epsg.org/extent_2830/World-by-country.html
>
> like
> EPSG:4326 <https://epsg.org/crs_4326/WGS-84.html> 	WGS 84
>
> EPSG:9754 <https://epsg.org/crs_9754/WGS-84-G2139-.html> 	WGS 84 (G2139)
>
> EPSG:9988 <https://epsg.org/crs_9988/ITRF2020.html> 	ITRF2020
>
> EPSG:10176 <https://epsg.org/crs_10176/IGS20.html> 	IGS20
>
>
> but not some other implementations like
> EPSG:4978 <https://epsg.org/crs_4978/WGS-84.html> 	WGS 84
>
> EPSG:9753 <https://epsg.org/crs_9753/WGS-84-G2139-.html> 	WGS 84 (G2139)
>
> EPSG:9055 <https://epsg.org/crs_9055/WGS-84-G1150-.html> 	WGS 84 (G1150)
>
>
> (yes, same CRS. The difference is Geographic 2D vs 3D vs geocentric)
>
> Do you know why this difference?
> Is it something to communicate to EPSG?
> I personally think that that endless list of countries is not needed 
> when there is a "World" at front.
>
> Cheers and happy new year.
> .___ ._ ..._ .. . ._.? .___ .. __ . _. . __..? ... .... ._ .__
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20231230/bfa3603f/attachment.htm>

