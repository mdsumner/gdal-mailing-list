From even.rouault at spatialys.com  Fri Feb  2 15:45:03 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 3 Feb 2024 00:45:03 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <AM0P192MB04826F48D0A6C9C4B8C4DE77EF7E2@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
 <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoENuAyx3voWcfn_s1XmxUetjrQ2iWba4zEX_Sdq4pMrHOw@mail.gmail.com>
 <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <rmi4jgijkeb.fsf@s1.lexort.com>
 <CAH0YoENC7m=MSf=H4+yaLTrhjRf-M42XFAxN9cergPG4_9Z3fQ@mail.gmail.com>
 <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
 <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>
 <3f3d124b-ccf8-4ea3-9df5-2f5f231d2c47@spatialys.com>
 <AM0P192MB048208CD9EDC078D26830606EF97A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <AM0P192MB04826F48D0A6C9C4B8C4DE77EF7E2@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
Message-ID: <b718e12e-37c2-412e-aefb-19a4f4d34288@spatialys.com>

Jochem,

I actually just needed that functionnality, so I've just implemented it, 
along a variation of what I proposed previously, adding a +bank=<name> 
parameter to push/pop

Cf https://github.com/OSGeo/PROJ/pull/4033

Even

Le 29/01/2024 ? 17:15, Lesparre, Jochem via PROJ a ?crit?:
>> Adding a variable name could made be optional? In that case +push +v_3 and +pop +v_3 would still work the old way, but one could also use +push +v_3 +name=ellipsoidalheight and +pop +v_3 +name=ellipsoidalheight.
> Could my suggestion above, provide a workable compromise for the solution of my problem? What is needed to find consensus on this topic, or should I create a feature request without specifying a specific solution?
>
> Regards, Jochem
>
>
>
> Disclaimer:
> De inhoud van deze e-mail is vertrouwelijk en uitsluitend bestemd voor de geadresseerde(n).
> Gebruik, openbaarmaking, vermenigvuldiging, verspreiding en/of verstrekking van deze informatie aan derden is niet toegestaan.
> Op al onze producten en diensten zijn onze algemene leveringsvoorwaarden van toepassing
> [https://www.kadaster.nl/algemene-leveringsvoorwaarden].
>
> Disclaimer:
> This email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed.
> If you are not the intended recipient, you are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited.
> Our general terms and conditions of delivery apply to all our products and services
> [https://www.kadaster.com/general-terms-and-conditions].
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From knudsen.thomas at gmail.com  Sat Feb  3 08:31:19 2024
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Sat, 3 Feb 2024 17:31:19 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <b718e12e-37c2-412e-aefb-19a4f4d34288@spatialys.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
 <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoENuAyx3voWcfn_s1XmxUetjrQ2iWba4zEX_Sdq4pMrHOw@mail.gmail.com>
 <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <rmi4jgijkeb.fsf@s1.lexort.com>
 <CAH0YoENC7m=MSf=H4+yaLTrhjRf-M42XFAxN9cergPG4_9Z3fQ@mail.gmail.com>
 <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
 <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>
 <3f3d124b-ccf8-4ea3-9df5-2f5f231d2c47@spatialys.com>
 <AM0P192MB048208CD9EDC078D26830606EF97A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <AM0P192MB04826F48D0A6C9C4B8C4DE77EF7E2@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <b718e12e-37c2-412e-aefb-19a4f4d34288@spatialys.com>
Message-ID: <CAH0YoEM66oNNHAZJbmHfksepMMpOB8YpWPM7tS++Tmm-jPZn0Q@mail.gmail.com>

Jochem, Even:

The main problem with PROJ's current push/pop functionality
is that the four-stack implementation makes it impossible
to push one dimension of a coordinate-tuple and pop it into
another, without an elaborate axisswap dance at both ends
of the push/pop-pair.

This is a consequence of the v_1 ... v_4 syntax used: Since
the order of operator arguments is not necessarily preserved
during the parsing process, a pair specified as "v_1 v_2"
may appear as "v_2 v_1" at parsing time.

A more axisswap-like syntax would have eliminated this - e.g.

    proj=push items=1,3

to push dimensions 1 and 3 of the coordinate tuple onto the
stack, and

    proj=pop items=3,1

to pop them back into swapped dimensions.

But since the obvious names of push and pop is now taken,
let's make a virtue out of necessity by adding a little
more encapsulation by introducing the "stack subsystem",
giving this syntax:

    proj=stack push=1,3

and

    proj=stack pop=3,1

The implementation will still mimick that of push/pop (i.e
being handled as part of the pipeline machinery, rather
than as ordinary proj=foo-operators), but it will not stomp
on the existing unfortunate push/pop-implementation, and it
leaves room for extension, e.g. by introducing the swap and
flip operators mused over earlier in this thread:

    proj=stack push=1,3
    proj=stack swap
    proj=stack pop=1,3

to essentially do the same as above and:

    proj=stack push=1,3
    proj=stack flip=3,1

although I believe the need for these will be limited, once
we have a push/pop pair actually working like a stack.

The wish for named registers mentioned earlier in the
thread may be introduced using a similar syntax, where:

    proj=reg save=1,3 into=first,third
    proj=reg restore=1,3 from=third,first

will do the same swapping of first and third dimension as
above, but using named registers instead of stack slots.

I see the potential for improved clarity when using named
registers instead of stack slots, by using meaningful
names for the registers (e.g. ellipsoidal_height and
orthometric_height, to take the obvious use case).

The problem, however, is when trying to interpret the
workings of a pipeline running in inverse mode:

In the inverse stack-case, we only need to flip the
abstract concepts of stack slots, and swap push for pop.

Whereas in the register case, we also need to "abstractly
swap the concrete concepts behind the concrete register
names" which, at least to my imperfect brain, is much
harder.

But while not personally seeing the need for registers,
I acknowledge the wish for them, and to make this work
in a fairly backwards compatible way, I suggest the
solution outlined above, i.e. two new, and well
encapsulated subsystems in the pipeline implementation.
And once they are well established: Deprecation of the
current push/pop pair.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240203/efc2a3ae/attachment.htm>

From even.rouault at spatialys.com  Sat Feb  3 10:29:47 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Sat, 3 Feb 2024 19:29:47 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <CAH0YoEM66oNNHAZJbmHfksepMMpOB8YpWPM7tS++Tmm-jPZn0Q@mail.gmail.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
 <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoENuAyx3voWcfn_s1XmxUetjrQ2iWba4zEX_Sdq4pMrHOw@mail.gmail.com>
 <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <rmi4jgijkeb.fsf@s1.lexort.com>
 <CAH0YoENC7m=MSf=H4+yaLTrhjRf-M42XFAxN9cergPG4_9Z3fQ@mail.gmail.com>
 <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
 <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>
 <3f3d124b-ccf8-4ea3-9df5-2f5f231d2c47@spatialys.com>
 <AM0P192MB048208CD9EDC078D26830606EF97A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <AM0P192MB04826F48D0A6C9C4B8C4DE77EF7E2@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <b718e12e-37c2-412e-aefb-19a4f4d34288@spatialys.com>
 <CAH0YoEM66oNNHAZJbmHfksepMMpOB8YpWPM7tS++Tmm-jPZn0Q@mail.gmail.com>
Message-ID: <8e1346c9-156b-4035-a1f1-63d9aaa514f9@spatialys.com>

Thomas,

| The main problem with PROJ's current push/pop functionality
> is that the four-stack implementation makes it impossible
> to push one dimension of a coordinate-tuple and pop it into
> another, without an elaborate axisswap dance at both ends
> of the push/pop-pair.
>
> This is a consequence of the v_1 ... v_4 syntax used: Since
> the order of operator arguments is not necessarily preserved
> during the parsing process, a pair specified as "v_1 v_2"
> may appear as "v_2 v_1" at parsing time.

While I agree with the theoretical problem, is it actually an issue in 
practice? I can't remember having been annoyed by that a single time. 
Axis swap issues mostly/only occur to get compliant with CRS official 
axis order, and that happens only at the early and final stages of a 
pipeline, whereas push/pop logic happens in between where we always 
speak longitude,latitude / easting, northing in that order. So during 
most of a pipeline execution, axis order remains quite stable. So while 
imperfect, I don't see a strong/immediate need to implement a new 
improved push/pop.

>
>
> ? ? proj=stack push=1,3
> ? ? proj=stack swap
> ? ? proj=stack pop=1,3
>
> to essentially do the same as above and:
>
> ? ? proj=stack push=1,3
> ? ? proj=stack flip=3,1

stack swap, flip: sorry but my own imperfect brain of a programmer not 
having coded in Forth, I will have a very hard time to remember what 
they do exactly without referring to the doc :-)


>
> The wish for named registers mentioned earlier in the
> thread may be introduced using a similar syntax, where:
>
> ? ? proj=reg save=1,3 into=first,third
> ? ? proj=reg restore=1,3 from=third,first

I would be interested in implementing just save/restore.

Why not having 2 separate operations, since (save,into) and 
(restore,from) are mutually exclusive parameters.

So

- proj=save from=1,3 into=first,third

- proj=restore into=1,3 from=first,third

So my pipeline would become:

|proj=pipeline step proj=save from=3 into=etrs89_h omit_inv # skipped on 
reverse path step inv proj=vgridshift grids=CR2005.tif multiplier=1 step 
proj=save from=3 into=baltic57_h # reversed as restore step proj=restore 
from=etrs89_h into=3 omit_inv # skipped on reverse path step proj=cart 
ellps=GRS80 step inv proj=helmert x=572.213 rx=-4.9732 y=85.334 
ry=-1.529 z=461.94 rz=-5.2484 s=3.5378 convention=coordinate_frame step 
inv proj=cart ellps=bessel step proj=restore from=baltic57_h into=3 # 
reversed as a save|

I find it reasonably readable.

But I can also live with your proposed syntax.

~~~~~

Or... at least for the sake of brainstorming.... I've also imagined that 
we could extent the existing "set" operator with new capabilities, that 
would bring it even closer to the syntax of most programming languages 
(destination=source)

- proj=set first=v_1? : assign v_1 component to "first" variable

- proj=set v_1=first? : restore v_1?component from "first" variable

This causes a few departures from actual PROJ operator logic in, but 
none of them are actually implementation issues:

- the parameter name is actually a variable for the "save" semantics (so 
we have to iterate over the list of parameters, instead of just querying 
a fixed set of parameter names)

- for the restore case (ie v_1=), we need to look at the value to 
determine the semantics. If it is a number, then use the current 
semantics. If it is a string, then it is a variable name. But not 
different from programming language with A=1 and A=B...

In the reverse path, proj=set first=v_1 would be interpreted as proj=set 
v_1=first, and vice-verca. That part is admitedly a bit hard to 
swallow... especially since it wouldn't apply to when you do the regular 
v_1=numeric_value, and would be my main hesitation to implement that.

If we'd go with the idea, we would likely need to exclude v_1, v_2, v_3, 
v_4 as valid variable names (that is assigning a component to another 
one, since that's generally the role of axisswap) mostly because it is 
not intuitive to me what should be done in the reverse path. We's also 
need to exclude "proj" as a variable name to avoid awkward and 
unparseable things like "proj=set proj=v_1".

~~~~~~~

[ side remark: Actually I believe the push/pop stack logic could be 
entirely replaced by named registers. If you look at programming 
languages, you use more often named variables than stacks. And in actual 
PROJ pipelines, I believe you have rarely have patterns where you have 
nested pushes of the same variable, that is something like "push 1", do 
X, "push 1", do Y "pop 1", do Z, "pop 1". And even if you have, that can 
be easily replaced with "save 1 as first_one", do X, "save 1 as 
second_one", do Y, "restore 1 from second_one", do Z, "restore 1 from 
first_one".

... but ... while my above remark is likely true for "optimized" / 
hand-written pipelines, looking at the code in createOperations() that 
compose pipelines, I wouldn't exclude that such situations could happen 
where it would generate a pipeline with nested pushes, some of them 
being likely redundant/no-op. I'm not sure really of what monstrosities 
that code can generate :-) Anyway the current push/pop will remain]


>
> The problem, however, is when trying to interpret the
> workings of a pipeline running in inverse mode:
>
> In the inverse stack-case, we only need to flip the
> abstract concepts of stack slots, and swap push for pop.
>
> Whereas in the register case, we also need to "abstractly
> swap the concrete concepts behind the concrete register
> names" which, at least to my imperfect brain, is much
> harder.

Understanding the inversion of a pipelines requires a fully awaken 
brain?(Acually when you think of it, no programming language I'm aware 
of offers the possibility to execute a program in reverse order) - 
especially with omit_fwd/omit_inv, double negation of +inv, etc. , but 
the inverse of a save is a restore, and the inverse of into is from. So 
not terribly different from push / pop.

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240203/7a6ebeb0/attachment-0001.htm>

From knudsen.thomas at gmail.com  Sat Feb  3 12:17:48 2024
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Sat, 3 Feb 2024 21:17:48 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <8e1346c9-156b-4035-a1f1-63d9aaa514f9@spatialys.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
 <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoENuAyx3voWcfn_s1XmxUetjrQ2iWba4zEX_Sdq4pMrHOw@mail.gmail.com>
 <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <rmi4jgijkeb.fsf@s1.lexort.com>
 <CAH0YoENC7m=MSf=H4+yaLTrhjRf-M42XFAxN9cergPG4_9Z3fQ@mail.gmail.com>
 <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
 <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>
 <3f3d124b-ccf8-4ea3-9df5-2f5f231d2c47@spatialys.com>
 <AM0P192MB048208CD9EDC078D26830606EF97A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <AM0P192MB04826F48D0A6C9C4B8C4DE77EF7E2@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <b718e12e-37c2-412e-aefb-19a4f4d34288@spatialys.com>
 <CAH0YoEM66oNNHAZJbmHfksepMMpOB8YpWPM7tS++Tmm-jPZn0Q@mail.gmail.com>
 <8e1346c9-156b-4035-a1f1-63d9aaa514f9@spatialys.com>
Message-ID: <CAH0YoEPH75YtfqBdu0+5y1vr-t_Srf5PRGJFar330pSoJwmaWw@mail.gmail.com>

> stack swap, flip: sorry but my own imperfect brain of a
> programmer not having coded in Forth, I will have a very
> hard time to remember what they do exactly without
> referring to the doc :-)

But I believe you have programmed in assembly, which is
exactly the same.

"swap" swaps the top-of-stack with the second-of-stack,
"flip" was Jochen's invention of (essentially) doing a
swap, while behaving as if the operand is the top-of-stack.

I do not necessarily find it a stellar idea, but in the use
case presented by Jochem, I acknowledge the elegance.

Otherwise, these instructions are fundamental computational
paraphernalia and come with the advantage of not having to
invent register names for something living transiently.

Named registers make sense for cases hand-written by people
with sufficiently deep insight to invent meaningful names
for the registers.

In the auto-generated case, on the other hand, we will have
to rely on e.g. UUIDs, which certainly does not provide a
nice reading/debugging experience (as you also point out
indirectly in your final comments).

Hence, nice use cases for both register and stack based
approaches. And as the stack based approach (although in an
unfortunate shape) is already part of PROJ, I assumed that
most PROJ users and developers would be familiar with that
way of thinking

> Why not having 2 separate operations, since (save,into)
> and (restore,from) are mutually exclusive parameters.

To reduce API sprawl (for a sufficiently abstract notion
of the concept "API"):

The major part of PROJ operators are simply implementations
of "something out of either Snyder's book or EPSG Guidance
Note 7-2", i.e. something that takes a coordinate as input,
and does some totally step-local thing with it.

Saving and storing (pushing and popping) operand elements,
on the other hand, are kind of modifiers, that do not do
anything particularly interesting by themselves, but they
modify the response of the next operation, by dragging
in context from potentially many steps away.

In other words, they break the locality/linear control flow
of the pipeline. So having a special set of top level
operators (proj=stack, proj=reg(ister)) is both a way of
flagging to the reader that "here be dragons", and a way of
encouraging a somewhat more comprehensive and cohesive way
of documenting the bastards, by making them fit under a
common conceptual headline.

You might argue that in that case, it would be preferable
to have just one top level operator for breaking the flow.
I would agree with that, but my imagination was not up to
inventing a sufficiently general concept, without steering
directly back in the mess I was trying to sketch a way out
of :-)

Finally, let me express my huge appreciation for you taking
time to discuss this. I find it fascinating to observe that
our notions of "what is natural and elegant", and "what is
bolted-on and kludgy" are so different (perhaps even close
to being orthogonal!). It probably mostly underlines the
fact that "communication is difficult", but maybe also that
both approaches may have their advantages
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240203/2d0246a9/attachment.htm>

From j1 at jimenezshaw.com  Sun Feb  4 01:33:41 2024
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Sun, 4 Feb 2024 10:33:41 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <CAH0YoEPH75YtfqBdu0+5y1vr-t_Srf5PRGJFar330pSoJwmaWw@mail.gmail.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
 <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoENuAyx3voWcfn_s1XmxUetjrQ2iWba4zEX_Sdq4pMrHOw@mail.gmail.com>
 <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <rmi4jgijkeb.fsf@s1.lexort.com>
 <CAH0YoENC7m=MSf=H4+yaLTrhjRf-M42XFAxN9cergPG4_9Z3fQ@mail.gmail.com>
 <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
 <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>
 <3f3d124b-ccf8-4ea3-9df5-2f5f231d2c47@spatialys.com>
 <AM0P192MB048208CD9EDC078D26830606EF97A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <AM0P192MB04826F48D0A6C9C4B8C4DE77EF7E2@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <b718e12e-37c2-412e-aefb-19a4f4d34288@spatialys.com>
 <CAH0YoEM66oNNHAZJbmHfksepMMpOB8YpWPM7tS++Tmm-jPZn0Q@mail.gmail.com>
 <8e1346c9-156b-4035-a1f1-63d9aaa514f9@spatialys.com>
 <CAH0YoEPH75YtfqBdu0+5y1vr-t_Srf5PRGJFar330pSoJwmaWw@mail.gmail.com>
Message-ID: <CADRrdKvA4n8iNGeD7yn6XOtMbt5e4tiMkQ6DVGmSqRetLhr05A@mail.gmail.com>

On Sat, 3 Feb 2024 at 21:17, Thomas Knudsen via PROJ <proj at lists.osgeo.org>
wrote:

> > stack swap, flip: sorry but my own imperfect brain of a
> > programmer not having coded in Forth, I will have a very
> > hard time to remember what they do exactly without
> > referring to the doc :-)
>
> But I believe you have programmed in assembly, which is
> exactly the same.
>
> "swap" swaps the top-of-stack with the second-of-stack,
> "flip" was Jochen's invention of (essentially) doing a
> swap, while behaving as if the operand is the top-of-stack.
>

I do understand the flip command from Jochen (from his email on 14th Dec).
But I do not get "proj=stack flip=3,1"


> I do not necessarily find it a stellar idea, but in the use
> case presented by Jochem, I acknowledge the elegance.
>
> Otherwise, these instructions are fundamental computational
> paraphernalia and come with the advantage of not having to
> invent register names for something living transiently.
>
> Named registers make sense for cases hand-written by people
> with sufficiently deep insight to invent meaningful names
> for the registers.
>
> In the auto-generated case, on the other hand, we will have
> to rely on e.g. UUIDs, which certainly does not provide a
> nice reading/debugging experience (as you also point out
> indirectly in your final comments).
>

I was thinking about that. How to ensure that an inner step will not use
the same register name?
But, are those registers only for hand-written pipelines? Do you have in
mind any automatic routine using them?

In case we go with the named register pattern, I was happy with Even's
proposal save/restore into/from. It is easy to understand and clear to
invert.


> Hence, nice use cases for both register and stack based
> approaches. And as the stack based approach (although in an
> unfortunate shape) is already part of PROJ, I assumed that
> most PROJ users and developers would be familiar with that
> way of thinking
>
> > Why not having 2 separate operations, since (save,into)
> > and (restore,from) are mutually exclusive parameters.
>
> To reduce API sprawl (for a sufficiently abstract notion
> of the concept "API"):
>
> The major part of PROJ operators are simply implementations
> of "something out of either Snyder's book or EPSG Guidance
> Note 7-2", i.e. something that takes a coordinate as input,
> and does some totally step-local thing with it.
>
> Saving and storing (pushing and popping) operand elements,
> on the other hand, are kind of modifiers, that do not do
> anything particularly interesting by themselves, but they
> modify the response of the next operation, by dragging
> in context from potentially many steps away.
>
> In other words, they break the locality/linear control flow
> of the pipeline. So having a special set of top level
> operators (proj=stack, proj=reg(ister)) is both a way of
> flagging to the reader that "here be dragons", and a way of
> encouraging a somewhat more comprehensive and cohesive way
> of documenting the bastards, by making them fit under a
> common conceptual headline.
>

Yes, "here be dragons", because there are. If I remember correctly, those
push and pop are usually due to the vertical transformations, that could be
independent from the horizontal transformation... but they relay on
horizontal coordinates. That can be a mess. (I still see some people mixing
ellipsoidal height from Polkovo with orthometric heights with an geoid
model over GRS80 in a way that seems wrong to me, or at least a big mess.
But this another topic).

If I understood correctly, you also want to move things from one dimension
to the other (from v1 to v3) Does it make sense to exchange X coordinate
with Z coordinate? (in the scope of proj inner pipelines, where everything
is easting-northing-elev)


> You might argue that in that case, it would be preferable
> to have just one top level operator for breaking the flow.
> I would agree with that, but my imagination was not up to
> inventing a sufficiently general concept, without steering
> directly back in the mess I was trying to sketch a way out
> of :-)
>
> Finally, let me express my huge appreciation for you taking
> time to discuss this. I find it fascinating to observe that
> our notions of "what is natural and elegant", and "what is
> bolted-on and kludgy" are so different (perhaps even close
> to being orthogonal!). It probably mostly underlines the
> fact that "communication is difficult", but maybe also that
> both approaches may have their advantages
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240204/b927085a/attachment.htm>

From knudsen.thomas at gmail.com  Sun Feb  4 07:53:58 2024
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Sun, 4 Feb 2024 16:53:58 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <CADRrdKvA4n8iNGeD7yn6XOtMbt5e4tiMkQ6DVGmSqRetLhr05A@mail.gmail.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoEOoSmZ_QcbTmHnATtVYxzHBkCd2DAhe5dFzuWiugto+JA@mail.gmail.com>
 <AM6P192MB0488A02C118D7E400D38C015EF8CA@AM6P192MB0488.EURP192.PROD.OUTLOOK.COM>
 <CAH0YoENuAyx3voWcfn_s1XmxUetjrQ2iWba4zEX_Sdq4pMrHOw@mail.gmail.com>
 <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <rmi4jgijkeb.fsf@s1.lexort.com>
 <CAH0YoENC7m=MSf=H4+yaLTrhjRf-M42XFAxN9cergPG4_9Z3fQ@mail.gmail.com>
 <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
 <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>
 <3f3d124b-ccf8-4ea3-9df5-2f5f231d2c47@spatialys.com>
 <AM0P192MB048208CD9EDC078D26830606EF97A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <AM0P192MB04826F48D0A6C9C4B8C4DE77EF7E2@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <b718e12e-37c2-412e-aefb-19a4f4d34288@spatialys.com>
 <CAH0YoEM66oNNHAZJbmHfksepMMpOB8YpWPM7tS++Tmm-jPZn0Q@mail.gmail.com>
 <8e1346c9-156b-4035-a1f1-63d9aaa514f9@spatialys.com>
 <CAH0YoEPH75YtfqBdu0+5y1vr-t_Srf5PRGJFar330pSoJwmaWw@mail.gmail.com>
 <CADRrdKvA4n8iNGeD7yn6XOtMbt5e4tiMkQ6DVGmSqRetLhr05A@mail.gmail.com>
Message-ID: <CAH0YoEPV73zOfGTENXSJ3Xc_ZxpMA9-Ztnrhybu9_cQKMLExJw@mail.gmail.com>

Javier said:

> I was thinking about that. How to ensure that an inner
> step will not use the same register name?

That's less of a problem than it seems: An inner step would
come from an inner pipeline instantiated through an
init=foo:bar step, so in that case, a *separate* pipeline
instantiation handles the registers and stacks.

It is not possible to pass on anything via neither stacks
nor registers between inner and outer pipelines, as they
are handled by the pipeline-operator: If you check the
code, you will see that the current push and pop operators
are part of the pipeline operator implementation - so in
that sense, pipelines differ from other operators.

But in all other senses, they look exactly like any other
operator and the only communication that happens is by
passing on the operand to the next step.

So to an outer pipeline, an inner pipeline looks exactly
like any other operator, and it receives the operand
exactly like any other step in the outer pipeline. So no
magic there, and no risk of neither register shadowing,
nor stack smashing.

> But, are those registers only for hand-written
> pipelines? Do you have in mind any automatic routine
> using them?

(I suppose this is a question for Even, as I'm the one who
finds stacks both simpler, clearer and less error prone
than registers)

> If I understood correctly, you also want to move things
> from one dimension to the other (from v1 to v3) Does it
> make sense to exchange X coordinate with Z coordinate?

Until now, it has been impossible, through a stack
implementation which goes out of its way to *make* it
impossible. Jochem presented a case, where a less rigid,
and way simpler, single-stack implementation would have
saved his day, while still enabling everything possible
with the existing four-stack implementation.

It is not a matter of whether it is a good idea to move
things from one dimension to another, it is just that the
simpler solution also happens to make this possible.

Whether to use this possibility or not is not part of the
discussion. It is a possibility, and impossibilizing that
possibility would require more code, more complex code, and
needless second-guessing of "what might be reasonable
use cases, now and in all future".

I believe the current stack implementation emerged by
accident: It solved an immediate problem, and hence was
considered good enough.

Had we had the foresight to think this through slightly
more back then, we would have arrived at the lean single-
stack solution, with a syntax mimicking that of axisswap,
rather than the unnecessarily complex four-stack solution
with a syntax (v_1 v_2 v_3 v_4), not following any other
pattern of existing PROJ syntaxen.

But we didn't, and not much harm done with that: It is just
a set of two operators that will live on forever inside
pipeline.cpp. But with Jochem's and Even's recent use cases
it was clear that the current push and pop operators do not
support things that could be reasonably expected from a
stack implementation.

- Jochem initially  asserted that the solution was to make
  push and  pop refer to a queue (FIFO), rather than a
  stack (LIFO).

- Even found registers, i.e. an entirely new syntactic and
  semantic component more convincing

- And I have tried to argue that a simpler, leaner stack
  implementation would solve both Jochem's and Even's
  use cases - and potentially a lot more, by not imposing
  artificial limitations

Three solutions - pick your favorite :-)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240204/f357ef1e/attachment-0001.htm>

From even.rouault at spatialys.com  Mon Feb  5 15:06:09 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 6 Feb 2024 00:06:09 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <CAH0YoEPV73zOfGTENXSJ3Xc_ZxpMA9-Ztnrhybu9_cQKMLExJw@mail.gmail.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <rmi4jgijkeb.fsf@s1.lexort.com>
 <CAH0YoENC7m=MSf=H4+yaLTrhjRf-M42XFAxN9cergPG4_9Z3fQ@mail.gmail.com>
 <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
 <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>
 <3f3d124b-ccf8-4ea3-9df5-2f5f231d2c47@spatialys.com>
 <AM0P192MB048208CD9EDC078D26830606EF97A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <AM0P192MB04826F48D0A6C9C4B8C4DE77EF7E2@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <b718e12e-37c2-412e-aefb-19a4f4d34288@spatialys.com>
 <CAH0YoEM66oNNHAZJbmHfksepMMpOB8YpWPM7tS++Tmm-jPZn0Q@mail.gmail.com>
 <8e1346c9-156b-4035-a1f1-63d9aaa514f9@spatialys.com>
 <CAH0YoEPH75YtfqBdu0+5y1vr-t_Srf5PRGJFar330pSoJwmaWw@mail.gmail.com>
 <CADRrdKvA4n8iNGeD7yn6XOtMbt5e4tiMkQ6DVGmSqRetLhr05A@mail.gmail.com>
 <CAH0YoEPV73zOfGTENXSJ3Xc_ZxpMA9-Ztnrhybu9_cQKMLExJw@mail.gmail.com>
Message-ID: <3b2c90d9-eef2-4b5c-b429-c1ba7433189f@spatialys.com>

Oh well, re-reading this whole thread, I've rallied to Thomas' proposed 
new "stack" operator. Its main advantage over named registers is indeed 
that it avoids potential issues with register naming when integrating 
such steps in very complex pipelines.

Hence I've implemented push, pop and swap modes (the later swaping the 
top and antepenultimate elements of the stack), which should address 
"my" use case and Jochem's. Actually our both use cases are the same, it 
is just that steps are done in the reverse way (and thus the final 
omit_fwd pop of Jochem's pipeline is equivalent to the initial omit_inv 
push of "mine).

==> https://github.com/OSGeo/PROJ/pull/4036


-- 
http://www.spatialys.com
My software is free, but my time generally not.


From Jochem.Lesparre at kadaster.nl  Tue Feb  6 04:44:27 2024
From: Jochem.Lesparre at kadaster.nl (Lesparre, Jochem)
Date: Tue, 6 Feb 2024 12:44:27 +0000
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <3b2c90d9-eef2-4b5c-b429-c1ba7433189f@spatialys.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <rmi4jgijkeb.fsf@s1.lexort.com>
 <CAH0YoENC7m=MSf=H4+yaLTrhjRf-M42XFAxN9cergPG4_9Z3fQ@mail.gmail.com>
 <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
 <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>
 <3f3d124b-ccf8-4ea3-9df5-2f5f231d2c47@spatialys.com>
 <AM0P192MB048208CD9EDC078D26830606EF97A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <AM0P192MB04826F48D0A6C9C4B8C4DE77EF7E2@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <b718e12e-37c2-412e-aefb-19a4f4d34288@spatialys.com>
 <CAH0YoEM66oNNHAZJbmHfksepMMpOB8YpWPM7tS++Tmm-jPZn0Q@mail.gmail.com>
 <8e1346c9-156b-4035-a1f1-63d9aaa514f9@spatialys.com>
 <CAH0YoEPH75YtfqBdu0+5y1vr-t_Srf5PRGJFar330pSoJwmaWw@mail.gmail.com>
 <CADRrdKvA4n8iNGeD7yn6XOtMbt5e4tiMkQ6DVGmSqRetLhr05A@mail.gmail.com>
 <CAH0YoEPV73zOfGTENXSJ3Xc_ZxpMA9-Ztnrhybu9_cQKMLExJw@mail.gmail.com>
 <3b2c90d9-eef2-4b5c-b429-c1ba7433189f@spatialys.com>
Message-ID: <AM0P192MB0482140E7871046743234EF7EF462@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>

Hi Even,

This new implementation uses a single stack instead of 4? So, the following pipeline would alter the ellipsoidal height and swap the original lon,lat? That is quite confusing for users that are used to the old push and pop.

+step +proj=stack +push=1,2 /
+step +proj=cart /
+step +proj=helmert +rx=1 +ry=2 +rz=3 /
+step +proj=cart +inv /
+step +proj=stack +pop=1,2

I am also wondering if the single stack could give new problems. How to access the stack values after the first two? This theoretical (but not unthinkable) case would still be impossible:

* input lon1 lat1 h1
* push lon1 lat1 h1
* helmert transformation to lon2 lat2 h2
* push lon2 lat2 h2
* pop lon1 lat1 h1
* helmert transformation to lon3 lat3 h3
* pop lon2 lat2
* output lon2 lat2 h3

Jochem



Disclaimer:
De inhoud van deze e-mail is vertrouwelijk en uitsluitend bestemd voor de geadresseerde(n).
Gebruik, openbaarmaking, vermenigvuldiging, verspreiding en/of verstrekking van deze informatie aan derden is niet toegestaan.
Op al onze producten en diensten zijn onze algemene leveringsvoorwaarden van toepassing
[https://www.kadaster.nl/algemene-leveringsvoorwaarden].

Disclaimer:
This email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed.
If you are not the intended recipient, you are notified that disclosing, copying, distributing or taking any action in reliance on the contents of this information is strictly prohibited.
Our general terms and conditions of delivery apply to all our products and services
[https://www.kadaster.com/general-terms-and-conditions].

From knudsen.thomas at gmail.com  Tue Feb  6 05:43:10 2024
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Tue, 6 Feb 2024 14:43:10 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <3b2c90d9-eef2-4b5c-b429-c1ba7433189f@spatialys.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <AM0P192MB0482EC9BB404C26D5930EBF9EF92A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <rmi4jgijkeb.fsf@s1.lexort.com>
 <CAH0YoENC7m=MSf=H4+yaLTrhjRf-M42XFAxN9cergPG4_9Z3fQ@mail.gmail.com>
 <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
 <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>
 <3f3d124b-ccf8-4ea3-9df5-2f5f231d2c47@spatialys.com>
 <AM0P192MB048208CD9EDC078D26830606EF97A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <AM0P192MB04826F48D0A6C9C4B8C4DE77EF7E2@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <b718e12e-37c2-412e-aefb-19a4f4d34288@spatialys.com>
 <CAH0YoEM66oNNHAZJbmHfksepMMpOB8YpWPM7tS++Tmm-jPZn0Q@mail.gmail.com>
 <8e1346c9-156b-4035-a1f1-63d9aaa514f9@spatialys.com>
 <CAH0YoEPH75YtfqBdu0+5y1vr-t_Srf5PRGJFar330pSoJwmaWw@mail.gmail.com>
 <CADRrdKvA4n8iNGeD7yn6XOtMbt5e4tiMkQ6DVGmSqRetLhr05A@mail.gmail.com>
 <CAH0YoEPV73zOfGTENXSJ3Xc_ZxpMA9-Ztnrhybu9_cQKMLExJw@mail.gmail.com>
 <3b2c90d9-eef2-4b5c-b429-c1ba7433189f@spatialys.com>
Message-ID: <CAH0YoEOLm5Xjjzuj9qDV5L_BcoYYaAn1QuJHH9t5i3vfYO0vjA@mail.gmail.com>

Thanks Even! This is really awesome. I have taken a brief look at the
code and docs.
At first read, some of the docs confused me a bit - but I will take a
closer look
Thursday (I'm fully booked right now)

From even.rouault at spatialys.com  Tue Feb  6 05:59:57 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 6 Feb 2024 14:59:57 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <AM0P192MB0482140E7871046743234EF7EF462@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
 <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>
 <3f3d124b-ccf8-4ea3-9df5-2f5f231d2c47@spatialys.com>
 <AM0P192MB048208CD9EDC078D26830606EF97A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <AM0P192MB04826F48D0A6C9C4B8C4DE77EF7E2@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <b718e12e-37c2-412e-aefb-19a4f4d34288@spatialys.com>
 <CAH0YoEM66oNNHAZJbmHfksepMMpOB8YpWPM7tS++Tmm-jPZn0Q@mail.gmail.com>
 <8e1346c9-156b-4035-a1f1-63d9aaa514f9@spatialys.com>
 <CAH0YoEPH75YtfqBdu0+5y1vr-t_Srf5PRGJFar330pSoJwmaWw@mail.gmail.com>
 <CADRrdKvA4n8iNGeD7yn6XOtMbt5e4tiMkQ6DVGmSqRetLhr05A@mail.gmail.com>
 <CAH0YoEPV73zOfGTENXSJ3Xc_ZxpMA9-Ztnrhybu9_cQKMLExJw@mail.gmail.com>
 <3b2c90d9-eef2-4b5c-b429-c1ba7433189f@spatialys.com>
 <AM0P192MB0482140E7871046743234EF7EF462@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
Message-ID: <02c032fe-ebd2-4725-84cf-0ac3c8288f9a@spatialys.com>

Jochem,
> This new implementation uses a single stack instead of 4? So, the following pipeline would alter the ellipsoidal height and swap the original lon,lat? That is quite confusing for users that are used to the old push and pop.
>
> +step +proj=stack +push=1,2 /
> +step +proj=cart /
> +step +proj=helmert +rx=1 +ry=2 +rz=3 /
> +step +proj=cart +inv /
> +step +proj=stack +pop=1,2

No, this wouldn't swap lon,lat.?? push=1,2 pushes the tuple (x,y) to the 
top of the stack as (a=x,b=y) and pop=1,2 restores (a,b) as (x,y). So 
this usage is strictly equivalent to using the old operators with 
+proj=push +v_1 +v_2 and +proj=pop +v_1 +v_2.

Said otherwise "+proj=stack +push=1,2" is not equivalent to "+proj=stack 
+push=1" followed by "+proj=stack +push=2".


>
> I am also wondering if the single stack could give new problems. How to access the stack values after the first two? This theoretical (but not unthinkable) case would still be impossible:
>
> * input lon1 lat1 h1
> * push lon1 lat1 h1
> * helmert transformation to lon2 lat2 h2
> * push lon2 lat2 h2
> * pop lon1 lat1 h1
> * helmert transformation to lon3 lat3 h3
> * pop lon2 lat2
> * output lon2 lat2 h3

We'd probably need an extended stack swap operator, where you could 
designate the indices of the stack that you want to exchange (and you 
would need to push/pop separately (lon1, lat1) and (h1)). But that 
becomes quite involved (for the user writing the pipeline)

I guess you could probably also achieve that pipeline by combining the 
"old" and "new" stacks (you can use both in the same pipeline). But 
here, the solution for "normal" human brains (assuming mine qualifies as 
normal) would probably be named variables. There's some reason why Forth 
concepts haven't percolated to more modern languages.

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240206/f33ec14a/attachment.htm>

From j1 at jimenezshaw.com  Thu Feb  8 01:43:58 2024
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Thu, 8 Feb 2024 10:43:58 +0100
Subject: [PROJ] + prefix in pipeline entries
Message-ID: <CADRrdKvXYtCcZ+DJW=EytkZGEcy3ZPJ5xQ8A7a3SwLq-KdZmqQ@mail.gmail.com>

Hi

I wanted to know if I can combine a pipeline where some entries do have a
"+" prefix and other doesn't (yes, it is ugly, I know it)
I found the method "pj_shrink" that, among other things, removes "+"
preceded by a space. So I deduce that the answer was "yes".

That rises the question (actually the question was there before, but today
I found pj_shrink): why the "+" before every entry? Is it just to make it
clearer and easier in the command line, not needing quotes for the entire
expression? Is there anything else I do not see?

I prefer (visually) the expression with "+"s. Somehow I find it nicer ;)
But I have seen that old expressions don't have it, and I am curious to
know the reason to change it.

Thanks
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240208/d9eca9ef/attachment.htm>

From kristianevers at gmail.com  Thu Feb  8 02:12:53 2024
From: kristianevers at gmail.com (Kristian Evers)
Date: Thu, 8 Feb 2024 11:12:53 +0100
Subject: [PROJ] + prefix in pipeline entries
In-Reply-To: <CADRrdKvXYtCcZ+DJW=EytkZGEcy3ZPJ5xQ8A7a3SwLq-KdZmqQ@mail.gmail.com>
References: <CADRrdKvXYtCcZ+DJW=EytkZGEcy3ZPJ5xQ8A7a3SwLq-KdZmqQ@mail.gmail.com>
Message-ID: <CALECs+cBq7Q+U2Y-8sKUPHTK7wMO6kqVU9Abt=DZftP3-KPG8A@mail.gmail.com>

Javier,



The cause of the +?s dates back to ancient times. When proj (the command
line application) was originally created everything in argv would have been
treated as a parameter for the command. To distinguish between regular
parameters such as -f or -l and projection parameters such as +proj, +a or
+ellps the plusses were used. Internally the +?s would have been stripped
if I remember correctly. So that?s the explanation for the +-syntax. Today
we would just wrap the proj-string in quotes, as you suggest, but I assume
that wasn?t an option back in the day.



At some point init-files were introduced and here it wasn?t necessary to
include the plusses because it was obvious that projection parameters were
given, although the +?s were/are allowed in init-files. I assume it just
made sense to not use the +-syntax in this context at the time.



Like you, I prefer the +-syntax as it makes it very obvious that we're are
dealing with proj-strings but I know some people feel differently about
that. One thing that is definitely clear is that mixing the two different
styles of notation confuses people. For this reason I have always used the
+-syntax in all documentation I have written. I encourage everyone else to
do the same.


/Kristian

On Thu, 8 Feb 2024 at 10:44, Javier Jimenez Shaw via PROJ <
proj at lists.osgeo.org> wrote:

> Hi
>
> I wanted to know if I can combine a pipeline where some entries do have a
> "+" prefix and other doesn't (yes, it is ugly, I know it)
> I found the method "pj_shrink" that, among other things, removes "+"
> preceded by a space. So I deduce that the answer was "yes".
>
> That rises the question (actually the question was there before, but today
> I found pj_shrink): why the "+" before every entry? Is it just to make it
> clearer and easier in the command line, not needing quotes for the entire
> expression? Is there anything else I do not see?
>
> I prefer (visually) the expression with "+"s. Somehow I find it nicer ;)
> But I have seen that old expressions don't have it, and I am curious to
> know the reason to change it.
>
> Thanks
> .___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240208/6cc592b2/attachment.htm>

From support at mnspoint.com  Thu Feb  8 07:27:46 2024
From: support at mnspoint.com (support at mnspoint.com)
Date: Thu, 08 Feb 2024 17:27:46 +0200
Subject: [PROJ] Problems with transformations: projection could not be
 created and swapped axes with PJ_TYPE_VERTICAL_CRS
In-Reply-To: <aa348949989f4161876f5bc821bea4e5@sensys.de>
References: <aa348949989f4161876f5bc821bea4e5@sensys.de>
Message-ID: <79a0bf59f7ee6a18c6f961d81dfbde17@mnspoint.com>

Some answers:
------------------------------------------------------
Sebastian Gellrich via PROJ kirjoitti 2023-11-03 17:32:
> Hello PROJ9 Community,
> 
> I have 2 questions about transformations. First of all, I do not know
> one hundred percent about transformations.
> 
> I use a library I built myself for all possible Android platforms.
> 
> Now I am testing the library a little and have encountered the
> following problems:
> 
> 1.
> 
> I get a list of all CRS (PJ_TYPE_CRS) with
> proj_get_crs_info_list_from_database(...).
> 
> For testing purposes, I then create a projection with all CRSs using
> proj_create_crs_to_crs(...), which I then normalize with
> 
> proj_normalize_for_visualization(...).
> 
> My source is always WGS84 (EPSG:4326).
> 
> With some projections I get the error "No inverse operation"
> (PROJ_ERR_OTHER_NO_INVERSE_OP) after calling
> proj_get_crs_info_list_from_database.
> 
> What does this mean? Can I somehow create this projection differently?
> 
> 
> Example: EPSG:2218
> 

"No inverse operation" means that the projection is just defined 
forward. So, you cannot use that projection inverse and the library does 
not have any way to calculate inverse. The inverse is not defined. So, 
most likely you should remove all such projections from your procedure 
or list?

> With some CRS of type PJ_TYPE_VERTICAL_CRS I get the error code
> "Unknown error (code 4096)".
> 
> Here the error code tells me even less what the problem is.
> 
> Examples:           EPSG:5620
> 
>                                EPSG:6357 (here I also received the log
> message "pipeline: Pipeline: Mismatched units between step 3 and 4"
> from Proj9)
> 

I don't know what that is. Might be related to previous or similar.

> 2.
> 
> When transforming to type PJ_TYPE_VERTICAL_CRS, the axes seem to be
> swapped in the result.

That is much possible in many cases. I assume you just have to live with 
it or do some fix in your own coding?!

> 
> I used the same WGS84 coordinate for all tests (x=14, y=52, z=100 =>
> Germany, Brandenburg).
> 
> The transformed coordinates were all x=52 and y=14. Is this
> intentional?
> 
> Some transformed coordinates also contained only Infinity.
> 
> Thanks in advance for your help.
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

Regards: Janne


From even.rouault at spatialys.com  Thu Feb  8 11:05:23 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 8 Feb 2024 20:05:23 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <CAH0YoEOLm5Xjjzuj9qDV5L_BcoYYaAn1QuJHH9t5i3vfYO0vjA@mail.gmail.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
 <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>
 <3f3d124b-ccf8-4ea3-9df5-2f5f231d2c47@spatialys.com>
 <AM0P192MB048208CD9EDC078D26830606EF97A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <AM0P192MB04826F48D0A6C9C4B8C4DE77EF7E2@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <b718e12e-37c2-412e-aefb-19a4f4d34288@spatialys.com>
 <CAH0YoEM66oNNHAZJbmHfksepMMpOB8YpWPM7tS++Tmm-jPZn0Q@mail.gmail.com>
 <8e1346c9-156b-4035-a1f1-63d9aaa514f9@spatialys.com>
 <CAH0YoEPH75YtfqBdu0+5y1vr-t_Srf5PRGJFar330pSoJwmaWw@mail.gmail.com>
 <CADRrdKvA4n8iNGeD7yn6XOtMbt5e4tiMkQ6DVGmSqRetLhr05A@mail.gmail.com>
 <CAH0YoEPV73zOfGTENXSJ3Xc_ZxpMA9-Ztnrhybu9_cQKMLExJw@mail.gmail.com>
 <3b2c90d9-eef2-4b5c-b429-c1ba7433189f@spatialys.com>
 <CAH0YoEOLm5Xjjzuj9qDV5L_BcoYYaAn1QuJHH9t5i3vfYO0vjA@mail.gmail.com>
Message-ID: <23a16e4e-6498-4b6d-96b5-06316fe13ffb@spatialys.com>

If the reciprocal of "Only fools don't change their mind" holds, then 
I'm feeling particularly intelligent right now.

The stack approach still doesn't pass my "good taste" / "appropriate for 
the 21th century and beyond" criteria. It obviously can be implemented, 
but should it?

I believe the main objection to named variable, was : what happens when 
one nests / copy-paste part of pipelines in a more complex pipelines.

And maybe the answer should be just what modern programming languages 
use in that situation: function scopes. A variable is only visible in 
its function scope, but not in calling or called function scopes

+proj=function +start
+proj= ... do something useful here ...
+proj=save from=1,3 into=first,third
+proj= ... do something useful here ...

+proj=function +start? # Start of a new nested pipeline
+proj= do something useful here, possibly using first and third as 
variable names, in total isolation from what happened before
+proj=function +end # End of nested pipeline

+proj= ... do something useful here ...
+proj=restore into=1,3 from=first,third
+proj= ... do something useful here ...
+proj=function +end

+proj=function would be fully optional. There would be an implicit 
function frame when executing a pipeline. You'd only use it explicitly 
if you need to do such nested structures. I believe that the current 
+push/+pop stacks (as being thoughts as alternative approach to named 
variables) should be only valid within a function scope (thus at 
function start, you start a new stack frame)

We could possibly, later, much later, enhance function start to pass 
caller variables to the callee, and function end to return callee 
variables to the caller, if there was ever such a use case to ... pop up 
... if I might say.

Even


Le 06/02/2024 ? 14:43, Thomas Knudsen a ?crit?:
> Thanks Even! This is really awesome. I have taken a brief look at the
> code and docs.
> At first read, some of the docs confused me a bit - but I will take a
> closer look
> Thursday (I'm fully booked right now)

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From knudsen.thomas at gmail.com  Thu Feb  8 13:09:57 2024
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Thu, 8 Feb 2024 22:09:57 +0100
Subject: [PROJ] Make push and pop FIFO?
In-Reply-To: <23a16e4e-6498-4b6d-96b5-06316fe13ffb@spatialys.com>
References: <AM0P192MB0482617C0F76AD40C7E17D9EEF8CA@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <b7be156f-bf4a-4a40-b7c7-6550794a3b01@spatialys.com>
 <CAH0YoEPW3P48CU3OoYBS4c8kWhc8q4HsPQyDwJB-Jwjf0OaXuQ@mail.gmail.com>
 <3f3d124b-ccf8-4ea3-9df5-2f5f231d2c47@spatialys.com>
 <AM0P192MB048208CD9EDC078D26830606EF97A@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <AM0P192MB04826F48D0A6C9C4B8C4DE77EF7E2@AM0P192MB0482.EURP192.PROD.OUTLOOK.COM>
 <b718e12e-37c2-412e-aefb-19a4f4d34288@spatialys.com>
 <CAH0YoEM66oNNHAZJbmHfksepMMpOB8YpWPM7tS++Tmm-jPZn0Q@mail.gmail.com>
 <8e1346c9-156b-4035-a1f1-63d9aaa514f9@spatialys.com>
 <CAH0YoEPH75YtfqBdu0+5y1vr-t_Srf5PRGJFar330pSoJwmaWw@mail.gmail.com>
 <CADRrdKvA4n8iNGeD7yn6XOtMbt5e4tiMkQ6DVGmSqRetLhr05A@mail.gmail.com>
 <CAH0YoEPV73zOfGTENXSJ3Xc_ZxpMA9-Ztnrhybu9_cQKMLExJw@mail.gmail.com>
 <3b2c90d9-eef2-4b5c-b429-c1ba7433189f@spatialys.com>
 <CAH0YoEOLm5Xjjzuj9qDV5L_BcoYYaAn1QuJHH9t5i3vfYO0vjA@mail.gmail.com>
 <23a16e4e-6498-4b6d-96b5-06316fe13ffb@spatialys.com>
Message-ID: <CAH0YoEP-wDz=g1mETuCV=xB1xcNjmmCGtn=6aPPhTStrzUZZDQ@mail.gmail.com>

> I believe the main objection to named variable, was:
> what happens when one nests / copy-paste part of
> pipelines in a more complex pipelines.

@Even,

As I have already said earlier in this thread, this is
not a problem with nested pipelines (as they execute in
their own context).

But it might obviously be a problem (as you write) when
copy-pasting parts of other pipelines. But general
carelessness is very hard to guard against, and I do not
think we should try to walk down the alley of "the safe
knife": It leads to overengineered uselessness.

But obviously, I believe that stacks should - well: Not be
implemented in PROJ, because they are alredy, but
repaired, since the implementation is broken, or at least
unnecessarily limiting.

Also, I believe your latest syntactical suggestion over at
Github (reading the pop-args backwards) results in a very
readable mental model:

stack = [] operand = [10,20,30,40]
push=1,2
stack = [10, 20] operand = [10,20,30,40]
pop=1,2
stack = [] operand = [10,20,30,40]
push=1,2
stack = [10, 20] operand = [10,20,30,40]
pop=2,1
stack = [] operand = [20,10,30,40]

i.e. the push coordinates are placed on the stack (reading l->r
as bottom->top) in the same order as in the argument to push.

and the pop coordinates are pop'd such that the operand
dimensions get the stack element the corresponding pop arg
is placed "under", i.e quite graphically graspable.

Your alternative suggestion about scopes is interesting, but
(I believe) too little. Or too much...

Already, internal pipelines, when instantiated with init=foo,
execute in their own scope, so it will really just be a
matter of lifting the restriction that "pipelines cannot
contain pipelines", and introducing an "end-of-pipeline"
marker (perhaps "stop" as a nod to "step"), then gobbling
up everything up until the "stop" marker into an internal
buffer and treating that with the same code that now handles
init=foo.

Then there's the problem with an internal pipeline that
contains another internal pipeline. How is that handled?

By pushing it onto a stack! Scopes are really just stacks...

I think init=... handles internal inits by recursion, which
is also just a matter of stacks, although this time handled
by the compiler and the runtime. I'm not sure it's quite as
easy to implement without the overhead of the file system,
but it would be nice if not so.

But nevertheless, I think this will be too little, because
first, it is already somewhat orthogonal to the existing PROJ
architecture and second, it provides too little new
functionality, and third it is "just another programming
language".

So I think if the PROJ key=value syntax should be extended,
it should be be by internal bindings to a sandboxed "real"
programming language, making it possible to extend PROJ
with user defined operators, conditionals way beyond the
simple omit_fwd/omit_inv modifiers, and true branching.

On the other hand: The truly remarkable and unique feature
of the as-is PROJ syntax considered as a programming
language, is its ability to execute its programs both ways.

I do not think we will find many obvious candidates for a
PROJ internal extension language that will uphold this
quality unmodified. One of the only candidates I can see
at least might do it is the stack based Forth.

A minimal Forth interpreter can be implemented in a few
hundred bytes, and a more extensive, well documented one,
John Walker's "Atlast" (https://www.fourmilab.ch/atlast/)
is in the public domain, written in plain C, and weighs just
a single (albeit 4000 lines) source file, and a small header
file.

If I see correctly, any PROJ operator can be registered
as a Forth "word", with its key=value-arguments given as
a dictionary. I do however, think it will be quite slow, as
the dict will have to be reread at every invocation, i.e.
for every coordinate tuple handled.

This is part of the reason, I decided on (loosely speaking)
arrays of coordinate tuples as the basic operands of
Rust Geodesy (
https://github.com/busstoptaktik/geodesy/blob/main/ruminations/009-rumination.md)
- as a experiment for a
faster and simpler data flow for PROJ: Not having any
"per coordinate tuple" overheads, but only a "per (say)
100000 coordinate tuples" overhead is quite an optimization.

But nevertheless - PROJ is quite unique in its fundamental
features, and while I think the syntax can be cleaned up
for readability quite drastically (again: see the Rust
Geodesy text), I think messing with its semantics is a more
dragon laden exercise than worth it.

Hence also my sentiments primarily towards repairing the
existing stack implementation, rather than extending the
PROJ language and its unique omnidirectional feature, in
the direction of a more (Turing) complete language.

This said despite that I have been experimenting with a
feature of passing options to macros in Rust Geodesy.

But I think that feature is still too untested and immature
to be proposed for PROJ use.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240208/df19a3fc/attachment.htm>

From nicolas.bellaiche at ign.fr  Thu Feb 15 10:46:23 2024
From: nicolas.bellaiche at ign.fr (Nicolas Bellaiche)
Date: Thu, 15 Feb 2024 19:46:23 +0100 (CET)
Subject: [PROJ] Help needed for a cs2cs pipeline with shift grids
Message-ID: <613751832.7612339.1708022783849.JavaMail.zimbra@ign.fr>

Hi there, 

I try to make a conversion using shiftgrids from IGNF: NTFP to IGNF:ETRS89LCC. By default, it seems that it uses the helmert approximation between the 2 crs and i cannot figure out how to use the grid fr_ign_ntf_r93. 

So far i've found how to create a pipeline that works with cct, but i'd like to have a code that represents the crs and be able to go to different destination crs with the cs2cs application. Any idea? 

(helmert approx + no geoid with the standard codes) 


echo 0 56 0 | ./cs2cs + from IGNF:NTFP +to IGNF:ETRS89LCC 

result : 3474788.21 2655358.23 0.00 




(correct pipeline) 

echo 0 56.000000 0 | PROJ_DEBUG=3 ./cct +proj=pipeline +step +proj=unitconvert +xy_in=grad +xy_out=rad +step +inv +proj=longlat +ellps=clrk80ign +pm=paris +step +proj=hgridshift +grids=fr_ign_ntf_r93.tif +step +inv +proj=vgridshift +grids=RAF09.gtx +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80 




result : 3474789.9972 2655359.2908 43.6421 inf 




reference from THE official IGN/SGN dataset: 

3474789.997 2655359.291 43.642 







Thanks a lot for your help, 




Nicolas Bellaiche 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240215/7e26fdcb/attachment.htm>

From j1 at jimenezshaw.com  Sun Feb 18 02:39:00 2024
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Sun, 18 Feb 2024 11:39:00 +0100
Subject: [PROJ] Extent of vertical CRSs
Message-ID: <CADRrdKvWzw1vMxLoJybGzD+va=mH3UKjX_vJXUOy7PJuky4J0A@mail.gmail.com>

Hi

Recently I found some vertical systems that do not cover properly the
entire area they "should" cover (a country usually) but that their geoid
models do.

One example I already posted here was in Canada for
https://epsg.org/crs_5713/CGVD28-height.html We contacted them (thanks
Even) and they will update EPSG and ISO databases to cover Newfoundland.
https://lists.osgeo.org/pipermail/proj/2023-December/011203.html

But I found more examples:

This example from Switzerland for
https://epsg.org/crs_5729/LHN95-height.html is not as significan (just a
few hundred meters, but it surprising how they missed it in 3 of 4 sides)
You can see them in this mini-GIS link (Just click the "squares" to fit to
each "outlier" bounds)

https://javier.jimenezshaw.com/mapas/?name=st&c=46.7511530,8.6243091&z=8&f=xtra1&b=osm&v=1&e=1&o=100&ed=1&m=&extra_name=swisstopo&extra_url=https%3A%2F%2Fwmts100.geo.admin.ch%2F1.0.0%2Fch.swisstopo.pixelkarte-farbe%2Fdefault%2Fcurrent%2F3857%2F%7Bz%7D%2F%7Bx%7D%2F%7By%7D.jpeg&d7=7mnpck,zgn5v,West,8,008000,3;0,snb&d7=7kse2q,1hopil,South,8,800080,3;f06,-hw&d7=7pjafh,1qgtba,East,8,ff00ff,3;-6k,-fzs&y7=7wncbk,zhfnk,Extent%20EPSG%3A1286,8,ff0000,3;-buixs,0;0,qyxpc;buixs,0&y7=7mo4q6,zheng,West,8,ffa500,3;-wle,bx;-9r7,-k1b;1u4,-2zb;rbd,-7m8;je8,ust&y7=7kspwk,1hmppz,South,8,000080,3;38c,-g9y;-20,2yab;-45l,-9rq;-adz,-2zb;-gm,-ijo;7pz,-lh6;5dl,-nn5&y7=7pj8of,1qgdhh,East,8,a68c2b,3;ka,ckf;198,387;-izq,lh;-ciw,-6n0;-6dc,-9lr&ga=0

Another example is Japan with
https://epsg.org/crs_6695/JGD2011-vertical-height.html that does not
include the island of Okinawa (among others), that is covered by the geoid
model in PROJ-data. (here the distance is big. I didn't know that Japan
reached 24 deg latitude)

In Ireland they leave some islands out of
https://epsg.org/crs_5731/Malin-Head-height.html in the west, like Munster,
also covered by OGM15_Malin tiff file.

*The problem* is that PROJ is not using the geoid model out of the area of
use of the vertical CRS.

One option is to contact the agencies to correct their area of use in EPSG
(does anybody know how to contact Swiss, Japanese or Irish agencies in this
case?). I have seen many EPSG updates that are just increasing 0.01 deg an
extent.

Would it make sense to be more flexible on the vertical transformations?
Just contacting the local agencies is enough?

Cheers,
Javier.

PS I am surprised that some countries do not pay more attention to the
extent of their countries. I thought it was a geopolitical topic.
.___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240218/4f92bbd0/attachment.htm>

From even.rouault at spatialys.com  Sun Feb 18 05:54:20 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 18 Feb 2024 14:54:20 +0100
Subject: [PROJ] Extent of vertical CRSs
In-Reply-To: <CADRrdKvWzw1vMxLoJybGzD+va=mH3UKjX_vJXUOy7PJuky4J0A@mail.gmail.com>
References: <CADRrdKvWzw1vMxLoJybGzD+va=mH3UKjX_vJXUOy7PJuky4J0A@mail.gmail.com>
Message-ID: <85fd3eb4-a85f-4a53-a77d-f5cf021e7bf1@spatialys.com>

Hi Javier,

More exactly, PROJ only uses the extent of the source and target CRS, 
combined with the extent of the transformation, to *sort* potential 
transformations. To *use* transformations, PROJ doesn't rely on the CRS 
extent, just the transformation extent. The later comes directly from 
the database for a transformation with a direct match, or which is 
computed by intersecting the extent of each individual coordinate 
operations when synthesizing a concatenated operation. For example if 
you update proj.db with "update usage set extent_code = 1262 where 
object_table_name = 'grid_transformation' and object_auth_name='EPSG' 
and object_code='7959' which modifies the area of use of "ETRS89 to 
Malin Head height (2)" to be worldwide, then PROJ will try to use the 
uk_os_OSGM15_Malin.tif to use for any input coordinate (and will 
obviously fail if they fall outside of the TIFF grid extent)

PROJ only relies on the extents from the database to determine if it can 
use a coordinate operation, rather than checking the extent of the grid 
itself from the GeoTIFF/NTV2/etc. file. The main reason is for 
performance: if your grids are remote, then it would just kill 
performance if we had to open potentially tens of remote files. Another 
reason is that the actual extent of the grid might be larger than its 
intended area of use, because I believe sometimes models rely on some 
boundary conditions and grid creators have to put some values beyond the 
actual surveyed area, but such extensions probably have a much lower 
accuracy. That said... given that we only take into account the bounding 
box of the area of use, and not the polygonal shape, we may already use 
grid points that are outside the intended area of use.

If we don't have direct contacts with producers, we can probably just 
issue a change request or question through 
https://epsg.org/dataset-change-requests.html. I assume IOGP must be 
able to reach back to the original data submitter if needed.

Even

Le 18/02/2024 ? 11:39, Javier Jimenez Shaw via PROJ a ?crit?:
> Hi
>
> Recently I found some vertical systems that do not cover properly the 
> entire area they "should" cover (a country usually) but that their 
> geoid models do.
>
> One example I already posted here was in Canada for 
> https://epsg.org/crs_5713/CGVD28-height.html We contacted them (thanks 
> Even) and they will update EPSG and ISO databases to cover 
> Newfoundland. 
> https://lists.osgeo.org/pipermail/proj/2023-December/011203.html
>
> But I found more examples:
>
> This example from Switzerland for 
> https://epsg.org/crs_5729/LHN95-height.html is not as significan (just 
> a few hundred meters, but it surprising how they missed it in 3 of 4 
> sides)
> You can see them in this mini-GIS link (Just click the "squares" to 
> fit to each "outlier" bounds)
>
> https://javier.jimenezshaw.com/mapas/?name=st&c=46.7511530,8.6243091&z=8&f=xtra1&b=osm&v=1&e=1&o=100&ed=1&m=&extra_name=swisstopo&extra_url=https%3A%2F%2Fwmts100.geo.admin.ch%2F1.0.0%2Fch.swisstopo.pixelkarte-farbe%2Fdefault%2Fcurrent%2F3857%2F%7Bz%7D%2F%7Bx%7D%2F%7By%7D.jpeg&d7=7mnpck,zgn5v,West,8,008000,3;0,snb&d7=7kse2q,1hopil,South,8,800080,3;f06,-hw&d7=7pjafh,1qgtba,East,8,ff00ff,3;-6k,-fzs&y7=7wncbk,zhfnk,Extent%20EPSG%3A1286,8,ff0000,3;-buixs,0;0,qyxpc;buixs,0&y7=7mo4q6,zheng,West,8,ffa500,3;-wle,bx;-9r7,-k1b;1u4,-2zb;rbd,-7m8;je8,ust&y7=7kspwk,1hmppz,South,8,000080,3;38c,-g9y;-20,2yab;-45l,-9rq;-adz,-2zb;-gm,-ijo;7pz,-lh6;5dl,-nn5&y7=7pj8of,1qgdhh,East,8,a68c2b,3;ka,ckf;198,387;-izq,lh;-ciw,-6n0;-6dc,-9lr&ga=0 
> <https://javier.jimenezshaw.com/mapas/?name=st&c=46.7511530,8.6243091&z=8&f=xtra1&b=osm&v=1&e=1&o=100&ed=1&m=&extra_name=swisstopo&extra_url=https%3A%2F%2Fwmts100.geo.admin.ch%2F1.0.0%2Fch.swisstopo.pixelkarte-farbe%2Fdefault%2Fcurrent%2F3857%2F%7Bz%7D%2F%7Bx%7D%2F%7By%7D.jpeg&d7=7mnpck,zgn5v,West,8,008000,3;0,snb&d7=7kse2q,1hopil,South,8,800080,3;f06,-hw&d7=7pjafh,1qgtba,East,8,ff00ff,3;-6k,-fzs&y7=7wncbk,zhfnk,Extent%20EPSG%3A1286,8,ff0000,3;-buixs,0;0,qyxpc;buixs,0&y7=7mo4q6,zheng,West,8,ffa500,3;-wle,bx;-9r7,-k1b;1u4,-2zb;rbd,-7m8;je8,ust&y7=7kspwk,1hmppz,South,8,000080,3;38c,-g9y;-20,2yab;-45l,-9rq;-adz,-2zb;-gm,-ijo;7pz,-lh6;5dl,-nn5&y7=7pj8of,1qgdhh,East,8,a68c2b,3;ka,ckf;198,387;-izq,lh;-ciw,-6n0;-6dc,-9lr&ga=0>
>
> Another example is Japan with 
> https://epsg.org/crs_6695/JGD2011-vertical-height.html that does not 
> include the island of Okinawa (among others), that is covered by the 
> geoid model in PROJ-data. (here the distance is big. I didn't know 
> that Japan reached 24 deg latitude)
>
> In Ireland they leave some islands out of 
> https://epsg.org/crs_5731/Malin-Head-height.html in the west, like 
> Munster, also covered by OGM15_Malin tiff file.
>
> *The problem* is that PROJ is not using the geoid model out of the 
> area of use of the vertical CRS.
>
> One option is to contact the agencies to correct their area of use in 
> EPSG (does anybody know how to contact Swiss, Japanese or Irish 
> agencies in this case?). I have seen many EPSG updates that are just 
> increasing 0.01 deg an extent.
>
> Would it make sense to be more flexible on the vertical 
> transformations? Just contacting the local agencies is enough?
>
> Cheers,
> Javier.
>
> PS I am surprised that some countries do not pay more attention to the 
> extent of their countries. I thought it was a geopolitical topic.
> .___ ._ ..._ .. . ._.? .___ .. __ . _. . __..? ... .... ._ .__
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240218/d8d2c356/attachment.htm>

From even.rouault at spatialys.com  Sun Feb 18 06:16:44 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 18 Feb 2024 15:16:44 +0100
Subject: [PROJ] Help needed for a cs2cs pipeline with shift grids
In-Reply-To: <613751832.7612339.1708022783849.JavaMail.zimbra@ign.fr>
References: <613751832.7612339.1708022783849.JavaMail.zimbra@ign.fr>
Message-ID: <ea28a0a9-64d1-4d66-b6a3-3f1b6fb9ddc5@spatialys.com>

Nicolas,

I believe the Helmert transformation is used when using IGNF codes, 
because the IGNF database has only recorded the use of the ntf_r93 grid 
for NTF to RGF93, but not for NTF to ETRS89 (by the way, just 
reiterating that IGN is more than welcome to take over on maintenance & 
updates of the IGNF part of the PROJ database). And when transforming 
between 2 IGNF codes, PROJ by default will only consider transformations 
in the IGNF domain. But if you use EPSG codes, then ntf_r93 is available 
to transforme between NTF and ETRS89.

To get a vertical transformation, you also need to use 3D CRS.

For example

projinfo -s "NTF geographiques Paris (gr) + NGF-IGN69 height" -t 
IGNF:ETRS89LCC --3d --spatial-test intersects

reports the following pipeline:

unknown id, axis order change (2D) + NTF (Paris) to NTF (1) + NTF to 
RGF93 v1 (1) + Inverse of RGF93 v1 to NGF-IGN69 height (1) + RGF93 v1 to 
ETRS89 (1) + axis order change (geographic3D horizontal) + ETRS89 
LAMBERT CONFORMAL CONIC, 1.6 m, France - mainland onshore., at least one 
grid missing

PROJ string:
+proj=pipeline
 ? +step +proj=unitconvert +xy_in=grad +xy_out=rad
 ? +step +inv +proj=longlat +ellps=clrk80ign +pm=paris
 ? +step +proj=push +v_3
 ? +step +proj=cart +ellps=clrk80ign
 ? +step +proj=xyzgridshift +grids=fr_ign_gr3df97a.tif +grid_ref=output_crs
 ??????? +ellps=GRS80
 ? +step +inv +proj=cart +ellps=GRS80
 ? +step +proj=pop +v_3
 ? +step +proj=vgridshift +grids=fr_ign_RAF18.tif +multiplier=1
 ? +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000
 ??????? +y_0=2800000 +ellps=GRS80


Here, as there's a mix of objects from different authorities (IGNF and 
EPSG), then EPSG transformations are considered, hence you get the 
gr3df97a grid.

$ echo 0? 56.000000 0? | PROJ_NETWORK=ON bin/cs2cs -d 3? "NTF 
geographiques Paris (gr) + NGF-IGN69 height" IGNF:ETRS89LCC --3d
3474789.997??? 2655359.291 43.644

which is the application of the above pipeline:

$ echo 0? 56.000000 0? | PROJ_NETWORK=ON bin/cct -d 3 +proj=pipeline 
+step +proj=unitconvert +xy_in=grad +xy_out=rad +step +inv +proj=longlat 
+ellps=clrk80ign +pm=paris +step +proj=push +v_3 +step +proj=cart 
+ellps=clrk80ign +step +proj=xyzgridshift +grids=fr_ign_gr3df97a.tif 
+grid_ref=output_crs +ellps=GRS80 +step +inv +proj=cart +ellps=GRS80 
+step +proj=pop +v_3 +step +proj=vgridshift +grids=fr_ign_RAF18.tif 
+multiplier=1 +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 
+x_0=4000000 +y_0=2800000 +ellps=GRS80

If you want to get exactly the below pipeline, you'll have to tweak 
proj.db to create a compound CRS for "NTF geographiques Paris (gr) + 
NGF-IGN69 height", and then create a custom record in 
other_transformation for the transformation between this compound CRS 
and (a 3D projected CRS derived from) IGNF:ETRS89LCC. Cf 
data/sql/other_transformation_custom.sql for potential inspiration

Even


Le 15/02/2024 ? 19:46, Nicolas Bellaiche via PROJ a ?crit?:
> Hi there,
>
> I try to make a conversion using shiftgrids from IGNF: NTFP to 
> IGNF:ETRS89LCC. By default, it seems that it uses the helmert 
> approximation between the 2 crs and i cannot figure out how to use the 
> grid fr_ign_ntf_r93.
>
> So far i've found how to create a pipeline that works with cct, but 
> i'd like to have a code that represents the crs and be able to go to 
> different destination crs with the cs2cs application. Any idea?
>
> (helmert approx + no geoid with the standard codes)
>
> echo 0 560 | ./cs2cs+ from IGNF:NTFP+to IGNF:ETRS89LCC
>
> result? : 3474788.212655358.23 0.00
>
>
> (correct pipeline)
>
> echo 0 56.000000 0? | PROJ_DEBUG=3? ./cct? ? +proj=pipeline +step 
> +proj=unitconvert +xy_in=grad +xy_out=rad +step +inv +proj=longlat 
> +ellps=clrk80ign +pm=paris? +step +proj=hgridshift 
> +grids=fr_ign_ntf_r93.tif +step +inv +proj=vgridshift? 
> +grids=RAF09.gtx? +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 
> +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80
>
>
> result : 3474789.9972 2655359.2908 43.6421 inf
>
>
> reference from THE official IGN/SGN dataset:
>
> 3474789.9972655359.29143.642
>
>
>
> Thanks a lot for your help,
>
>
> Nicolas Bellaiche
>
>
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240218/5ade0a08/attachment-0001.htm>

From j1 at jimenezshaw.com  Sun Feb 18 07:51:10 2024
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Sun, 18 Feb 2024 16:51:10 +0100
Subject: [PROJ] Extent of vertical CRSs
In-Reply-To: <85fd3eb4-a85f-4a53-a77d-f5cf021e7bf1@spatialys.com>
References: <CADRrdKvWzw1vMxLoJybGzD+va=mH3UKjX_vJXUOy7PJuky4J0A@mail.gmail.com>
 <85fd3eb4-a85f-4a53-a77d-f5cf021e7bf1@spatialys.com>
Message-ID: <CADRrdKtZfpsQHYq7mUXcTXweRxfN_pK5eUEJzo9qg-v+8uVO=w@mail.gmail.com>

Thank you Even. I totally forgot about the transformation area of use. It
makes totally sense.

In Japan was considering to change the extent of the PROJ transformation
from 3263 to 1129 (I have a branch ready to make a PR). But then I
remembered the case of the Spanish islands.
In Spain, each island has its own vertical CRS, and its transformation. For
mainland and Balearic islands, the geoid model file is the same, as you can
see in the transformations below. However the area of use of each specific
transformation is only that island (or mainland)
https://epsg.org/transformation_9605/ETRS89-to-ETRS89-Alicante-height-1.html
https://epsg.org/transformation_9609/ETRS89-to-ETRS89-Menorca-height-1.html

(Back in time, maintaining a vertical reference between islands was, let's
say, "complicated". There was no way to connect the levelling networks
through the sea. That's why they needed a reference per island)

For Japan I only find one vertical CRS. So I don't know if they want to
consider different CRSs for each island. They have tidal data for Okinawa,
for example.
https://www.gsi.go.jp/kanshi/tide_data_21_e.html
Unfortunately the GSI did not register the transformation, and it was
implemented as a PROJ transformation, so we do not know GSI intentions.

In summary, I do not know if I should change the extent of the
transformation in Japan or not.


As a fun fact, transforming only to the vertical returns something
different than to a compound.
$ echo 26.328954 127.790975 0 | PROJ_NETWORK=ON cs2cs EPSG:6667 EPSG:6695
26.33 127.79 -31.98
$ echo 26.328954 127.790975 0 | PROJ_NETWORK=ON cs2cs EPSG:6667
EPSG:6668+6695
26.33 127.79 0.00

Best regards,
Javier

On Sun, 18 Feb 2024 at 14:54, Even Rouault <even.rouault at spatialys.com>
wrote:

> Hi Javier,
>
> More exactly, PROJ only uses the extent of the source and target CRS,
> combined with the extent of the transformation, to *sort* potential
> transformations. To *use* transformations, PROJ doesn't rely on the CRS
> extent, just the transformation extent. The later comes directly from the
> database for a transformation with a direct match, or which is computed by
> intersecting the extent of each individual coordinate operations when
> synthesizing a concatenated operation. For example if you update proj.db
> with  "update usage set extent_code = 1262 where object_table_name =
> 'grid_transformation' and object_auth_name='EPSG' and object_code='7959'
> which modifies the area of use of "ETRS89 to Malin Head height (2)" to be
> worldwide, then PROJ will try to use the uk_os_OSGM15_Malin.tif to use for
> any input coordinate (and will obviously fail if they fall outside of the
> TIFF grid extent)
>
> PROJ only relies on the extents from the database to determine if it can
> use a coordinate operation, rather than checking the extent of the grid
> itself from the GeoTIFF/NTV2/etc. file. The main reason is for performance:
> if your grids are remote, then it would just kill performance if we had to
> open potentially tens of remote files. Another reason is that the actual
> extent of the grid might be larger than its intended area of use, because I
> believe sometimes models rely on some boundary conditions and grid creators
> have to put some values beyond the actual surveyed area, but such
> extensions probably have a much lower accuracy. That said... given that we
> only take into account the bounding box of the area of use, and not the
> polygonal shape, we may already use grid points that are outside the
> intended area of use.
>
> If we don't have direct contacts with producers, we can probably just
> issue a change request or question through
> https://epsg.org/dataset-change-requests.html. I assume IOGP must be able
> to reach back to the original data submitter if needed.
>
> Even
> Le 18/02/2024 ? 11:39, Javier Jimenez Shaw via PROJ a ?crit :
>
> Hi
>
> Recently I found some vertical systems that do not cover properly the
> entire area they "should" cover (a country usually) but that their geoid
> models do.
>
> One example I already posted here was in Canada for
> https://epsg.org/crs_5713/CGVD28-height.html We contacted them (thanks
> Even) and they will update EPSG and ISO databases to cover Newfoundland.
> https://lists.osgeo.org/pipermail/proj/2023-December/011203.html
>
> But I found more examples:
>
> This example from Switzerland for
> https://epsg.org/crs_5729/LHN95-height.html is not as significan (just a
> few hundred meters, but it surprising how they missed it in 3 of 4 sides)
> You can see them in this mini-GIS link (Just click the "squares" to fit to
> each "outlier" bounds)
>
>
> https://javier.jimenezshaw.com/mapas/?name=st&c=46.7511530,8.6243091&z=8&f=xtra1&b=osm&v=1&e=1&o=100&ed=1&m=&extra_name=swisstopo&extra_url=https%3A%2F%2Fwmts100.geo.admin.ch%2F1.0.0%2Fch.swisstopo.pixelkarte-farbe%2Fdefault%2Fcurrent%2F3857%2F%7Bz%7D%2F%7Bx%7D%2F%7By%7D.jpeg&d7=7mnpck,zgn5v,West,8,008000,3;0,snb&d7=7kse2q,1hopil,South,8,800080,3;f06,-hw&d7=7pjafh,1qgtba,East,8,ff00ff,3;-6k,-fzs&y7=7wncbk,zhfnk,Extent%20EPSG%3A1286,8,ff0000,3;-buixs,0;0,qyxpc;buixs,0&y7=7mo4q6,zheng,West,8,ffa500,3;-wle,bx;-9r7,-k1b;1u4,-2zb;rbd,-7m8;je8,ust&y7=7kspwk,1hmppz,South,8,000080,3;38c,-g9y;-20,2yab;-45l,-9rq;-adz,-2zb;-gm,-ijo;7pz,-lh6;5dl,-nn5&y7=7pj8of,1qgdhh,East,8,a68c2b,3;ka,ckf;198,387;-izq,lh;-ciw,-6n0;-6dc,-9lr&ga=0
>
> Another example is Japan with
> https://epsg.org/crs_6695/JGD2011-vertical-height.html that does not
> include the island of Okinawa (among others), that is covered by the geoid
> model in PROJ-data. (here the distance is big. I didn't know that Japan
> reached 24 deg latitude)
>
> In Ireland they leave some islands out of
> https://epsg.org/crs_5731/Malin-Head-height.html in the west, like
> Munster, also covered by OGM15_Malin tiff file.
>
> *The problem* is that PROJ is not using the geoid model out of the area
> of use of the vertical CRS.
>
> One option is to contact the agencies to correct their area of use in EPSG
> (does anybody know how to contact Swiss, Japanese or Irish agencies in this
> case?). I have seen many EPSG updates that are just increasing 0.01 deg an
> extent.
>
> Would it make sense to be more flexible on the vertical transformations?
> Just contacting the local agencies is enough?
>
> Cheers,
> Javier.
>
> PS I am surprised that some countries do not pay more attention to the
> extent of their countries. I thought it was a geopolitical topic.
> .___ ._ ..._ .. . ._.  .___ .. __ . _. . __..  ... .... ._ .__
>
> _______________________________________________
> PROJ mailing listPROJ at lists.osgeo.orghttps://lists.osgeo.org/mailman/listinfo/proj
>
> -- http://www.spatialys.com
> My software is free, but my time generally not.
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240218/bb6c8f37/attachment.htm>

From even.rouault at spatialys.com  Sun Feb 18 08:43:09 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Sun, 18 Feb 2024 17:43:09 +0100
Subject: [PROJ] Extent of vertical CRSs
In-Reply-To: <CADRrdKtZfpsQHYq7mUXcTXweRxfN_pK5eUEJzo9qg-v+8uVO=w@mail.gmail.com>
References: <CADRrdKvWzw1vMxLoJybGzD+va=mH3UKjX_vJXUOy7PJuky4J0A@mail.gmail.com>
 <85fd3eb4-a85f-4a53-a77d-f5cf021e7bf1@spatialys.com>
 <CADRrdKtZfpsQHYq7mUXcTXweRxfN_pK5eUEJzo9qg-v+8uVO=w@mail.gmail.com>
Message-ID: <053e7ff2-8c9d-4280-9531-892b9879513e@spatialys.com>


Le 18/02/2024 ? 16:51, Javier Jimenez Shaw a ?crit?:
> Thank you Even. I totally forgot about the transformation area of use. 
> It makes totally sense.
>
> In Japan was considering to change the extent of the PROJ 
> transformation from 3263 to 1129 (I have a branch ready to make a PR). 
> But then I remembered the case of the Spanish islands.
> In Spain, each island has its own vertical CRS, and its 
> transformation. For mainland and Balearic islands, the geoid model 
> file is the same, as you can see in the transformations below. However 
> the area of use of each specific transformation is only that island 
> (or mainland)
> https://epsg.org/transformation_9605/ETRS89-to-ETRS89-Alicante-height-1.html
> https://epsg.org/transformation_9609/ETRS89-to-ETRS89-Menorca-height-1.html
>
> (Back in time, maintaining a vertical reference between islands was, 
> let's say, "complicated". There was no way to connect the levelling 
> networks through the sea. That's why they needed a reference per island)
>
> For Japan I only find one vertical CRS. So I don't know if they want 
> to consider different CRSs for each island. They have tidal data for 
> Okinawa, for example.
> https://www.gsi.go.jp/kanshi/tide_data_21_e.html
> Unfortunately the GSI did not register the transformation, and it was 
> implemented as a PROJ transformation, so we do not know GSI intentions.
>
> In summary, I do not know if I should change the extent of the 
> transformation in Japan or not.
Perhaps you could ask user @tohka with whom we interacted in 
https://github.com/OSGeo/PROJ-data/issues/36 if he can coordinate with 
GSI to have them register the transformation to EPSG?
>
>
> As a fun fact, transforming only to the vertical returns something 
> different than to a compound.
> $ echo 26.328954 127.790975 0 | PROJ_NETWORK=ON cs2cs EPSG:6667 EPSG:6695
> 26.33 127.79 -31.98
> $ echo 26.328954 127.790975 0 | PROJ_NETWORK=ON cs2cs EPSG:6667 
> EPSG:6668+6695
> 26.33 127.79 0.00

The reason is that in the first case there's a direct match between 
EPSG:6667 and EPSG:6695 using the grid, and so only that transformation 
is listed, so it is actually attempted even outside its area of use, 
which is an amendment to my previous theory about the use of extents.... 
So transformation extents are used to determine which one should be used 
when there are alternatives. When there's a single choice, it is 
attempted without extent checks, at least in the generic proj_trans() 
logic. The transformation might fail at a lower stage due to the 
gridshift operation determining that the point is outside of the grid.

In the EPSG:6667 EPSG:6668+6695 case, the transformation is synthesized, 
and so a ballpark one not doing anything is also synthetized, the later 
with a world extent. As the point is outside of the advertized extent 
for the grid based transformation, the ballkpark one is used.

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.


From molnar at sas.elte.hu  Mon Feb 19 12:15:54 2024
From: molnar at sas.elte.hu (molnar)
Date: Mon, 19 Feb 2024 20:15:54 +0000
Subject: [PROJ] Help needed for a cs2cs pipeline with shift grids
In-Reply-To: <ea28a0a9-64d1-4d66-b6a3-3f1b6fb9ddc5@spatialys.com>
References: <613751832.7612339.1708022783849.JavaMail.zimbra@ign.fr>
 <ea28a0a9-64d1-4d66-b6a3-3f1b6fb9ddc5@spatialys.com>
Message-ID: <2cdf15547f7880f25162c93a840a24b3@sas.elte.hu>

Dear Nicolas,

If you really need a cs2cs string, that converts from grad to Lambert 
projection, here it is:

cs2cs -f "%.3f"  +proj=eqc +R=6366197.72367581 +to_meter=100000 
+lon_0=-2.3372291667E +nadgrids=fr_ign_ntf_r93.tif +geoidgrids=RAF09.gtx 
+to +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 
+y_0=2800000 +ellps=GRS80


This produces exactly the same result as your cct code!
It simulates the grad to degree transformation with an equidistant 
cylindrical projection. (My favorite trick :-)) Input data (that is in 
grad) handled internally as meter, and the first part of the cs2cs 
command with equidistant cylindrical projection converts it to degree. 
As a surprise for me, nadgrids and geoidgrids should be applied before 
the +to switch.
Best wishes,
Gabor



On 2024-02-18 14:16, Even Rouault via PROJ wrote:
> Nicolas,
> 
> I believe the Helmert transformation is used when using IGNF codes,
> because the IGNF database has only recorded the use of the ntf_r93
> grid for NTF to RGF93, but not for NTF to ETRS89 (by the way, just
> reiterating that IGN is more than welcome to take over on maintenance
> & updates of the IGNF part of the PROJ database). And when
> transforming between 2 IGNF codes, PROJ by default will only consider
> transformations in the IGNF domain. But if you use EPSG codes, then
> ntf_r93 is available to transforme between NTF and ETRS89.
> 
> To get a vertical transformation, you also need to use 3D CRS.
> 
> For example
> 
> projinfo -s "NTF geographiques Paris (gr) + NGF-IGN69 height" -t
> IGNF:ETRS89LCC --3d --spatial-test intersects
> 
> reports the following pipeline:
> 
> unknown id, axis order change (2D) + NTF (Paris) to NTF (1) + NTF to
> RGF93 v1 (1) + Inverse of RGF93 v1 to NGF-IGN69 height (1) + RGF93 v1
> to ETRS89 (1) + axis order change (geographic3D horizontal) + ETRS89
> LAMBERT CONFORMAL CONIC, 1.6 m, France - mainland onshore., at least
> one grid missing
> 
> PROJ string:
> +proj=pipeline
>   +step +proj=unitconvert +xy_in=grad +xy_out=rad
>   +step +inv +proj=longlat +ellps=clrk80ign +pm=paris
>   +step +proj=push +v_3
>   +step +proj=cart +ellps=clrk80ign
>   +step +proj=xyzgridshift +grids=fr_ign_gr3df97a.tif
> +grid_ref=output_crs
>         +ellps=GRS80
>   +step +inv +proj=cart +ellps=GRS80
>   +step +proj=pop +v_3
>   +step +proj=vgridshift +grids=fr_ign_RAF18.tif +multiplier=1
>   +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000
>         +y_0=2800000 +ellps=GRS80
> 
> Here, as there's a mix of objects from different authorities (IGNF and
> EPSG), then EPSG transformations are considered, hence you get the
> gr3df97a grid.
> 
> $ echo 0  56.000000 0  | PROJ_NETWORK=ON bin/cs2cs -d 3  "NTF
> geographiques Paris (gr) + NGF-IGN69 height" IGNF:ETRS89LCC --3d
> 3474789.997    2655359.291 43.644
> 
> which is the application of the above pipeline:
> 
> $ echo 0  56.000000 0  | PROJ_NETWORK=ON bin/cct -d 3 +proj=pipeline
> +step +proj=unitconvert +xy_in=grad +xy_out=rad +step +inv
> +proj=longlat +ellps=clrk80ign +pm=paris +step +proj=push +v_3 +step
> +proj=cart +ellps=clrk80ign +step +proj=xyzgridshift
> +grids=fr_ign_gr3df97a.tif +grid_ref=output_crs +ellps=GRS80 +step
> +inv +proj=cart +ellps=GRS80 +step +proj=pop +v_3 +step
> +proj=vgridshift +grids=fr_ign_RAF18.tif +multiplier=1 +step +proj=lcc
> +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000
> +ellps=GRS80
> 
> If you want to get exactly the below pipeline, you'll have to tweak
> proj.db to create a compound CRS for "NTF geographiques Paris (gr) +
> NGF-IGN69 height", and then create a custom record in
> other_transformation for the transformation between this compound CRS
> and (a 3D projected CRS derived from) IGNF:ETRS89LCC. Cf
> data/sql/other_transformation_custom.sql for potential inspiration
> 
> Even
> 
> Le 15/02/2024 ? 19:46, Nicolas Bellaiche via PROJ a ?crit :
> 
>> Hi there,
>> 
>> I try to make a conversion using shiftgrids from IGNF: NTFP to
>> IGNF:ETRS89LCC. By default, it seems that it uses the helmert
>> approximation between the 2 crs and i cannot figure out how to use
>> the grid fr_ign_ntf_r93.
>> 
>> So far i've found how to create a pipeline that works with cct, but
>> i'd like to have a code that represents the crs and be able to go to
>> different destination crs with the cs2cs application. Any idea?
>> 
>> (helmert approx + no geoid with the standard codes)
>> 
>> echo 0 56  0 | ./cs2cs  + from IGNF:NTFP  +to IGNF:ETRS89LCC
>> 
>> result  : 3474788.21 2655358.23 0.00
>> 
>> (correct pipeline)
>> 
>> echo 0  56.000000 0  | PROJ_DEBUG=3  ./cct    +proj=pipeline +step
>> +proj=unitconvert +xy_in=grad +xy_out=rad +step +inv +proj=longlat
>> +ellps=clrk80ign +pm=paris  +step +proj=hgridshift
>> +grids=fr_ign_ntf_r93.tif +step +inv  +proj=vgridshift
>> +grids=RAF09.gtx  +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35
>> +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80
>> 
>> result : 3474789.9972   2655359.2908       43.6421           inf
>> 
>> reference from THE official IGN/SGN dataset:
>> 
>> 3474789.997 2655359.291 43.642
>> 
>> Thanks a lot for your help,
>> 
>> Nicolas Bellaiche
>> 
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
> 
> --
> http://www.spatialys.com
> My software is free, but my time generally not.
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

From nicolas.bellaiche at ign.fr  Tue Feb 20 06:41:32 2024
From: nicolas.bellaiche at ign.fr (Nicolas Bellaiche)
Date: Tue, 20 Feb 2024 15:41:32 +0100 (CET)
Subject: [PROJ] Help needed for a cs2cs pipeline with shift grids
In-Reply-To: <2cdf15547f7880f25162c93a840a24b3@sas.elte.hu>
References: <613751832.7612339.1708022783849.JavaMail.zimbra@ign.fr>
 <ea28a0a9-64d1-4d66-b6a3-3f1b6fb9ddc5@spatialys.com>
 <2cdf15547f7880f25162c93a840a24b3@sas.elte.hu>
Message-ID: <1057573051.9536988.1708440092291.JavaMail.zimbra@ign.fr>

@Gabor

your pipeline gives me this result with Proj-9.3.1:
echo 0  56.000000 0  | ./cs2cs -f "%.3f"  +proj=eqc +R=6366197.72367581 +to_meter=100000 +lon_0=-2.3372291667E +nadgrids=fr_ign_ntf_r93.tif +geoidgrids=RAF09.gtx +to +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80

3474840.045	2655360.932 0.000

@Even

I'm studying this, hopefully I find how it works without sweating too much!

Nicolas


----- Mail original -----
De: "molnar via PROJ" <proj at lists.osgeo.org>
?: "proj" <PROJ at lists.osgeo.org>
Envoy?: Lundi 19 F?vrier 2024 21:15:54
Objet: Re: [PROJ] Help needed for a cs2cs pipeline with shift grids

Dear Nicolas,

If you really need a cs2cs string, that converts from grad to Lambert 
projection, here it is:

cs2cs -f "%.3f"  +proj=eqc +R=6366197.72367581 +to_meter=100000 
+lon_0=-2.3372291667E +nadgrids=fr_ign_ntf_r93.tif +geoidgrids=RAF09.gtx 
+to +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 
+y_0=2800000 +ellps=GRS80


This produces exactly the same result as your cct code!
It simulates the grad to degree transformation with an equidistant 
cylindrical projection. (My favorite trick :-)) Input data (that is in 
grad) handled internally as meter, and the first part of the cs2cs 
command with equidistant cylindrical projection converts it to degree. 
As a surprise for me, nadgrids and geoidgrids should be applied before 
the +to switch.
Best wishes,
Gabor



On 2024-02-18 14:16, Even Rouault via PROJ wrote:
> Nicolas,
> 
> I believe the Helmert transformation is used when using IGNF codes,
> because the IGNF database has only recorded the use of the ntf_r93
> grid for NTF to RGF93, but not for NTF to ETRS89 (by the way, just
> reiterating that IGN is more than welcome to take over on maintenance
> & updates of the IGNF part of the PROJ database). And when
> transforming between 2 IGNF codes, PROJ by default will only consider
> transformations in the IGNF domain. But if you use EPSG codes, then
> ntf_r93 is available to transforme between NTF and ETRS89.
> 
> To get a vertical transformation, you also need to use 3D CRS.
> 
> For example
> 
> projinfo -s "NTF geographiques Paris (gr) + NGF-IGN69 height" -t
> IGNF:ETRS89LCC --3d --spatial-test intersects
> 
> reports the following pipeline:
> 
> unknown id, axis order change (2D) + NTF (Paris) to NTF (1) + NTF to
> RGF93 v1 (1) + Inverse of RGF93 v1 to NGF-IGN69 height (1) + RGF93 v1
> to ETRS89 (1) + axis order change (geographic3D horizontal) + ETRS89
> LAMBERT CONFORMAL CONIC, 1.6 m, France - mainland onshore., at least
> one grid missing
> 
> PROJ string:
> +proj=pipeline
>   +step +proj=unitconvert +xy_in=grad +xy_out=rad
>   +step +inv +proj=longlat +ellps=clrk80ign +pm=paris
>   +step +proj=push +v_3
>   +step +proj=cart +ellps=clrk80ign
>   +step +proj=xyzgridshift +grids=fr_ign_gr3df97a.tif
> +grid_ref=output_crs
>         +ellps=GRS80
>   +step +inv +proj=cart +ellps=GRS80
>   +step +proj=pop +v_3
>   +step +proj=vgridshift +grids=fr_ign_RAF18.tif +multiplier=1
>   +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000
>         +y_0=2800000 +ellps=GRS80
> 
> Here, as there's a mix of objects from different authorities (IGNF and
> EPSG), then EPSG transformations are considered, hence you get the
> gr3df97a grid.
> 
> $ echo 0  56.000000 0  | PROJ_NETWORK=ON bin/cs2cs -d 3  "NTF
> geographiques Paris (gr) + NGF-IGN69 height" IGNF:ETRS89LCC --3d
> 3474789.997    2655359.291 43.644
> 
> which is the application of the above pipeline:
> 
> $ echo 0  56.000000 0  | PROJ_NETWORK=ON bin/cct -d 3 +proj=pipeline
> +step +proj=unitconvert +xy_in=grad +xy_out=rad +step +inv
> +proj=longlat +ellps=clrk80ign +pm=paris +step +proj=push +v_3 +step
> +proj=cart +ellps=clrk80ign +step +proj=xyzgridshift
> +grids=fr_ign_gr3df97a.tif +grid_ref=output_crs +ellps=GRS80 +step
> +inv +proj=cart +ellps=GRS80 +step +proj=pop +v_3 +step
> +proj=vgridshift +grids=fr_ign_RAF18.tif +multiplier=1 +step +proj=lcc
> +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000
> +ellps=GRS80
> 
> If you want to get exactly the below pipeline, you'll have to tweak
> proj.db to create a compound CRS for "NTF geographiques Paris (gr) +
> NGF-IGN69 height", and then create a custom record in
> other_transformation for the transformation between this compound CRS
> and (a 3D projected CRS derived from) IGNF:ETRS89LCC. Cf
> data/sql/other_transformation_custom.sql for potential inspiration
> 
> Even
> 
> Le 15/02/2024 ? 19:46, Nicolas Bellaiche via PROJ a ?crit :
> 
>> Hi there,
>> 
>> I try to make a conversion using shiftgrids from IGNF: NTFP to
>> IGNF:ETRS89LCC. By default, it seems that it uses the helmert
>> approximation between the 2 crs and i cannot figure out how to use
>> the grid fr_ign_ntf_r93.
>> 
>> So far i've found how to create a pipeline that works with cct, but
>> i'd like to have a code that represents the crs and be able to go to
>> different destination crs with the cs2cs application. Any idea?
>> 
>> (helmert approx + no geoid with the standard codes)
>> 
>> echo 0 56  0 | ./cs2cs  + from IGNF:NTFP  +to IGNF:ETRS89LCC
>> 
>> result  : 3474788.21 2655358.23 0.00
>> 
>> (correct pipeline)
>> 
>> echo 0  56.000000 0  | PROJ_DEBUG=3  ./cct    +proj=pipeline +step
>> +proj=unitconvert +xy_in=grad +xy_out=rad +step +inv +proj=longlat
>> +ellps=clrk80ign +pm=paris  +step +proj=hgridshift
>> +grids=fr_ign_ntf_r93.tif +step +inv  +proj=vgridshift
>> +grids=RAF09.gtx  +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35
>> +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80
>> 
>> result : 3474789.9972   2655359.2908       43.6421           inf
>> 
>> reference from THE official IGN/SGN dataset:
>> 
>> 3474789.997 2655359.291 43.642
>> 
>> Thanks a lot for your help,
>> 
>> Nicolas Bellaiche
>> 
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
> 
> --
> http://www.spatialys.com
> My software is free, but my time generally not.
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
_______________________________________________
PROJ mailing list
PROJ at lists.osgeo.org
https://lists.osgeo.org/mailman/listinfo/proj

From nicolas.bellaiche at ign.fr  Tue Feb 20 09:53:04 2024
From: nicolas.bellaiche at ign.fr (Nicolas Bellaiche)
Date: Tue, 20 Feb 2024 18:53:04 +0100 (CET)
Subject: [PROJ] Help needed for a cs2cs pipeline with shift grids
In-Reply-To: <ea28a0a9-64d1-4d66-b6a3-3f1b6fb9ddc5@spatialys.com>
References: <613751832.7612339.1708022783849.JavaMail.zimbra@ign.fr>
 <ea28a0a9-64d1-4d66-b6a3-3f1b6fb9ddc5@spatialys.com>
Message-ID: <1944117918.9674023.1708451584929.JavaMail.zimbra@ign.fr>


Hi Even 

Thanks for your kind and developed answer. 
I've tried with the EPSG equivalents: ( [ https://www.sandre.eaufrance.fr/jeu-de-donnees/projection-des-coordonn%C3%A9es?lang=fr | https://www.sandre.eaufrance.fr/jeu-de-donnees/projection-des-coordonn?es?lang=fr ] ) 



echo 0 56.000000 0 | ./cs2cs +from EPSG:4807 +to EPSG:3034 




But the result doesn't make any sense: 




-1640975.39 10099142.17 0.00 




Is there something with the units that is not correct maybe? 







This works well: 

echo 0 56.000000 0 | PROJ_NETWORK=ON ./cs2cs -d 3 "NTF geographiques Paris (gr) + NGF-IGN69 height" IGNF:ETRS89LCC --3d 







and I have a few questions about it: 




1) the result remains unchanged if I remove or put PROJ_NETWORK to OFF. What does it do exactly? 


2) Does the string " NTF geographiques Paris (gr) + NGF-IGN69 height" correspond to an entry in the CRS database proj.db or is it interpreted as a compounded system because PROJ parses the string? There is no simple code like EPSG or IGNF related to it? Can we create one easily? 




3) Where can I see where this crs"NTF geographiques Paris (gr) + NGF-IGN69 height" is defined in the sql commands used to build it? 


Nicolas Bellaiche 







De: "Even Rouault" <even.rouault at spatialys.com> 
?: "Nicolas Bellaiche" <nicolas.bellaiche at ign.fr>, "proj" <PROJ at lists.osgeo.org> 
Envoy?: Dimanche 18 F?vrier 2024 15:16:44 
Objet: Re: [PROJ] Help needed for a cs2cs pipeline with shift grids 



Nicolas, 

I believe the Helmert transformation is used when using IGNF codes, because the IGNF database has only recorded the use of the ntf_r93 grid for NTF to RGF93, but not for NTF to ETRS89 (by the way, just reiterating that IGN is more than welcome to take over on maintenance & updates of the IGNF part of the PROJ database). And when transforming between 2 IGNF codes, PROJ by default will only consider transformations in the IGNF domain. But if you use EPSG codes, then ntf_r93 is available to transforme between NTF and ETRS89. 

To get a vertical transformation, you also need to use 3D CRS. 


For example 


projinfo -s "NTF geographiques Paris (gr) + NGF-IGN69 height" -t IGNF:ETRS89LCC --3d --spatial-test intersects 


reports the following pipeline: 


unknown id, axis order change (2D) + NTF (Paris) to NTF (1) + NTF to RGF93 v1 (1) + Inverse of RGF93 v1 to NGF-IGN69 height (1) + RGF93 v1 to ETRS89 (1) + axis order change (geographic3D horizontal) + ETRS89 LAMBERT CONFORMAL CONIC, 1.6 m, France - mainland onshore., at least one grid missing 

PROJ string: 
+proj=pipeline 
+step +proj=unitconvert +xy_in=grad +xy_out=rad 
+step +inv +proj=longlat +ellps=clrk80ign +pm=paris 
+step +proj=push +v_3 
+step +proj=cart +ellps=clrk80ign 
+step +proj=xyzgridshift +grids=fr_ign_gr3df97a.tif +grid_ref=output_crs 
+ellps=GRS80 
+step +inv +proj=cart +ellps=GRS80 
+step +proj=pop +v_3 
+step +proj=vgridshift +grids=fr_ign_RAF18.tif +multiplier=1 
+step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 
+y_0=2800000 +ellps=GRS80 





Here, as there's a mix of objects from different authorities (IGNF and EPSG), then EPSG transformations are considered, hence you get the gr3df97a grid. 


$ echo 0 56.000000 0 | PROJ_NETWORK=ON bin/cs2cs -d 3 "NTF geographiques Paris (gr) + NGF-IGN69 height" IGNF:ETRS89LCC --3d 
3474789.997 2655359.291 43.644 

which is the application of the above pipeline: 


$ echo 0 56.000000 0 | PROJ_NETWORK=ON bin/cct -d 3 +proj=pipeline +step +proj=unitconvert +xy_in=grad +xy_out=rad +step +inv +proj=longlat +ellps=clrk80ign +pm=paris +step +proj=push +v_3 +step +proj=cart +ellps=clrk80ign +step +proj=xyzgridshift +grids=fr_ign_gr3df97a.tif +grid_ref=output_crs +ellps=GRS80 +step +inv +proj=cart +ellps=GRS80 +step +proj=pop +v_3 +step +proj=vgridshift +grids=fr_ign_RAF18.tif +multiplier=1 +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80 



If you want to get exactly the below pipeline, you'll have to tweak proj.db to create a compound CRS for "NTF geographiques Paris (gr) + NGF-IGN69 height", and then create a custom record in other_transformation for the transformation between this compound CRS and (a 3D projected CRS derived from) IGNF:ETRS89LCC. Cf data/sql/other_transformation_custom.sql for potential inspiration 

Even 



Le 15/02/2024 ? 19:46, Nicolas Bellaiche via PROJ a ?crit : 



Hi there, 

I try to make a conversion using shiftgrids from IGNF: NTFP to IGNF:ETRS89LCC. By default, it seems that it uses the helmert approximation between the 2 crs and i cannot figure out how to use the grid fr_ign_ntf_r93. 

So far i've found how to create a pipeline that works with cct, but i'd like to have a code that represents the crs and be able to go to different destination crs with the cs2cs application. Any idea? 

(helmert approx + no geoid with the standard codes) 


echo 0 56 0 | ./cs2cs + from IGNF:NTFP +to IGNF:ETRS89LCC 

result : 3474788.21 2655358.23 0.00 




(correct pipeline) 

echo 0 56.000000 0 | PROJ_DEBUG=3 ./cct +proj=pipeline +step +proj=unitconvert +xy_in=grad +xy_out=rad +step +inv +proj=longlat +ellps=clrk80ign +pm=paris +step +proj=hgridshift +grids=fr_ign_ntf_r93.tif +step +inv +proj=vgridshift +grids=RAF09.gtx +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80 




result : 3474789.9972 2655359.2908 43.6421 inf 




reference from THE official IGN/SGN dataset: 

3474789.997 2655359.291 43.642 







Thanks a lot for your help, 




Nicolas Bellaiche 


_______________________________________________
PROJ mailing list [ mailto:PROJ at lists.osgeo.org | PROJ at lists.osgeo.org ] [ https://lists.osgeo.org/mailman/listinfo/proj | https://lists.osgeo.org/mailman/listinfo/proj ] 



-- [ http://www.spatialys.com/ | http://www.spatialys.com ] My software is free, but my time generally not. 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240220/56e05fbc/attachment-0001.htm>

From even.rouault at spatialys.com  Tue Feb 20 10:05:55 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Tue, 20 Feb 2024 19:05:55 +0100
Subject: [PROJ] Help needed for a cs2cs pipeline with shift grids
In-Reply-To: <1944117918.9674023.1708451584929.JavaMail.zimbra@ign.fr>
References: <613751832.7612339.1708022783849.JavaMail.zimbra@ign.fr>
 <ea28a0a9-64d1-4d66-b6a3-3f1b6fb9ddc5@spatialys.com>
 <1944117918.9674023.1708451584929.JavaMail.zimbra@ign.fr>
Message-ID: <a727690d-30b7-42f4-b01d-a94c081ef995@spatialys.com>


Le 20/02/2024 ? 18:53, Nicolas Bellaiche a ?crit?:
>
> Hi Even
>
> Thanks for your kind and developed answer.
> I've tried with the EPSG equivalents: 
> (https://www.sandre.eaufrance.fr/jeu-de-donnees/projection-des-coordonn?es?lang=fr 
> <https://www.sandre.eaufrance.fr/jeu-de-donnees/projection-des-coordonn?es?lang=fr>) 
>
>
> echo 056.000000 0| ./cs2cs +from EPSG:4807 +to EPSG:3034
>
>
> But the result doesn't make any sense:
>
>
> -1640975.3910099142.17 0.00
>
>
> Is there something with the units that is not correct maybe?
>
No, just the usual axis order issue as EPSG geographic CRS are lat, long 
ordered, whereas IGNF uses the opposition order. So:

$ echo 56 0 | cs2cs EPSG:4807 EPSG:3034
2655358.23??? 3474788.21 0.00

>
>
> This works well:
>
> echo 056.000000 0| PROJ_NETWORK=ON ./cs2cs -d 3"NTF geographiques 
> Paris (gr) + NGF-IGN69 height" IGNF:ETRS89LCC --3d
>
>
>
> and I have a few questions about it:
>
>
> 1) the result remains unchanged if I remove or put PROJ_NETWORK to 
> OFF. What does it do exactly?
>
If you have already all the grids in the PROJ_DATA directory, 
PROJ_NETWORK will not do anything. This is just for people who don't 
have grids installed locally
>
>
> 2) Does the string"NTF geographiques Paris (gr) + NGF-IGN69 height" 
> correspond to an entry in the CRS database proj.db or is it 
> interpreted as a compounded system because PROJ parses the string?
>
Yes, there's logic in PROJ to split "A + B" into A and B, do simple CRS 
lookups for A and B in the database, and create a compound CRS from that.

> There is no simple code like EPSG or IGNF related to it? Can we create 
> one easily?
>
yes, cf 
https://github.com/OSGeo/PROJ/blob/master/data/sql/transformations_czechia_extra.sql#L86 
for a custom CompoundCRS

You can also get the potential SQL statements (that can be simplified 
and improved) with:

$ bin/projinfo IGNF:NTFP+EPSG:5720?? -o SQL --output-id 
SOME_AUTH:MY_COMPOUND_CRS -q
INSERT INTO geodetic_crs 
VALUES('SOME_AUTH','COMPONENT_MY_COMPOUND_CRS_1','NTF geographiques 
Paris (gr)','','geographic 2D','EPSG','6425','EPSG','6807',NULL,0);
INSERT INTO scope 
VALUES('SOME_AUTH','SCOPE_geodetic_crs_COMPONENT_MY_COMPOUND_CRS_1','NATIONALE, 
HISTORIQUE',0);
INSERT INTO extent 
VALUES('SOME_AUTH','EXTENT_geodetic_crs_COMPONENT_MY_COMPOUND_CRS_1','FRANCE 
METROPOLITAINE (CORSE COMPRISE)','FRANCE METROPOLITAINE (CORSE 
COMPRISE)',41,52,-5.5,10,0);
INSERT INTO usage 
VALUES('SOME_AUTH','USAGE_GEODETIC_CRS_COMPONENT_MY_COMPOUND_CRS_1','geodetic_crs','SOME_AUTH','COMPONENT_MY_COMPOUND_CRS_1','SOME_AUTH','EXTENT_geodetic_crs_COMPONENT_MY_COMPOUND_CRS_1','SOME_AUTH','SCOPE_geodetic_crs_COMPONENT_MY_COMPOUND_CRS_1');
INSERT INTO compound_crs VALUES('SOME_AUTH','MY_COMPOUND_CRS','NTF 
geographiques Paris (gr) + NGF-IGN69 
height','','SOME_AUTH','COMPONENT_MY_COMPOUND_CRS_1','EPSG','5720',0);
INSERT INTO usage 
VALUES('SOME_AUTH','USAGE_COMPOUND_CRS_MY_COMPOUND_CRS','compound_crs','SOME_AUTH','MY_COMPOUND_CRS','PROJ','EXTENT_UNKNOWN','PROJ','SCOPE_UNKNOWN');

This could be simplified by just taking the last 2 statements and modify 
'SOME_AUTH','COMPONENT_MY_COMPOUND_CRS_1' to 'IGNF', 'NTFP'?? (I believe 
this SQL synthesis code only references EPSG objects, hence the 
redefinition of an equivalent of IGNF:NTFP)

>
> 3) Where can I see where this crs"NTF geographiques Paris (gr) + 
> NGF-IGN69 height"?is?defined in the sql commands used to build it?
>
well, if you want all the lineage, this is a cascade of INSERT 
statement. You have to fetch the geographic and vertical CRS, their 
datum, coordinate systems, axis, units in the relevant tables.
>
>
> Nicolas Bellaiche
>
>
>
>
> ------------------------------------------------------------------------
> *De: *"Even Rouault" <even.rouault at spatialys.com>
> *?: *"Nicolas Bellaiche" <nicolas.bellaiche at ign.fr>, "proj" 
> <PROJ at lists.osgeo.org>
> *Envoy?: *Dimanche 18 F?vrier 2024 15:16:44
> *Objet: *Re: [PROJ] Help needed for a cs2cs pipeline with shift grids
>
> Nicolas,
>
> I believe the Helmert transformation is used when using IGNF codes, 
> because the IGNF database has only recorded the use of the ntf_r93 
> grid for NTF to RGF93, but not for NTF to ETRS89 (by the way, just 
> reiterating that IGN is more than welcome to take over on maintenance 
> & updates of the IGNF part of the PROJ database). And when 
> transforming between 2 IGNF codes, PROJ by default will only consider 
> transformations in the IGNF domain. But if you use EPSG codes, then 
> ntf_r93 is available to transforme between NTF and ETRS89.
>
> To get a vertical transformation, you also need to use 3D CRS.
>
> For example
>
> projinfo -s "NTF geographiques Paris (gr) + NGF-IGN69 height" -t 
> IGNF:ETRS89LCC --3d --spatial-test intersects
>
> reports the following pipeline:
>
> unknown id, axis order change (2D) + NTF (Paris) to NTF (1) + NTF to 
> RGF93 v1 (1) + Inverse of RGF93 v1 to NGF-IGN69 height (1) + RGF93 v1 
> to ETRS89 (1) + axis order change (geographic3D horizontal) + ETRS89 
> LAMBERT CONFORMAL CONIC, 1.6 m, France - mainland onshore., at least 
> one grid missing
>
> PROJ string:
> +proj=pipeline
> ? +step +proj=unitconvert +xy_in=grad +xy_out=rad
> ? +step +inv +proj=longlat +ellps=clrk80ign +pm=paris
> ? +step +proj=push +v_3
> ? +step +proj=cart +ellps=clrk80ign
> ? +step +proj=xyzgridshift +grids=fr_ign_gr3df97a.tif +grid_ref=output_crs
> ??????? +ellps=GRS80
> ? +step +inv +proj=cart +ellps=GRS80
> ? +step +proj=pop +v_3
> ? +step +proj=vgridshift +grids=fr_ign_RAF18.tif +multiplier=1
> ? +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000
> ??????? +y_0=2800000 +ellps=GRS80
>
>
> Here, as there's a mix of objects from different authorities (IGNF and 
> EPSG), then EPSG transformations are considered, hence you get the 
> gr3df97a grid.
>
> $ echo 0? 56.000000 0? | PROJ_NETWORK=ON bin/cs2cs -d 3 "NTF 
> geographiques Paris (gr) + NGF-IGN69 height" IGNF:ETRS89LCC --3d
> 3474789.997??? 2655359.291 43.644
>
> which is the application of the above pipeline:
>
> $ echo 0? 56.000000 0? | PROJ_NETWORK=ON bin/cct -d 3 +proj=pipeline 
> +step +proj=unitconvert +xy_in=grad +xy_out=rad +step +inv 
> +proj=longlat +ellps=clrk80ign +pm=paris +step +proj=push +v_3 +step 
> +proj=cart +ellps=clrk80ign +step +proj=xyzgridshift 
> +grids=fr_ign_gr3df97a.tif +grid_ref=output_crs +ellps=GRS80 +step 
> +inv +proj=cart +ellps=GRS80 +step +proj=pop +v_3 +step 
> +proj=vgridshift +grids=fr_ign_RAF18.tif +multiplier=1 +step +proj=lcc 
> +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000 
> +ellps=GRS80
>
> If you want to get exactly the below pipeline, you'll have to tweak 
> proj.db to create a compound CRS for "NTF geographiques Paris (gr) + 
> NGF-IGN69 height", and then create a custom record in 
> other_transformation for the transformation between this compound CRS 
> and (a 3D projected CRS derived from) IGNF:ETRS89LCC. Cf 
> data/sql/other_transformation_custom.sql for potential inspiration
>
> Even
>
>
> Le 15/02/2024 ? 19:46, Nicolas Bellaiche via PROJ a ?crit?:
>
>     Hi there,
>
>     I try to make a conversion using shiftgrids from IGNF: NTFP to
>     IGNF:ETRS89LCC. By default, it seems that it uses the helmert
>     approximation between the 2 crs and i cannot figure out how to use
>     the grid fr_ign_ntf_r93.
>
>     So far i've found how to create a pipeline that works with cct,
>     but i'd like to have a code that represents the crs and be able to
>     go to different destination crs with the cs2cs application. Any idea?
>
>     (helmert approx + no geoid with the standard codes)
>
>     echo 0 560 | ./cs2cs+ from IGNF:NTFP+to IGNF:ETRS89LCC
>
>     result : 3474788.212655358.23 0.00
>
>
>     (correct pipeline)
>
>     echo 0? 56.000000 0? | PROJ_DEBUG=3? ./cct +proj=pipeline +step
>     +proj=unitconvert +xy_in=grad +xy_out=rad +step +inv +proj=longlat
>     +ellps=clrk80ign +pm=paris? +step +proj=hgridshift
>     +grids=fr_ign_ntf_r93.tif +step +inv +proj=vgridshift?
>     +grids=RAF09.gtx? +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35
>     +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80
>
>
>     result : 3474789.9972 2655359.2908 43.6421 inf
>
>
>     reference from THE official IGN/SGN dataset:
>
>     3474789.9972655359.29143.642
>
>
>
>     Thanks a lot for your help,
>
>
>     Nicolas Bellaiche
>
>
>
>     _______________________________________________
>     PROJ mailing list
>     PROJ at lists.osgeo.org
>     https://lists.osgeo.org/mailman/listinfo/proj
>
> -- 
> http://www.spatialys.com
> My software is free, but my time generally not.
>
-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240220/d49b8983/attachment-0001.htm>

From molnar at sas.elte.hu  Wed Feb 21 07:29:18 2024
From: molnar at sas.elte.hu (molnar)
Date: Wed, 21 Feb 2024 15:29:18 +0000
Subject: [PROJ] Help needed for a cs2cs pipeline with shift grids
In-Reply-To: <1057573051.9536988.1708440092291.JavaMail.zimbra@ign.fr>
References: <613751832.7612339.1708022783849.JavaMail.zimbra@ign.fr>
 <ea28a0a9-64d1-4d66-b6a3-3f1b6fb9ddc5@spatialys.com>
 <2cdf15547f7880f25162c93a840a24b3@sas.elte.hu>
 <1057573051.9536988.1708440092291.JavaMail.zimbra@ign.fr>
Message-ID: <0df41ea0e79e1f9a8606946fe0eaef6d@sas.elte.hu>

@Nicolas

I get the same result as you, if the nadgrid and geoidgrid files are not 
selected.
Maybe, in your system, cs2cs does not know where to find grid files. So 
maybe setting this, or copying the grid files in the actual directory 
can help.
You can check it with:
  echo 0  56.000000 0  | ./cs2cs -f "%.3f"  +proj=eqc
  +R=6366197.72367581 +to_meter=100000 +lon_0=-2.3372291667E
  +nadgrids=@null +geoidgrids=@null +to +proj=lcc
  +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000
  +ellps=GRS80
That produces the same wrong result that you got, because no grid files 
are selected.
Please let me know, if it works! Thank you!

Gabor




On 2024-02-20 14:41, Nicolas Bellaiche wrote:
> @Gabor
> 
> your pipeline gives me this result with Proj-9.3.1:
> echo 0  56.000000 0  | ./cs2cs -f "%.3f"  +proj=eqc
> +R=6366197.72367581 +to_meter=100000 +lon_0=-2.3372291667E
> +nadgrids=fr_ign_ntf_r93.tif +geoidgrids=RAF09.gtx +to +proj=lcc
> +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000
> +ellps=GRS80
> 
> 3474840.045	2655360.932 0.000
> 
> @Even
> 
> I'm studying this, hopefully I find how it works without sweating too 
> much!
> 
> Nicolas
> 
> 
> ----- Mail original -----
> De: "molnar via PROJ" <proj at lists.osgeo.org>
> ?: "proj" <PROJ at lists.osgeo.org>
> Envoy?: Lundi 19 F?vrier 2024 21:15:54
> Objet: Re: [PROJ] Help needed for a cs2cs pipeline with shift grids
> 
> Dear Nicolas,
> 
> If you really need a cs2cs string, that converts from grad to Lambert
> projection, here it is:
> 
> cs2cs -f "%.3f"  +proj=eqc +R=6366197.72367581 +to_meter=100000
> +lon_0=-2.3372291667E +nadgrids=fr_ign_ntf_r93.tif 
> +geoidgrids=RAF09.gtx
> +to +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000
> +y_0=2800000 +ellps=GRS80
> 
> 
> This produces exactly the same result as your cct code!
> It simulates the grad to degree transformation with an equidistant
> cylindrical projection. (My favorite trick :-)) Input data (that is in
> grad) handled internally as meter, and the first part of the cs2cs
> command with equidistant cylindrical projection converts it to degree.
> As a surprise for me, nadgrids and geoidgrids should be applied before
> the +to switch.
> Best wishes,
> Gabor
> 
> 
> 
> On 2024-02-18 14:16, Even Rouault via PROJ wrote:
>> Nicolas,
>> 
>> I believe the Helmert transformation is used when using IGNF codes,
>> because the IGNF database has only recorded the use of the ntf_r93
>> grid for NTF to RGF93, but not for NTF to ETRS89 (by the way, just
>> reiterating that IGN is more than welcome to take over on maintenance
>> & updates of the IGNF part of the PROJ database). And when
>> transforming between 2 IGNF codes, PROJ by default will only consider
>> transformations in the IGNF domain. But if you use EPSG codes, then
>> ntf_r93 is available to transforme between NTF and ETRS89.
>> 
>> To get a vertical transformation, you also need to use 3D CRS.
>> 
>> For example
>> 
>> projinfo -s "NTF geographiques Paris (gr) + NGF-IGN69 height" -t
>> IGNF:ETRS89LCC --3d --spatial-test intersects
>> 
>> reports the following pipeline:
>> 
>> unknown id, axis order change (2D) + NTF (Paris) to NTF (1) + NTF to
>> RGF93 v1 (1) + Inverse of RGF93 v1 to NGF-IGN69 height (1) + RGF93 v1
>> to ETRS89 (1) + axis order change (geographic3D horizontal) + ETRS89
>> LAMBERT CONFORMAL CONIC, 1.6 m, France - mainland onshore., at least
>> one grid missing
>> 
>> PROJ string:
>> +proj=pipeline
>>   +step +proj=unitconvert +xy_in=grad +xy_out=rad
>>   +step +inv +proj=longlat +ellps=clrk80ign +pm=paris
>>   +step +proj=push +v_3
>>   +step +proj=cart +ellps=clrk80ign
>>   +step +proj=xyzgridshift +grids=fr_ign_gr3df97a.tif
>> +grid_ref=output_crs
>>         +ellps=GRS80
>>   +step +inv +proj=cart +ellps=GRS80
>>   +step +proj=pop +v_3
>>   +step +proj=vgridshift +grids=fr_ign_RAF18.tif +multiplier=1
>>   +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000
>>         +y_0=2800000 +ellps=GRS80
>> 
>> Here, as there's a mix of objects from different authorities (IGNF and
>> EPSG), then EPSG transformations are considered, hence you get the
>> gr3df97a grid.
>> 
>> $ echo 0  56.000000 0  | PROJ_NETWORK=ON bin/cs2cs -d 3  "NTF
>> geographiques Paris (gr) + NGF-IGN69 height" IGNF:ETRS89LCC --3d
>> 3474789.997    2655359.291 43.644
>> 
>> which is the application of the above pipeline:
>> 
>> $ echo 0  56.000000 0  | PROJ_NETWORK=ON bin/cct -d 3 +proj=pipeline
>> +step +proj=unitconvert +xy_in=grad +xy_out=rad +step +inv
>> +proj=longlat +ellps=clrk80ign +pm=paris +step +proj=push +v_3 +step
>> +proj=cart +ellps=clrk80ign +step +proj=xyzgridshift
>> +grids=fr_ign_gr3df97a.tif +grid_ref=output_crs +ellps=GRS80 +step
>> +inv +proj=cart +ellps=GRS80 +step +proj=pop +v_3 +step
>> +proj=vgridshift +grids=fr_ign_RAF18.tif +multiplier=1 +step +proj=lcc
>> +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000
>> +ellps=GRS80
>> 
>> If you want to get exactly the below pipeline, you'll have to tweak
>> proj.db to create a compound CRS for "NTF geographiques Paris (gr) +
>> NGF-IGN69 height", and then create a custom record in
>> other_transformation for the transformation between this compound CRS
>> and (a 3D projected CRS derived from) IGNF:ETRS89LCC. Cf
>> data/sql/other_transformation_custom.sql for potential inspiration
>> 
>> Even
>> 
>> Le 15/02/2024 ? 19:46, Nicolas Bellaiche via PROJ a ?crit :
>> 
>>> Hi there,
>>> 
>>> I try to make a conversion using shiftgrids from IGNF: NTFP to
>>> IGNF:ETRS89LCC. By default, it seems that it uses the helmert
>>> approximation between the 2 crs and i cannot figure out how to use
>>> the grid fr_ign_ntf_r93.
>>> 
>>> So far i've found how to create a pipeline that works with cct, but
>>> i'd like to have a code that represents the crs and be able to go to
>>> different destination crs with the cs2cs application. Any idea?
>>> 
>>> (helmert approx + no geoid with the standard codes)
>>> 
>>> echo 0 56  0 | ./cs2cs  + from IGNF:NTFP  +to IGNF:ETRS89LCC
>>> 
>>> result  : 3474788.21 2655358.23 0.00
>>> 
>>> (correct pipeline)
>>> 
>>> echo 0  56.000000 0  | PROJ_DEBUG=3  ./cct    +proj=pipeline +step
>>> +proj=unitconvert +xy_in=grad +xy_out=rad +step +inv +proj=longlat
>>> +ellps=clrk80ign +pm=paris  +step +proj=hgridshift
>>> +grids=fr_ign_ntf_r93.tif +step +inv  +proj=vgridshift
>>> +grids=RAF09.gtx  +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35
>>> +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80
>>> 
>>> result : 3474789.9972   2655359.2908       43.6421           inf
>>> 
>>> reference from THE official IGN/SGN dataset:
>>> 
>>> 3474789.997 2655359.291 43.642
>>> 
>>> Thanks a lot for your help,
>>> 
>>> Nicolas Bellaiche
>>> 
>>> _______________________________________________
>>> PROJ mailing list
>>> PROJ at lists.osgeo.org
>>> https://lists.osgeo.org/mailman/listinfo/proj
>> 
>> --
>> http://www.spatialys.com
>> My software is free, but my time generally not.
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

From kristianevers at gmail.com  Mon Feb 26 08:29:01 2024
From: kristianevers at gmail.com (Kristian Evers)
Date: Mon, 26 Feb 2024 17:29:01 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
Message-ID: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>

All,

in preparation for a new round of PROJ and PROJ-data release I have uploaded release candidates for both packages.

Download the archives here: 

https://download.osgeo.org/proj/proj-9.4.0RC1.tar.gz
https://download.osgeo.org/proj/proj-9.4.0RC1.zip

https://download.osgeo.org/proj/proj-data-1.17RC1.tar.gz
https://download.osgeo.org/proj/proj-data-1.17RC1.zip

The PROJ release includes various updates and bug fixes. See the release notes below.

The PROJ-data release comes with the following changes:

* New revisions of chartdatum Norway v2023b
* Added fr_ign_RAC23.tif grid for France-Corsica NGF-IGN 1978 to RGF93-2b
* New DVR90 grids added to reflect recent EPSG-changes that now supports all realizations of the Danish height system
* Added Czech geoid model CR-2005
* Added Portuguese geoid model GeodPT08

Please test the release candidates and report any issues you may find with them.
Either here on the mailing list or on GitHub.

/Kristian

?????????????

9.4.0 Release Notes
-------------------

 Updates
 -------

 o Add support for transformations involving coordinate epoch changes
   (PointMotionOperation), specifically for Canadian NAD83(CSRS)(#3884)

 o SSL_OPTIONS: set SSL options on Curl library (#3936)

 o Add support for unity builds (#3962)

 o Added ability to install *.tif if present in data (#3970)

 o createOperationsCompoundToGeog(): tune selection logic
   when --grid-check known_available is specified (#3990)

 o Increase CMake minimum version from 3.9 to 3.16 (#3997)

 o CMake: use FetchContent to get googletest-1.12.1 (#4006)

 o CMake: Replace custom FindSqlite3 with FindSQLite3 built-in (#4007)

 o tpeqd: use numerically stable formula for computing the central angle
   from (phi_1, lam_1) to (phi_2, lam_2) (#4009)

 o Move content of proj_experimental.h to proj.h (#4019)

 o Add +proj=mod_krovak projection method for Modified Krovak that
   applies to S-JTSK/05 in the Czech Republic (#4021)

 o PROJString formatter optimizer: simplify pipelines doing
   [Modified]Krovak (South West) <--> [Modified]Krovak (East North)
   by just doing an axis swap (#4034)

 o +proj=gridshift: enhance to support grids referenced in projected CRS,
   and with easting_offset/northing_offset corrections (#4038)

 o Tune concatenated operation instanciation, reference CR2005 geoid for
   Czechia and add (disabled by default) records for Czechia S-JTSK/05 based
   transformations (#4044)

 o Database: update to EPSG v11.004 (#4062)

 Bug fixes
 ---------

 o Fix missing symbols at link time for Windows target in Visual Studio (#3984)

 o Improve error message in axisswap (#3975)

 o Avoid convergence errors in +proj=gridshift when using biquadratic
    interpolation (#3985)


From sebastic at xs4all.nl  Mon Feb 26 09:07:04 2024
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Mon, 26 Feb 2024 18:07:04 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
Message-ID: <f4b18e8a-470b-44a2-b271-9c0ffba5a78c@xs4all.nl>

On 2/26/24 5:29 PM, Kristian Evers via PROJ wrote:
> Please test the release candidates and report any issues you may find with them.

._fr_ign_README.txt & ._no_kv_README.txt should most likely not be 
included in the proj-data release tarballs.

They are not committed in the repo, so I suspected an unclean working 
directory from which the release was made.

This might help:

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 79e5aeb..f1d2cdd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -9,7 +9,7 @@ set(PROJ_DATA_VERSION_MINOR 16)
  set(CPACK_SOURCE_GENERATOR "TGZ;ZIP")
  set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY 0)
  set(CPACK_SOURCE_PACKAGE_FILE_NAME 
"proj-data-${PROJ_DATA_VERSION_MAJOR}.${PROJ_DATA_VERSION_MINOR}")
-set(CPACK_SOURCE_IGNORE_FILES 
"/travis/;/.github/;/.git/;.swp$;.*~;.py$;.sh$;/scripts/;${CPACK_SOURCE_IGNORE_FILES}")
+set(CPACK_SOURCE_IGNORE_FILES 
"/travis/;/.github/;/.git/;^\\._;.swp$;.*~;.py$;.sh$;/scripts/;${CPACK_SOURCE_IGNORE_FILES}")
  set(CPACK_INSTALL_COMMANDS
      "${CMAKE_COMMAND} -E make_directory ${CMAKE_BINARY_DIR}/tmp"
      "${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/README.DATA 
${CMAKE_BINARY_DIR}/tmp"

Kind Regards,

Bas

-- 
  GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From nicolas.bellaiche at ign.fr  Tue Feb 27 10:32:44 2024
From: nicolas.bellaiche at ign.fr (Nicolas Bellaiche)
Date: Tue, 27 Feb 2024 19:32:44 +0100 (CET)
Subject: [PROJ] Help needed for a cs2cs pipeline with shift grids
In-Reply-To: <a727690d-30b7-42f4-b01d-a94c081ef995@spatialys.com>
References: <613751832.7612339.1708022783849.JavaMail.zimbra@ign.fr>
 <ea28a0a9-64d1-4d66-b6a3-3f1b6fb9ddc5@spatialys.com>
 <1944117918.9674023.1708451584929.JavaMail.zimbra@ign.fr>
 <a727690d-30b7-42f4-b01d-a94c081ef995@spatialys.com>
Message-ID: <694365745.13514471.1709058764554.JavaMail.zimbra@ign.fr>


Just a follow up, 

I've added a sql file to the sql files that build the proj.db sqlite database with these 2 lines: 



-- NTFP+NGF-IGN69 height 

INSERT INTO compound_crs VALUES('RDI','NTFP.IGN69','NTF geographiques Paris (gr) + NGF-IGN69 height','','IGNF','NTFP','EPSG','5720',0); 

INSERT INTO usage VALUES('RDI','USAGE_COMPOUND_CRS_NTFP.IGN69','compound_crs','RDI','NTFP.IGN69','PROJ','EXTENT_UNKNOWN','PROJ','SCOPE_UNKNOWN'); 




and recompiled the library. It works perfectly. 




echo 0 56.000000 0 | ./cs2cs -f "%.3f" --3d +from IGNF:NTFP +to IGNF:ETRS89LCC --> 3474788.212 2655358.229 42.989 



echo 0 56.000000 0 | ./cs2cs -f "%.3f" --3d +from RDI:NTFP.IGN69 +to IGNF:ETRS89LC --> 3474789.997 2655359.291 43.644 




I will see if someone in the Institute could clarify these codes and update them in a future release of PROJ. 



Thanks for your help, 




N. 


De: "Even Rouault" <even.rouault at spatialys.com> 
?: "Nicolas Bellaiche" <nicolas.bellaiche at ign.fr> 
Cc: "proj" <PROJ at lists.osgeo.org> 
Envoy?: Mardi 20 F?vrier 2024 19:05:55 
Objet: Re: [PROJ] Help needed for a cs2cs pipeline with shift grids 




Le 20/02/2024 ? 18:53, Nicolas Bellaiche a ?crit : 




Hi Even 

Thanks for your kind and developed answer. 
I've tried with the EPSG equivalents: ( [ https://www.sandre.eaufrance.fr/jeu-de-donnees/projection-des-coordonn%C3%A9es?lang=fr | https://www.sandre.eaufrance.fr/jeu-de-donnees/projection-des-coordonn?es?lang=fr ] ) 



echo 0 56.000000 0 | ./cs2cs +from EPSG:4807 +to EPSG:3034 




But the result doesn't make any sense: 




-1640975.39 10099142.17 0.00 




Is there something with the units that is not correct maybe? 




No, just the usual axis order issue as EPSG geographic CRS are lat, long ordered, whereas IGNF uses the opposition order. So: 

$ echo 56 0 | cs2cs EPSG:4807 EPSG:3034 
2655358.23 3474788.21 0.00 


BQ_BEGIN









This works well: 

echo 0 56.000000 0 | PROJ_NETWORK=ON ./cs2cs -d 3 "NTF geographiques Paris (gr) + NGF-IGN69 height" IGNF:ETRS89LCC --3d 







and I have a few questions about it: 




1) the result remains unchanged if I remove or put PROJ_NETWORK to OFF. What does it do exactly? 

BQ_END
If you have already all the grids in the PROJ_DATA directory, PROJ_NETWORK will not do anything. This is just for people who don't have grids installed locally 

BQ_BEGIN




2) Does the string " NTF geographiques Paris (gr) + NGF-IGN69 height" correspond to an entry in the CRS database proj.db or is it interpreted as a compounded system because PROJ parses the string? 

BQ_END


Yes, there's logic in PROJ to split "A + B" into A and B, do simple CRS lookups for A and B in the database, and create a compound CRS from that. 
BQ_BEGIN



There is no simple code like EPSG or IGNF related to it? Can we create one easily? 

BQ_END


yes, cf [ https://github.com/OSGeo/PROJ/blob/master/data/sql/transformations_czechia_extra.sql#L86 | https://github.com/OSGeo/PROJ/blob/master/data/sql/transformations_czechia_extra.sql#L86 ] for a custom CompoundCRS 

You can also get the potential SQL statements (that can be simplified and improved) with: 


$ bin/projinfo IGNF:NTFP+EPSG:5720 -o SQL --output-id SOME_AUTH:MY_COMPOUND_CRS -q 
INSERT INTO geodetic_crs VALUES('SOME_AUTH','COMPONENT_MY_COMPOUND_CRS_1','NTF geographiques Paris (gr)','','geographic 2D','EPSG','6425','EPSG','6807',NULL,0); 
INSERT INTO scope VALUES('SOME_AUTH','SCOPE_geodetic_crs_COMPONENT_MY_COMPOUND_CRS_1','NATIONALE, HISTORIQUE',0); 
INSERT INTO extent VALUES('SOME_AUTH','EXTENT_geodetic_crs_COMPONENT_MY_COMPOUND_CRS_1','FRANCE METROPOLITAINE (CORSE COMPRISE)','FRANCE METROPOLITAINE (CORSE COMPRISE)',41,52,-5.5,10,0); 
INSERT INTO usage VALUES('SOME_AUTH','USAGE_GEODETIC_CRS_COMPONENT_MY_COMPOUND_CRS_1','geodetic_crs','SOME_AUTH','COMPONENT_MY_COMPOUND_CRS_1','SOME_AUTH','EXTENT_geodetic_crs_COMPONENT_MY_COMPOUND_CRS_1','SOME_AUTH','SCOPE_geodetic_crs_COMPONENT_MY_COMPOUND_CRS_1'); 
INSERT INTO compound_crs VALUES('SOME_AUTH','MY_COMPOUND_CRS','NTF geographiques Paris (gr) + NGF-IGN69 height','','SOME_AUTH','COMPONENT_MY_COMPOUND_CRS_1','EPSG','5720',0); 
INSERT INTO usage VALUES('SOME_AUTH','USAGE_COMPOUND_CRS_MY_COMPOUND_CRS','compound_crs','SOME_AUTH','MY_COMPOUND_CRS','PROJ','EXTENT_UNKNOWN','PROJ','SCOPE_UNKNOWN'); 


This could be simplified by just taking the last 2 statements and modify 'SOME_AUTH','COMPONENT_MY_COMPOUND_CRS_1' to 'IGNF', 'NTFP' (I believe this SQL synthesis code only references EPSG objects, hence the redefinition of an equivalent of IGNF:NTFP) 

BQ_BEGIN






3) Where can I see where this crs"NTF geographiques Paris (gr) + NGF-IGN69 height" is defined in the sql commands used to build it? 

BQ_END
well, if you want all the lineage, this is a cascade of INSERT statement. You have to fetch the geographic and vertical CRS, their datum, coordinate systems, axis, units in the relevant tables. 

BQ_BEGIN



Nicolas Bellaiche 







De: "Even Rouault" [ mailto:even.rouault at spatialys.com | <even.rouault at spatialys.com> ] 
?: "Nicolas Bellaiche" [ mailto:nicolas.bellaiche at ign.fr | <nicolas.bellaiche at ign.fr> ] , "proj" [ mailto:PROJ at lists.osgeo.org | <PROJ at lists.osgeo.org> ] 
Envoy?: Dimanche 18 F?vrier 2024 15:16:44 
Objet: Re: [PROJ] Help needed for a cs2cs pipeline with shift grids 



Nicolas, 

I believe the Helmert transformation is used when using IGNF codes, because the IGNF database has only recorded the use of the ntf_r93 grid for NTF to RGF93, but not for NTF to ETRS89 (by the way, just reiterating that IGN is more than welcome to take over on maintenance & updates of the IGNF part of the PROJ database). And when transforming between 2 IGNF codes, PROJ by default will only consider transformations in the IGNF domain. But if you use EPSG codes, then ntf_r93 is available to transforme between NTF and ETRS89. 

To get a vertical transformation, you also need to use 3D CRS. 


For example 


projinfo -s "NTF geographiques Paris (gr) + NGF-IGN69 height" -t IGNF:ETRS89LCC --3d --spatial-test intersects 


reports the following pipeline: 


unknown id, axis order change (2D) + NTF (Paris) to NTF (1) + NTF to RGF93 v1 (1) + Inverse of RGF93 v1 to NGF-IGN69 height (1) + RGF93 v1 to ETRS89 (1) + axis order change (geographic3D horizontal) + ETRS89 LAMBERT CONFORMAL CONIC, 1.6 m, France - mainland onshore., at least one grid missing 

PROJ string: 
+proj=pipeline 
+step +proj=unitconvert +xy_in=grad +xy_out=rad 
+step +inv +proj=longlat +ellps=clrk80ign +pm=paris 
+step +proj=push +v_3 
+step +proj=cart +ellps=clrk80ign 
+step +proj=xyzgridshift +grids=fr_ign_gr3df97a.tif +grid_ref=output_crs 
+ellps=GRS80 
+step +inv +proj=cart +ellps=GRS80 
+step +proj=pop +v_3 
+step +proj=vgridshift +grids=fr_ign_RAF18.tif +multiplier=1 
+step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 
+y_0=2800000 +ellps=GRS80 





Here, as there's a mix of objects from different authorities (IGNF and EPSG), then EPSG transformations are considered, hence you get the gr3df97a grid. 


$ echo 0 56.000000 0 | PROJ_NETWORK=ON bin/cs2cs -d 3 "NTF geographiques Paris (gr) + NGF-IGN69 height" IGNF:ETRS89LCC --3d 
3474789.997 2655359.291 43.644 

which is the application of the above pipeline: 


$ echo 0 56.000000 0 | PROJ_NETWORK=ON bin/cct -d 3 +proj=pipeline +step +proj=unitconvert +xy_in=grad +xy_out=rad +step +inv +proj=longlat +ellps=clrk80ign +pm=paris +step +proj=push +v_3 +step +proj=cart +ellps=clrk80ign +step +proj=xyzgridshift +grids=fr_ign_gr3df97a.tif +grid_ref=output_crs +ellps=GRS80 +step +inv +proj=cart +ellps=GRS80 +step +proj=pop +v_3 +step +proj=vgridshift +grids=fr_ign_RAF18.tif +multiplier=1 +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80 



If you want to get exactly the below pipeline, you'll have to tweak proj.db to create a compound CRS for "NTF geographiques Paris (gr) + NGF-IGN69 height", and then create a custom record in other_transformation for the transformation between this compound CRS and (a 3D projected CRS derived from) IGNF:ETRS89LCC. Cf data/sql/other_transformation_custom.sql for potential inspiration 

Even 



Le 15/02/2024 ? 19:46, Nicolas Bellaiche via PROJ a ?crit : 

BQ_BEGIN

Hi there, 

I try to make a conversion using shiftgrids from IGNF: NTFP to IGNF:ETRS89LCC. By default, it seems that it uses the helmert approximation between the 2 crs and i cannot figure out how to use the grid fr_ign_ntf_r93. 

So far i've found how to create a pipeline that works with cct, but i'd like to have a code that represents the crs and be able to go to different destination crs with the cs2cs application. Any idea? 

(helmert approx + no geoid with the standard codes) 


echo 0 56 0 | ./cs2cs + from IGNF:NTFP +to IGNF:ETRS89LCC 

result : 3474788.21 2655358.23 0.00 




(correct pipeline) 

echo 0 56.000000 0 | PROJ_DEBUG=3 ./cct +proj=pipeline +step +proj=unitconvert +xy_in=grad +xy_out=rad +step +inv +proj=longlat +ellps=clrk80ign +pm=paris +step +proj=hgridshift +grids=fr_ign_ntf_r93.tif +step +inv +proj=vgridshift +grids=RAF09.gtx +step +proj=lcc +lat_0=52 +lon_0=10 +lat_1=35 +lat_2=65 +x_0=4000000 +y_0=2800000 +ellps=GRS80 




result : 3474789.9972 2655359.2908 43.6421 inf 




reference from THE official IGN/SGN dataset: 

3474789.997 2655359.291 43.642 







Thanks a lot for your help, 




Nicolas Bellaiche 


_______________________________________________
PROJ mailing list [ mailto:PROJ at lists.osgeo.org | PROJ at lists.osgeo.org ] [ https://lists.osgeo.org/mailman/listinfo/proj | https://lists.osgeo.org/mailman/listinfo/proj ] 

BQ_END

-- [ http://www.spatialys.com/ | http://www.spatialys.com ] My software is free, but my time generally not. 


BQ_END

-- [ http://www.spatialys.com/ | http://www.spatialys.com ] My software is free, but my time generally not. 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240227/dd388efb/attachment-0001.htm>

From kristianevers at gmail.com  Wed Feb 28 07:51:51 2024
From: kristianevers at gmail.com (Kristian Evers)
Date: Wed, 28 Feb 2024 16:51:51 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <f4b18e8a-470b-44a2-b271-9c0ffba5a78c@xs4all.nl>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <f4b18e8a-470b-44a2-b271-9c0ffba5a78c@xs4all.nl>
Message-ID: <0F92884D-4181-46A7-A47D-59A97319D3D4@gmail.com>

Thanks, Bas. I?ve uploaded a new release candidate for PROJ-data that removes the unwanted files. Links:

https://download.osgeo.org/proj/proj-data-1.17RC2.tar.gz
https://download.osgeo.org/proj/proj-data-1.17RC2.zip <https://download.osgeo.org/proj/proj-data-1.17RC.zip>

/Kristian

> On 26 Feb 2024, at 18.07, Sebastiaan Couwenberg via PROJ <proj at lists.osgeo.org> wrote:
> 
> _fr_ign_README.txt

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240228/4cae5b35/attachment.htm>

From even.rouault at spatialys.com  Wed Feb 28 08:12:07 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 28 Feb 2024 17:12:07 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <0F92884D-4181-46A7-A47D-59A97319D3D4@gmail.com>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <f4b18e8a-470b-44a2-b271-9c0ffba5a78c@xs4all.nl>
 <0F92884D-4181-46A7-A47D-59A97319D3D4@gmail.com>
Message-ID: <a923644c-bb6b-4100-b486-3ad33eb8231f@spatialys.com>

Hi Kristian,

Le 28/02/2024 ? 16:51, Kristian Evers via PROJ a ?crit?:
> Thanks, Bas. I?ve uploaded a new release candidate for PROJ-data that 
> removes the unwanted files. Links:
>
> https://download.osgeo.org/proj/proj-data-1.17RC2.tar.gz

I still see a ._fr_ign_README.txt and ._no_kv_README.txt in the above 
RC2.tar.gz (didn't check the .zip)

Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240228/9c688eb7/attachment.htm>

From sebastic at xs4all.nl  Wed Feb 28 08:25:38 2024
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Wed, 28 Feb 2024 17:25:38 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <a923644c-bb6b-4100-b486-3ad33eb8231f@spatialys.com>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <f4b18e8a-470b-44a2-b271-9c0ffba5a78c@xs4all.nl>
 <0F92884D-4181-46A7-A47D-59A97319D3D4@gmail.com>
 <a923644c-bb6b-4100-b486-3ad33eb8231f@spatialys.com>
Message-ID: <b3ac811c-d90b-488e-89ba-c35018b56c18@xs4all.nl>

On 2/28/24 5:12 PM, Even Rouault via PROJ wrote:
> Le 28/02/2024 ? 16:51, Kristian Evers via PROJ a ?crit?:
>> Thanks, Bas. I?ve uploaded a new release candidate for PROJ-data that 
>> removes the unwanted files. Links:
>>
>> https://download.osgeo.org/proj/proj-data-1.17RC2.tar.gz
> 
> I still see a ._fr_ign_README.txt and ._no_kv_README.txt in the above 
> RC2.tar.gz (didn't check the .zip)

The list of files included in the RC1 and RC2 tarballs is identical, the 
release tarballs do have different checksums.

Kind Regards,

Bas

-- 
  GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From kristianevers at gmail.com  Wed Feb 28 08:46:07 2024
From: kristianevers at gmail.com (Kristian Evers)
Date: Wed, 28 Feb 2024 17:46:07 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <b3ac811c-d90b-488e-89ba-c35018b56c18@xs4all.nl>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <f4b18e8a-470b-44a2-b271-9c0ffba5a78c@xs4all.nl>
 <0F92884D-4181-46A7-A47D-59A97319D3D4@gmail.com>
 <a923644c-bb6b-4100-b486-3ad33eb8231f@spatialys.com>
 <b3ac811c-d90b-488e-89ba-c35018b56c18@xs4all.nl>
Message-ID: <60768192-7DD6-4540-A14D-E87BE68AC89E@gmail.com>

You guys are clearly using different tools than I am? I can?t for the life of me get those two files to show up when unpacking the RC2 tarball. I?m sure you?re right, you are both smarter at this than I am but I don?t think that it makes much sense for me make RC3 without being able to confirm that it actually works.

/Kristian

PS. Have I mentioned lately that the position as PROJ release manager is up for grabs for anyone who wants it?


> On 28 Feb 2024, at 17.25, Sebastiaan Couwenberg via PROJ <proj at lists.osgeo.org> wrote:
> 
> On 2/28/24 5:12 PM, Even Rouault via PROJ wrote:
>> Le 28/02/2024 ? 16:51, Kristian Evers via PROJ a ?crit :
>>> Thanks, Bas. I?ve uploaded a new release candidate for PROJ-data that removes the unwanted files. Links:
>>> 
>>> https://download.osgeo.org/proj/proj-data-1.17RC2.tar.gz
>> I still see a ._fr_ign_README.txt and ._no_kv_README.txt in the above RC2.tar.gz (didn't check the .zip)
> 
> The list of files included in the RC1 and RC2 tarballs is identical, the release tarballs do have different checksums.
> 
> Kind Regards,
> 
> Bas
> 
> -- 
> GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
> 
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj


From sebastic at xs4all.nl  Wed Feb 28 09:05:51 2024
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Wed, 28 Feb 2024 18:05:51 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <60768192-7DD6-4540-A14D-E87BE68AC89E@gmail.com>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <f4b18e8a-470b-44a2-b271-9c0ffba5a78c@xs4all.nl>
 <0F92884D-4181-46A7-A47D-59A97319D3D4@gmail.com>
 <a923644c-bb6b-4100-b486-3ad33eb8231f@spatialys.com>
 <b3ac811c-d90b-488e-89ba-c35018b56c18@xs4all.nl>
 <60768192-7DD6-4540-A14D-E87BE68AC89E@gmail.com>
Message-ID: <6874efb9-8194-4dd5-bc1c-6ff436dd5b5d@xs4all.nl>

On 2/28/24 5:46 PM, Kristian Evers via PROJ wrote:
> You guys are clearly using different tools than I am? I can?t for the life of me get those two files to show up when unpacking the RC2 tarball. I?m sure you?re right, you are both smarter at this than I am but I don?t think that it makes much sense for me make RC3 without being able to confirm that it actually works.

Listing the tar content is trivial:

  $ tar tavf ../proj-data-1.17RC2.tar.gz | grep '\._'
  -rw-r--r-- kevers/staff      668 2024-01-04 20:28 ._fr_ign_README.txt
  -rw-r--r-- kevers/staff      589 2024-01-04 20:28 ._no_kv_README.txt

This used to be part of the proj-datumgrid release procedure:

  https://github.com/OSGeo/proj-datumgrid/blob/master/HOWTORELEASE#L32-L35

You can also try my patch to make CPack exclude those files from the 
archives it creates.

Kind Regards,

Bas

-- 
  GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From even.rouault at spatialys.com  Wed Feb 28 09:17:32 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 28 Feb 2024 18:17:32 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <60768192-7DD6-4540-A14D-E87BE68AC89E@gmail.com>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <f4b18e8a-470b-44a2-b271-9c0ffba5a78c@xs4all.nl>
 <0F92884D-4181-46A7-A47D-59A97319D3D4@gmail.com>
 <a923644c-bb6b-4100-b486-3ad33eb8231f@spatialys.com>
 <b3ac811c-d90b-488e-89ba-c35018b56c18@xs4all.nl>
 <60768192-7DD6-4540-A14D-E87BE68AC89E@gmail.com>
Message-ID: <73fb6f5c-4c8c-4f77-adfc-1a13db73dab4@spatialys.com>


Le 28/02/2024 ? 17:46, Kristian Evers via PROJ a ?crit?:
> You guys are clearly using different tools than I am? I can?t for the life of me get those two files to show up when unpacking the RC2 tarball. I?m sure you?re right, you are both smarter at this than I am but I don?t think that it makes much sense for me make RC3 without being able to confirm that it actually works.

Kristian, are you doing that on Windows? Perhaps your archive manager 
filters out files starting with dot. Perhaps you should just wipe out 
your existing git clone, and recreate one from scratch. Hopefully that 
will remove hidden files. Or perhaps tweak your file manager to display 
hidden files to be able to delete them manually.

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240228/5b785cb5/attachment-0001.htm>

From kristianevers at gmail.com  Wed Feb 28 09:28:19 2024
From: kristianevers at gmail.com (Kristian Evers)
Date: Wed, 28 Feb 2024 18:28:19 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <73fb6f5c-4c8c-4f77-adfc-1a13db73dab4@spatialys.com>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <f4b18e8a-470b-44a2-b271-9c0ffba5a78c@xs4all.nl>
 <0F92884D-4181-46A7-A47D-59A97319D3D4@gmail.com>
 <a923644c-bb6b-4100-b486-3ad33eb8231f@spatialys.com>
 <b3ac811c-d90b-488e-89ba-c35018b56c18@xs4all.nl>
 <60768192-7DD6-4540-A14D-E87BE68AC89E@gmail.com>
 <73fb6f5c-4c8c-4f77-adfc-1a13db73dab4@spatialys.com>
Message-ID: <2DCA2870-F008-4A8B-87B0-AF15EADCC5D4@gmail.com>

I?m on a Mac and they don?t always behave as you would expect coming from a Linux system. For instance, Bas? tar command doesn?t fly with my particular brand of tar:

$ tar tavf proj-data-1.17RC2.tar.gz | grep '\._'
tar: Option -a is not permitted in mode -t

Unpacking the file surprisingly doesn?t reveal anything either. You?d think this sort of thing was easy to figure out but here we are. I am not the release manager you deserve but the one you got. Sorry.

I?ve run a git clean and applied Bas? patch locally:

https://download.osgeo.org/proj/proj-data-1.17RC3.tar.gz 
https://download.osgeo.org/proj/proj-data-1.17RC3.zip

If they don?t work I officially resign as release manager. 

/Kristian

> On 28 Feb 2024, at 18.17, Even Rouault via PROJ <proj at lists.osgeo.org> wrote:
> 
> 
> 
> Le 28/02/2024 ? 17:46, Kristian Evers via PROJ a ?crit :
>> You guys are clearly using different tools than I am? I can?t for the life of me get those two files to show up when unpacking the RC2 tarball. I?m sure you?re right, you are both smarter at this than I am but I don?t think that it makes much sense for me make RC3 without being able to confirm that it actually works.
> Kristian, are you doing that on Windows? Perhaps your archive manager filters out files starting with dot. Perhaps you should just wipe out your existing git clone, and recreate one from scratch. Hopefully that will remove hidden files. Or perhaps tweak your file manager to display hidden files to be able to delete them manually.
> 
> 
>  -- 
> http://www.spatialys.com <http://www.spatialys.com/>
> My software is free, but my time generally not.
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240228/3b2be8e0/attachment.htm>

From even.rouault at spatialys.com  Wed Feb 28 09:57:32 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Wed, 28 Feb 2024 18:57:32 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <2DCA2870-F008-4A8B-87B0-AF15EADCC5D4@gmail.com>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <f4b18e8a-470b-44a2-b271-9c0ffba5a78c@xs4all.nl>
 <0F92884D-4181-46A7-A47D-59A97319D3D4@gmail.com>
 <a923644c-bb6b-4100-b486-3ad33eb8231f@spatialys.com>
 <b3ac811c-d90b-488e-89ba-c35018b56c18@xs4all.nl>
 <60768192-7DD6-4540-A14D-E87BE68AC89E@gmail.com>
 <73fb6f5c-4c8c-4f77-adfc-1a13db73dab4@spatialys.com>
 <2DCA2870-F008-4A8B-87B0-AF15EADCC5D4@gmail.com>
Message-ID: <c6a208a7-adf6-47e0-a0bb-a2c46b072e28@spatialys.com>

well, there were still there. To share the burden, I've just manually 
created a RC4 from a repackaged RC3 on the download server by doing:

mkdir tmp
cd tmp
tar xvzf ../proj-data-1.17RC3.tar.gz
rm ._*
tar cvzf ../proj-data-1.17RC4.tar.gz *
zip ../proj-data-1.17RC4.zip *

So hopefully the below should be the final version... (fingers crossed)

https://download.osgeo.org/proj/proj-data-1.17RC4.tar.gz
https://download.osgeo.org/proj/proj-data-1.17RC4.zip

Even


Le 28/02/2024 ? 18:28, Kristian Evers a ?crit?:
> I?m on a Mac and they don?t always behave as you would expect coming 
> from a Linux system. For instance, Bas? tar command doesn?t fly with 
> my particular brand of tar:
>
> $ tar tavf proj-data-1.17RC2.tar.gz | grep '\._'
> tar: Option -a is not permitted in mode -t
>
> Unpacking the file surprisingly doesn?t reveal anything either. You?d 
> think this sort of thing was easy to figure out but here we are. I am 
> not the release manager you deserve but the one you got. Sorry.
>
> I?ve run a git clean and applied Bas? patch locally:
>
> https://download.osgeo.org/proj/proj-data-1.17RC3.tar.gz
> https://download.osgeo.org/proj/proj-data-1.17RC3.zip
>
> If they don?t work I officially resign as release manager.
>
> /Kristian
>
>> On 28 Feb 2024, at 18.17, Even Rouault via PROJ 
>> <proj at lists.osgeo.org> wrote:
>>
>>
>> Le 28/02/2024 ? 17:46, Kristian Evers via PROJ a ?crit?:
>>> You guys are clearly using different tools than I am? I can?t for the life of me get those two files to show up when unpacking the RC2 tarball. I?m sure you?re right, you are both smarter at this than I am but I don?t think that it makes much sense for me make RC3 without being able to confirm that it actually works.
>>
>> Kristian, are you doing that on Windows? Perhaps your archive manager 
>> filters out files starting with dot. Perhaps you should just wipe out 
>> your existing git clone, and recreate one from scratch. Hopefully 
>> that will remove hidden files. Or perhaps tweak your file manager to 
>> display hidden files to be able to delete them manually.
>>
>> -- 
>> http://www.spatialys.com
>> My software is free, but my time generally not.
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
>
-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240228/6f363625/attachment.htm>

From sebastic at xs4all.nl  Wed Feb 28 10:04:01 2024
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Wed, 28 Feb 2024 19:04:01 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <2DCA2870-F008-4A8B-87B0-AF15EADCC5D4@gmail.com>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <f4b18e8a-470b-44a2-b271-9c0ffba5a78c@xs4all.nl>
 <0F92884D-4181-46A7-A47D-59A97319D3D4@gmail.com>
 <a923644c-bb6b-4100-b486-3ad33eb8231f@spatialys.com>
 <b3ac811c-d90b-488e-89ba-c35018b56c18@xs4all.nl>
 <60768192-7DD6-4540-A14D-E87BE68AC89E@gmail.com>
 <73fb6f5c-4c8c-4f77-adfc-1a13db73dab4@spatialys.com>
 <2DCA2870-F008-4A8B-87B0-AF15EADCC5D4@gmail.com>
Message-ID: <9a714d90-a522-4db2-8a99-c9928ee273a9@xs4all.nl>

On 2/28/24 6:28 PM, Kristian Evers via PROJ wrote:
> I?m on a Mac and they don?t always behave as you would expect coming from a Linux system. For instance, Bas? tar command doesn?t fly with my particular brand of tar:
> 
> $ tar tavf proj-data-1.17RC2.tar.gz | grep '\._'
> tar: Option -a is not permitted in mode -t

-a is likely a GNU tar specific option. I'm remember cursing grep on 
Solaris not supporting -A/-B/-C back in the day.

`tar tzvf proj-data-1.17RC2.tar.gz` does work on Mac, but it ignores the 
._ files, they are also not present after unpacking the archive.

> Unpacking the file surprisingly doesn?t reveal anything either. You?d think this sort of thing was easy to figure out but here we are. I am not the release manager you deserve but the one you got. Sorry.

Apparently the ._ files are an Mac thing for extended attributes:

 
https://unix.stackexchange.com/questions/282055/a-lot-of-files-inside-a-tar

Kind Regards,

Bas

-- 
  GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From sebastic at xs4all.nl  Wed Feb 28 10:10:32 2024
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Wed, 28 Feb 2024 19:10:32 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <9a714d90-a522-4db2-8a99-c9928ee273a9@xs4all.nl>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <f4b18e8a-470b-44a2-b271-9c0ffba5a78c@xs4all.nl>
 <0F92884D-4181-46A7-A47D-59A97319D3D4@gmail.com>
 <a923644c-bb6b-4100-b486-3ad33eb8231f@spatialys.com>
 <b3ac811c-d90b-488e-89ba-c35018b56c18@xs4all.nl>
 <60768192-7DD6-4540-A14D-E87BE68AC89E@gmail.com>
 <73fb6f5c-4c8c-4f77-adfc-1a13db73dab4@spatialys.com>
 <2DCA2870-F008-4A8B-87B0-AF15EADCC5D4@gmail.com>
 <9a714d90-a522-4db2-8a99-c9928ee273a9@xs4all.nl>
Message-ID: <17a845b1-7138-4941-899d-8050f6f967d4@xs4all.nl>

On 2/28/24 7:04 PM, Sebastiaan Couwenberg wrote:
> On 2/28/24 6:28 PM, Kristian Evers via PROJ wrote:
>> I?m on a Mac and they don?t always behave as you would expect coming 
>> from a Linux system. For instance, Bas? tar command doesn?t fly with 
>> my particular brand of tar:
>>
>> $ tar tavf proj-data-1.17RC2.tar.gz | grep '\._'
>> tar: Option -a is not permitted in mode -t
> 
> -a is likely a GNU tar specific option. I'm remember cursing grep on 
> Solaris not supporting -A/-B/-C back in the day.
> 
> `tar tzvf proj-data-1.17RC2.tar.gz` does work on Mac, but it ignores the 
> ._ files, they are also not present after unpacking the archive.
> 
>> Unpacking the file surprisingly doesn?t reveal anything either. You?d 
>> think this sort of thing was easy to figure out but here we are. I am 
>> not the release manager you deserve but the one you got. Sorry.
> 
> Apparently the ._ files are an Mac thing for extended attributes:
> 
> https://unix.stackexchange.com/questions/282055/a-lot-of-files-inside-a-tar

The attributes in question:

% xattr /tmp/proj-data/*_README.txt
/tmp/proj-data/fr_ign_README.txt: 
com.apple.metadata:kMDItemKeyphraseConfidences
/tmp/proj-data/fr_ign_README.txt: com.apple.metadata:kMDItemKeyphraseLabels
/tmp/proj-data/fr_ign_README.txt: com.apple.metadata:kMDItemKeyphraseVersion
/tmp/proj-data/fr_ign_README.txt: 
com.apple.metadata:kMDItemTextContentLanguage
/tmp/proj-data/no_kv_README.txt: 
com.apple.metadata:kMDItemKeyphraseConfidences
/tmp/proj-data/no_kv_README.txt: com.apple.metadata:kMDItemKeyphraseLabels
/tmp/proj-data/no_kv_README.txt: com.apple.metadata:kMDItemKeyphraseVersion
/tmp/proj-data/no_kv_README.txt: 
com.apple.metadata:kMDItemTextContentLanguage

Removing them:

% xattr -c /tmp/proj-data/*_README.txt
% xattr /tmp/proj-data/*_README.txt
%

The *_README.txt files in the git repo don't seem to have these attributes.

Kind Regards,

Bas

-- 
  GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From j1 at jimenezshaw.com  Wed Feb 28 10:13:35 2024
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Wed, 28 Feb 2024 19:13:35 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <9a714d90-a522-4db2-8a99-c9928ee273a9@xs4all.nl>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <f4b18e8a-470b-44a2-b271-9c0ffba5a78c@xs4all.nl>
 <0F92884D-4181-46A7-A47D-59A97319D3D4@gmail.com>
 <a923644c-bb6b-4100-b486-3ad33eb8231f@spatialys.com>
 <b3ac811c-d90b-488e-89ba-c35018b56c18@xs4all.nl>
 <60768192-7DD6-4540-A14D-E87BE68AC89E@gmail.com>
 <73fb6f5c-4c8c-4f77-adfc-1a13db73dab4@spatialys.com>
 <2DCA2870-F008-4A8B-87B0-AF15EADCC5D4@gmail.com>
 <9a714d90-a522-4db2-8a99-c9928ee273a9@xs4all.nl>
Message-ID: <CADRrdKtLd4xjZSk0MOhPE=jGrRcQ+tFCq2x2u=rA04qtF-dA4A@mail.gmail.com>

So don't worry Kristian, it is not you, it is Mac ;)

For the next time we should use a different prefix, now that we know that
Mac is doing something special.

On Wed, 28 Feb 2024 at 19:04, Sebastiaan Couwenberg via PROJ <
proj at lists.osgeo.org> wrote:

> On 2/28/24 6:28 PM, Kristian Evers via PROJ wrote:
> > I?m on a Mac and they don?t always behave as you would expect coming
> from a Linux system. For instance, Bas? tar command doesn?t fly with my
> particular brand of tar:
> >
> > $ tar tavf proj-data-1.17RC2.tar.gz | grep '\._'
> > tar: Option -a is not permitted in mode -t
>
> -a is likely a GNU tar specific option. I'm remember cursing grep on
> Solaris not supporting -A/-B/-C back in the day.
>
> `tar tzvf proj-data-1.17RC2.tar.gz` does work on Mac, but it ignores the
> ._ files, they are also not present after unpacking the archive.
>
> > Unpacking the file surprisingly doesn?t reveal anything either. You?d
> think this sort of thing was easy to figure out but here we are. I am not
> the release manager you deserve but the one you got. Sorry.
>
> Apparently the ._ files are an Mac thing for extended attributes:
>
>
> https://unix.stackexchange.com/questions/282055/a-lot-of-files-inside-a-tar
>
> Kind Regards,
>
> Bas
>
> --
>   GPG Key ID: 4096R/6750F10AE88D4AF1
> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240228/c3db67b9/attachment.htm>

From kristianevers at gmail.com  Wed Feb 28 21:27:51 2024
From: kristianevers at gmail.com (Kristian Evers)
Date: Thu, 29 Feb 2024 06:27:51 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <CADRrdKtLd4xjZSk0MOhPE=jGrRcQ+tFCq2x2u=rA04qtF-dA4A@mail.gmail.com>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <f4b18e8a-470b-44a2-b271-9c0ffba5a78c@xs4all.nl>
 <0F92884D-4181-46A7-A47D-59A97319D3D4@gmail.com>
 <a923644c-bb6b-4100-b486-3ad33eb8231f@spatialys.com>
 <b3ac811c-d90b-488e-89ba-c35018b56c18@xs4all.nl>
 <60768192-7DD6-4540-A14D-E87BE68AC89E@gmail.com>
 <73fb6f5c-4c8c-4f77-adfc-1a13db73dab4@spatialys.com>
 <2DCA2870-F008-4A8B-87B0-AF15EADCC5D4@gmail.com>
 <9a714d90-a522-4db2-8a99-c9928ee273a9@xs4all.nl>
 <CADRrdKtLd4xjZSk0MOhPE=jGrRcQ+tFCq2x2u=rA04qtF-dA4A@mail.gmail.com>
Message-ID: <73E0976E-4796-4B7C-A43F-A7E3DDC44C52@gmail.com>

> So don't worry Kristian, it is not you, it is Mac ;)

I?m glad it?s not just me. Was thinking I was going insane for a minute there. I?m a bit puzzled as to what has changed though. It could possibly be that I upgraded to a newer MacOS version over Christmas. That usually means an upgrade to Xcode as well and that might have done? something. 

Commenting on a few other things:

> To share the burden, I've just manually created a RC4 from a repackaged RC3 on the download server

Thanks, Even. For the final release I?ll simply rename this file and upload it again. I believe that is the safest thing I can do this time around.

> `tar tzvf proj-data-1.17RC2.tar.gz` does work on Mac, but it ignores the ._ files, they are also not present after unpacking the archive.

That explains why I couldn?t see the same files as you guys. I did run that exact command, as well as unpacking the files using two separate tools. Based on that I felt quite comfortable no bad files were in RC2 and RC3. Sneaky stuff.

Thanks for helping clear this up. I am not sure how to avoid this in the future. For now I think the best thing I can do is to delete my local copy of the PROJ-data repo and make a new clone. Hopefully that leaves me with a set of files without any extra MacOS attributes. That method doesn?t feel particularly foolproof though, so I think it is time to look into automating the release process. For another project I am working on, I have been looking into saving artifacts from GitHub Action runs and publishing them as releases on GitHub. I don?t think that would be too difficult to setup for PROJ-data.

/Kristian

> On 28 Feb 2024, at 19.13, Javier Jimenez Shaw via PROJ <proj at lists.osgeo.org> wrote:
> 
> 
> 
> For the next time we should use a different prefix, now that we know that Mac is doing something special.
> 
> On Wed, 28 Feb 2024 at 19:04, Sebastiaan Couwenberg via PROJ <proj at lists.osgeo.org <mailto:proj at lists.osgeo.org>> wrote:
>> On 2/28/24 6:28 PM, Kristian Evers via PROJ wrote:
>> > I?m on a Mac and they don?t always behave as you would expect coming from a Linux system. For instance, Bas? tar command doesn?t fly with my particular brand of tar:
>> > 
>> > $ tar tavf proj-data-1.17RC2.tar.gz | grep '\._'
>> > tar: Option -a is not permitted in mode -t
>> 
>> -a is likely a GNU tar specific option. I'm remember cursing grep on 
>> Solaris not supporting -A/-B/-C back in the day.
>> 
>> `tar tzvf proj-data-1.17RC2.tar.gz` does work on Mac, but it ignores the 
>> ._ files, they are also not present after unpacking the archive.
>> 
>> > Unpacking the file surprisingly doesn?t reveal anything either. You?d think this sort of thing was easy to figure out but here we are. I am not the release manager you deserve but the one you got. Sorry.
>> 
>> Apparently the ._ files are an Mac thing for extended attributes:
>> 
>> 
>> https://unix.stackexchange.com/questions/282055/a-lot-of-files-inside-a-tar
>> 
>> Kind Regards,
>> 
>> Bas
>> 
>> -- 
>>   GPG Key ID: 4096R/6750F10AE88D4AF1
>> Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1
>> 
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org <mailto:PROJ at lists.osgeo.org>
>> https://lists.osgeo.org/mailman/listinfo/proj
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240229/8570c5e7/attachment.htm>

From sebastic at xs4all.nl  Wed Feb 28 22:13:54 2024
From: sebastic at xs4all.nl (Sebastiaan Couwenberg)
Date: Thu, 29 Feb 2024 07:13:54 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <73E0976E-4796-4B7C-A43F-A7E3DDC44C52@gmail.com>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <f4b18e8a-470b-44a2-b271-9c0ffba5a78c@xs4all.nl>
 <0F92884D-4181-46A7-A47D-59A97319D3D4@gmail.com>
 <a923644c-bb6b-4100-b486-3ad33eb8231f@spatialys.com>
 <b3ac811c-d90b-488e-89ba-c35018b56c18@xs4all.nl>
 <60768192-7DD6-4540-A14D-E87BE68AC89E@gmail.com>
 <73fb6f5c-4c8c-4f77-adfc-1a13db73dab4@spatialys.com>
 <2DCA2870-F008-4A8B-87B0-AF15EADCC5D4@gmail.com>
 <9a714d90-a522-4db2-8a99-c9928ee273a9@xs4all.nl>
 <CADRrdKtLd4xjZSk0MOhPE=jGrRcQ+tFCq2x2u=rA04qtF-dA4A@mail.gmail.com>
 <73E0976E-4796-4B7C-A43F-A7E3DDC44C52@gmail.com>
Message-ID: <13ab5fce-c410-4fff-b66e-90a7321c7a93@xs4all.nl>

On 2/29/24 6:27 AM, Kristian Evers via PROJ wrote:
>> `tar tzvf proj-data-1.17RC2.tar.gz` does work on Mac, but it ignores the ._ files, they are also not present after unpacking the archive.
> 
> That explains why I couldn?t see the same files as you guys. I did run that exact command, as well as unpacking the files using two separate tools. Based on that I felt quite comfortable no bad files were in RC2 and RC3. Sneaky stuff.
> 
> Thanks for helping clear this up. I am not sure how to avoid this in the future. For now I think the best thing I can do is to delete my local copy of the PROJ-data repo and make a new clone. Hopefully that leaves me with a set of files without any extra MacOS attributes. That method doesn?t feel particularly foolproof though, so I think it is time to look into automating the release process. For another project I am working on, I have been looking into saving artifacts from GitHub Action runs and publishing them as releases on GitHub. I don?t think that would be too difficult to setup for PROJ-data.

Removing the extended attributes from your working copy should suffice.

Adding `xattr -c` to the release procedure may help.

Kind Regards,

Bas

-- 
  GPG Key ID: 4096R/6750F10AE88D4AF1
Fingerprint: 8182 DE41 7056 408D 6146  50D1 6750 F10A E88D 4AF1


From kristianevers at gmail.com  Thu Feb 29 09:50:16 2024
From: kristianevers at gmail.com (Kristian Evers)
Date: Thu, 29 Feb 2024 18:50:16 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
Message-ID: <430C18F1-A4A6-41A9-B685-E2042C974EE6@gmail.com>

PSC Members,

Apart from the bonus files from my Mac having found their way into PROJ-data release candidates 1-3 no problems with the release candidates seem to have been reported. With PROJ-data 1.17-RC4 being okay I motion that both the PROJ and PROJ-data release candidates be promoted to final versions. 

I?ll start with my +1

/Kristian

> On 26 Feb 2024, at 17.29, Kristian Evers <kristianevers at gmail.com> wrote:
> 
> All,
> 
> in preparation for a new round of PROJ and PROJ-data release I have uploaded release candidates for both packages.
> 
> Download the archives here: 
> 
> https://download.osgeo.org/proj/proj-9.4.0RC1.tar.gz
> https://download.osgeo.org/proj/proj-9.4.0RC1.zip
> 
> https://download.osgeo.org/proj/proj-data-1.17RC1.tar.gz
> https://download.osgeo.org/proj/proj-data-1.17RC1.zip
> 
> The PROJ release includes various updates and bug fixes. See the release notes below.
> 
> The PROJ-data release comes with the following changes:
> 
> * New revisions of chartdatum Norway v2023b
> * Added fr_ign_RAC23.tif grid for France-Corsica NGF-IGN 1978 to RGF93-2b
> * New DVR90 grids added to reflect recent EPSG-changes that now supports all realizations of the Danish height system
> * Added Czech geoid model CR-2005
> * Added Portuguese geoid model GeodPT08
> 
> Please test the release candidates and report any issues you may find with them.
> Either here on the mailing list or on GitHub.
> 
> /Kristian
> 
> ?????????????
> 
> 9.4.0 Release Notes
> -------------------
> 
> Updates
> -------
> 
> o Add support for transformations involving coordinate epoch changes
>   (PointMotionOperation), specifically for Canadian NAD83(CSRS)(#3884)
> 
> o SSL_OPTIONS: set SSL options on Curl library (#3936)
> 
> o Add support for unity builds (#3962)
> 
> o Added ability to install *.tif if present in data (#3970)
> 
> o createOperationsCompoundToGeog(): tune selection logic
>   when --grid-check known_available is specified (#3990)
> 
> o Increase CMake minimum version from 3.9 to 3.16 (#3997)
> 
> o CMake: use FetchContent to get googletest-1.12.1 (#4006)
> 
> o CMake: Replace custom FindSqlite3 with FindSQLite3 built-in (#4007)
> 
> o tpeqd: use numerically stable formula for computing the central angle
>   from (phi_1, lam_1) to (phi_2, lam_2) (#4009)
> 
> o Move content of proj_experimental.h to proj.h (#4019)
> 
> o Add +proj=mod_krovak projection method for Modified Krovak that
>   applies to S-JTSK/05 in the Czech Republic (#4021)
> 
> o PROJString formatter optimizer: simplify pipelines doing
>   [Modified]Krovak (South West) <--> [Modified]Krovak (East North)
>   by just doing an axis swap (#4034)
> 
> o +proj=gridshift: enhance to support grids referenced in projected CRS,
>   and with easting_offset/northing_offset corrections (#4038)
> 
> o Tune concatenated operation instanciation, reference CR2005 geoid for
>   Czechia and add (disabled by default) records for Czechia S-JTSK/05 based
>   transformations (#4044)
> 
> o Database: update to EPSG v11.004 (#4062)
> 
> Bug fixes
> ---------
> 
> o Fix missing symbols at link time for Windows target in Visual Studio (#3984)
> 
> o Improve error message in axisswap (#3975)
> 
> o Avoid convergence errors in +proj=gridshift when using biquadratic
>    interpolation (#3985)
> 


From even.rouault at spatialys.com  Thu Feb 29 09:58:23 2024
From: even.rouault at spatialys.com (Even Rouault)
Date: Thu, 29 Feb 2024 18:58:23 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <430C18F1-A4A6-41A9-B685-E2042C974EE6@gmail.com>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <430C18F1-A4A6-41A9-B685-E2042C974EE6@gmail.com>
Message-ID: <8faa5a91-179a-4a58-b55e-49e9082f6876@spatialys.com>


Le 29/02/2024 ? 18:50, Kristian Evers via PROJ a ?crit?:
> PSC Members,
>
> Apart from the bonus files from my Mac having found their way into PROJ-data release candidates 1-3 no problems with the release candidates seem to have been reported. With PROJ-data 1.17-RC4 being okay I motion that both the PROJ and PROJ-data release candidates be promoted to final versions.

Looks good to me

+1 Even

-- 
http://www.spatialys.com
My software is free, but my time generally not.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240229/d0172429/attachment.htm>

From knudsen.thomas at gmail.com  Thu Feb 29 11:15:05 2024
From: knudsen.thomas at gmail.com (Thomas Knudsen)
Date: Thu, 29 Feb 2024 20:15:05 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <430C18F1-A4A6-41A9-B685-E2042C974EE6@gmail.com>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <430C18F1-A4A6-41A9-B685-E2042C974EE6@gmail.com>
Message-ID: <CAH0YoEN3S4fqz-2fyOi6Kc+pUbZewx63JzVzEERcC8pFu4o5ag@mail.gmail.com>

+1 /Thomas

Den tors. 29. feb. 2024 kl. 18.50 skrev Kristian Evers via PROJ <
proj at lists.osgeo.org>:

> PSC Members,
>
> Apart from the bonus files from my Mac having found their way into
> PROJ-data release candidates 1-3 no problems with the release candidates
> seem to have been reported. With PROJ-data 1.17-RC4 being okay I motion
> that both the PROJ and PROJ-data release candidates be promoted to final
> versions.
>
> I?ll start with my +1
>
> /Kristian
>
> > On 26 Feb 2024, at 17.29, Kristian Evers <kristianevers at gmail.com>
> wrote:
> >
> > All,
> >
> > in preparation for a new round of PROJ and PROJ-data release I have
> uploaded release candidates for both packages.
> >
> > Download the archives here:
> >
> > https://download.osgeo.org/proj/proj-9.4.0RC1.tar.gz
> > https://download.osgeo.org/proj/proj-9.4.0RC1.zip
> >
> > https://download.osgeo.org/proj/proj-data-1.17RC1.tar.gz
> > https://download.osgeo.org/proj/proj-data-1.17RC1.zip
> >
> > The PROJ release includes various updates and bug fixes. See the release
> notes below.
> >
> > The PROJ-data release comes with the following changes:
> >
> > * New revisions of chartdatum Norway v2023b
> > * Added fr_ign_RAC23.tif grid for France-Corsica NGF-IGN 1978 to RGF93-2b
> > * New DVR90 grids added to reflect recent EPSG-changes that now supports
> all realizations of the Danish height system
> > * Added Czech geoid model CR-2005
> > * Added Portuguese geoid model GeodPT08
> >
> > Please test the release candidates and report any issues you may find
> with them.
> > Either here on the mailing list or on GitHub.
> >
> > /Kristian
> >
> > ?????????????
> >
> > 9.4.0 Release Notes
> > -------------------
> >
> > Updates
> > -------
> >
> > o Add support for transformations involving coordinate epoch changes
> >   (PointMotionOperation), specifically for Canadian NAD83(CSRS)(#3884)
> >
> > o SSL_OPTIONS: set SSL options on Curl library (#3936)
> >
> > o Add support for unity builds (#3962)
> >
> > o Added ability to install *.tif if present in data (#3970)
> >
> > o createOperationsCompoundToGeog(): tune selection logic
> >   when --grid-check known_available is specified (#3990)
> >
> > o Increase CMake minimum version from 3.9 to 3.16 (#3997)
> >
> > o CMake: use FetchContent to get googletest-1.12.1 (#4006)
> >
> > o CMake: Replace custom FindSqlite3 with FindSQLite3 built-in (#4007)
> >
> > o tpeqd: use numerically stable formula for computing the central angle
> >   from (phi_1, lam_1) to (phi_2, lam_2) (#4009)
> >
> > o Move content of proj_experimental.h to proj.h (#4019)
> >
> > o Add +proj=mod_krovak projection method for Modified Krovak that
> >   applies to S-JTSK/05 in the Czech Republic (#4021)
> >
> > o PROJString formatter optimizer: simplify pipelines doing
> >   [Modified]Krovak (South West) <--> [Modified]Krovak (East North)
> >   by just doing an axis swap (#4034)
> >
> > o +proj=gridshift: enhance to support grids referenced in projected CRS,
> >   and with easting_offset/northing_offset corrections (#4038)
> >
> > o Tune concatenated operation instanciation, reference CR2005 geoid for
> >   Czechia and add (disabled by default) records for Czechia S-JTSK/05
> based
> >   transformations (#4044)
> >
> > o Database: update to EPSG v11.004 (#4062)
> >
> > Bug fixes
> > ---------
> >
> > o Fix missing symbols at link time for Windows target in Visual Studio
> (#3984)
> >
> > o Improve error message in axisswap (#3975)
> >
> > o Avoid convergence errors in +proj=gridshift when using biquadratic
> >    interpolation (#3985)
> >
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240229/cc1f45b0/attachment-0001.htm>

From j1 at jimenezshaw.com  Thu Feb 29 11:23:13 2024
From: j1 at jimenezshaw.com (Javier Jimenez Shaw)
Date: Thu, 29 Feb 2024 20:23:13 +0100
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <8faa5a91-179a-4a58-b55e-49e9082f6876@spatialys.com>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <430C18F1-A4A6-41A9-B685-E2042C974EE6@gmail.com>
 <8faa5a91-179a-4a58-b55e-49e9082f6876@spatialys.com>
Message-ID: <CADRrdKudjfCt2oOqWpTW8qgJnwf3682Y0DMH0AL3TjCts86NkQ@mail.gmail.com>

+1 Javier

On Thu, 29 Feb 2024, 18:58 Even Rouault via PROJ, <proj at lists.osgeo.org>
wrote:

>
> Le 29/02/2024 ? 18:50, Kristian Evers via PROJ a ?crit :
>
> PSC Members,
>
> Apart from the bonus files from my Mac having found their way into PROJ-data release candidates 1-3 no problems with the release candidates seem to have been reported. With PROJ-data 1.17-RC4 being okay I motion that both the PROJ and PROJ-data release candidates be promoted to final versions.
>
> Looks good to me
>
> +1 Even
>
> -- http://www.spatialys.com
> My software is free, but my time generally not.
>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240229/0fb00aa2/attachment.htm>

From alansnow21 at gmail.com  Thu Feb 29 18:32:24 2024
From: alansnow21 at gmail.com (Alan Snow)
Date: Thu, 29 Feb 2024 20:32:24 -0600
Subject: [PROJ] PROJ 9.4.0RC1 & PROJ-data 1.17RC1
In-Reply-To: <CAH0YoEN3S4fqz-2fyOi6Kc+pUbZewx63JzVzEERcC8pFu4o5ag@mail.gmail.com>
References: <038B89B2-C56C-477E-B49B-A287B0A1133B@gmail.com>
 <430C18F1-A4A6-41A9-B685-E2042C974EE6@gmail.com>
 <CAH0YoEN3S4fqz-2fyOi6Kc+pUbZewx63JzVzEERcC8pFu4o5ag@mail.gmail.com>
Message-ID: <CAGybdFSkvFMj05NgTkQJKzBw4Udb0Pq81ZuOoKUCdAA+hb3gAA@mail.gmail.com>

+1 Alan

On Thu, Feb 29, 2024, 1:15 PM Thomas Knudsen via PROJ <proj at lists.osgeo.org>
wrote:

> +1 /Thomas
>
> Den tors. 29. feb. 2024 kl. 18.50 skrev Kristian Evers via PROJ <
> proj at lists.osgeo.org>:
>
>> PSC Members,
>>
>> Apart from the bonus files from my Mac having found their way into
>> PROJ-data release candidates 1-3 no problems with the release candidates
>> seem to have been reported. With PROJ-data 1.17-RC4 being okay I motion
>> that both the PROJ and PROJ-data release candidates be promoted to final
>> versions.
>>
>> I?ll start with my +1
>>
>> /Kristian
>>
>> > On 26 Feb 2024, at 17.29, Kristian Evers <kristianevers at gmail.com>
>> wrote:
>> >
>> > All,
>> >
>> > in preparation for a new round of PROJ and PROJ-data release I have
>> uploaded release candidates for both packages.
>> >
>> > Download the archives here:
>> >
>> > https://download.osgeo.org/proj/proj-9.4.0RC1.tar.gz
>> > https://download.osgeo.org/proj/proj-9.4.0RC1.zip
>> >
>> > https://download.osgeo.org/proj/proj-data-1.17RC1.tar.gz
>> > https://download.osgeo.org/proj/proj-data-1.17RC1.zip
>> >
>> > The PROJ release includes various updates and bug fixes. See the
>> release notes below.
>> >
>> > The PROJ-data release comes with the following changes:
>> >
>> > * New revisions of chartdatum Norway v2023b
>> > * Added fr_ign_RAC23.tif grid for France-Corsica NGF-IGN 1978 to
>> RGF93-2b
>> > * New DVR90 grids added to reflect recent EPSG-changes that now
>> supports all realizations of the Danish height system
>> > * Added Czech geoid model CR-2005
>> > * Added Portuguese geoid model GeodPT08
>> >
>> > Please test the release candidates and report any issues you may find
>> with them.
>> > Either here on the mailing list or on GitHub.
>> >
>> > /Kristian
>> >
>> > ?????????????
>> >
>> > 9.4.0 Release Notes
>> > -------------------
>> >
>> > Updates
>> > -------
>> >
>> > o Add support for transformations involving coordinate epoch changes
>> >   (PointMotionOperation), specifically for Canadian NAD83(CSRS)(#3884)
>> >
>> > o SSL_OPTIONS: set SSL options on Curl library (#3936)
>> >
>> > o Add support for unity builds (#3962)
>> >
>> > o Added ability to install *.tif if present in data (#3970)
>> >
>> > o createOperationsCompoundToGeog(): tune selection logic
>> >   when --grid-check known_available is specified (#3990)
>> >
>> > o Increase CMake minimum version from 3.9 to 3.16 (#3997)
>> >
>> > o CMake: use FetchContent to get googletest-1.12.1 (#4006)
>> >
>> > o CMake: Replace custom FindSqlite3 with FindSQLite3 built-in (#4007)
>> >
>> > o tpeqd: use numerically stable formula for computing the central angle
>> >   from (phi_1, lam_1) to (phi_2, lam_2) (#4009)
>> >
>> > o Move content of proj_experimental.h to proj.h (#4019)
>> >
>> > o Add +proj=mod_krovak projection method for Modified Krovak that
>> >   applies to S-JTSK/05 in the Czech Republic (#4021)
>> >
>> > o PROJString formatter optimizer: simplify pipelines doing
>> >   [Modified]Krovak (South West) <--> [Modified]Krovak (East North)
>> >   by just doing an axis swap (#4034)
>> >
>> > o +proj=gridshift: enhance to support grids referenced in projected CRS,
>> >   and with easting_offset/northing_offset corrections (#4038)
>> >
>> > o Tune concatenated operation instanciation, reference CR2005 geoid for
>> >   Czechia and add (disabled by default) records for Czechia S-JTSK/05
>> based
>> >   transformations (#4044)
>> >
>> > o Database: update to EPSG v11.004 (#4062)
>> >
>> > Bug fixes
>> > ---------
>> >
>> > o Fix missing symbols at link time for Windows target in Visual Studio
>> (#3984)
>> >
>> > o Improve error message in axisswap (#3975)
>> >
>> > o Avoid convergence errors in +proj=gridshift when using biquadratic
>> >    interpolation (#3985)
>> >
>>
>> _______________________________________________
>> PROJ mailing list
>> PROJ at lists.osgeo.org
>> https://lists.osgeo.org/mailman/listinfo/proj
>>
> _______________________________________________
> PROJ mailing list
> PROJ at lists.osgeo.org
> https://lists.osgeo.org/mailman/listinfo/proj
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://lists.osgeo.org/pipermail/proj/attachments/20240229/15456200/attachment.htm>

